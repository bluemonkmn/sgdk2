<?xml version="1.0" standalone="yes"?>
<ProjectDataset>
  <xs:schema id="ProjectDataset" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop">
    <xs:element name="ProjectDataset" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:SchemaVersion="1">
      <xs:complexType>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="GraphicSheet">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Image" type="xs:base64Binary" minOccurs="0" msdata:Ordinal="6" />
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
              <xs:attribute name="Columns" type="xs:short" default="16" />
              <xs:attribute name="Rows" type="xs:short" default="8" />
              <xs:attribute name="CellWidth" msdata:Caption="Cell Width" type="xs:short" default="32" />
              <xs:attribute name="CellHeight" msdata:Caption="Cell Height" type="xs:short" default="32" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Frameset">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Frame" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="FrameValue" type="xs:int" use="required" />
                    <xs:attribute name="GraphicSheet" type="xs:string" use="required" />
                    <xs:attribute name="CellIndex" type="xs:short" use="required" />
                    <xs:attribute name="m11" type="xs:float" default="1" />
                    <xs:attribute name="m12" type="xs:float" default="0" />
                    <xs:attribute name="m21" type="xs:float" default="0" />
                    <xs:attribute name="m22" type="xs:float" default="1" />
                    <xs:attribute name="dx" type="xs:float" default="0" />
                    <xs:attribute name="dy" type="xs:float" default="0" />
                    <xs:attribute name="Name" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="color" type="xs:int" default="-1" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Tileset">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Tile" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="TileFrame" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:attribute name="Sequence" type="xs:short" use="required" />
                          <xs:attribute name="FrameValue" type="xs:int" />
                          <xs:attribute name="Duration" type="xs:short" />
                          <xs:attribute name="Name" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="TileValue" type="xs:int" msdata:AllowDBNull="false" use="prohibited" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="TileValue" type="xs:int" use="required" />
                    <xs:attribute name="Counter" type="xs:string" />
                    <xs:attribute name="Name" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Frameset" type="xs:string" />
              <xs:attribute name="TileWidth" type="xs:short" use="required" />
              <xs:attribute name="TileHeight" type="xs:short" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Counter">
            <xs:complexType>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
              <xs:attribute name="Value" type="xs:int" />
              <xs:attribute name="Max" type="xs:int" />
              <xs:attribute name="Min" type="xs:int" msdata:DefaultValue="0" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Map">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Layer" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="Tiles" type="xs:base64Binary" minOccurs="0" msdata:Ordinal="14" />
                      <xs:element name="Sprite" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="ParameterValue" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="SpriteName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="ParameterName" type="xs:string" use="required" />
                                <xs:attribute name="Value" type="xs:int" />
                                <xs:attribute name="DefinitionName" type="xs:string" use="prohibited" />
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Name" type="xs:string" use="required" />
                          <xs:attribute name="DefinitionName" type="xs:string" use="required" />
                          <xs:attribute name="StateName" type="xs:string" />
                          <xs:attribute name="CurrentFrame" type="xs:short" />
                          <xs:attribute name="X" type="xs:int" />
                          <xs:attribute name="Y" type="xs:int" />
                          <xs:attribute name="DX" type="xs:float" />
                          <xs:attribute name="DY" type="xs:float" />
                          <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Priority" type="xs:int" />
                          <xs:attribute name="Active" type="xs:boolean" default="true" />
                          <xs:attribute name="Solidity" type="xs:string" />
                          <xs:attribute name="Color" type="xs:int" default="-1" />
                        </xs:complexType>
                      </xs:element>
                      <xs:element name="SpritePlan" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="BaseClass" type="xs:string" default="PlanBase" msdata:Ordinal="4" />
                            <xs:element name="Coordinate" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="PlanName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Sequence" type="xs:short" use="required" />
                                <xs:attribute name="X" type="xs:int" />
                                <xs:attribute name="Y" type="xs:int" />
                                <xs:attribute name="Weight" type="xs:int" />
                              </xs:complexType>
                            </xs:element>
                            <xs:element name="PlanRule" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="PlanName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Name" type="xs:string" use="required" />
                                <xs:attribute name="Sequence" type="xs:int" use="required" />
                                <xs:attribute name="Type" type="xs:string" use="required" />
                                <xs:attribute name="Function" type="xs:string" use="required" />
                                <xs:attribute name="Parameter1" type="xs:string" />
                                <xs:attribute name="Parameter2" type="xs:string" />
                                <xs:attribute name="Parameter3" type="xs:string" />
                                <xs:attribute name="ResultParameter" type="xs:string" />
                                <xs:attribute name="EndIf" type="xs:boolean" default="false" />
                                <xs:attribute name="Suspended" type="xs:boolean" default="false" />
                              </xs:complexType>
                            </xs:element>
                            <xs:element name="PlanParameterValue" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="PlanName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Name" type="xs:string" use="required" />
                                <xs:attribute name="Value" type="xs:string" />
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Name" type="xs:string" use="required" />
                          <xs:attribute name="Priority" type="xs:int" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="Name" type="xs:string" use="required" />
                    <xs:attribute name="Width" type="xs:int" use="required" />
                    <xs:attribute name="Height" type="xs:int" use="required" />
                    <xs:attribute name="Tileset" type="xs:string" />
                    <xs:attribute name="BytesPerTile" type="xs:unsignedByte" use="required" />
                    <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="OffsetX" type="xs:int" default="0" />
                    <xs:attribute name="OffsetY" type="xs:int" default="0" />
                    <xs:attribute name="ScrollRateX" type="xs:float" default="1" />
                    <xs:attribute name="ScrollRateY" type="xs:float" default="1" />
                    <xs:attribute name="ZIndex" type="xs:int" />
                    <xs:attribute name="Priority" type="xs:int" default="0" />
                    <xs:attribute name="VirtualWidth" type="xs:int" default="0" />
                    <xs:attribute name="VirtualHeight" type="xs:int" default="0" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
              <xs:attribute name="ScrollMarginLeft" type="xs:short" use="required" />
              <xs:attribute name="ScrollMarginTop" type="xs:short" use="required" />
              <xs:attribute name="ScrollMarginRight" type="xs:short" use="required" />
              <xs:attribute name="ScrollMarginBottom" type="xs:short" use="required" />
              <xs:attribute name="ScrollWidth" msdata:Caption="Scrollable pixel width of the map independent of its layers" type="xs:int" />
              <xs:attribute name="ScrollHeight" msdata:Caption="Scrollable pixel height of the map independent of its layers" type="xs:int" />
              <xs:attribute name="ViewLeft" type="xs:short" />
              <xs:attribute name="ViewTop" type="xs:short" />
              <xs:attribute name="ViewWidth" type="xs:short" />
              <xs:attribute name="ViewHeight" type="xs:short" />
            </xs:complexType>
          </xs:element>
          <xs:element name="SpriteDefinition">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="SpriteRule" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                    <xs:attribute name="Sequence" type="xs:int" use="required" />
                    <xs:attribute name="Type" type="xs:string" use="required" />
                    <xs:attribute name="Function" type="xs:string" use="required" />
                    <xs:attribute name="Parameter1" type="xs:string" />
                    <xs:attribute name="Parameter2" type="xs:string" />
                    <xs:attribute name="Parameter3" type="xs:string" />
                    <xs:attribute name="ResultParameter" type="xs:string" />
                    <xs:attribute name="EndIf" type="xs:boolean" default="false" />
                    <xs:attribute name="Suspended" type="xs:boolean" default="false" />
                  </xs:complexType>
                </xs:element>
                <xs:element name="SpriteParameter" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                  </xs:complexType>
                </xs:element>
                <xs:element name="SpriteState" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="SpriteFrame" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="StateName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Sequence" type="xs:short" use="required" />
                          <xs:attribute name="FrameValue" type="xs:int" />
                          <xs:attribute name="Duration" type="xs:short" />
                          <xs:attribute name="MaskAlphaLevel" type="xs:unsignedByte" default="0" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                    <xs:attribute name="FramesetName" type="xs:string" use="required" />
                    <xs:attribute name="SolidWidth" type="xs:short" use="required" />
                    <xs:attribute name="SolidHeight" type="xs:short" use="required" />
                    <xs:attribute name="Sequence" type="xs:short" use="required" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
              <xs:attribute name="BaseClass" type="xs:string" default="SpriteBase" />
            </xs:complexType>
          </xs:element>
          <xs:element name="SpriteCategory">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="SpriteCategorySprite" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="CategoryName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="DefinitionName" type="xs:string" use="required" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Solidity">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="SolidityShape" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="SolidityName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="CategoryName" type="xs:string" use="required" />
                    <xs:attribute name="ShapeName" type="xs:string" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="SourceCode">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Text" type="xs:string" minOccurs="0" msdata:Ordinal="4" />
                <xs:element name="CustomObjectData" type="xs:base64Binary" minOccurs="0" msdata:Ordinal="5" />
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
              <xs:attribute name="IsCustomObject" type="xs:boolean" default="false" />
              <xs:attribute name="DependsOn" type="xs:string" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Project">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Comments" type="xs:string" default="" msdata:Ordinal="8" />
              </xs:sequence>
              <xs:attribute name="DisplayMode" type="xs:string" use="required" />
              <xs:attribute name="Windowed" type="xs:boolean" use="required" />
              <xs:attribute name="TitleText" type="xs:string" />
              <xs:attribute name="StartMap" type="xs:string" />
              <xs:attribute name="OverlayMap" type="xs:string" />
              <xs:attribute name="MaxPlayers" type="xs:unsignedByte" default="1" />
              <xs:attribute name="MaxViews" type="xs:unsignedByte" default="1" />
              <xs:attribute name="Credits" type="xs:string" />
            </xs:complexType>
          </xs:element>
          <xs:element name="TileCategory">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="CategorizedTileset" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="CategoryTile" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="CategoryFrame" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="Tileset" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Category" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="TileValue" type="xs:int" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Frame" type="xs:short" use="required" />
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute name="Tileset" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Category" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="TileValue" type="xs:int" use="required" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="Tileset" type="xs:string" use="required" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:complexType>
      <xs:unique name="GraphicSheetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//GraphicSheet" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="FrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Frame" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@FrameValue" />
      </xs:unique>
      <xs:unique name="FramesetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Frameset" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="TileFrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//TileFrame" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@TileValue" />
        <xs:field xpath="@Sequence" />
      </xs:unique>
      <xs:unique name="TileKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Tile" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@TileValue" />
      </xs:unique>
      <xs:unique name="TilesetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Tileset" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="CounterKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Counter" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="ParameterValueKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//ParameterValue" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@SpriteName" />
        <xs:field xpath="@ParameterName" />
        <xs:field xpath="@MapName" />
      </xs:unique>
      <xs:unique name="SpriteKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@MapName" />
      </xs:unique>
      <xs:unique name="SpriteKeyWithDefinition">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@MapName" />
      </xs:unique>
      <xs:unique name="CoordinateKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Coordinate" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
        <xs:field xpath="@Sequence" />
      </xs:unique>
      <xs:unique name="PlanRuleKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//PlanRule" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="PlanParameterValueKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//PlanParameterValue" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpritePlanKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpritePlan" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="LayerKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Layer" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="MapKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Map" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteRuleKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteRule" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteParameterKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteParameter" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteFrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteFrame" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@StateName" />
        <xs:field xpath="@Sequence" />
      </xs:unique>
      <xs:unique name="SpriteStateKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteStateFramesetKey">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@FramesetName" />
      </xs:unique>
      <xs:unique name="SpriteDefinitionKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteDefinition" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteCategorySpriteKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteCategorySprite" />
        <xs:field xpath="@CategoryName" />
        <xs:field xpath="@DefinitionName" />
      </xs:unique>
      <xs:unique name="SpriteCategoryKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteCategory" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SolidityShapeKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SolidityShape" />
        <xs:field xpath="@SolidityName" />
        <xs:field xpath="@CategoryName" />
      </xs:unique>
      <xs:unique name="SolidityKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Solidity" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SourceCodeKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SourceCode" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="CategoryFrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//CategoryFrame" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
        <xs:field xpath="@TileValue" />
        <xs:field xpath="@Frame" />
      </xs:unique>
      <xs:unique name="CategoryTileKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//CategoryTile" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
        <xs:field xpath="@TileValue" />
      </xs:unique>
      <xs:unique name="CategorizedTilesetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//CategorizedTileset" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="CategoryKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//TileCategory" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:keyref name="TilesetCategory" refer="TilesetKey">
        <xs:selector xpath=".//CategorizedTileset" />
        <xs:field xpath="@Tileset" />
      </xs:keyref>
      <xs:keyref name="TileCategoryCategorizedTileset" refer="CategoryKey" msdata:IsNested="true">
        <xs:selector xpath=".//CategorizedTileset" />
        <xs:field xpath="@Name" />
      </xs:keyref>
      <xs:keyref name="CategoryCategoryTile" refer="CategorizedTilesetKey" msdata:IsNested="true">
        <xs:selector xpath=".//CategoryTile" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
      </xs:keyref>
      <xs:keyref name="CategoryTileCategoryFrame" refer="CategoryTileKey" msdata:IsNested="true">
        <xs:selector xpath=".//CategoryFrame" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
        <xs:field xpath="@TileValue" />
      </xs:keyref>
      <xs:keyref name="MapProject" refer="MapKey" msdata:ConstraintOnly="true" msdata:DeleteRule="SetNull">
        <xs:selector xpath=".//Project" />
        <xs:field xpath="@StartMap" />
      </xs:keyref>
      <xs:keyref name="CategorySolidityShape" refer="CategoryKey">
        <xs:selector xpath=".//SolidityShape" />
        <xs:field xpath="@CategoryName" />
      </xs:keyref>
      <xs:keyref name="SoliditySolidityShape" refer="SolidityKey" msdata:IsNested="true">
        <xs:selector xpath=".//SolidityShape" />
        <xs:field xpath="@SolidityName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionCategory" refer="SpriteDefinitionKey">
        <xs:selector xpath=".//SpriteCategorySprite" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="SpriteCategorySpriteCategorySprite" refer="SpriteCategoryKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteCategorySprite" />
        <xs:field xpath="@CategoryName" />
      </xs:keyref>
      <xs:keyref name="FramesetSpriteState" refer="FramesetKey">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@FramesetName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionState" refer="SpriteDefinitionKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="SpriteStateFrame" refer="SpriteStateKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteFrame" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@StateName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionSpriteParameter" refer="SpriteDefinitionKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteParameter" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionSpriteRule" refer="SpriteDefinitionKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteRule" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="TilesetLayer" refer="TilesetKey">
        <xs:selector xpath=".//Layer" />
        <xs:field xpath="@Tileset" />
      </xs:keyref>
      <xs:keyref name="MapLayer" refer="MapKey" msdata:IsNested="true">
        <xs:selector xpath=".//Layer" />
        <xs:field xpath="@MapName" />
      </xs:keyref>
      <xs:keyref name="LayerSpritePlan" refer="LayerKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpritePlan" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
      </xs:keyref>
      <xs:keyref name="SpritePlanPlanParameterValue" refer="SpritePlanKey" msdata:IsNested="true">
        <xs:selector xpath=".//PlanParameterValue" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
      </xs:keyref>
      <xs:keyref name="SpritePlanPlanRule" refer="SpritePlanKey" msdata:IsNested="true">
        <xs:selector xpath=".//PlanRule" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
      </xs:keyref>
      <xs:keyref name="SpritePlanCoordinate" refer="SpritePlanKey" msdata:IsNested="true">
        <xs:selector xpath=".//Coordinate" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionSprite" refer="SpriteStateKey">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@StateName" />
      </xs:keyref>
      <xs:keyref name="LayerSprite" refer="LayerKey" msdata:IsNested="true">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
      </xs:keyref>
      <xs:keyref name="SpriteParameterParameterValue" refer="SpriteParameterKey">
        <xs:selector xpath=".//ParameterValue" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@ParameterName" />
      </xs:keyref>
      <xs:keyref name="SpriteParameterValue" refer="SpriteKeyWithDefinition" msdata:IsNested="true">
        <xs:selector xpath=".//ParameterValue" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@SpriteName" />
        <xs:field xpath="@MapName" />
      </xs:keyref>
      <xs:keyref name="FramesetTileset" refer="FramesetKey">
        <xs:selector xpath=".//Tileset" />
        <xs:field xpath="@Frameset" />
      </xs:keyref>
      <xs:keyref name="CounterTile" refer="CounterKey" msdata:DeleteRule="SetNull">
        <xs:selector xpath=".//Tile" />
        <xs:field xpath="@Counter" />
      </xs:keyref>
      <xs:keyref name="TilesetTile" refer="TilesetKey" msdata:IsNested="true">
        <xs:selector xpath=".//Tile" />
        <xs:field xpath="@Name" />
      </xs:keyref>
      <xs:keyref name="TileTileFrame" refer="TileKey" msdata:IsNested="true">
        <xs:selector xpath=".//TileFrame" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@TileValue" />
      </xs:keyref>
      <xs:keyref name="GraphicSheetFrame" refer="GraphicSheetKey" msdata:ConstraintOnly="true" msdata:DeleteRule="None">
        <xs:selector xpath=".//Frame" />
        <xs:field xpath="@GraphicSheet" />
      </xs:keyref>
      <xs:keyref name="FramesetFrame" refer="FramesetKey" msdata:IsNested="true">
        <xs:selector xpath=".//Frame" />
        <xs:field xpath="@Name" />
      </xs:keyref>
    </xs:element>
  </xs:schema>
  <GraphicSheet Name="CoolFont" Columns="24" Rows="4" CellWidth="13" CellHeight="18">
    <Image>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</Image>
  </GraphicSheet>
  <GraphicSheet Name="FireFont" Columns="24" Rows="4" CellWidth="13" CellHeight="18">
    <Image>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</Image>
  </GraphicSheet>
  <GraphicSheet Name="Main" Columns="16" Rows="8" CellWidth="32" CellHeight="32">
    <Image></Image>
  </GraphicSheet>
  <Frameset Name="Main">
    <Frame FrameValue="0" GraphicSheet="Main" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="4" GraphicSheet="Main" CellIndex="2" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="5" GraphicSheet="Main" CellIndex="3" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="6" GraphicSheet="Main" CellIndex="4" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="10" GraphicSheet="Main" CellIndex="5" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="11" GraphicSheet="Main" CellIndex="6" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="12" GraphicSheet="Main" CellIndex="7" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="13" GraphicSheet="Main" CellIndex="8" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="1" GraphicSheet="Main" CellIndex="1" m11="0" m12="1" m21="-1" m22="0" dx="32" dy="0" color="-1" />
    <Frame FrameValue="2" GraphicSheet="Main" CellIndex="1" m11="-1" m12="0" m21="0" m22="-1" dx="32" dy="32" color="-1" />
    <Frame FrameValue="3" GraphicSheet="Main" CellIndex="1" m11="0" m12="-1" m21="1" m22="0" dx="0" dy="32" color="-1" />
    <Frame FrameValue="7" GraphicSheet="Main" CellIndex="4" m11="0" m12="1" m21="-1" m22="0" dx="32" dy="0" color="-1" />
    <Frame FrameValue="8" GraphicSheet="Main" CellIndex="4" m11="-1" m12="0" m21="0" m22="-1" dx="32" dy="32" color="-1" />
    <Frame FrameValue="9" GraphicSheet="Main" CellIndex="4" m11="0" m12="-1" m21="1" m22="0" dx="0" dy="32" color="-1" />
  </Frameset>
  <Tileset Name="Main" Frameset="Main" TileWidth="32" TileHeight="32">
    <Tile TileValue="0" Counter="FrameCounter" />
  </Tileset>
  <Counter Name="FrameCounter" Value="1" Max="1000000000" Min="0" />
  <Counter Name="Keys" Value="0" Max="3" Min="0" />
  <Map Name="Input Overlay" ScrollMarginLeft="32" ScrollMarginTop="32" ScrollMarginRight="32" ScrollMarginBottom="32">
    <Layer Name="Designer Background" Width="100" Height="15" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="0" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <Tilesiles>
    </Layer>
    <Layer Name="Background" Width="1" Height="1" Tileset="Main" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="1" Priority="0" VirtualWidth="4000" VirtualHeight="4000">
      <Tiles>AA==</Tiles>
      <Sprite Name="UpButton" DefinitionName="InputButton" StateName="Up" CurrentFrame="0" X="32" Y="256" DX="0" DY="0" Priority="1" Active="true" Color="-1" />
      <Sprite Name="DownButton" DefinitionName="InputButton" StateName="Down" CurrentFrame="0" X="32" Y="320" DX="0" DY="0" Priority="1" Active="true" Color="-1" />
      <Sprite Name="LeftButton" DefinitionName="InputButton" StateName="Left" CurrentFrame="0" X="0" Y="288" DX="0" DY="0" Priority="1" Active="true" Color="-1" />
      <Sprite Name="RightButton" DefinitionName="InputButton" StateName="Right" CurrentFrame="0" X="64" Y="288" DX="0" DY="0" Priority="1" Active="true" Color="-1" />
      <Sprite Name="GoButton" DefinitionName="InputButton" StateName="Button" CurrentFrame="0" X="32" Y="288" DX="0" DY="0" Priority="1" Active="true" Color="-1" />
      <SpritePlan Name="Key inventory" Priority="1">
        <BaseClass>PlanBase</BaseClass>
        <Coordinate Sequence="1" X="0" Y="0" Weight="0" />
        <Coordinate Sequence="2" X="96" Y="32" Weight="0" />
        <PlanRule Name="Draw key inventory" Sequence="1" Type="Do" Function="DrawCounterAsTile" Parameter1="11" Parameter2="Counter.Keys" Parameter3="PlanBase.DrawStyle.RepeatRightToCounter" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Frame Rate" Priority="1">
        <BaseClass>PlanBase</BaseClass>
        <PlanRule Name="Limit frame rate" Sequence="1" Type="Do" Function="LimitFrameRate" Parameter1="30" EndIf="false" Suspended="false" />
      </SpritePlan>
    </Layer>
  </Map>
  <Map Name="Level 1" ScrollMarginLeft="32" ScrollMarginTop="32" ScrollMarginRight="32" ScrollMarginBottom="32" ScrollWidth="2400" ScrollHeight="2400">
    <Layer Name="Designer Background" Width="1" Height="1" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0" ScrollRateY="0" Priority="0" VirtualWidth="4000" VirtualHeight="4000">
      <Tiles>AA==</Tiles>
    </Layer>
    <Layer Name="Background" Width="1" Height="1" Tileset="Main" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="1" Priority="0" VirtualWidth="2400" VirtualHeight="2400">
      <Tiles>BQ==</Tiles>
    </Layer>
    <Layer Name="Main" Width="75" Height="75" Tileset="Main" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="2" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <Tiles>CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQUFBQUFAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAoKCgoKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAoAAAAMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAoADQAKCgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAoAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAoKCgoKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAACgoKCgoAAAAAAAAKAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAACgsAAAoKCgoKCgoKAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAACgAAAAAAAAAAAAAKAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAACgAAAAAAAAAAAAAKAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAACgoKCgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAACgoKCgAAAAAACgoKCgoKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAACgAAAAAAAAwAAAAACgoKCgoKCgoKCgoKCgoKCgoKCgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAACgAAAAAAAAoAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAACgAACgoKCgoKCgoACgAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAACgAACgAAAAAAAAAACgAAAAAAAAAACgoKCgoKCgAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAACgAACgAAAAAAAAAACgoKCgoAAAAACgAAAAAACgAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAoKCgoKCgoKCgAAAAAAAAAAAAAAAAAAAAAACgALAAsACgAAAAoAAAoKCgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAACgAAAAAACgAAAAoAAAoKCgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAACgAAAAAACgAAAAoAAAoACwoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAACgoKCgoKCgoKCgoKCgAAAAAACgAAAAAACgAAAAoAAAoAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAACgoKCgoACgAAAAoAAAoAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAwACgAAAAoKCgoKAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAACgoKCgAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAoAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAoAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgoKCgoKCgoKCgoKCgoKCgoAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCgoKCgoKCgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCgAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgoAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgoAAAAAAAAAAAAKCgAAAAAAAAoAAAoAAAoAAAoKCgAKAAoACgoKAAoAAAoAAAoKAAAACgoKAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAoKAAAAAAAAAAAKCgAAAAAAAAoKAAoACgAKAAAKAAAKAAoAAAoAAAoKAAoACgAAAAAAAAoAAAoACgAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAKCgAAAAAAAAoACgoACgAKAAAKAAAKCgoAAAoAAAoACgoACgAAAAAAAAoAAAoACgAAAAAAAAAAAAAAAAAAAAAAAAAKCgoKCgoKCgoKCgAAAAAAAAoAAAoACgAKAAAKAAAKAAoAAAoAAAoAAAoACgAKAAAAAAoAAAoACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAoAAAoAAAoAAAAKAAAKAAoACgoKAAoAAAoAAAoKAAAAAAoAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgAAAAAAAAAKCgoACgoKAAoKCgAAAAoACgAKCgoACgoKAAAKCgoAAAAKCgoACgAKAAAKCgAKCgoACgoKAAAKCgoAAAAAAAAAAAAKCgAAAAAAAAoAAAAACgAAAAoAAAAAAAoACgAKAAAACgAACgAKAAAAAAAKAAAACgAKAAoAAAAKAAAACgAACgAACgAAAAgAAAAAAAAKCgAAAAAAAAAKCgAACgoAAAoKAAAAAAoKCgAKCgAACgoKAAAKCgAAAAAKCgAAAAoAAAoAAAAKCgAACgoKAAAACgAABwQJAAAAAAAKCgAAAAAAAAAAAAoACgAAAAoAAAAAAAoACgAKAAAACgAKAAAKAAAAAAAKAAAACgAKAAoAAAAKAAAACgAAAAAACgAAAAYAAAAAAAAKCgAAAAAAAAoKCgAACgoKAAoKCgAAAAoACgAKCgoACgAACgAKCgoAAAAKCgoACgAKAAAKCgAKCgoACgAAAAAACgAAAAAAAAAAAAAKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK</Tiles>
      <Sprite Name="Player 1" DefinitionName="Player" StateName="Up" CurrentFrame="0" X="491" Y="391" DX="0" DY="0" Priority="1" Active="true" Solidity="Standard" Color="-1" />
    </Layer>
  </Map>
  <SpriteDefinition Name="InputButton" BaseClass="SpriteBase">
    <SpriteRule Name="If this button is up" Sequence="1" Type="If" Function="IsInState" Parameter1="(int)Sprites.InputButton.State.Up" Parameter2="(int)Sprites.InputButton.State.Up" EndIf="false" Suspended="false" />
    <SpriteRule Name="Map mouse on this sprite press to overlay up button" Sequence="3" Type="Do" Function="SetOverlayInputByMouse" Parameter1="SpriteBase.InputBits.Up" EndIf="true" Suspended="false" />
    <SpriteRule Name="If this button is down" Sequence="4" Type="If" Function="IsInState" Parameter1="(int)Sprites.InputButton.State.Down" Parameter2="(int)Sprites.InputButton.State.Down" EndIf="false" Suspended="false" />
    <SpriteRule Name="If this button is left" Sequence="7" Type="If" Function="IsInState" Parameter1="(int)Sprites.InputButton.State.Left" Parameter2="(int)Sprites.InputButton.State.Left" EndIf="false" Suspended="false" />
    <SpriteRule Name="If this button is right" Sequence="10" Type="If" Function="IsInState" Parameter1="(int)Sprites.InputButton.State.Right" Parameter2="(int)Sprites.InputButton.State.Right" EndIf="false" Suspended="false" />
    <SpriteRule Name="Map mouse on this sprite press to overlay down button" Sequence="6" Type="Do" Function="SetOverlayInputByMouse" Parameter1="SpriteBase.InputBits.Down" EndIf="true" Suspended="false" />
    <SpriteRule Name="Map mouse on this sprite press to overlay left button" Sequence="9" Type="Do" Function="SetOverlayInputByMouse" Parameter1="SpriteBase.InputBits.Left" EndIf="true" Suspended="false" />
    <SpriteRule Name="Map mouse on this sprite press to overlay right button" Sequence="12" Type="Do" Function="SetOverlayInputByMouse" Parameter1="SpriteBase.InputBits.Right" EndIf="true" Suspended="false" />
    <SpriteRule Name="If this button is go" Sequence="13" Type="If" Function="IsInState" Parameter1="(int)Sprites.InputButton.State.Button" Parameter2="(int)Sprites.InputButton.State.Button" EndIf="false" Suspended="false" />
    <SpriteRule Name="Map mouse on this sprite press to overlay button1" Sequence="15" Type="Do" Function="SetOverlayInputByMouse" Parameter1="SpriteBase.InputBits.Button1" EndIf="true" Suspended="false" />
    <SpriteRule Name="Offset up button from bottom" Sequence="2" Type="Do" Function="OffsetFromBottom" Parameter1="64" EndIf="false" Suspended="false" />
    <SpriteRule Name="Offset down button from bottom" Sequence="5" Type="Do" Function="OffsetFromBottom" Parameter1="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Offset left button from bottom" Sequence="8" Type="Do" Function="OffsetFromBottom" Parameter1="32" EndIf="false" Suspended="false" />
    <SpriteRule Name="Offset right button from bottom" Sequence="11" Type="Do" Function="OffsetFromBottom" Parameter1="32" EndIf="false" Suspended="false" />
    <SpriteRule Name="Offset go button from bottom" Sequence="14" Type="Do" Function="OffsetFromBottom" Parameter1="32" EndIf="false" Suspended="false" />
    <SpriteState Name="Up" FramesetName="Main" SolidWidth="32" SolidHeight="32" Sequence="4">
      <SpriteFrame Sequence="0" FrameValue="3" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Right" FramesetName="Main" SolidWidth="32" SolidHeight="32" Sequence="1">
      <SpriteFrame Sequence="0" FrameValue="0" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Down" FramesetName="Main" SolidWidth="32" SolidHeight="32" Sequence="2">
      <SpriteFrame Sequence="0" FrameValue="1" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Left" FramesetName="Main" SolidWidth="32" SolidHeight="32" Sequence="3">
      <SpriteFrame Sequence="0" FrameValue="2" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Button" FramesetName="Main" SolidWidth="32" SolidHeight="32" Sequence="5">
      <SpriteFrame Sequence="0" FrameValue="4" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
  </SpriteDefinition>
  <SpriteDefinition Name="Player" BaseClass="SpriteBase">
    <SpriteRule Name="Map inputs from overlay" Sequence="1" Type="Do" Function="MapInputsFromOverlay" EndIf="false" Suspended="false" />
    <SpriteRule Name="Accelerate by inputs" Sequence="2" Type="Do" Function="AccelerateByInputs" Parameter1="5" Parameter2="6" Parameter3="false" EndIf="false" Suspended="false" />
    <SpriteRule Name="React to solidity" Sequence="3" Type="Do" Function="ReactToSolid" EndIf="false" Suspended="false" />
    <SpriteRule Name="Move by velocity" Sequence="4" Type="Do" Function="MoveByVelocity" EndIf="false" Suspended="false" />
    <SpriteRule Name="React to inertia" Sequence="6" Type="Do" Function="ReactToInertia" Parameter1="70" Parameter2="70" EndIf="true" Suspended="false" />
    <SpriteRule Name="If no inputs are pressed" Sequence="5" Type="If" Function="==" Parameter1="inputs" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Scroll into view" Sequence="8" Type="Do" Function="ScrollSpriteIntoView" Parameter1="true" EndIf="false" Suspended="false" />
    <SpriteRule Name="If moving left" Sequence="9" Type="If" Function="IsMoving" Parameter1="SpriteBase.Direction.Left" EndIf="false" Suspended="false" />
    <SpriteRule Name="And not facing left" Sequence="10" Type="And" Function="!IsInState" Parameter1="(int)Sprites.Player.State.Left" Parameter2="(int)Sprites.Player.State.Left" EndIf="false" Suspended="false" />
    <SpriteRule Name="Face left" Sequence="11" Type="Do" Function="SwitchToState" Parameter1="(int)Sprites.Player.State.Left" Parameter2="RelativePosition.CenterMiddle" EndIf="true" Suspended="false" />
    <SpriteRule Name="If moving right" Sequence="12" Type="If" Function="IsMoving" Parameter1="SpriteBase.Direction.Right" EndIf="false" Suspended="false" />
    <SpriteRule Name="And not facing right" Sequence="13" Type="And" Function="!IsInState" Parameter1="(int)Sprites.Player.State.Right" Parameter2="(int)Sprites.Player.State.Right" EndIf="false" Suspended="false" />
    <SpriteRule Name="Face right" Sequence="14" Type="Do" Function="SwitchToState" Parameter1="(int)Sprites.Player.State.Right" Parameter2="RelativePosition.CenterMiddle" EndIf="true" Suspended="false" />
    <SpriteRule Name="If moving down" Sequence="18" Type="If" Function="IsMoving" Parameter1="SpriteBase.Direction.Down" EndIf="false" Suspended="false" />
    <SpriteRule Name="And not facing down" Sequence="19" Type="And" Function="!IsInState" Parameter1="(int)Sprites.Player.State.Down" Parameter2="(int)Sprites.Player.State.Down" EndIf="false" Suspended="false" />
    <SpriteRule Name="Face down" Sequence="20" Type="Do" Function="SwitchToState" Parameter1="(int)Sprites.Player.State.Down" Parameter2="RelativePosition.CenterMiddle" EndIf="true" Suspended="false" />
    <SpriteRule Name="If moving up" Sequence="15" Type="If" Function="IsMoving" Parameter1="SpriteBase.Direction.Up" EndIf="false" Suspended="false" />
    <SpriteRule Name="And not facing up" Sequence="16" Type="And" Function="!IsInState" Parameter1="(int)Sprites.Player.State.Up" Parameter2="(int)Sprites.Player.State.Up" EndIf="false" Suspended="false" />
    <SpriteRule Name="Face up" Sequence="17" Type="Do" Function="SwitchToState" Parameter1="(int)Sprites.Player.State.Up" Parameter2="RelativePosition.CenterMiddle" EndIf="true" Suspended="false" />
    <SpriteRule Name="Touch tiles" Sequence="21" Type="Do" Function="TouchTiles" Parameter1="TileCategoryName.Touchable" EndIf="false" Suspended="false" />
    <SpriteRule Name="Take keys" Sequence="22" Type="Do" Function="TileTake" Parameter1="11" Parameter2="Counter.Keys" Parameter3="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Unlock doors" Sequence="23" Type="Do" Function="TileUseUp" Parameter1="12" Parameter2="Counter.Keys" Parameter3="0" ResultParameter="" EndIf="false" Suspended="false" />
    <SpriteRule Name="Adjust scroll margins" Sequence="7" Type="Do" Function="AdjustScrollMargins" EndIf="false" Suspended="false" />
    <SpriteState Name="Up" FramesetName="Main" SolidWidth="32" SolidHeight="32" Sequence="1">
      <SpriteFrame Sequence="0" FrameValue="6" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Right" FramesetName="Main" SolidWidth="32" SolidHeight="32" Sequence="2">
      <SpriteFrame Sequence="0" FrameValue="7" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Down" FramesetName="Main" SolidWidth="32" SolidHeight="32" Sequence="3">
      <SpriteFrame Sequence="0" FrameValue="8" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Left" FramesetName="Main" SolidWidth="32" SolidHeight="32" Sequence="4">
      <SpriteFrame Sequence="0" FrameValue="9" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
  </SpriteDefinition>
  <Solidity Name="Standard">
    <SolidityShape CategoryName="Solid" ShapeName="SolidTileShape" />
  </Solidity>
  <SourceCode Name="SpriteCustom.cs" IsCustomObject="true" DependsOn="">
    <Text>using System;
using System.ComponentModel;
using System.Diagnostics;

public abstract partial class SpriteBase
{
   class TileSpecialization
   {
 
      private int col;
      private int row;
      private int state;
      public int originalTile;
      private LayerBase layer;

      public TileSpecialization(int col, int row, int originalTile, LayerBase layer)
      {
         this.col = col;
         this.row = row;
         this.originalTile = originalTile;
         this.layer = layer;
      }

      public void Reset()
      {
         layer[col,row] = originalTile;
      }
   }

   public static InputBits overlayInputs;

   [Description("Associate the state of the input device for the specified player (1-4) with the inputs on this sprite.")]
   public virtual void MapInputsFromOverlay()
   {
      Debug.Assert(this.isActive, "Attempted to execute MapInputsFromOverlay on an inactive sprite");
      oldinputs = inputs;
      inputs = overlayInputs;
   }

   [Description("Determine if the mouse is on this sprite")]
   public bool IsMouseOver()
   {
      System.Drawing.Point pos = ParentLayer.GetMousePosition();
      return ((pos.X &gt;= x) &amp;&amp; (pos.Y &gt;= y) &amp;&amp; (pos.X &lt; x + SolidWidth) &amp;&amp; (pos.Y &lt; y + SolidHeight));
   }

   [Description("If the mouse is pressed on this sprite, set the global overlay inputs for the specified buttons, otherwise clear them.")]
   public void SetOverlayInputByMouse(InputBits InputsToSet)
   {
      if ((0 != (System.Windows.Forms.Control.MouseButtons &amp; System.Windows.Forms.MouseButtons.Left)) &amp;&amp; IsMouseOver())
         overlayInputs |= InputsToSet;
      else
         overlayInputs &amp;= ~InputsToSet;
   }

   private static System.Collections.Hashtable specialTiles = new System.Collections.Hashtable();

   private static TileSpecialization SpecialTile(SpriteBase Player)
   {
      return specialTiles[Player] as TileSpecialization;
   }

   [Description("Causes a sprite to react to spring tiles")]
   public void ReactToSprings()
   {
      System.Drawing.Point rp = GetRelativePosition(RelativePosition.BottomCenter);
      rp.Y++;
      int col = (int)(rp.X / ParentLayer.Tileset.TileWidth);
      int row = (int)(rp.Y / ParentLayer.Tileset.TileHeight);
      if ((ParentLayer[col,row] == 100) &amp;&amp; (dy &gt;= 0))
      {
         // Before specializing a new tile, reset any other tile that
         // was in the process of special handling.
         if (SpecialTile(this) != null)
            SpecialTile(this).Reset();
         specialTiles[this] = new TileSpecialization(col, row, 100, ParentLayer);
         ParentLayer[col,row] = 101;
      }
      else if ((SpecialTile(this) != null) &amp;&amp; (ParentLayer[col,row] != 101))
      {
         // Player walked off compressed spring.
         // Reset it.
         SpecialTile(this).Reset();
         specialTiles[this] = null;
      }
      else if (SpecialTile(this) != null)
      {
         rp = GetRelativePosition(RelativePosition.CenterMiddle);
         col = (int)(rp.X / ParentLayer.Tileset.TileWidth);
         row = (int)(rp.Y / ParentLayer.Tileset.TileHeight);
         if (ParentLayer[col,row] == 101)
         {
            dy = -5;
            SpecialTile(this).Reset();
            specialTiles[this] = null;
         }
      }
      if (IsInputPressed(InputBits.Button2, true) &amp;&amp; (SpecialTile(this) != null) &amp;&amp; (SpecialTile(this).originalTile == 100))
      {
         dy = -20;
         SpecialTile(this).Reset();
         specialTiles[this] = null;
      }
   }

   [Description("Adjust the scroll margins for the size of the HTML display when resizable")]
   public void AdjustScrollMargins()
   {
      // .NET version doesn't allow resizing.
   }

   [Description("Move this sprite to the specified position relative to the bottom of the HTML view")]
   public void OffsetFromBottom(int y)
   {
      // .NET version doesn't allow resizing.
   }
}</Text>
  </SourceCode>
  <SourceCode Name="SpriteCustom.js" IsCustomObject="true" DependsOn="">
    <Text>Sprite.prototype.reactToSprings = function() {
   if (this.specialTile == null) {
      this.specialTile = {valid:false};
      this.specialTile.Reset = function() {
         this.layer.setTile(this.col, this.row, this.originalTile);
      }
   }
   var rp = this.getRelativePosition("BottomCenter");
   rp.y++;
   var col = Math.floor(rp.x / this.layer.tileset.tileWidth);
   var row = Math.floor(rp.y / this.layer.tileset.tileHeight);
   if ((this.layer.getTile(col,row) == 100) &amp;&amp; (this.dy &gt;= 0)) {
      // Before specializing a new tile, reset any other tile that
      // was in the process of special handling.
      if (this.specialTile.valid)
         this.specialTile.Reset();
      this.specialTile.col=col;
      this.specialTile.row=row;
      this.specialTile.originalTile = 100;
      this.specialTile.layer = this.layer;
      this.specialTile.valid = true;
      this.layer.setTile(col, row, 101);
   }
   else if (this.specialTile.valid &amp;&amp; (this.layer.getTile(col,row) != 101))
   {
      // Player walked off compressed spring.
      // Reset it.
      this.specialTile.Reset();
      this.specialTile.valid = false;
   }
   else if (this.specialTile.valid)
   {
      rp = this.getRelativePosition("CenterMiddle");
      col = Math.floor(rp.x / this.layer.tileset.tileWidth);
      row = Math.floor(rp.y / this.layer.tileset.tileHeight);
      if (this.layer.getTile(col,row) == 101)
      {
         this.dy = -5;
         this.specialTile.Reset();
         this.specialTile.valid = false;
      }
   }
   if (this.isInputPressed(Sprite.inputBits.button2, true) &amp;&amp; (this.specialTile.valid) &amp;&amp; (this.specialTile.originalTile == 100))
   {
      this.dy = -20;
      this.specialTile.Reset();
      this.specialTile.valid=false;
   }
}

Sprite.overlayInputs = 0;

Sprite.prototype.mapInputsFromOverlay = function() {
   this.oldInputs = this.inputs;
   this.inputs = Sprite.overlayInputs;
};

Sprite.prototype.isMouseOver = function() {
   var pos = {x:mouseInfo.x - this.layer.currentX, y:mouseInfo.y - this.layer.currentY};
   return ((pos.x &gt;= this.x) &amp;&amp; (pos.y &gt;= this.y) &amp;&amp; (pos.x &lt; this.x + this.getSolidWidth()) &amp;&amp; (pos.y &lt; this.y + this.getSolidHeight()));
};

Sprite.prototype.setOverlayInputByMouse = function(inputsToSet) {
   if ((mouseInfo.pressed) &amp;&amp; this.isMouseOver())
      Sprite.overlayInputs |= inputsToSet;
   else
      Sprite.overlayInputs &amp;= ~inputsToSet;
};

Sprite.prototype.adjustScrollMargins = function() {
   var map = this.layer.map;
   map.scrollMarginLeft = map.scrollMarginRight = (viewWidth - this.getSolidWidth()) / 2;
   map.scrollMarginTop = map.scrollMarginBottom = (viewHeight - this.getSolidHeight()) / 2;
}

Sprite.prototype.offsetFromBottom = function(y) {
   this.y = viewHeight - this.getSolidHeight() - y;
}</Text>
  </SourceCode>
  <SourceCode Name="OpenTK.dll" IsCustomObject="true">
    <Text>/*
   Because this is a binary file, this text only
   serves as a comment and will not be compiled.
*/</Text>
  </SourceCode>
  <SourceCode Name="OpenTK.GLControl.dll" IsCustomObject="true">
    <Text>/*
   Because this is a binary file, this text only
   serves as a comment and will not be compiled.
*/</Text>
  </SourceCode>
  <SourceCode Name="PlanBase.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.ComponentModel;
using System.Drawing;

/// &lt;summary&gt;
/// Base class for "plans", which consist of map coordinates and rules
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class PlanBase : GeneralRules, System.Collections.IEnumerable
{
   /// &lt;summary&gt;
   /// This value is used by &lt;see cref="CheckNextCoordinate"/&gt; to determine how close a
   /// sprite must be to a coordinate before heading to the next coordinate.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The default value for this property is 5 pixels.&lt;/remarks&gt;
   [Description("How close must a sprite be to a coordinate in this plan before heading to the next (default=5)")]
   public int TargetDistance = 5;

   protected PointF[] corners = null;

   protected PlanBase()
   {
   }

   /// &lt;summary&gt;
   /// Stores information about a coordinate within a &lt;see cref="PlanBase"/&gt;.
   /// &lt;/summary&gt;
   [Serializable()]
   public struct Coordinate
   {
      /// &lt;summary&gt;
      /// The horizontal aspect of this coordinate
      /// &lt;/summary&gt;
      public int x;
      /// &lt;summary&gt;
      /// The vercial aspect of this coordinate 
      /// &lt;/summary&gt;
      public int y;
      /// &lt;summary&gt;
      /// Can be used to store any additional piece of information about this coordinate,
      /// but &lt;see cref="PlanBase.CheckNextCoordinate"/&gt; will use it to define a wait period
      /// for a sprite arriving at this coordinate before proceeding to the next.
      /// &lt;/summary&gt;
      public int weight;
      /// &lt;summary&gt;
      /// Creates a new coordinate given all its properties
      /// &lt;/summary&gt;
      /// &lt;param name="x"&gt;Provides the &lt;see cref="x"/&gt; value for this coordinate&lt;/param&gt;
      /// &lt;param name="y"&gt;Provides the &lt;see cref="y"/&gt; value for this coordinate&lt;/param&gt;
      /// &lt;param name="weight"&gt;Provides the &lt;see cref="weight"/&gt; calue for this coordinate&lt;/param&gt;
      public Coordinate(int x, int y, int weight)
      {
         this.x = x;
         this.y = y;
         this.weight = weight;
      }
      /// &lt;summary&gt;
      /// Allows a path coordinate to be automatically used as a Point
      /// &lt;/summary&gt;
      public static implicit operator Point(Coordinate value)
      {
         return new Point(value.x, value.y);
      }
   }

   /// &lt;summary&gt;
   /// Returns the rectangle defined by a plan
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Plans with 2 points define a rectanglular area that can be used
   /// for a variety of purposes. This property will return the plan defined by
   /// the plan's two points for such plans.  It will return an empty regtangle
   /// if the plan does not have exactly 2 points.&lt;/remarks&gt;
   public virtual Rectangle PlanRectangle
   {
      get
      {
         return Rectangle.Empty;
      }
   }


   #region Sprites
   /// &lt;summary&gt;
   /// Make the specified sprite active.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies which sprite instance to activate&lt;/param&gt;
   /// &lt;remarks&gt;If the specified sprite instance is already active, this has
   /// no effect.&lt;/remarks&gt;
   [Description("Make the specified sprite active.")]
   public virtual void ActivateSprite(SpriteBase Target)
   {
      Target.isActive = true;
   }

   /// &lt;summary&gt;
   /// Make the specified sprite inactive.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies which sprite instance to deactivate&lt;/param&gt;
   /// &lt;remarks&gt;If the specified sprite instance is already inactive, this
   /// has no effect.&lt;/remarks&gt;
   [Description("Make the specified sprite inactive.")]
   public virtual void DeactivateSprite(SpriteBase Target)
   {
      Target.isActive = false;
   }

   /// &lt;summary&gt;
   /// Set the position of the target sprite to match that of the source sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies the sprite whose position will change.&lt;/param&gt;
   /// &lt;param name="Source"&gt;Specifies the sprite whose position is copied.&lt;/param&gt;
   /// &lt;remarks&gt;This very simply copies the position from the source sprite to that
   /// of the target sprite. No tests are performed for solidity and no velocity is
   /// changed. The old position of the target sprite, however, is tracked, so it's
   /// still possible to determine if the sprite was touching a tile or plan before
   /// it moved with a function like &lt;see cref="WasSpriteTouching"/&gt;.
   /// &lt;seealso cref="TransportToPoint"/&gt;
   /// &lt;seealso cref="TransportToPlan"/&gt;&lt;/remarks&gt;
   [Description("Set the position of the target sprite to match that of the source sprite.")]
   public virtual void MatchSpritePosition(SpriteBase Target, SpriteBase Source)
   {
      Target.oldX = Target.x;
      Target.oldY = Target.y;
      Target.x = Source.x;
      Target.y = Source.y;
   }

   /// &lt;summary&gt;
   /// Determines if the specified sprite is touching this plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite to test&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite's solidity rectangle is touching this plan's rectangle,
   /// otherwise false.&lt;/returns&gt;
   /// &lt;remarks&gt;"Touching" means one rectangle is overlapping the other, or the borders
   /// are immediately adjacent. The rectangles are not considered touching if the corners
   /// are only diagonally adjacent (kitty-corner). There must be some length of adjecent
   /// edge. This ensures that a plan that is blocked off by two diagonally-arranged
   /// solid blocks can't be touched (and thus potentially "activated") through the crack.
   /// &lt;/remarks&gt;
   [Description("Returns true if the specified sprite is touching this plan's rectangle")]
   public virtual bool IsSpriteTouching(SpriteBase sprite)
   {
      if (!sprite.isActive)
         return false;

      Rectangle spriteRect = new Rectangle(sprite.PixelX, sprite.PixelY, sprite.SolidWidth, sprite.SolidHeight);
      Rectangle targetRect = PlanRectangle;
      if (!spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,2)))
         return false;
      if (spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,0)) ||
         spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,0,2)))
         return true;
      else
         return false;
   }

   /// &lt;summary&gt;
   /// Determines if the specified part of the specified sprite is within the plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite whose position will be tested&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;Specifies a point within the sprite to test&lt;/param&gt;
   /// &lt;returns&gt;True if the specified point within the specified sprite's solidity rectangle is
   /// within the plan's rectangle.&lt;/returns&gt;
   /// &lt;remarks&gt;Unlike &lt;see cref="IsSpriteTouching"/&gt;, this can only return true when the sprite
   /// and the plan's rectangle actually overlap because the point is inside the sprite's
   /// rectangle, and must also be inside the plan's rectangle to return true.
   /// &lt;seealso cref="GetSpriteWithin"/&gt;&lt;seealso cref="IsSpriteWithinPolygon"/&gt;&lt;/remarks&gt;
   [Description("Returns true if the specified part of the specified sprite is within the plan's rectangle")]
   public virtual bool IsSpriteWithin(SpriteBase sprite, RelativePosition RelativePosition)
   {
      System.Drawing.Point rp = sprite.GetRelativePosition(RelativePosition);
      Rectangle targetRect = PlanRectangle;
      return targetRect.Contains(rp);
   }

   /// &lt;summary&gt;
   /// Determines if the specified part of any active sprite in the specified category is within the plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprites"&gt;Sprite collection to be checked&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;Specifies a point within each sprite to test&lt;/param&gt;
   /// &lt;param name="Skip"&gt;Indicates the index to skip over. All sprite indexes up to and including
   /// Skip will be skipped in teh search. This allows the function to be called repeatedly,
   /// passing the previous return value as the Skip value to retrieve the next applicable sprite
   /// index. Specify -1 to search all sprites in the collection.&lt;/param&gt;
   /// &lt;returns&gt;-1 if no active sprite is found in the collection where the specified point of the sprite's
   /// solidity rectangle is within the plan's rectangle. Otherwise the 0-based index of the
   /// first matching sprite is returned.&lt;/returns&gt;
   /// &lt;remarks&gt;This is the same as performing &lt;see cref="IsSpriteWithin"/&gt; for each active sprite
   /// in a collection (beginning with the sprite whose index is after Skip).
   /// &lt;seealso cref="IsSpriteWithin"/&gt;&lt;/remarks&gt;
   [Description("Returns the index of the first active sprite whose specified coordinate is within the plan's rectangle, or -1 if none exist. Indexes up through Skip will be ignored.")]
   public virtual int GetSpriteWithin(SpriteCollection Sprites, RelativePosition RelativePosition, int Skip)
   {
      for (int i=Skip+1; i &lt; Sprites.Count; i++)
      {
         if (Sprites[i].isActive &amp;&amp; (IsSpriteWithin(Sprites[i], RelativePosition)))
            return i;
      }
      return -1;
   }

   /// &lt;summary&gt;
   /// Determines if the specified sprite was touching this plan's rectangle in the previous frame.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite to test&lt;/param&gt;
   /// &lt;returns&gt;True if the specified sprite was touching this plan's rectangle previously, or false
   /// if it wasn't.&lt;/returns&gt;
   /// &lt;remarks&gt;This function is identical to &lt;see cref="IsSpriteTouching"/&gt; except that it operates
   /// on the sprite's previous position instead of its current position. This is useful for
   /// determining if the sprite just started touching a plan's rectangle or was already touching
   /// it. Often times it's desirable to perform an automated action like a message only
   /// when a sprite initially touches a plan's rectangle. It's not as desirable for plan rules
   /// that also require other conditions to activate.
   /// Consider, for example, a plan that displays
   /// a message when the sprite touches it. This plan can automatically display the message only
   /// when the sprite first touches the plan, and everything will be fine. But what happens if
   /// it's also required that a button be pressed to activate the rule?  The player may start
   /// touching the plan without touching the button.  Then when the player presses the button,
   /// the rule won't activate because this is no longer the frame when the sprite initially
   /// started touching the plan, so the plan may never get activated.
   /// &lt;/remarks&gt;
   [Description("Returns true if the specified sprite was touching this plan's rectangle in the previous frame")]
   public virtual bool WasSpriteTouching(SpriteBase sprite)
   {
      Rectangle spriteRect = new Rectangle(sprite.OldPixelX, sprite.OldPixelY, sprite.SolidWidth, sprite.SolidHeight);
      Rectangle targetRect = PlanRectangle;
      if (!spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,2)))
         return false;
      if (spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,0)) ||
         spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,0,2)))
         return true;
      else
         return false;
   }


   /// &lt;summary&gt;
   /// Scroll all layers on this plan's layer's map so that the specified sprite is within the visible area of the map.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Specified which sprite will be scrolled into view.&lt;/param&gt;
   /// &lt;param name="UseScrollMargins"&gt;If true, the layer will scroll the sprite into the scroll margins
   /// of the map, otherwise it will only be scrolled just far enough for the sprite to be fully visible
   /// on the display.&lt;/param&gt;
   /// &lt;remarks&gt;For multi-player games, it may be desirable to set UseScrollMargins to false
   /// to allow at least one player to get closer to the edge of the screen without trying to
   /// keep it scrolled so strictly within the scroll margin area.
   /// &lt;seealso cref="PushSpriteIntoView"/&gt;&lt;/remarks&gt;
   [Description("Scroll all layers on this plan's layer's map so that the specified sprite is within the visible area of the map.  If UseScrollMargins is true, the layer will scroll the sprite into the scroll margins of the map.")]
   public virtual void ScrollSpriteIntoView(SpriteBase Sprite, bool UseScrollMargins)
   {
      ParentLayer.ScrollSpriteIntoView(Sprite, UseScrollMargins);
   }

   /// &lt;summary&gt;
   /// Alter the velocity of the specified sprite to go toward a coordinate associated with the current plan.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite whose velocity will be affected&lt;/param&gt;
   /// &lt;param name="CoordinateIndex"&gt;Indicates the 0-based index of the coordinate in the current plan toward which the sprite will be pushed&lt;/param&gt;
   /// &lt;param name="Force"&gt;How hard to push the sprite in tenths of a pixel per frame per frame&lt;/param&gt;
   /// &lt;remarks&gt;Use this in combination with &lt;see cref="CheckNextCoordinate"/&gt; to make a
   /// sprite follow a series of coordinates in a path. This function is identical to
   /// &lt;see cref="PushSpriteTowardPoint"/&gt; except that it is designed only to operate on
   /// coordinates within the current plan (designated by coordinate index).&lt;/remarks&gt;
   /// &lt;example&gt;
   /// See &lt;see cref="StopSprite"/&gt; for an example.
   /// &lt;/example&gt;
   [Description("Alter the velocity of the specified sprite to go toward a coordinate associated with the current plan.  CoordinateIndex indicates which coordinate in the plan to head toward, and Force is how hard to push the sprite in tenths of a pixel per frame per frame")]
   public virtual void PushSpriteTowardCoordinate(SpriteBase Sprite, int CoordinateIndex, int Force)
   {
      PushSpriteTowardPoint(Sprite, this[CoordinateIndex], Force);
   }

   /// &lt;summary&gt;
   /// Alter the velocity of the specified sprite to go toward a specified location.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;The sprite whose velocity will be affected&lt;/param&gt;
   /// &lt;param name="Target"&gt;Specifies a point toward which the sprite will be pushed&lt;/param&gt;
   /// &lt;param name="Force"&gt;How hard to push the sprite in tenths of a pixel per frame per frame&lt;/param&gt;
   /// &lt;remarks&gt;This function is a more generalized form of &lt;see cref="PushSpriteTowardCoordinate"/&gt;.
   /// Rather than pushing a sprite toward a coordinate in the current plan, it can push it toward
   /// any location that can be represented as a point.&lt;/remarks&gt;
   /// &lt;example&gt;
   /// This example pushes the sprite toward the mouse location.
   /// &lt;code&gt;PushSpriteTowardPoint(m_ParentLayer.m_Plasma_1, ParentLayer.GetMousePosition(), 40);&lt;/code&gt;
   /// &lt;/example&gt;
   [Description("Alter the velocity of the specified sprite to go toward a specified location.  Force is how hard to push the sprite in tenths of a pixel per frame per frame")]
   public virtual void PushSpriteTowardPoint(SpriteBase Sprite, Point Target, int Force)
   {
      double dx = Target.X - Sprite.PixelX;
      double dy = Target.Y - Sprite.PixelY;

      // Normalize target vector to magnitude of Force parameter
      double dist = Math.Sqrt(dx * dx + dy * dy);
      if (dist &gt; 0)
      {
         dx = dx * Force / dist / 10;
         dy = dy * Force / dist / 10;

         // Push sprite
         Sprite.dx += dx;
         Sprite.dy += dy;
      }
   }

   /// &lt;summary&gt;
   /// Make a sprite move toward the next coordinate in the plan when appropriate.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite that is following coordinates in this plan&lt;/param&gt;
   /// &lt;param name="CoordinateIndex"&gt;Zero-based index of the coordinate within the plan toward which the sprite is currently heading.&lt;/param&gt;
   /// &lt;param name="WaitCounter"&gt;A variable that is used to count frames while this sprite is waiting at a coordinate for a time period specified by the coordinate's &lt;see cref="Coordinate.weight"/&gt; to elapse.&lt;/param&gt;
   /// &lt;returns&gt;The index of the coordinate toward which the sprite should be heading.&lt;/returns&gt;
   /// &lt;remarks&gt;&lt;para&gt;This function determines if the sprite should head toward the next coordinate by
   /// checking if the sprite is within this plan's &lt;see cref="TargetDistance"/&gt; of the specified
   /// coordinate. If it is, then it checks the coordinate's &lt;see cref="Coordinate.weight"/&gt;,
   /// to see if the sprite is supposed to wait at this coordinate.  If it's not supposed to wait,
   /// the function returns the next coordinate index right away. If it is supposed to wait,
   /// the function will only return the next coordinate index if the sprite has waited the
   /// specified number of frames at the current coordinate.&lt;/para&gt;
   /// &lt;para&gt;Normally two sprite parameters are used in conjunction with a sprite that follows
   /// a series of coordinates in a plan, and they are both passed into this function. One
   /// parameter tracks the index of the coordinate toward which the the sprite is currently
   /// heading. The other tracks how long the sprite has waited at the current coordinate.
   /// The coordinate parameter is passed in as the the input for &lt;paramref name="CoordinateIndex"/&gt;
   /// and also specified to receive the output of the function. The wait counter is passed for
   /// the last parameter and is automatically updated when needed because it is passed by reference.
   /// &lt;/para&gt;&lt;seealso cref="PushSpriteTowardCoordinate"/&gt;&lt;/remarks&gt;
   /// &lt;example&gt;
   /// This example demonstrates the common usage of this function on a sprite named "Plasma 1".
   /// &lt;code&gt;m_ParentLayer.m_Plasma_1.CoordIndex = CheckNextCoordinate(m_ParentLayer.m_Plasma_1, m_ParentLayer.m_Plasma_1.CoordIndex, ref m_ParentLayer.m_Plasma_1.WaitCounter);&lt;/code&gt;
   /// For a more complete example, see &lt;see cref="StopSprite"/&gt;.
   /// &lt;/example&gt;
   [Description("Determine whether the sprite is within the TargetDistance of the specified coordinate, and has waited for the number of frames determined by the coordinate's weight based on the specified WaitCounter after reaching it.  If so, return the next CoordinateIndex, otherwise return the current CoordinateIndex.")]
   public virtual int CheckNextCoordinate(SpriteBase Sprite, int CoordinateIndex, ref int WaitCounter)
   {
      if (WaitCounter &gt; 0)
      {
         if (++WaitCounter &gt; this[CoordinateIndex].weight)
         {
            WaitCounter = 0;
            return (CoordinateIndex + 1) % Count;
         }
         else
            return CoordinateIndex;
      }
      int dx = this[CoordinateIndex].x - Sprite.PixelX;
      int dy = this[CoordinateIndex].y - Sprite.PixelY;
      if (Math.Sqrt(dx * dx + dy * dy) &lt;= TargetDistance)
      {
         if (this[CoordinateIndex].weight &gt; 0)
            WaitCounter++;
         else
            return (CoordinateIndex + 1) % Count;
      }
      return CoordinateIndex;
   }

   /// &lt;summary&gt;
   /// Cause the specified sprite to follow the coordinates in this plan as a path.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite that will follow this plan's path.&lt;/param&gt;
   /// &lt;param name="CoordinateIndex"&gt;0-based index of the coordinate in this plan toward which the sprite is currently heading.  This is usually a parameter of the sprite.&lt;/param&gt;
   /// &lt;param name="WaitCounter"&gt;Counter that tracks how long a sprite has waited at a particular coordinage. This is usualyl a parameter of the sprite.&lt;/param&gt;
   /// &lt;remarks&gt;This function combines a number of other path-following rule functions into a single
   /// simple function that you can use to make a sprite follow a path with just a single rule.
   /// The following rule functions are combined within this function:
   /// &lt;see cref="IsSpriteActive"/&gt;,
   /// &lt;see cref="PushSpriteTowardCoordinate"/&gt;,
   /// &lt;see cref="StopSprite"/&gt;
   /// &lt;see cref="CheckNextCoordinate"/&gt;,
   /// &lt;note type="caution"&gt;When using this function to follow a path, the sprite definition
   /// itself is responsible for limiting the speed (see &lt;see cref="SpriteBase.LimitVelocity"/&gt;) and
   /// performing the actual movement (see &lt;see cref="SpriteBase.MoveByVelocity"/&gt;).&lt;/note&gt;
   /// &lt;/remarks&gt;
   [Description("Cause the specified sprite to follow the coordinates in this plan as a path, provided some parameters where the current point index and wait counter can be stored.")]
   public virtual void FollowPath(SpriteBase Sprite, ref int CoordinateIndex, ref int WaitCounter)
   {
      if (Sprite.isActive)
      {
         if (WaitCounter == 0)
            PushSpriteTowardCoordinate(Sprite, CoordinateIndex, 10);
         else
            StopSprite(Sprite);
         CoordinateIndex = CheckNextCoordinate(Sprite, CoordinateIndex, ref WaitCounter);
      }
   }

   /// &lt;summary&gt;
   /// Stops the sprite's current motion
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite to be stopped&lt;/param&gt;
   /// &lt;remarks&gt;This stops the current sprite from moving by setting its
   /// &lt;see cref="SpriteBase.dx"/&gt; and &lt;see cref="SpriteBase.dy"/&gt; values
   /// to zero. This may be desired when a sprite reaches a coordinate in
   /// a path where it's supposed to wait, otherwise the sprite may continue
   /// to drift while it waits. One easy way to determine when a sprite is
   /// waiting at a coordinate is to check if the sprite's wait counter parameter
   /// is zero. The wait counter will only be non-zero when the sprite is waiting.
   /// &lt;seealso cref="CheckNextCoordinate"/&gt;
   /// &lt;/remarks&gt;
   /// &lt;example&gt;
   /// The following example shows the code used for a sprite named "Plasma 1" that
   /// follows a path and stops and waits at coordinates that have a non-zero weight.
   /// &lt;code lang="C#"&gt;
   /// // If active
   /// if (&lt;see cref="IsSpriteActive"/&gt;(m_ParentLayer.m_Plasma_1))
   /// {
   ///    // If not waiting
   ///    if ((m_ParentLayer.m_Plasma_1.WaitCounter == 0))
   ///    {
   ///       // Move sprite towards coordinate
   ///       &lt;see cref="PushSpriteTowardCoordinate"/&gt;(m_ParentLayer.m_Plasma_1, m_ParentLayer.m_Plasma_1.CoordIndex, 40);
   ///    }
   ///    else
   ///    {
   ///       // Else stop sprite
   ///       &lt;see cref="StopSprite"/&gt;(m_ParentLayer.m_Plasma_1);
   ///    }
   ///    // Move to next coordinate
   ///   m_ParentLayer.m_Plasma_1.CoordIndex = &lt;see cref="CheckNextCoordinate"/&gt;(m_ParentLayer.m_Plasma_1, m_ParentLayer.m_Plasma_1.CoordIndex, ref m_ParentLayer.m_Plasma_1.WaitCounter);
   /// }
   /// &lt;/code&gt;
   /// &lt;/example&gt;
   [Description("Set the velocity of the specified sprite to zero")]
   public virtual void StopSprite(SpriteBase Sprite)
   {
      Sprite.dx = Sprite.dy = 0;
   }

   /// &lt;summary&gt;
   /// Determines whether the solidity rectangle of the specified sprite overlaps that
   /// of any sprite in the specified category.
   /// &lt;/summary&gt;
   /// &lt;param name="SourceSprite"&gt;A sprite that will be checked for collisions&lt;/param&gt;
   /// &lt;param name="Targets"&gt;A category of sprites against which collisions will be tested&lt;/param&gt;
   /// &lt;returns&gt;The 0-based index of the sprite within &lt;paramref name="Targets"/&gt; if a collision is occurring, otherwise -1.&lt;/returns&gt;
   /// &lt;remarks&gt;This can be used to force a simple rectangular collision test even if one or both
   /// sprites involved have a Mask Alpha level greater than 0.  This method is recommended
   /// for improved performance when pixel-perfect collision detection is not required.
   /// &lt;seealso cref="TestCollisionMask"/&gt;&lt;/remarks&gt;
   [Description("Determine whether the solidity rectangle of the specified sprite overlaps that of any sprite in the specified category. Return the index of the sprite within the category if a collision is occurring, otherwise return -1.")]
   public virtual int TestCollisionRect(SpriteBase SourceSprite, SpriteCollection Targets)
   {
      return SourceSprite.TestCollisionRect(Targets);
   }

   /// &lt;summary&gt;
   /// Determines if the specified sprite instace is active.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite instance to test&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite is active, false otherwise.&lt;/returns&gt;
   /// &lt;remarks&gt;The main differences between an active sprite and an inactive
   /// sprite are than only active sprites are drawn when they are in the visible
   /// part of the map, and only active sprites' rules are processed. Using
   /// IsSpriteActive is a good way to determine if a sprite is currently valid
   /// for use because inactive sprites should not have any functions running on
   /// them except to activate them. Most functions will trigger an error message
   /// in debug mode if they find that they are operating on an inactive sprite.
   /// &lt;/remarks&gt;
   /// &lt;example&gt;See &lt;see cref="StopSprite"/&gt; for an example of
   /// IsSpriteActive.&lt;/example&gt;
   [Description("Determines if the specified sprite instace is active.")]
   public virtual bool IsSpriteActive(SpriteBase Sprite)
   {
      return Sprite.isActive;
   }


   /// &lt;summary&gt;
   /// Moves the specified sprite to the specified plan's rectangle, aligned to the specified corner/edge.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite to be moved&lt;/param&gt;
   /// &lt;param name="Plan"&gt;Specifies a target location&lt;/param&gt;
   /// &lt;param name="Alignment"&gt;Specifies how the sprite's solidity rectangle will be aligned with the target plan's rectangle&lt;/param&gt;
   /// &lt;remarks&gt;The specified &lt;paramref name="Plan"/&gt; must be a 2-point plan (specifying a rectangle)
   /// or the function will ignore the request (and display an error in debug mode).
   /// The sprite will be aligned inside the rectangle according to &lt;paramref name="Alignment"/&gt;,
   /// so, for example, if RelativePosition.RightMiddle is specified, the midpoint of the
   /// right side of the sprite's solidity rectangle will be aligned to the midpoint of the
   /// right side of the plan's rectangle.&lt;/remarks&gt;
   [Description("Moves the specified sprite to the specified plan's rectangle, aligned to the specified corner/edge.")]
   public virtual void TransportToPlan(SpriteBase Sprite, PlanBase Plan, RelativePosition Alignment)
   {
      System.Diagnostics.Debug.Assert(!Plan.PlanRectangle.IsEmpty, "TransportToPlan was called on a plan that does not have a rectangle defined.");
      if (Plan.PlanRectangle.IsEmpty)
         return;
      switch(Alignment)
      {
         case RelativePosition.TopLeft:
         case RelativePosition.TopCenter:
         case RelativePosition.TopRight:
            Sprite.y = Plan.PlanRectangle.Y;
            break;
         case RelativePosition.LeftMiddle:
         case RelativePosition.CenterMiddle:
         case RelativePosition.RightMiddle:
            Sprite.y = Plan.PlanRectangle.Y + (int)((Plan.PlanRectangle.Height - Sprite.SolidHeight)/2);
            break;
         default:
            Sprite.y = Plan.PlanRectangle.Y + Plan.PlanRectangle.Height - Sprite.SolidHeight;
            break;
      }
      switch(Alignment)
      {
         case RelativePosition.TopLeft:
         case RelativePosition.LeftMiddle:
         case RelativePosition.BottomLeft:
            Sprite.x = Plan.PlanRectangle.X;
            break;
         case RelativePosition.TopCenter:
         case RelativePosition.CenterMiddle:
         case RelativePosition.BottomCenter:
            Sprite.x = Plan.PlanRectangle.X + (int)((Plan.PlanRectangle.Width - Sprite.SolidWidth)/2);
            break;
         default:
            Sprite.x = Plan.PlanRectangle.X + Plan.PlanRectangle.Width - Sprite.SolidWidth;
            break;
      }
   }
   
   /// &lt;summary&gt;
   /// Associate the state of the input device for the specified player with the inputs on the specified sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="PlayerNumber"&gt;A number from 1 to &lt;see cref="Project.MaxPlayers"/&gt; indicating which
   /// player's input settings to use.&lt;/param&gt;
   /// &lt;param name="Target"&gt;Specifies which sprite the player should control&lt;/param&gt;
   /// &lt;remarks&gt;This is the basic means by which the input device, as customized for a
   /// particular player, is associated with a sprite, so that the input will control
   /// the sprite for that player. In many cases, it may be easier to use the sprite
   /// definition's version of &lt;see cref="SpriteBase.MapPlayerToInputs"/&gt; so that this
   /// doesn't have to be repeated on every map, however in a multi-player game, it may be
   /// easier or necessary to distinguish the individual players on each map if each player
   /// uses the same sprite definition.&lt;/remarks&gt;
   [Description("Associate the state of the input device for the specified player (1-4) with the inputs on the specified sprite.")]
   public virtual void MapPlayerToInputs(int PlayerNumber, SpriteBase Target)
   {
      Target.MapPlayerToInputs(PlayerNumber);
   }

   #endregion

   /// &lt;summary&gt;
   /// Retrieves a list of coordinates contained in this plan
   /// &lt;/summary&gt;
   protected virtual Coordinate[] Coordinates
   {
      get
      {
         return null;
      }
   }

   /// &lt;summary&gt;
   /// Retrieves the coordinate specified by a 0-based index for this plan
   /// &lt;/summary&gt;
   /// &lt;example&gt;
   /// The following code shows how you might limit the value of a coordinate so that
   /// it doesn't exceed the value of the weight assigned to the first coordinate in
   /// a plan. This indexer property ("this[]") is used to access the coordinates.
   ///&lt;code&gt;if (Counter.AnimationCounter.CurrentValue &gt; this[0].weight)
   ///   Counter.AnimationCounter.CurrentValue = this[0].weight;&lt;/code&gt;
   ///&lt;/example&gt;
   public virtual Coordinate this[int index]
   {
      get
      {
         return Coordinates[index];
      }
   }

   /// &lt;summary&gt;
   /// Retrieves the number of coordinates that this plan contains
   /// &lt;/summary&gt;
   public virtual int Count
   {
      get
      {
         if (Coordinates == null)
            return 0;
         return Coordinates.Length;
      }
   }

   /// &lt;summary&gt;
   /// Executes this plan's rules if any exist.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;An error is raised if no rules exist on this plan.&lt;/remarks&gt;
   public virtual void ExecuteRulesInternal()
   {
      throw new NotImplementedException("Attempted to execute rules on plan " + this.GetType().Name + " without any rules");
   }

   /// &lt;summary&gt;
   /// Allows customization of the way &lt;see cref="ExecuteRulesInternal"/&gt; is called.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The default implementation simply calls ExecuteRulesInternal,
   /// but a partial class of the derived class may override this behavior,
   /// calling ExecuteRulesInternal conditionally.&lt;/remarks&gt;
   public virtual void ExecuteRules() { ExecuteRulesInternal(); }

   /// &lt;summary&gt;
   /// Specifies one of the 4 color channels: alpha, red, green or blue.
   /// &lt;/summary&gt;
   public enum ColorChannel
   {
      Blue,
      Green,
      Red,
      Alpha
   }
  
   #region Inventory / Overlay
   /// &lt;summary&gt;
   /// Specifies a drawing style for inventory/status-type bars drawn with &lt;see cref="DrawCounterAsTile"/&gt;.
   /// &lt;/summary&gt;
   public enum DrawStyle
   {
      /// &lt;summary&gt;
      /// The specified tile is drawn stretched to fill the width of plan, and the right side
      /// is cropped according to the counter value.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches the maximum, the full tile is drawn, otherwise
      /// the clipping size is scaled according to the ratio of the counter's current value to
      /// its maximum value. The tile image is only stretched horizontally. The vertical size
      /// remains at the tile's original height.&lt;/remarks&gt;
      ClipRightToCounter,
      /// &lt;summary&gt;
      /// The specified tile is drawn stretched rightward according to the counter value.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches its maximum, the tile will fill the plan rectangle's width.
      /// Otherwise the image is scaled down horizontally to fill the left portion of the plan
      /// rectangle as determined by the ratio of the counter's current value to its
      /// maximum value.&lt;/remarks&gt;
      StretchRightToCounter,
      /// &lt;summary&gt;
      /// The specified tile is draw unscaled from left to right, repeated according
      /// to the counter value and plan size.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches its maximum, the tile will be repeated from the
      /// plan's left side to its right side, as many whole copies as can fit in the plan
      /// rectangle.  Otherwise, the number of copies of the tile that are drawn is based
      /// on the counter value and the maximum number than can be drawn in the plan rectangle.
      /// The result is rounded to a whole number (partial tiles are not drawn). Because of
      /// the way this style works, you will probably want to make sure the number of copies
      /// of the tile that can fit in the plan rectangle exactly matches the counter's maximum
      /// value.&lt;/remarks&gt;
      RepeatRightToCounter,
      /// &lt;summary&gt;
      /// The specified tile is drawn stretched to fill the height of the plan, and the top is
      /// cropped according to the counter value.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches the maximum, the full tile is drawn, otherwise
      /// the clipping size is scaled according to the ratio of the counter's current value to
      /// its maximum value. The tile image is only stretched vertically. The horizontal size
      /// remains at the tile's original width.&lt;/remarks&gt;
      ClipTopToCounter,
      /// &lt;summary&gt;
      /// The specified tile is drawn stretched upward from the bottom of the plan according
      /// to the counter value.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches its maximum, the tile will fill the plan rectangle's height.
      /// Otherwise the image is scaled down vertically to fill the bottom portion of the plan
      /// rectangle as determined by the ratio of the counter's current value to its
      /// maximum value.&lt;/remarks&gt;
      StretchTopToCounter,
      /// &lt;summary&gt;
      /// The specified tile is draw unscaled from bottom to top, repeated according
      /// to the counter value and plan size.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches its maximum, the tile will be repeated from the
      /// plan's bottom to its top, as many whole copies as can fit in the plan rectangle.
      /// Otherwise, the number of copies of the tile that are drawn is based on the counter
      /// value and the maximum number than can be drawn in the plan rectangle.
      /// The result is rounded to a whole number (partial tiles are not drawn). Because of
      /// the way this style works, you will probably want to make sure the number of copies
      /// of the tile that can fit in the plan rectangle exactly matches the counter's maximum
      /// value.&lt;/remarks&gt;
      RepeatUpToCounter
   }

   /// &lt;summary&gt;
   /// Draw the value of a counter as a bar filled with a tile's image.
   /// &lt;/summary&gt;
   /// &lt;param name="TileIndex"&gt;Specifies the index of a tile from this plan's layer&lt;/param&gt;
   /// &lt;param name="counter"&gt;Specifies which counter's value is being drawn&lt;/param&gt;
   /// &lt;param name="style"&gt;Specifies a style with which the tile will fill the bar&lt;/param&gt;
   /// &lt;remarks&gt;The size of the plan determines the maximum proportions of the bar.
   /// The counter value determines the drawn/current size of the bar.
   /// See &lt;see cref="DrawStyle"/&gt; for details about the different ways in which the bar
   /// can be filled.&lt;/remarks&gt;
   [Description("Draw the specified tile from the layer's tileset in this plan's rectangle according to the specified counter value")]
   public virtual void DrawCounterAsTile(int TileIndex, Counter counter, DrawStyle style)
   {
      System.Diagnostics.Debug.Assert(!PlanRectangle.IsEmpty, "DrawCounterAsTile was called on a plan that does not have a rectangle defined");
      if (PlanRectangle.IsEmpty)
         return;
      if (counter.CurrentValue == 0)
         return;
      MapBase map = ParentLayer.ParentMap;
      Display disp = map.Display;
      Tileset ts = ParentLayer.Tileset;
      Frameset fr = ts.GetFrameset(ParentLayer.ParentMap.Display);
      Rectangle CurrentView = ParentLayer.ParentMap.CurrentView;

      int lastColor = 0;

      switch(style)
      {
         case DrawStyle.ClipRightToCounter:
            disp.Scissor(new Rectangle(
               PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
               PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y,
               PlanRectangle.Width * counter.CurrentValue / counter.MaxValue,
               PlanRectangle.Height));
            if ((corners == null) &amp;&amp; (ts[TileIndex].CurrentFrame.Length &gt; 0))
               corners = new PointF[fr[0].Corners.Length];
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               for (int i = 0; i &lt; corners.Length; i++)
               {
                  corners[i].X = fr[frameIndex].Corners[i].X * PlanRectangle.Width / ts.TileWidth;
                  corners[i].Y = fr[frameIndex].Corners[i].Y;
               }

               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               disp.DrawFrame(fr[frameIndex].GraphicSheetTexture,
                  fr[frameIndex].SourceRect, corners,
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y);
            }
            break;
         case DrawStyle.StretchRightToCounter:
            disp.ScissorOff();
            if ((corners == null) &amp;&amp; (ts[TileIndex].CurrentFrame.Length &gt; 0))
               corners = new PointF[fr[0].Corners.Length];
            foreach (int frameIndex in ts[TileIndex].CurrentFrame)
            {
               for (int i = 0; i &lt; corners.Length; i++)
               {
                  corners[i].X = fr[frameIndex].Corners[i].X * PlanRectangle.Width * counter.CurrentValue / counter.MaxValue / ts.TileWidth;
                  corners[i].Y = fr[frameIndex].Corners[i].Y;
               }

               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               disp.DrawFrame(fr[frameIndex].GraphicSheetTexture,
                  fr[frameIndex].SourceRect, corners,
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y);
            }
            break;
         case DrawStyle.RepeatRightToCounter:
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               int FillWidth = PlanRectangle.Width * counter.CurrentValue / counter.MaxValue;
               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               for (int repeat = 0; repeat &lt; (int)Math.Ceiling(FillWidth / (float)ts.TileWidth); repeat++)
               {
                  disp.DrawFrame(fr[frameIndex].GraphicSheetTexture,
                     fr[frameIndex].SourceRect, fr[frameIndex].Corners,
                     PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X + repeat * ts.TileWidth,
                     PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y);
               }
            }
            break;
         case DrawStyle.ClipTopToCounter:
         {
            int FillHeight = PlanRectangle.Height * counter.CurrentValue / counter.MaxValue;
            if ((corners == null) &amp;&amp; (ts[TileIndex].CurrentFrame.Length &gt; 0))
               corners = new PointF[fr[0].Corners.Length];
            disp.Scissor(new Rectangle(
               PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
               PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y +
               PlanRectangle.Height - FillHeight, PlanRectangle.Width, FillHeight));
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               for (int i = 0; i &lt; corners.Length; i++)
               {
                  corners[i].X = fr[frameIndex].Corners[i].X;
                  corners[i].Y = fr[frameIndex].Corners[i].Y * PlanRectangle.Height / ts.TileHeight;
               }
               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               disp.DrawFrame(fr[frameIndex].GraphicSheetTexture,
                  fr[frameIndex].SourceRect, corners,
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y);
            }
         }
            break;
         case DrawStyle.StretchTopToCounter:
         {
            disp.ScissorOff();
            int FillHeight = PlanRectangle.Height * counter.CurrentValue / counter.MaxValue;
            if ((corners == null) &amp;&amp; (ts[TileIndex].CurrentFrame.Length &gt; 0))
               corners = new PointF[fr[0].Corners.Length];
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               for (int i = 0; i &lt; corners.Length; i++)
               {
                  corners[i].X = fr[frameIndex].Corners[i].X;
                  corners[i].Y = fr[frameIndex].Corners[i].Y * FillHeight / ts.TileHeight;
               }

               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               disp.DrawFrame(fr[frameIndex].GraphicSheetTexture,
                  fr[frameIndex].SourceRect, corners,
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y + PlanRectangle.Height - FillHeight);
            }
         }
            break;
         case DrawStyle.RepeatUpToCounter:
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               int FillHeight = PlanRectangle.Height * counter.CurrentValue / counter.MaxValue;
               disp.ScissorOff();
               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               for (int repeat = 0; repeat &lt; (int)Math.Ceiling(FillHeight / (float)ts.TileHeight); repeat++)
               {
                  disp.DrawFrame(fr[frameIndex].GraphicSheetTexture, fr[frameIndex].SourceRect, fr[frameIndex].Corners,
                     PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                     PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y + PlanRectangle.Height - repeat * ts.TileHeight - ts.TileHeight);
               }
            }
            break;
      }
      disp.Flush();
   }

   /// &lt;summary&gt;
   /// Display a counter value as a number with a label in the current plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="Label"&gt;String containing the text of the label&lt;/param&gt;
   /// &lt;param name="counter"&gt;Counter whose value will be displayed&lt;/param&gt;
   /// &lt;param name="color"&gt;Color of the label and quantity text&lt;/param&gt;
   /// &lt;remarks&gt;The label and quantity are merged into a single string of
   /// text and drawn at the top left corner of the plan's rectangle.&lt;/remarks&gt;
   [Description("Display a counter value as a number with a label in the current plan's rectangle")]
   public virtual void DrawCounterWithLabel(string Label, Counter counter, System.Drawing.KnownColor color)
   {
      System.Diagnostics.Debug.Assert(!PlanRectangle.IsEmpty, "DrawCounterAsTile was called on a plan that does not have a rectangle defined");
      if (PlanRectangle.IsEmpty)
         return;
      
      Display disp = ParentLayer.ParentMap.Display;
      disp.ScissorOff();
      disp.SetColor(Color.FromKnownColor(color));
      disp.DrawText(Label.ToString() + counter.CurrentValue.ToString(), PlanRectangle.Left, PlanRectangle.Top);
      disp.Flush();
   }
   #endregion

   protected virtual void CopyTiles(PlanBase Source, PlanBase Target, RelativePosition RelativePosition)
   {
      int src_left = (int)(Source.PlanRectangle.X / Source.ParentLayer.Tileset.TileWidth);
      int src_top = (int)(Source.PlanRectangle.Y / Source.ParentLayer.Tileset.TileHeight);
      int src_right = (int)((Source.PlanRectangle.X + Source.PlanRectangle.Width - 1) / Source.ParentLayer.Tileset.TileWidth);
      int src_bottom = (int)((Source.PlanRectangle.Y + Source.PlanRectangle.Height - 1) / Source.ParentLayer.Tileset.TileHeight);

      int dst_left = (int)(Target.PlanRectangle.X / Target.ParentLayer.Tileset.TileWidth);
      int dst_top = (int)(Target.PlanRectangle.Y / Target.ParentLayer.Tileset.TileHeight);
      int dst_right = (int)((Target.PlanRectangle.X + Target.PlanRectangle.Width - 1) / Target.ParentLayer.Tileset.TileWidth);
      int dst_bottom = (int)((Target.PlanRectangle.Y + Target.PlanRectangle.Height - 1) / Target.ParentLayer.Tileset.TileHeight);

      for (int y = src_top; y &lt;= src_bottom; y++)
      {
         int targety;
         switch(RelativePosition)
         {
            case RelativePosition.TopLeft:
            case RelativePosition.TopCenter:
            case RelativePosition.TopRight:
               targety = dst_top + y - src_top;
               break;
            case RelativePosition.LeftMiddle:
            case RelativePosition.CenterMiddle:
            case RelativePosition.RightMiddle:
               targety = y + (int)(dst_top + dst_bottom - src_top - src_bottom) / 2;
               break;
            default:
               targety = dst_bottom + y - src_bottom;
               break;
         }
         if (targety &lt; 0)
            continue;
         if (targety &gt;= Target.ParentLayer.VirtualRows)
            break;
         for (int x = src_left; x &lt;= src_right; x++)
         {
            int targetx;
            switch(RelativePosition)
            {
               case RelativePosition.TopLeft:
               case RelativePosition.LeftMiddle:
               case RelativePosition.BottomLeft:
                  targetx = dst_left + x - src_left;
                  break;
               case RelativePosition.TopCenter:
               case RelativePosition.CenterMiddle:
               case RelativePosition.BottomCenter:
                  targetx = x + (int)(dst_left + dst_right - src_left - src_right) / 2;
                  break;
               default:
                  targetx = dst_right + x - src_right;
                  break;
            }
            if (targetx &lt; 0)
               continue;
            if (targetx &gt;= Target.ParentLayer.VirtualColumns)
               break;
            
            Target.ParentLayer[targetx,targety] = Source.ParentLayer[x,y];
         }
      }
   }

   /// &lt;summary&gt;
   /// Copy tiles from this plan's rectangle to another plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies another plan specifying a location to which tiles will be copied&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;Specifies the alignment of the tiles in the target rectangle if
   /// this plan's rectangle is a different size&lt;/param&gt;
   /// &lt;remarks&gt;If the source rectangle is larger than the target rectangle, the copy
   /// locations will be aligned according to RelativePosition, and the copied tiles
   /// will be allowed to overflow the target rectangle.  For example, if the alignment
   /// is &lt;see cref="RelativePosition.RightMiddle"/&gt;, the right middle tile of the source
   /// rectangle will be copied into the right middle tile of the target rectangle, and
   /// build around there regardless of the target rectangle's size.&lt;/remarks&gt;
   [Description("Copy tiles from this plan's rectangle to another plan's rectangle.")]
   public virtual void CopyTo(PlanBase Target, RelativePosition RelativePosition)
   {
      CopyTiles(this, Target, RelativePosition);
   }

   /// &lt;summary&gt;
   /// Copy tiles from the specified plan's rectangle to this plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="Source"&gt;Specifies another plan specifying a location from which tiles will be copied&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;Specifies the alignment of the tiles in this plan's rectangle if
   /// the source plan's rectangle is a different size&lt;/param&gt;
   /// &lt;remarks&gt;If the source rectangle is larger than the target rectangle, the copy
   /// locations will be aligned according to RelativePosition, and the copied tiles
   /// will be allowed to overflow the target rectangle.  For example, if the alignment
   /// is &lt;see cref="RelativePosition.RightMiddle"/&gt;, the right middle tile of the source
   /// rectangle will be copied into the right middle tile of the target rectangle, and
   /// build around there regardless of the target rectangle's size.&lt;/remarks&gt;
   [Description("Copy tiles from the specified plan's rectangle to this plan's rectangle.")]
   public virtual void CopyFrom(PlanBase Source, RelativePosition RelativePosition)
   {
      CopyTiles(Source, this, RelativePosition);
   }

   /// &lt;summary&gt;
   /// Determines if the specified sprite's specified input is pressed.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite whose inputs will be examined&lt;/param&gt;
   /// &lt;param name="Input"&gt;Specifies which input will be examined&lt;/param&gt;
   /// &lt;param name="InitialOnly"&gt;When true only return true if the input has just been pressed and was not pressed before&lt;/param&gt;
   /// &lt;returns&gt;True if the input is pressed, false otherwise.&lt;/returns&gt;
   /// &lt;remarks&gt;The &lt;see cref="SpriteBase.IsInputPressed"/&gt; function for sprite definitions is
   /// more commonly used, but this allows you to test a specific sprite's inputs on a specific
   /// layer.&lt;/remarks&gt;
   [Description("Determine if the specified sprite's specified input is pressed.  InitialOnly causes this to return true only if the input has just been pressed and was not pressed before.")]
   public virtual bool IsInputPressed(SpriteBase Sprite, SpriteBase.InputBits Input, bool InitialOnly)
   {
      return Sprite.IsInputPressed(Input, InitialOnly);
   }

   /// &lt;summary&gt;
   /// Ensure that all the inputs currently being pressed on the specified sprite are henceforth processed as already pressed.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite whose inputs will be shifted.&lt;/param&gt;
   /// &lt;remarks&gt;This is usually handled by &lt;see cref="MapPlayerToInputs"/&gt;, but if you
   /// have customized the factors that affect the inputs, you may need to manually
   /// shift the current inputs into the old inputs to allow correct handling for
   /// "InitialOnly" parameters.&lt;/remarks&gt;
   [Description("Ensure that all the inputs currently being pressed on the specified sprite are henceforth processed as already pressed.")]
   public virtual void CopyInputsToOld(SpriteBase Sprite)
   {
      Sprite.oldinputs = Sprite.inputs;
   }

   /// &lt;summary&gt;
   /// Create a new (dynamic) instance of the specified sprite type at the first coordinate
   /// in this plan.
   /// &lt;/summary&gt;
   /// &lt;param name="SpriteDefinition"&gt;Specifies the type of sprite that will be created.&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;Specified a coordinate within the sprite that should be
   /// matched up with the first coordinate of the plan.&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;As opposed to &lt;see cref="ActivateSprite"/&gt;, which activates a pre-defined
   /// instance of a sprite, this function will actually create a new sprite instance on the
   /// fly (referred to as a "dynamic" sprite instance). Dynamic sprites cannot be referred
   /// to directly by other rules because they don't have names associated with them, therefore
   /// it's recommended that &lt;see cref="ActivateSprite"/&gt; be used when more control is
   /// desired. However, &lt;see cref="AddSpriteAtPlan"/&gt; doesn't require you to pre-define each
   /// possible instance.&lt;/para&gt;
   /// &lt;para&gt;Dynamic sprites are added to the end of each category that they belong to
   /// (categories are defined in terms of sprite definitions, so a dynamic sprite knows
   /// the categories in which it should participate). This happens as the sprite is created.
   /// When the sprite is deactivated, it will automatically be removed from all categories
   /// as part of &lt;see cref="LayerBase.ProcessSprites"/&gt;.&lt;/para&gt;
   /// &lt;para&gt;The maximum number of sprites that can be active on a layer at once is
   /// defined by &lt;see cref="SpriteCollection.maxCollectionSize"/&gt;. This includes static
   /// sprites as well as dynamic sprites. The purpose of this maximum is not a technical
   /// limitation (feel free to change the code in SpriteCollection.cs to increase the maximum
   /// all you like). It only exists to help developers realize when sprite instances are
   /// "leaking" (not being cleaned up or deactivated properly) or when more sprites than
   /// necessary are being created. In many cases, the engine can actually handle quite a
   /// bit more than 100 sprites without significant performance impact.&lt;/para&gt;
   /// &lt;para&gt;All parameters of a newly created sprite instance are always initialized
   /// to zero. Furthermore, new sprite instances will not refer to any solidity,
   /// and will begin in the first
   /// frame of the first state, but you can use rules to affect &lt;see cref="GeneralRules.lastCreatedSprite"/&gt;
   /// to set values of the new sprite, or define rules on the created sprite type to make it
   /// initialize itself appropriately.&lt;/para&gt;
   /// &lt;para&gt;If this plan has no coordinates, the sprite is created at the top left corner of
   /// the layer, and not adjusted according to &lt;paramref name="RelativePosition"/&gt;.
   /// &lt;/para&gt;&lt;seealso cref="SpriteBase.AddSpriteHere"/&gt;&lt;seealso cref="SpriteBase.TileAddSprite"/&gt;&lt;/remarks&gt;
   [Description("Add a new instance of the specified sprite type to this plan's layer such that the specified position within the sprite corresponds to the first coordinate in this plan")]
   public virtual void AddSpriteAtPlan([Editor("SpriteDefinition", "UITypeEditor")] System.Type SpriteDefinition, RelativePosition RelativePosition)
   {
      System.Reflection.ConstructorInfo constructor = SpriteDefinition.GetConstructor(new System.Type[]
      {
         typeof(LayerBase), typeof(double), typeof(double), typeof(double), typeof(double), typeof(int), typeof(int), typeof(bool), typeof(Display), typeof(Solidity), typeof(int), typeof(bool)
      });
      lastCreatedSprite = (SpriteBase)constructor.Invoke(new object[]
      {
         ParentLayer, 0, 0, 0, 0, 0, 0, true, ParentLayer.ParentMap.Display, null, -1, true
      });
      if (Count &gt; 0)
      {
         System.Drawing.Point offset = lastCreatedSprite.GetRelativePosition(RelativePosition);
         lastCreatedSprite.x = Coordinates[0].x - offset.X;
         lastCreatedSprite.y = Coordinates[0].y - offset.Y ;
      }
   }

   /// &lt;summary&gt;
   /// Move the specified sprite to the position of the mouse cursor and set the sprite's button inputs based on mouse button states.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies the sprite to be moved.&lt;/param&gt;
   /// &lt;param name="InstantMove"&gt;If true, the sprite will be moved immediately without regard to
   /// the existing position or solidity or anything else.  If false, the sprite's position will
   /// not be immediately changed, but its velocity will be set so that the sprite will end up at
   /// the mouse cursor's location after &lt;see cref="SpriteBase.MoveByVelocity"/&gt; executes. Note that moving
   /// the sprite instantly will ignore solidity and will not work well with sprites riding on
   /// this sprite, while allowing just the velocity to be set will allow this, but limit the
   /// sprite's movement based on solidity.&lt;/param&gt;
   /// &lt;param name="hotSpot"&gt;Which part of the sprite will move to the mouse point.&lt;/param&gt;
   /// &lt;remarks&gt;Before the button inputs are mapped from the mouse to the sprite,
   /// the existing inputs are copied from &lt;see cref="SpriteBase.inputs"/&gt; to &lt;see cref="SpriteBase.oldinputs"/&gt;
   /// so other rules will be able to determine which buttons were pressed before.
   /// &lt;/remarks&gt;
   [Description("Move the specified sprite to the position of the mouse cursor and set the sprite's button inputs based on mouse button states. If InstantMove is true, the sprite will be moved immediately, otherwise it the velocity will be set to move when MoveByVelocity runs.")]
   public virtual void MapMouseToSprite(SpriteBase Target, bool InstantMove, RelativePosition hotSpot)
   {
      Target.MapMouseToSprite(InstantMove, hotSpot);
   }


   /// &lt;summary&gt;
   /// If any sprite in the specified category is within the bounds of this plan or
   /// the Target plan, and is pressing the specified Trigger, transport it to the
   /// other plan.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies the plan representing the other end of this doorway&lt;/param&gt;
   /// &lt;param name="Sprites"&gt;Specifies a category of sprites that can activate this doorway&lt;/param&gt;
   /// &lt;param name="Trigger"&gt;Specifies which input bit on the sprite will cause the
   /// sprite to activate the doorway and be transported to the other end.&lt;/param&gt;
   /// &lt;returns&gt;If any sprites were transported, the index within the collection of the first
   /// sprite that was transported, otherwise -1&lt;/returns&gt;
   /// &lt;remarks&gt;This function handles both ends of a doorway and will allow a sprite to travel
   /// from this end to the Target plan or vice versa when the conditions are met. In order for
   /// the conditions to be met, the center of the sprite must be within the bounds of this
   /// plan rectangle or the Target plan rectangle, and (all) the specified Trigger input(s) must
   /// be on/pressed, and must not have been in the same state before (this prevents the sprite from
   /// flipping repeatedly between both ends of the doorway). If the conditions are met,
   /// the sprite will be transported such that the bottom center of the sprite will match up
   /// with the opposite plan rectangle's bottom center.&lt;/remarks&gt;
   [Description("If any sprite in the specified category is within the bounds of this plan or the Target plan, and is pressing the specified Trigger, transport it to the other plan.")]
   public virtual int Door(PlanBase Target, SpriteCollection Sprites, SpriteBase.InputBits Trigger)
   {
      int result = -1;
      for (int i=0; i&lt;Sprites.Count; i++)
      {
         if (Sprites[i].isActive)
         {
            PlanBase outDoor;
            if (IsSpriteWithin(Sprites[i], RelativePosition.CenterMiddle))
               outDoor = Target;
            else if (Target.IsSpriteWithin(Sprites[i], RelativePosition.CenterMiddle))
               outDoor = this;
            else
               continue;
            if (((Trigger &amp; Sprites[i].inputs) == Trigger) &amp;&amp;
               ((Sprites[i].inputs &amp; Trigger) != (Sprites[i].oldinputs &amp; Trigger)))
            {
               result = i;
               TransportToPlan(Sprites[i], outDoor, RelativePosition.BottomCenter);
            }
         }
      }
      return result;
   }

   #region IEnumerable Members

   /// &lt;summary&gt;
   /// Allows a the coordinates of a plan to be enumerated with a foreach loop.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;An object that enumerates this plan's coordinates.&lt;/returns&gt;
   public virtual System.Collections.IEnumerator GetEnumerator()
   {
      if (Coordinates == null)
         new System.Collections.ArrayList().GetEnumerator();
      return Coordinates.GetEnumerator();
   }

   #endregion
}</Text>
  </SourceCode>
  <SourceCode Name="GeneralRules.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.ComponentModel;
using System.Diagnostics;

/// &lt;summary&gt;
/// Implements rules common to sprites and plans
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class GeneralRules
{
   protected static SaveUnit saveUnit = null;
   protected static System.Collections.Hashtable memorySaveSlots = new System.Collections.Hashtable();
   protected static System.Random randomGen = new System.Random();
   protected static long fpsStartTime;
   protected static long fpsFrameCount;

   /// &lt;summary&gt;
   /// Contains the last sprite created with &lt;see cref="PlanBase.AddSpriteAtPlan"/&gt;,
   /// &lt;see cref="SpriteBase.TileAddSprite"/&gt; or &lt;see cref="SpriteBase.AddSpriteHere"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This reference can be used to initialize various properties of a sprite
   /// that was just created. It can't be used to set parameters on the sprite that are
   /// specific to that sprite type unless it is cast to the correct type (which is not
   /// supported in the interface for defining rules). That should be done from within
   /// the sprite's rules by checking for a specific parameter value (like "IsInitialized")
   /// being 0 or 1, for example.&lt;/remarks&gt;
   public static SpriteBase lastCreatedSprite;

   /// &lt;summary&gt;
   /// Retrieves the layer that contains this object.
   /// &lt;/summary&gt;
   public abstract LayerBase ParentLayer
   {
      get;
   }

   /// &lt;summary&gt;
   /// Limit the frame rate of the game to the specified number of frames per second.  Call this only once per frame.
   /// &lt;/summary&gt;
   /// &lt;param name="fps"&gt;Frames per second.&lt;/param&gt;
   /// &lt;remarks&gt;If this is called twice per frame, the effect would be to
   /// limit the frame rate to half the specified value, and more calls will
   /// make the game run even slower.&lt;/remarks&gt;
   [Description("Limit the frame rate of the game to the specified number of frames per second.  Call this only once per frame.")]
   public virtual void LimitFrameRate(int fps)
   {
      long freq;
      long frame;
      freq = System.Diagnostics.Stopwatch.Frequency;
      frame = System.Diagnostics.Stopwatch.GetTimestamp();
      while ((frame - fpsStartTime) * fps &lt; freq * fpsFrameCount)
      {
         int sleepTime = (int)((fpsStartTime * fps + freq * fpsFrameCount - frame * fps) * 1000 / (freq * fps));
         if (sleepTime &gt; 0) System.Threading.Thread.Sleep(sleepTime);
         frame = System.Diagnostics.Stopwatch.GetTimestamp();
      }
      if (++fpsFrameCount &gt; fps)
      {
         fpsFrameCount = 0;
         fpsStartTime = frame;
      }
   }


   /// &lt;summary&gt;
   /// Sets a different map as the one to be drawn on the game display.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies the map to switch to.&lt;/param&gt;
   /// &lt;param name="UnloadCurrent"&gt;If true, the current map will be unloaded first&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;&lt;paramref name="MapType"/&gt; specifies a type of map rather than a specific
   /// instance of a map.
   /// This accomplishes two things. First, it allows the function to switch to a map that hasn't
   /// been initialized/created yet, thus allowing the map instance to only be created when
   /// necessary, and not before switching to it. This can improve performance because an instance
   /// of each map doesn't have to be created during game initialization. Secondly, it allows maps
   /// to be unloaded so that maps instances that don't need to remember their state can be released,
   /// freeing up whatever memory they were occupying. Each map defined in the IDE is compiled/generated as its
   /// own class when the project is compiled, and each map instance becomes an instance of the
   /// class. This conceivably allows multiple instances of the same map to exist, but this is not
   /// fully supported by default in the code provided with this environment.&lt;/para&gt;
   /// &lt;para&gt;When &lt;paramref name="UnloadCurrent"/&gt; is true, the old map will be unloaded while
   /// switching to the new map, freeing up the memory used by the old map's sprites and tiles
   /// (if no other references to the map exist). Eliminating the map from memory also reduces the
   /// amount of data that would be written to a saved game file. Finally it causes the map to be
   /// recreated/reset when returning to it in the future. When &lt;paramref name="UnloadCurrent"/&gt;
   /// is false, the map is retained and re-used next time the game switches to the map, which
   /// means the state of all the tiles and sprites will be remembered as they were when switching
   /// away from the map.&lt;/para&gt;
   /// &lt;seealso cref="UnloadMap"/&gt;&lt;/remarks&gt;
   [Description("Sets a different map as the one to be drawn on the game display.  If UnloadCurrent is true, the current map will be unloaded first (which causes it to be recreated/reset when returning to it).")]
   public virtual void SwitchToMap([Editor("MapType", "UITypeEditor")] Type MapType, bool UnloadCurrent)
   {
      System.Type source = Project.GameWindow.CurrentMap.GetType();
      if (UnloadCurrent)
         Project.GameWindow.UnloadMap(source);
      (Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(MapType)).m_CameFromMapType = source;
   }

   /// &lt;summary&gt;
   /// Return to the map that was active before the last &lt;see cref="SwitchToMap"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="UnloadCurrent"&gt;If true, the current map will be unloaded first&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;Each map remembers where the game was before it became the current map.
   /// Calling this will return to that map, recreating it if it was unloaded. Since each
   /// map can only remember one previous map, you can't keep multiple instances of the same
   /// map in the history. For example, if you switch from a map called "Level1" to "Level2"
   /// then to "Level3" and then back to "Level2", you won't be able to return back to
   /// Level1 using ReturnToPreviousMap. Level2 would switch back to Level3 each time
   /// ReturnToPreviousMap is called.&lt;/para&gt;
   /// &lt;para&gt;If there is no previous map to return to, this function will have no effect.&lt;/para&gt;
   /// &lt;para&gt;See &lt;see cref="SwitchToMap"/&gt; for more information about unloading maps.&lt;/para&gt;&lt;/remarks&gt;
   [Description("Return to the map that was active before the last SwitchToMap.  If UnloadCurrent is true, the current map will be unloaded first (which causes it to be recreated/reset when returning to it).")]
   public virtual void ReturnToPreviousMap(bool UnloadCurrent)
   {
      System.Type source = Project.GameWindow.CurrentMap.m_CameFromMapType;
      if (source == null)
         source = Project.GameWindow.CurrentMap.GetType();
      if (UnloadCurrent)
         Project.GameWindow.UnloadMap(Project.GameWindow.CurrentMap.GetType());
      Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(source);
   }

   /// &lt;summary&gt;
   /// Determines if there is a previous map to return to.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;True if calling &lt;see cref="ReturnToPreviousMap"/&gt; will have any effect,
   /// false otherwise.&lt;/returns&gt;
   [Description("Determines if there is a previous map to return to.")]
   public virtual bool CanReturnToPreviousMap()
   {
      return Project.GameWindow.CurrentMap.m_CameFromMapType != null;
   }

   /// &lt;summary&gt;
   /// Unloads the specified map.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies the class of map whose instance will be unloaded if
   /// it is loaded.&lt;/param&gt;
   /// &lt;remarks&gt;Unloading a map will free up any memory used by its tiles and sprites if no other
   /// code is referencing it. It also excludes it from the saved game data if the game is saved,
   /// which can significantly reduce the size of a saved game file. Finally it causes the tiles
   /// and sprites to be recreated/reset next time the map is loaded (switched to).
   /// &lt;seealso cref="SwitchToMap"/&gt;
   /// &lt;seealso cref="ReturnToPreviousMap"/&gt;&lt;/remarks&gt;
   [Description("Unloads the specified map, which will force it to be recreated/reset next time it is used.")]
   public virtual void UnloadMap([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      Project.GameWindow.UnloadMap(MapType);
   }

   /// &lt;summary&gt;
   /// Includes a specified set of objects in the &lt;see cref="SaveUnit"/&gt; that will be saved with the next call to &lt;see cref="SaveGame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="Include"&gt;Specifies a category of objects that should be included&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;There are many functions that can be used to specify what elements should be
   /// included in a saved game file.  This function is designed for setting up a very rough
   /// outline of what kind of data will be included in the save file.
   /// After this is called, the selection can be fine tuned with further calls to
   /// related functions in the See Also list.  If nothing is included in the &lt;see cref="SaveUnit"/&gt;
   /// before &lt;see cref="SaveGame"/&gt; is called, everything will be included by default.
   /// See &lt;see cref="SaveUnitInclusion"/&gt; for details about the meaning of different categories.&lt;/para&gt;
   /// &lt;para&gt;By including maps in a &lt;see cref="SaveUnit"/&gt;, all the tiles and sprites are remembered exactly as they
   /// were when the game was saved, but only for those maps that are included.  Maps that aren't
   /// included will be reset to their initial state next time they become active after loading
   /// that game.&lt;/para&gt;
   /// &lt;para&gt;By including only counters (and not maps) in a &lt;see cref="SaveUnit"/&gt;, you can store some
   /// general information in a &lt;see cref="SaveUnit"/&gt; in a significantly smaller file, and use that information
   /// to re-initialize some general properties of the game. For example, the number of lives
   /// and inventory owned by the player (assuming inventory is stored in counters) might be
   /// adequate for some games (if you don't have to worry about items being available again
   /// on maps that have been reset to their initial state, or if you have few enough items that
   /// you can initialize them based on counter values).&lt;/para&gt;
   /// &lt;seealso cref="IncludeCounterInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeCounterFromSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeMapInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeMapFromSaveUnit"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;&lt;/remarks&gt;
   [Description("Includes a specified set of objects in the SaveUnit that will be saved with the next call to SaveGame")]
   public virtual void IncludeInSaveUnit(SaveUnitInclusion Include)
   {
      if (saveUnit == null)
         saveUnit = new SaveUnit();

      switch (Include)
      {
         case SaveUnitInclusion.AllMaps:
            saveUnit.Maps = Project.GameWindow.LoadedMaps;
            saveUnit.AllMaps = true;
            break;
         case SaveUnitInclusion.AllCounters:
            {
               saveUnit.Counters = new System.Collections.ArrayList();
               System.Reflection.PropertyInfo[] counterProps = typeof(Counter).GetProperties(
                  System.Reflection.BindingFlags.Public |
                  System.Reflection.BindingFlags.GetProperty |
                  System.Reflection.BindingFlags.Static);
               foreach (System.Reflection.PropertyInfo counterProp in counterProps)
                  saveUnit.Counters.Add(new CounterRef((Counter)counterProp.GetValue(null, null)));
            }
            break;
         case SaveUnitInclusion.WhichMapIsCurrent:
            saveUnit.CurrentMapType = Project.GameWindow.CurrentMap.GetType();
            break;
         case SaveUnitInclusion.WhichMapIsOverlaid:
            if (Project.GameWindow.OverlayMap == null)
               saveUnit.OverlayMapType = typeof(System.DBNull);
            else
               saveUnit.OverlayMapType = Project.GameWindow.OverlayMap.GetType();
            break;
         case SaveUnitInclusion.PlayerOptions:
            saveUnit.PlayerOptions = Project.GameWindow.Players;
            break;
      }
   }

   /// &lt;summary&gt;
   /// Include the specified counter in the &lt;see cref="SaveUnit"/&gt; that will be saved with the next call to &lt;see cref="SaveGame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="Counter"&gt;Specifies a counter whose value will be saved when &lt;see cref="SaveGame"/&gt;
   /// is called.&lt;/param&gt;
   /// &lt;remarks&gt;If you want to include only a few select counters in a &lt;see cref="SaveUnit"/&gt;,
   /// you can use this function to select them before calling &lt;see cref="SaveGame"/&gt;.
   /// See &lt;see cref="IncludeInSaveUnit"/&gt; for more information about save units.
   /// &lt;seealso cref="ExcludeCounterFromSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeMapInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeMapFromSaveUnit"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;&lt;/remarks&gt;
   [Description("Include the specified counter in the SaveUnit that will be saved with the next call to SaveGame")]
   public virtual void IncludeCounterInSaveUnit(Counter Counter)
   {
      if (saveUnit == null)
      {
         saveUnit = new SaveUnit();
      }
      if (saveUnit.Counters == null)
      {
         saveUnit.Counters = new System.Collections.ArrayList();
         saveUnit.Counters.Add(new CounterRef(Counter));
         return;
      }
      foreach (CounterRef cr in saveUnit.Counters)
      {
         if (cr.instance == Counter)
            return;
      }
      saveUnit.Counters.Add(Counter);
   }

   /// &lt;summary&gt;
   /// Exclude the specified counter from the &lt;see cref="SaveUnit"/&gt; that will be saved with the next call to &lt;see cref="SaveGame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="Counter"&gt;Specifies a counter to remove from the &lt;see cref="SaveUnit"/&gt;&lt;/param&gt;
   /// &lt;remarks&gt;If you want to save most counters, but exclude a few, you can call
   /// &lt;see cref="IncludeInSaveUnit"/&gt; to include all counters and then exclude a few
   /// with this function.
   /// See &lt;see cref="IncludeInSaveUnit"/&gt; for more information about save units.
   /// &lt;seealso cref="IncludeCounterInSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeMapInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeMapFromSaveUnit"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;&lt;/remarks&gt;
   [Description("Exclude the specified counter from the SaveUnit that will be saved with the next call to SaveGame")]
   public virtual void ExcludeCounterFromSaveUnit(Counter Counter)
   {
      if ((saveUnit == null) || (saveUnit.Counters == null))
         return;
      for (int i = 0; i &lt; saveUnit.Counters.Count; i++)
      {
         if (((CounterRef)(saveUnit.Counters[i])).instance == Counter)
         {
            saveUnit.Counters.RemoveAt(i);
            return;
         }
      }
   }

   /// &lt;summary&gt;
   /// Include the specified map in the &lt;see cref="SaveUnit"/&gt; that will be saved with the next call to &lt;see cref="SaveGame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies a map to include in the &lt;see cref="SaveUnit"/&gt;&lt;/param&gt;
   /// &lt;remarks&gt;If you only want to include a few maps in a &lt;see cref="SaveUnit"/&gt;, specify
   /// which maps to save with this function. Only loaded maps will be saved. If this function
   /// is called on a map type that refers to a map that is not loaded, it will be ignored, and
   /// the specified map type will still be reset next time it becomes active after loading
   /// the game.
   /// See &lt;see cref="IncludeInSaveUnit"/&gt; for more information about save units.
   /// &lt;seealso cref="IncludeCounterInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeCounterFromSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeMapFromSaveUnit"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;&lt;/remarks&gt;
   [Description("Include the specified map in the SaveUnit that will be saved with the next call to SaveGame.")]
   public virtual void IncludeMapInSaveUnit([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      if (Project.GameWindow.LoadedMaps.ContainsKey(MapType))
      {
         if (saveUnit == null)
            saveUnit = new SaveUnit();
         if (saveUnit.Maps == null)
            saveUnit.Maps = new System.Collections.Hashtable();
         saveUnit.Maps[MapType] = Project.GameWindow.LoadedMaps[MapType];
      }
   }

   /// &lt;summary&gt;
   /// Remove the specified map in from the &lt;see cref="SaveUnit"/&gt; that will be saved with the next call to &lt;see cref="SaveGame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies a map to exclude from the &lt;see cref="SaveUnit"/&gt;&lt;/param&gt;
   /// &lt;remarks&gt;
   /// If you want to save most maps, but not all, you can call &lt;see cref="IncludeInSaveUnit"/&gt;
   /// to include all maps, and then call this to exclude a few. Maps not included in the save
   /// unit (and maps that were not loaded when the game was saved, even if they are "included")
   /// will be reset next time they become active after loading that &lt;see cref="SaveUnit"/&gt;. Often times an
   /// overly map does not contain any important state information, so excluding an overlay map
   /// from a &lt;see cref="SaveUnit"/&gt; might be a good use of this function.
   /// See &lt;see cref="IncludeInSaveUnit"/&gt; for more information about save units.
   /// &lt;seealso cref="IncludeCounterInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeCounterFromSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeMapInSaveUnit"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;&lt;/remarks&gt;
   [Description("Remove the specified map in from the SaveUnit that will be saved with the next call to SaveGame.")]
   public virtual void ExcludeMapFromSaveUnit([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      if ((saveUnit == null) || (saveUnit.Maps == null))
         return;
      if (saveUnit.Maps.ContainsKey(MapType))
         saveUnit.Maps.Remove(MapType);
   }

   /// &lt;summary&gt;
   /// Save the current &lt;see cref="SaveUnit"/&gt; into the specified save slot.
   /// &lt;/summary&gt;
   /// &lt;param name="Slot"&gt;Specifies a number to uniquely identify this &lt;see cref="SaveUnit"/&gt;. If saved to a file, this number plue the ".sav" extension becomes the filename.&lt;/param&gt;
   /// &lt;param name="InMemory"&gt;If true, no file will be created; the current state of the game is stored in a "slot" in memory (and lost when the game exits). Otherwise the game data is saved to a file.&lt;/param&gt;
   /// &lt;remarks&gt;After saving the game, the &lt;see cref="SaveUnit"/&gt; is cleared so that any further inclusions
   /// will start from an empty set.  When the game is saved, the state of the maps and counters
   /// are saved in their current state rather than the state they were in when
   /// &lt;see cref="IncludeInSaveUnit"/&gt; and related functions were called. One exception to this
   /// rule is &lt;see cref="SaveUnitInclusion.WhichMapIsCurrent"/&gt;, which will store the map that
   /// was current when &lt;see cref="IncludeInSaveUnit"/&gt; was called rather than than when the
   /// game is actually saved (if these happen to be different). It's possible to save a game
   /// in a memory slot as well as a file slot. These are considered different slots and can
   /// store different save images even if they use the same number. Otherwise, if a game
   /// already exists in a particular slot, it is overwritten.
   /// &lt;seealso cref="IncludeInSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeCounterInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeCounterFromSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeMapInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeMapFromSaveUnit"/&gt;
   /// &lt;seealso cref="LoadGame"/&gt;
   /// &lt;seealso cref="DeleteSave"/&gt;
   /// &lt;/remarks&gt;
   [Description("Save the current save unit into the specified save slot, and reset the save unit. If InMemory is true, no file will be created, otherwise the game is saved to a file.")]
   public virtual void SaveGame(int Slot, bool InMemory)
   {
      System.IO.Stream stm;
      if (InMemory)
         stm = new System.IO.MemoryStream();
      else
         stm = new System.IO.FileStream(System.IO.Path.Combine(
            System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"),
            System.IO.FileMode.Create, System.IO.FileAccess.Write);
      using (stm)
      {
         if (saveUnit == null)
         {
            IncludeInSaveUnit(SaveUnitInclusion.AllMaps);
            IncludeInSaveUnit(SaveUnitInclusion.AllCounters);
            IncludeInSaveUnit(SaveUnitInclusion.WhichMapIsCurrent);
            IncludeInSaveUnit(SaveUnitInclusion.WhichMapIsOverlaid);
            IncludeInSaveUnit(SaveUnitInclusion.PlayerOptions);
         }
         System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
         bf.Serialize(stm, saveUnit);
         if (InMemory)
            memorySaveSlots[Slot] = ((System.IO.MemoryStream)stm).ToArray();
         saveUnit = null;
      }
   }

   /// &lt;summary&gt;
   /// Restore the state of the objects contained in the specified save slot.
   /// &lt;/summary&gt;
   /// &lt;param name="Slot"&gt;Specifies a number that uniquely identifies which game to load&lt;/param&gt;
   /// &lt;param name="InMemory"&gt;If true, the memory slot is used, otherwise the file associated with the slot is loaded&lt;/param&gt;
   /// &lt;remarks&gt;
   /// If there is no data in the specified slot, an error occurs. Use &lt;see cref="SaveExists"/&gt;
   /// to determine if data is available to load from a particular slot.
   /// Counters that were not included in the &lt;see cref="SaveUnit"/&gt; will retain the same value they
   /// had before the game was loaded. Similarly, maps that are not included in the save
   /// unit will retain the same state they had before the game was loaded instead of
   /// being reset or loaded from the file. One exception is if
   /// &lt;see cref="SaveUnitInclusion.AllMaps"/&gt; was ever included in the &lt;see cref="SaveUnit"/&gt; (even
   /// if some maps were later excluded). In this case, all maps that were not included
   /// in the &lt;see cref="SaveUnit"/&gt; will be reset next time they are visited.
   /// &lt;seealso cref="SaveGame"/&gt;
   /// &lt;seealso cref="SaveExists"/&gt;
   /// &lt;seealso cref="DeleteSave"/&gt;
   /// &lt;/remarks&gt;
   [Description("Restore the state of the objects contained in the specified save slot. If InMemory is true, the memory slot is used, otherwise the file associated with the slot is loaded.")]
   public virtual void LoadGame(int Slot, bool InMemory)
   {
      System.IO.Stream stm;

      if (InMemory)
         stm = new System.IO.MemoryStream((byte[])memorySaveSlots[Slot], false);
      else
         stm = new System.IO.FileStream(System.IO.Path.Combine(
            System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"),
            System.IO.FileMode.Open, System.IO.FileAccess.Read);

      using (stm)
      {
         System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
         SaveUnit unit = (SaveUnit)bf.Deserialize(stm);
         if (unit.Maps != null)
         {
            if (unit.AllMaps)
               Project.GameWindow.LoadedMaps = unit.Maps;
            else
               foreach (System.Collections.DictionaryEntry de in unit.Maps)
                  Project.GameWindow.LoadedMaps[de.Key] = de.Value;
            // If sprites exist on any layer of any map whose static state cache has not
            // been initialized, initialize them now.
            foreach (MapBase mb in Project.GameWindow.LoadedMaps.Values)
            {
               // Loop through each property of each map class
               foreach (System.Reflection.PropertyInfo lpi in mb.GetType().GetProperties())
               {
                  // If the property represents a map layer
                  if (lpi.PropertyType.IsSubclassOf(typeof(LayerBase)))
                  {
                     // Retrieve the layer object
                     LayerBase l = (LayerBase)lpi.GetValue(mb, null);
                     // Loop though each sprite in the layer's sprite collection
                     foreach (SpriteBase sp in l.m_Sprites)
                     {
                        Type spriteType = sp.GetType();
                        // Get the property containing the sprite type's cached list of states
                        System.Reflection.FieldInfo statesField = spriteType.GetField("m_SpriteStates",
                           System.Reflection.BindingFlags.GetField |
                           System.Reflection.BindingFlags.NonPublic |
                           System.Reflection.BindingFlags.Static);
                        // If the sprite has not initialized its states
                        if (statesField.GetValue(sp) == null)
                        {
                           // Call the static method that initializes the sprite's states.
                           System.Reflection.MethodInfo initMethod = spriteType.GetMethod("InitializeStates",
                              System.Reflection.BindingFlags.InvokeMethod |
                              System.Reflection.BindingFlags.NonPublic |
                              System.Reflection.BindingFlags.Static);
                           initMethod.Invoke(null, new object[] { Project.GameWindow.GameDisplay });
                        }
                     }
                  }
               }
            }
         }
         if (unit.CurrentMapType != null)
            Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(unit.CurrentMapType);
         else
            Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(Project.GameWindow.CurrentMap.GetType());
         if (unit.OverlayMapType != null)
         {
            if (unit.OverlayMapType == typeof(System.DBNull))
               Project.GameWindow.OverlayMap = null;
            else
               Project.GameWindow.OverlayMap = Project.GameWindow.GetMap(unit.OverlayMapType);
         }
         else if (Project.GameWindow.OverlayMap != null)
            Project.GameWindow.OverlayMap = Project.GameWindow.GetMap(Project.GameWindow.OverlayMap.GetType());
         if (unit.PlayerOptions != null)
            Project.GameWindow.Players = unit.PlayerOptions;
         // Counters auto-magically take care of themselves via CounterRef
      }
   }

   /// &lt;summary&gt;
   /// Determines if saved game data exists in the specified slot.
   /// &lt;/summary&gt;
   /// &lt;param name="Slot"&gt;Specifies a number that uniquely identifies the slot to check&lt;/param&gt;
   /// &lt;param name="InMemory"&gt;If true, checks to see if the specified memory slot has saved
   /// game data available, otherwise checks to see if a file with the specified number
   /// exists for loading game data.&lt;/param&gt;
   /// &lt;returns&gt;True if data can be loaded from the specified slot, false otherwise.&lt;/returns&gt;
   /// &lt;remarks&gt;
   /// Memory slots and file slots are distinct. If a memory slot has game data in it,
   /// a file slot with the same number may not, and vice versa.  Furthermore a memory slot may
   /// have different game data stored in it than a file slot with the same number.
   /// &lt;seealso cref="LoadGame"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;
   /// &lt;seealso cref="DeleteSave"/&gt;&lt;/remarks&gt;
   [Description("Determines if saved game data exists in the specified slot.  Checks for the existence of a file if InMemory is false.")]
   public virtual bool SaveExists(int Slot, bool InMemory)
   {
      if (InMemory)
         return memorySaveSlots.ContainsKey(Slot);
      return System.IO.File.Exists(System.IO.Path.Combine(
         System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"));
   }

   /// &lt;summary&gt;
   /// Empties the specified save slot.
   /// &lt;/summary&gt;
   /// &lt;param name="Slot"&gt;Specifies a number that uniquely identifies a saved game&lt;/param&gt;
   /// &lt;param name="InMemory"&gt;If false, a file is deleted, otherwise a memory slot is cleared.&lt;/param&gt;
   /// &lt;remarks&gt;An error occurs if the specified slot is a file slot and there is no data to delete.
   /// Memory slots and file slots are distinct. If a memory slot has game data in it,
   /// a file slot with the same number may not, and vice versa.  Furthermore a memory slot may
   /// have different game data stored in it than a file slot with the same number.
   /// &lt;seealso cref="LoadGame"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;
   /// &lt;seealso cref="SaveExists"/&gt;&lt;/remarks&gt;
   [Description("Empties the specified save slot.  If InMemory is false, a file is deleted, otherwise a memory slot is cleared.")]
   public virtual void DeleteSave(int Slot, bool InMemory)
   {
      if (InMemory)
         memorySaveSlots.Remove(Slot);
      else
         System.IO.File.Delete(System.IO.Path.Combine(
            System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"));
   }

   /// &lt;summary&gt;
   /// If multiple views are visible, this determines which view is currently active.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Only the currently active view is affected by functions like
   /// &lt;see cref="PlanBase.ScrollSpriteIntoView"/&gt;, and only the current view is
   /// drawn by &lt;see cref="MapBase.Draw"/&gt;. &lt;see cref="MapBase.DrawAllViews"/&gt; is called
   /// during the main loop to cycle through each visible view (changing this value)
   /// and draw it. The scope of this value is limited to the map, so setting it
   /// affects only the map containing this object.&lt;/remarks&gt;
   [Browsable(false)]
   public virtual int CurrentView
   {
      get
      {
         return ParentLayer.ParentMap.CurrentViewIndex;
      }
      set
      {
         ParentLayer.ParentMap.CurrentViewIndex = (byte)value;
      }
   }

   /// &lt;summary&gt;
   /// Sets the current state of a sprite based on a category and index into the category.
   /// &lt;/summary&gt;
   /// &lt;param name="Category"&gt;Category containing the sprite to be affected&lt;/param&gt;
   /// &lt;param name="SpriteIndex"&gt;Zero-based index into the category, specifying a sprite&lt;/param&gt;
   /// &lt;param name="State"&gt;Numeric value referring to a state of the specified sprite.&lt;/param&gt;
   [Description("Sets the current state of a sprite based on a category and index into the category.")]
   public virtual void SetCategorySpriteState(SpriteCollection Category, int SpriteIndex, int State)
   {
      Debug.Assert(Category[SpriteIndex].isActive, "SetCategorySpriteState attempted to set the state of an inactive sprite.");
      Category[SpriteIndex].state = State;
   }

   /// &lt;summary&gt;
   /// Turn off the overlay map.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This disables all drawing and rules in the overlay map.&lt;/remarks&gt;
   [Description("Turn off the overlay map. This disables all drawing and rules in the overlay map.")]
   public virtual void ClearOverlay()
   {
      Project.GameWindow.OverlayMap = null;
   }

   /// &lt;summary&gt;
   /// Set the overlay map.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies a map that should be loaded into the overlay&lt;/param&gt;
   /// &lt;remarks&gt;This is very similar to &lt;see cref="SwitchToMap"/&gt;, but it affects the overlay
   /// map instead of the main map.&lt;/remarks&gt;
   [Description("Set the overlay map.")]
   public virtual void SetOverlay([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      Project.GameWindow.OverlayMap = Project.GameWindow.GetMap(MapType);
   }

   /// &lt;summary&gt;
   /// Turn on or off a flag associated with the current map.
   /// &lt;/summary&gt;
   /// &lt;param name="FlagIndex"&gt;A value from 0 to 30 indicating which flag to set or clear&lt;/param&gt;
   /// &lt;param name="Value"&gt;True to set the flag or false to clear it&lt;/param&gt;
   /// &lt;remarks&gt;Each map has a built-in variable &lt;see cref="MapBase.MapFlags"/&gt; that can be used
   /// to store 30 boolean values associated with the map.  This could be used instead of counters
   /// to turn on or off major features of the map, for example, whether the map has been
   /// completed and will allow the player to exit the map without completing it. Such a task is
   /// more suited to a map flag than a counter because there must be exactly one flag per map,
   /// and the flag will automatically be available for each map that is created.
   /// &lt;seealso cref="SetTargetMapFlag"/&gt;
   /// &lt;seealso cref="IsMapFlagOn"/&gt;&lt;/remarks&gt;
   [Description("Turn on or off a flag associated with the current map.  FlagIndex must be a value from 0 through 30.")]
   public virtual void SetMapFlag(int FlagIndex, bool Value)
   {
      if (Value)
         ParentLayer.ParentMap.MapFlags |= 1 &lt;&lt; FlagIndex;
      else
         ParentLayer.ParentMap.MapFlags &amp;= ~(1 &lt;&lt; FlagIndex);
   }

   /// &lt;summary&gt;
   /// Turn on or off a flag associated with the specified map.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies a map whose flag will be set&lt;/param&gt;
   /// &lt;param name="FlagIndex"&gt;A value from 0 to 30 specifying which flag to set or clear&lt;/param&gt;
   /// &lt;param name="Value"&gt;True to set the flag or false to clear it&lt;/param&gt;
   /// &lt;remarks&gt;This operates like &lt;see cref="SetMapFlag"/&gt;, but can operate on any map
   /// rather than just the current map.  This could be used, for example, to set a flag that
   /// would cause all the sprites on any particular map (even if it is not the current map)
   /// to be frozen next time the player visits it, assuming all sprite definitions check
   /// the flag before allowing the sprite to move.
   /// &lt;seealso cref="SetMapFlag"/&gt;
   /// &lt;seealso cref="IsMapFlagOn"/&gt;&lt;/remarks&gt;
   [Description("Turn on or off a flag associated with the specified map. FlagIndex must be a value from 0 through 30.")]
   public virtual void SetTargetMapFlag([Editor("MapType", "UITypeEditor")] Type MapType, int FlagIndex, bool Value)
   {
      if (Value)
         Project.GameWindow.GetMap(MapType).MapFlags |= 1 &lt;&lt; FlagIndex;
      else
         Project.GameWindow.GetMap(MapType).MapFlags &amp;= ~(1 &lt;&lt; FlagIndex);
   }

   /// &lt;summary&gt;
   /// Determine if the specified map-specific flag on the current map is on.
   /// &lt;/summary&gt;
   /// &lt;param name="FlagIndex"&gt;A number from 0 to 30 specifying which flag to check&lt;/param&gt;
   /// &lt;returns&gt;True if the specified flag is set, or false if it is not.&lt;/returns&gt;
   [Description("Determine if the specified map-specific flag on the current map is on.")]
   public virtual bool IsMapFlagOn(int FlagIndex)
   {
      return ((ParentLayer.ParentMap.MapFlags &amp; (1 &lt;&lt; FlagIndex)) != 0);
   }

   /// &lt;summary&gt;
   /// Unload all maps that aren't currently visible.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This unloads all maps except the current map and the overlay map.
   /// They will be reset next time they become active.&lt;/remarks&gt;
   [Description("Unload all maps that aren't currently visible (as the current map or overlay map).")]
   public virtual void UnloadBackgroundMaps()
   {
      Project.GameWindow.UnloadBackgroundMaps();
   }

   /// &lt;summary&gt;
   /// Quit the game by closing the main window.
   /// &lt;/summary&gt;
   [Description("Quit the game by closing the main window.")]
   public virtual void QuitGame()
   {
      Project.GameWindow.Quit();
   }

   /// &lt;summary&gt;
   /// Determines if a specified key is being pressed.
   /// &lt;/summary&gt;
   /// &lt;param name="key"&gt;Which key to check&lt;/param&gt;
   /// &lt;returns&gt;True if the specified key is currently pressed, false otherwise&lt;/returns&gt;
   [Description("Returns true if the specified key is currently pressed")]
   public virtual bool IsKeyPressed(Key key)
   {
      return Project.GameWindow.KeyboardState[key];
   }

   /// &lt;summary&gt;
   /// Return a random number within a specified range.
   /// &lt;/summary&gt;
   /// &lt;param name="Minimum"&gt;Minimum value that can be returned&lt;/param&gt;
   /// &lt;param name="Maximum"&gt;Maximum bound of the range; this value will never be returned&lt;/param&gt;
   /// &lt;returns&gt;A random integer greater than or equal to Minimum and less than Maximum.
   /// This value is based on a random seed that was generated based on the current time when
   /// the program started.&lt;/returns&gt;
   [Description("Return a random number greater than or equal to Minimum and less than Maximum.")]
   public virtual int GetRandomNumber(int Minimum, int Maximum)
   {
      return randomGen.Next(Minimum, Maximum);
   }

   /// &lt;summary&gt;
   /// Change a counter's value with a pre-defined operation.
   /// &lt;/summary&gt;
   /// &lt;param name="Operation"&gt;Specified a pre-defined operation to execute on a counter&lt;/param&gt;
   /// &lt;returns&gt;True if the counter value hit a limit, false otherwise. For an operation that
   /// stops at a limit, true will only be returned if the counter was unable to change. For an
   /// operation that loops, true indicates that the counter looped. For operators that set the
   /// counter to a limit, true is returned if the counter was already at the limit value, false
   /// otherwise.&lt;/returns&gt;
   /// &lt;remarks&gt;Counter values can be changed directly with the "=" function, but
   /// using a pre-defined operation, you can easily cause the counter to loop when
   /// it hits a limit, which is useful for counters linked to tile animations.&lt;/remarks&gt;
   [Description("Change a counter's value with a pre-defined operation. Return true if the counter hits a limit or is left unchanged.")]
   public virtual bool ChangeCounter(Counter Counter, CounterOperation Operation)
   {
      switch (Operation)
      {
         case CounterOperation.IncrementAndStop:
            if (Counter.CurrentValue &lt; Counter.MaxValue)
               Counter.CurrentValue += 1;
            else
               return true;
            return false;
         case CounterOperation.DecrementAndStop:
            if (Counter.CurrentValue &gt; Counter.MinValue)
               Counter.CurrentValue -= 1;
            else
               return true;
            return false;
         case CounterOperation.IncrementAndLoop:
            if (Counter.CurrentValue &lt; Counter.MaxValue)
            {
               Counter.CurrentValue += 1;
               return false;
            }
            Counter.CurrentValue = Counter.MinValue;
            return true;
         case CounterOperation.DecrementAndLoop:
            if (Counter.CurrentValue &gt; Counter.MinValue)
            {
               Counter.CurrentValue -= 1;
               return false;
            }
            Counter.CurrentValue = Counter.MaxValue;
            return true;
         case CounterOperation.SetToMinimum:
            if (Counter.CurrentValue == Counter.MinValue)
               return true;
            Counter.CurrentValue = Counter.MinValue;
            return false;
         case CounterOperation.SetToMaximum:
            if (Counter.CurrentValue == Counter.MaxValue)
               return true;
            Counter.CurrentValue = Counter.MaxValue;
            return false;
      }
      return false;
   }

   /// &lt;summary&gt;
   /// Determines if the specified mouse button is pressed.
   /// &lt;/summary&gt;
   /// &lt;param name="Button"&gt;Specifies which button to check.&lt;/param&gt;
   /// &lt;returns&gt;True if the button is pressed, false if it is not pressed.&lt;/returns&gt;
   [Description("Determines if touch was initiated or mouse was clicked this frame.")]
   public virtual bool Clicked()
   {
      return (0 != System.Windows.Forms.Control.MouseButtons) &amp;&amp;
         ((GameForm.oldMouseButtons &amp; System.Windows.Forms.Control.MouseButtons) == 0);
   }

   /// &lt;summary&gt;
   /// When the mouse drags over the display, scroll the map along with it.
   /// &lt;/summary&gt;
   [Description("When the mouse drags over the display, scroll the map along with it.")]
   public virtual void DragMap()
   {
      if (0 != (GameForm.oldMouseButtons &amp; System.Windows.Forms.Control.MouseButtons &amp; System.Windows.Forms.MouseButtons.Left))
      {
         int mapX = (int)((ParentLayer.CurrentPosition.X - ParentLayer.AbsolutePosition.X) / ParentLayer.ScrollRate.Width);
         int mapY = (int)((ParentLayer.CurrentPosition.Y - ParentLayer.AbsolutePosition.Y) / ParentLayer.ScrollRate.Height);
         int mouseOffsetX = System.Windows.Forms.Control.MousePosition.X - GameForm.oldMousePosition.X;
         int mouseOffsetY = System.Windows.Forms.Control.MousePosition.Y - GameForm.oldMousePosition.Y;
         Project.GameWindow.CurrentMap.Scroll(new System.Drawing.Point(mapX + mouseOffsetX, mapY + mouseOffsetY));
      }
   }

   #region "Messages"
   /// &lt;summary&gt;
   /// Determines in which view(s) a message will appear.
   /// &lt;/summary&gt;
   public enum MessageView
   {
      /// &lt;summary&gt;
      /// Display messages in the view that is active when the message is created.
      /// &lt;/summary&gt;
      Current,
      /// &lt;summary&gt;
      /// Display messages in all views
      /// &lt;/summary&gt;
      All,
      /// &lt;summary&gt;
      /// Display messages in the first (top or left) view
      /// &lt;/summary&gt;
      First,
      /// &lt;summary&gt;
      /// Display messages in the second view: bottom or right in 2-view layout, top-right in 4-view layout.
      /// &lt;/summary&gt;
      Second,
      /// &lt;summary&gt;
      /// Display messages in the bottom-left view
      /// &lt;/summary&gt;
      Third,
      /// &lt;summary&gt;
      /// Display messages in the bottom-right view
      /// &lt;/summary&gt;
      Fourth
   }
   /// &lt;summary&gt;
   /// Specifies a button or buttons on a player's input controller.
   /// &lt;/summary&gt;
   [Flags()]
   public enum ButtonSpecifier
   {
      /// &lt;summary&gt;
      /// The first button as defined by the player options
      /// &lt;/summary&gt;
      First = 1,
      /// &lt;summary&gt;
      /// The second button as defined by the player options
      /// &lt;/summary&gt;
      Second = 2,
      /// &lt;summary&gt;
      /// The third button as defined by the player options
      /// &lt;/summary&gt;
      Third = 4,
      /// &lt;summary&gt;
      /// The fourth button as defined by the player options
      /// &lt;/summary&gt;
      Fourth = 8,
      /// &lt;summary&gt;
      /// Disable input from the player while waiting for a button;
      /// prevent it from affecting the player's sprite.
      /// &lt;/summary&gt;
      FreezeInputs = 16
   }

   protected static Tileset FontTileset = null;
   protected const int maxMessages = 4;
   protected static MessageLayer[] activeMessages = new MessageLayer[maxMessages];
   protected static int activeMessageCount = 0;
   protected static System.Drawing.Color messageBackground = System.Drawing.Color.FromArgb(128, 64, 0, 255);
   protected static MessageView msgView = MessageView.Current;
   protected static RelativePosition msgPos = RelativePosition.CenterMiddle;
   protected const int messageMargin = 6;
   /// &lt;summary&gt;
   /// Zero-based player index that will be assigned to newly created messages
   /// &lt;/summary&gt;
   protected static int currentPlayer = 0;
   protected static ButtonSpecifier dismissButton = ButtonSpecifier.First | ButtonSpecifier.FreezeInputs;
   protected static byte[] dismissPhase = null;

   /// &lt;summary&gt;
   /// Represents a message created and displayed by &lt;see cref="ShowMessage"/&gt;.
   /// &lt;/summary&gt;
   public partial class MessageLayer : ByteLayer
   {
      public readonly System.Drawing.Color background;
      public MessageView view;
      public ButtonSpecifier dismissButton;
      /// &lt;summary&gt;
      /// 0-based player index whose controls affect this message
      /// &lt;/summary&gt;
      public int player;

      /// &lt;summary&gt;
      /// Creates a message layer object
      /// &lt;/summary&gt;
      /// &lt;param name="Tileset"&gt;Each tile in this tileset represents a unicode character starting with
      /// tile number 0 representing unicode character 0.&lt;/param&gt;
      /// &lt;param name="Parent"&gt;Map that will host this layer.&lt;/param&gt;
      /// &lt;param name="nColumns"&gt;Number of columns of text this layer can represent.&lt;/param&gt;
      /// &lt;param name="nRows"&gt;Number of rows of text this layer can represent.&lt;/param&gt;
      /// &lt;param name="Position"&gt;Position of the top-left corner of this layer within the map.&lt;/param&gt;
      /// &lt;param name="background"&gt;Background color for the box containing this message.&lt;/param&gt;
      /// &lt;param name="player"&gt;0-based player number whose button can dismiss this message.&lt;/param&gt;
      /// &lt;param name="dismissButton"&gt;Which of the player's buttons can dismiss this message.&lt;/param&gt;
      /// &lt;param name="msgView"&gt;Which view(s) will the message appear in.&lt;/param&gt;
      public MessageLayer(Tileset Tileset, MapBase Parent, int nColumns, int nRows,
         System.Drawing.Point Position, System.Drawing.Color background, int player,
         ButtonSpecifier dismissButton, MessageView msgView) :
         base(Tileset, Parent, 0, 0, 0, 0, nColumns, nRows, 0, 0, Position,
         new System.Drawing.SizeF(0, 0), 0, 0, null)
      {
         this.background = background;
         this.player = player;
         this.dismissButton = dismissButton;
         if (msgView == MessageView.Current)
         {
            switch (Parent.CurrentViewIndex)
            {
               case 0:
                  view = MessageView.First;
                  break;
               case 1:
                  view = MessageView.Second;
                  break;
               case 2:
                  view = MessageView.Third;
                  break;
               case 3:
                  view = MessageView.Fourth;
                  break;
            }
         }
         else
            view = msgView;
      }
   }

   /// &lt;summary&gt;
   /// Handles button pressses from a player with respect to displayed messages
   /// &lt;/summary&gt;
   /// &lt;param name="playerNumber"&gt;1-based player index&lt;/param&gt;
   /// &lt;param name="player"&gt;Player object providing the inputs.&lt;/param&gt;
   /// &lt;returns&gt;True if input can be passed to the player or false if the player
   /// is "frozen" viewing a message.&lt;/returns&gt;
   public static bool PlayerPressButton(int playerNumber, IPlayer player)
   {
      for (int i = 0; i &lt; activeMessageCount; i++)
      {
         MessageLayer msg = activeMessages[i];
         if (msg.player == playerNumber - 1)
         {
            bool dismissPressed = false;
            if ((0 != (msg.dismissButton &amp; ButtonSpecifier.First)) &amp;&amp; player.Button1)
               dismissPressed = true;
            if ((0 != (msg.dismissButton &amp; ButtonSpecifier.Second)) &amp;&amp; player.Button2)
               dismissPressed = true;
            if ((0 != (msg.dismissButton &amp; ButtonSpecifier.Third)) &amp;&amp; player.Button3)
               dismissPressed = true;
            if ((0 != (msg.dismissButton &amp; ButtonSpecifier.Fourth)) &amp;&amp; player.Button4)
               dismissPressed = true;

            // dismissPhase[x]:
            // 0 = No frames have passed yet
            // 1 = Frames have passed and the dismiss button was initially pressed
            // 2 = Frames have passed and the dismiss button is not pressed
            // 3 = Dismiss button was not pressed, but now it is.

            if (dismissPhase == null)
               dismissPhase = new byte[Project.MaxPlayers];

            if (dismissPressed)
            {
               if ((dismissPhase[msg.player] == 0) || (dismissPhase[msg.player] == 2))
                  dismissPhase[msg.player]++;
            }
            else
            {
               if (dismissPhase[msg.player] &lt; 2)
                  dismissPhase[msg.player] = 2;
               else if (dismissPhase[msg.player] &gt; 2)
               {
                  DismissMessage(i);
                  dismissPhase[msg.player] = 0;
               }
            }

            if (0 != (msg.dismissButton &amp; ButtonSpecifier.FreezeInputs))
            {
               return false;
            }
         }
      }
      return true;
   }

   private static void DismissMessage(int messageIndex)
   {
      for (int i = messageIndex; i &lt; activeMessageCount - 1; i++)
         activeMessages[i] = activeMessages[i + 1];
      activeMessageCount--;
   }

   /// &lt;summary&gt;
   /// Sets the background for new messages added with &lt;see cref="ShowMessage"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="background"&gt;Names a color for the background of new messages.&lt;/param&gt;
   /// &lt;param name="alpha"&gt;Transparency level of the color: 255 = opaque, 128=50% transparent.&lt;/param&gt;
   [Description("Sets the background for new messages added with ShowMessage. Alpha 255 = opaque, alpha 128=50% transparent.")]
   public virtual void SetMessageBackground(System.Drawing.KnownColor background, byte alpha)
   {
      System.Drawing.Color c = System.Drawing.Color.FromKnownColor(background);
      messageBackground = System.Drawing.Color.FromArgb(alpha, c.R, c.G, c.B);
   }

   /// &lt;summary&gt;
   /// Determines which player and which button will dismiss newly created messages.
   /// &lt;/summary&gt;
   /// &lt;param name="DismissButton"&gt;Which of the player's buttons will dismiss the message&lt;/param&gt;
   /// &lt;param name="Player"&gt;Player number 1 to 4&lt;/param&gt;
   [Description("Determines which player and which button will dismiss newly created messages. Player is a number 1 to 4.")]
   public virtual void SetMessageDismissal(ButtonSpecifier DismissButton, int Player)
   {
      dismissButton = DismissButton;
      currentPlayer = Player - 1;
   }

   /// &lt;summary&gt;
   /// Adds a message to the display.
   /// &lt;/summary&gt;
   /// &lt;param name="Message"&gt;Message text as a quoted string.  Use \r\n to insert new lines
   /// into the message.&lt;/param&gt;
   /// &lt;remarks&gt;Up to 4 messages may be displayed.  No automatic word wrap or centering
   /// is performed.  All formatting is determined by the content of the string.&lt;/remarks&gt;
   [Description("Adds a message to the display. Up to 4 messages may be displayed.")]
   public virtual void ShowMessage([Editor("Message", "UITypeEditor")] string Message)
   {
      if (activeMessageCount &gt;= maxMessages)
         throw new InvalidOperationException("Maximum number of displayed messages exceeded");
      activeMessages[activeMessageCount++] = CreateMessage(Message);
   }

   /// &lt;summary&gt;
   /// Clears all active messages from the display.
   /// &lt;/summary&gt;
   [Description("Clears all active messages from the display")]
   public virtual void ClearAllMessages()
   {
      activeMessageCount = 0;
   }

   /// &lt;summary&gt;
   /// Draws all active messages.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This function is called by the framework after drawing the overlay map.&lt;/remarks&gt;
   public static void DrawMessages()
   {
      for (int i = 0; i &lt; activeMessageCount; i++)
      {
         MessageLayer msg = activeMessages[i];
         Display disp = msg.ParentMap.Display;
         byte oldView = msg.ParentMap.CurrentViewIndex;
         switch (msg.view)
         {
            case MessageView.Current:
               DrawMessage(msg, disp);
               break;
            case MessageView.All:
               for (byte v = 0; v &lt; Project.MaxViews; v++)
               {
                  msg.ParentMap.CurrentViewIndex = v;
                  DrawMessage(msg, disp);
               }
               break;
            case MessageView.First:
               msg.ParentMap.CurrentViewIndex = 0;
               DrawMessage(msg, disp);
               break;
            case MessageView.Second:
               msg.ParentMap.CurrentViewIndex = 1;
               DrawMessage(msg, disp);
               break;
            case MessageView.Third:
               msg.ParentMap.CurrentViewIndex = 2;
               DrawMessage(msg, disp);
               break;
            case MessageView.Fourth:
               msg.ParentMap.CurrentViewIndex = 3;
               DrawMessage(msg, disp);
               break;
         }
         msg.ParentMap.CurrentViewIndex = oldView;
      }
   }

   protected static void DrawMessage(MessageLayer msg, Display disp)
   {
      disp.Scissor(msg.ParentMap.CurrentView);
      System.Drawing.Rectangle messageRect = new System.Drawing.Rectangle(
         msg.CurrentPosition.X + msg.ParentMap.CurrentView.X,
         msg.CurrentPosition.Y + msg.ParentMap.CurrentView.Y,
         msg.VirtualColumns * msg.Tileset.TileWidth,
         msg.VirtualRows * msg.Tileset.TileHeight);
      messageRect.Inflate(messageMargin, messageMargin);
      disp.SetColor(msg.background);
      disp.FillRectangle(messageRect);
      disp.SetColor(System.Drawing.Color.White);
      disp.DrawRectangle(messageRect, 0);
      msg.Draw();
   }

   /// &lt;summary&gt;
   /// Set the tileset used as the source for characters in messages.
   /// &lt;/summary&gt;
   /// &lt;param name="Tileset"&gt;Tileset whose tiles will be used to represent characters
   /// for messages. The tile numbers correspond to ASCII values of the characters
   /// used in the messages.&lt;/param&gt;
   [Description("Set the tileset used as the source for characters in messages")]
   public virtual void SetMessageFont(Tileset Tileset)
   {
      FontTileset = Tileset;
   }

   protected virtual MessageLayer CreateMessage(string Message)
   {
      if (FontTileset == null)
         FontTileset = (Tileset)(typeof(Tileset).GetProperties(
            System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Public)
            [0].GetValue(null, null));

      byte[] charBytes = System.Text.Encoding.Unicode.GetBytes(Message);
      Display disp = ParentLayer.ParentMap.Display;
      int x = 0, y = 1;
      int maxWidth = 1;
      for (int charIdx = 0; charIdx &lt; charBytes.Length; charIdx += 2)
      {
         if (Message[charIdx / 2] == '\n')
         {
            x = 0;
            y++;
         }
         else if (Message[charIdx / 2] != '\r')
         {
            if (++x &gt; maxWidth)
               maxWidth = x;
         }
      }

      System.Drawing.Size messageSize = new System.Drawing.Size(
         maxWidth * FontTileset.TileWidth, y * FontTileset.TileHeight);
      System.Drawing.Size viewSize = ParentLayer.ParentMap.CurrentView.Size;

      System.Drawing.Point ptMessage = System.Drawing.Point.Empty;

      switch (msgPos)
      {
         case RelativePosition.TopLeft:
         case RelativePosition.LeftMiddle:
         case RelativePosition.BottomLeft:
            ptMessage.X = viewSize.Width / 4 - messageSize.Width / 2;
            if (ptMessage.X &lt; messageMargin)
               ptMessage.X = messageMargin;
            break;
         case RelativePosition.TopCenter:
         case RelativePosition.CenterMiddle:
         case RelativePosition.BottomCenter:
            ptMessage.X = (viewSize.Width - messageSize.Width) / 2;
            break;
         case RelativePosition.TopRight:
         case RelativePosition.RightMiddle:
         case RelativePosition.BottomRight:
            ptMessage.X = viewSize.Width * 3 / 4 - messageSize.Width / 2;
            if (ptMessage.X + messageSize.Width &gt; viewSize.Width - messageMargin)
               ptMessage.X = viewSize.Width - messageSize.Width - messageMargin;
            break;
      }

      switch (msgPos)
      {
         case RelativePosition.TopLeft:
         case RelativePosition.TopCenter:
         case RelativePosition.TopRight:
            ptMessage.Y = viewSize.Height / 4 - messageSize.Height / 2;
            if (ptMessage.Y &lt;= 0)
               ptMessage.Y = 1;
            break;
         case RelativePosition.LeftMiddle:
         case RelativePosition.CenterMiddle:
         case RelativePosition.RightMiddle:
            ptMessage.Y = (viewSize.Height - messageSize.Height) / 2;
            break;
         case RelativePosition.BottomLeft:
         case RelativePosition.BottomCenter:
         case RelativePosition.BottomRight:
            ptMessage.Y = viewSize.Height * 3 / 4 - messageSize.Height / 2;
            if (ptMessage.Y + messageSize.Height &gt;= viewSize.Height)
               ptMessage.Y = viewSize.Height - messageSize.Height - 1;
            break;
      }

      MessageLayer result = new MessageLayer(
         FontTileset, ParentLayer.ParentMap, maxWidth, y, ptMessage,
         messageBackground, currentPlayer, dismissButton, msgView);

      x = 0;
      y = 0;
      for (int charIdx = 0; charIdx &lt; charBytes.Length; charIdx += 2)
      {
         if (Message[charIdx / 2] == '\n')
         {
            x = 0;
            y++;
         }
         else if (Message[charIdx / 2] != '\r')
         {
            result[x++, y] = charBytes[charIdx];
         }
      }

      return result;
   }
   #endregion
}

/// &lt;summary&gt;
/// Specifies an operation to perform on a counter.
/// &lt;/summary&gt;
public enum CounterOperation
{
   /// &lt;summary&gt;
   /// Add 1 to the counter value. If the counter was at it's maximum value, leave it there.
   /// &lt;/summary&gt;
   IncrementAndStop,
   /// &lt;summary&gt;
   /// Subtract 1 from the counter value. If the counter was at it's minimum value, leave it there.
   /// &lt;/summary&gt;
   DecrementAndStop,
   /// &lt;summary&gt;
   /// Add 1 to the counter value. If the counter was at it's maximum value, set it to its minimum value.
   /// &lt;/summary&gt;
   IncrementAndLoop,
   /// &lt;summary&gt;
   /// Subtract 1 from the counter value. If the counter was at it's minimum value, set it to its maximum value.
   /// &lt;/summary&gt;
   DecrementAndLoop,
   /// &lt;summary&gt;
   /// Set the counter to its minimum value.
   /// &lt;/summary&gt;
   SetToMinimum,
   /// &lt;summary&gt;
   /// Set the counter to its maximum value.
   /// &lt;/summary&gt;
   SetToMaximum
}

/// &lt;summary&gt;
/// This is used to specify general categories of objects to be included
/// in a saved game (save unit).
/// &lt;/summary&gt;
/// &lt;remarks&gt;This is used with &lt;see cref="GeneralRules.IncludeInSaveUnit"/&gt;.
/// &lt;seealso cref="GeneralRules.IncludeInSaveUnit"/&gt;
/// &lt;seealso cref="GeneralRules.LoadGame"/&gt;&lt;/remarks&gt;
public enum SaveUnitInclusion
{
   /// &lt;summary&gt;
   /// Includes all loaded maps.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Including all maps in a &lt;see cref="SaveUnit"/&gt; causes all maps to be loaded
   /// or reset when the game is loaded. Maps that were in memory when the game was saved
   /// will be loaded from the file, while the rest will be reset. In that sense, it is
   /// including even maps that aren't loaded because it causes all maps to be reset when the
   /// game is loaded, and then only the stored maps are restored from the file.&lt;/remarks&gt;
   AllMaps,
   /// &lt;summary&gt;
   /// Includes the values of all counters defined in the project.
   /// &lt;/summary&gt;
   AllCounters,
   /// &lt;summary&gt;
   /// Includes an indicator of which map was the currently active map when the game was saved.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;If this is not included, the current map will be the same map that was active
   /// before the game was loaded, which may be reset if that map was not included in the
   /// &lt;see cref="SaveUnit"/&gt;. The indicator is determined at the time that &lt;see cref="GeneralRules.IncludeInSaveUnit"/&gt;
   /// is called, unlike most other members which are stored at the time &lt;see cref="GeneralRules.SaveGame"/&gt;
   /// is called.&lt;/remarks&gt;
   WhichMapIsCurrent,
   /// &lt;summary&gt;
   /// Includes an indicator of which map was set as the overlay map when the game was saved.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;If this is not included, the overlay map will remain unchanged when loading
   /// the game stored in this save unit. The indicator is determined at the time that
   /// &lt;see cref="GeneralRules.IncludeInSaveUnit"/&gt; is called, unlike most other members
   /// which are stored at the time &lt;see cref="GeneralRules.SaveGame"/&gt; is called.&lt;/remarks&gt;
   WhichMapIsOverlaid,
   /// &lt;summary&gt;
   /// Includes player preferences that determine which input devices the players are using and
   /// the keyboad layout.
   /// &lt;/summary&gt;
   PlayerOptions
}

/// &lt;summary&gt;
/// Specifies an arrangement for multiple scrolling views on a single display
/// &lt;/summary&gt;
/// &lt;remarks&gt;This is used with &lt;see cref="GeneralRules.SetViewLayout"/&gt;.
/// There is no space between the views in any of these layouts, but an overlay layer could
/// be used to draw separators on top of the views.
/// &lt;seealso cref="GeneralRules.SetViewLayout"/&gt;&lt;/remarks&gt;
public enum ViewLayout
{
   /// &lt;summary&gt;
   /// A single view that fills the display
   /// &lt;/summary&gt;
   Single,
   /// &lt;summary&gt;
   /// Two views side by side, equally split
   /// &lt;/summary&gt;
   LeftRight,
   /// &lt;summary&gt;
   /// Two views, one above the other, equally split
   /// &lt;/summary&gt;
   TopBottom,
   /// &lt;summary&gt;
   /// Four views occupying the four corners of the display, equally split
   /// &lt;/summary&gt;
   FourCorners
}

/// &lt;summary&gt;
/// Retains information about what has been included for a saved game.
/// &lt;/summary&gt;
/// &lt;remarks&gt;The information included in a SaveUnit only selects which information
/// will be saved, but does not actually store a copy of it. The data for these objects
/// is copied from the objects referenced in the SaveUnit at the time that
/// &lt;see cref="GeneralRules.SaveGame"/&gt; is called. One exception is &lt;see cref="SaveUnitInclusion.WhichMapIsCurrent"/&gt;,
/// which stores an indicator of the current map at the time &lt;see cref="GeneralRules.IncludeInSaveUnit"/&gt; is
/// called.&lt;/remarks&gt;
[Serializable()]
public partial class SaveUnit
{
   public SaveUnit()
   {
   }
   /// &lt;summary&gt;
   /// Indicates whether &lt;see cref="SaveUnitInclusion.AllMaps"/&gt; was included.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is significant because &lt;see cref="GeneralRules.LoadGame"/&gt; behaves differently
   /// with respect to maps that were not stored in the &lt;see cref="SaveUnit"/&gt; when this
   /// is true or false. If all maps were included, then maps that were not stored are
   /// reset while the game ie being loaded, otherwise they are left as they were before
   /// the game was loaded.&lt;/remarks&gt;
   public bool AllMaps = false;
   /// &lt;summary&gt;
   /// Refers to all maps that will be saved
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The key of this collection is the type of the map and the value refers to the
   /// instance of the map data.&lt;/remarks&gt;
   public System.Collections.Hashtable Maps = null;
   /// &lt;summary&gt;
   /// This indicator remembers which map was current, or is null if the indicator is not saved
   /// &lt;/summary&gt;
   public System.Type CurrentMapType = null;
   /// &lt;summary&gt;
   /// This indicator remembers which map was used as an overlay.  It's null if the indicator is
   /// not saved, and typeof(System.DBNull) if the overlay map is empty.
   /// &lt;/summary&gt;
   public System.Type OverlayMapType = null;
   /// &lt;summary&gt;
   /// An array of &lt;see cref="CounterRef"/&gt; objects used to include counters in a &lt;see cref="SaveUnit"/&gt;
   /// &lt;/summary&gt;
   public System.Collections.ArrayList Counters = null;
   /// &lt;summary&gt;
   /// Stores player preferenes.
   /// &lt;/summary&gt;
   public IPlayer[] PlayerOptions = null;
}

/// &lt;summary&gt;
/// This class provides a kind of indirect reference to a counter for the purposes
/// of saving and loading counter values in a &lt;see cref="SaveUnit"/&gt;.
/// &lt;/summary&gt;
/// &lt;remarks&gt;Since counters are global objects, it doesn't work well to add a counter
/// directly to the save unit because then loading the save unit will leave the
/// loaded counter values contained in the &lt;see cref="SaveUnit"/&gt; object. But by
/// providing this wrapper that has code specifically for loading ans storing counters,
/// the value of the global counters can automatically be linked to those in a
/// &lt;see cref="SaveUnit"/&gt;.&lt;/remarks&gt;
[Serializable()]
public partial class CounterRef : System.Runtime.Serialization.ISerializable
{
   public string counterName;
   public Counter instance;

   public CounterRef(Counter counter)
   {
      instance = counter;
      System.Reflection.PropertyInfo[] counterProps = typeof(Counter).GetProperties(
         System.Reflection.BindingFlags.Public |
         System.Reflection.BindingFlags.GetProperty |
         System.Reflection.BindingFlags.Static);
      foreach (System.Reflection.PropertyInfo counterProp in counterProps)
      {
         Counter inst = (Counter)counterProp.GetValue(null, null);
         if (inst == counter)
         {
            counterName = counterProp.Name;
            break;
         }
      }
   }

   private CounterRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      counterName = info.GetString("CounterName");
      instance = (Counter)(typeof(Counter).GetProperty(counterName,
         System.Reflection.BindingFlags.Public |
         System.Reflection.BindingFlags.GetProperty |
         System.Reflection.BindingFlags.Static).GetValue(null, null));
      instance.CurrentValue = info.GetInt32("CounterValue");
   }

   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      info.AddValue("CounterName", counterName);
      info.AddValue("CounterValue", instance.CurrentValue);
   }
}

/// &lt;summary&gt;
/// Refers to the position of a predefined point relative to a rectangle
/// &lt;/summary&gt;
/// &lt;remarks&gt;Many operations involving the position of one object relative to another
/// object rely on RelativePosition to determine how the two objects' rectangles are
/// aligned. The positions defined in this enumeration generally refer to
/// a point inside the rectangle at the specified position. For example, RightMiddle
/// would refer to the point immediately within the middle of the right side of the
/// rectangle. In the case of aligning two rectangles, this means that the right
/// sides will match up exactly and the vertical center of one rectangle would be
/// aligned with the vertical center of the other.&lt;/remarks&gt;
public enum RelativePosition
{
   TopLeft,
   TopCenter,
   TopRight,
   LeftMiddle,
   CenterMiddle,
   RightMiddle,
   BottomLeft,
   BottomCenter,
   BottomRight
}</Text>
  </SourceCode>
  <SourceCode Name="SpriteBase.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.ComponentModel;
using System.Diagnostics;

/// &lt;summary&gt;
/// Base class for all sprite definitions.
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class SpriteBase : GeneralRules
{
   /// &lt;summary&gt;
   /// Horizontal coordinate of the sprite within its layer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Because a sprite can move at non-integer rates, the position is tracked
   /// as a floating point number. &lt;seealso cref="PixelX"/&gt;&lt;/remarks&gt;
   public double x;
   /// &lt;summary&gt;
   /// Vertical coordinage of the sprite within its layer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Because a sprite can move at non-integer rates, the position is tracked
   /// as a floating point number. &lt;seealso cref="PixelY"/&gt;&lt;/remarks&gt;
   public double y;
   /// &lt;summary&gt;
   /// Horizontal velocity of the sprite in pixels per frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Negative numbers represent leftward movement while positive numbers
   /// represent rightward movement. This value only represents the final velocity
   /// of the sprite relative to the layer. If the sprite is riding a platform,
   /// see &lt;see cref="LocalDX"/&gt;.&lt;seealso cref="dy"/&gt;&lt;/remarks&gt;
   public double dx;
   /// &lt;summary&gt;
   /// Vertical velocity of the sprite in pixels per frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Negative numbers represent upward movement while positive numbers
   /// represent downward movement. This value only represents the final velocity
   /// of the sprite relative to the layer. If the sprite is riding a platform,
   /// see &lt;see cref="LocalDY"/&gt;.&lt;seealso cref="dx"/&gt;&lt;/remarks&gt;
   public double dy;
   /// &lt;summary&gt;
   /// The value of this sprite's &lt;see cref="x"/&gt; coordinate on the previous frame.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This value is set during &lt;see cref="MoveByVelocity"/&gt;.
   /// &lt;seealso cref="OldPixelX"/&gt;&lt;seealso cref="oldY"/&gt;&lt;/remarks&gt;
   public double oldX;
   /// &lt;summary&gt;
   /// The value of this sprite's &lt;see cref="y"/&gt; coordinate on the previous frame.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This value is set during &lt;see cref="MoveByVelocity"/&gt;.
   /// &lt;seealso cref="OldPixelY"/&gt;&lt;seealso cref="oldX"/&gt;&lt;/remarks&gt;
   public double oldY;
   /// &lt;summary&gt;
   /// Numeric value corresponding to the sprite's current state.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;A value of 0 represents the first state listed in this sprite's
   /// list of states. Each subsequent state is the value of the previous plus 1.
   /// You can refer to the sprites State enumeration to refer to states by name, but
   /// the result must be explicitly converted to an integer.
   /// &lt;seealso cref="SwitchToState"/&gt;
   /// &lt;/remarks&gt;
   /// &lt;example&gt;&lt;c&gt;state = (int)State.Left&lt;/c&gt;&lt;/example&gt;
   public int state;
   /// &lt;summary&gt;
   /// Numeric value corresponding to the sprite's current frame.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The number of valid frames depend on the current state. Each state
   /// has its own sequence of frames. The frame that is displayed depends both on
   /// the number of frames and the repeat count of each frame. &lt;seealso cref="Animate"/&gt;&lt;/remarks&gt;
   public int frame;
   /// &lt;summary&gt;
   /// Stores the inputs that are currently being "pressed" on this sprite.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Normally the inputs of a sprite are set by a player, but could
   /// also by explicitly set by rules and other input sources such as saved
   /// input (replaying a previous input sequence). You can cause the sprite
   /// to accelerate in the directions dictated by the input bits with
   /// &lt;see cref="AccelerateByInputs"/&gt;.&lt;seealso cref="AccelerateByInputs"/&gt;
   /// &lt;seealso cref="IsInputPressed"/&gt;&lt;seealso cref="SetInputState"/&gt;
   /// &lt;seealso cref="ClearInputs"/&gt;&lt;seealso cref="MapKeyToInput"/&gt;
   /// &lt;seealso cref="MapPlayerToInputs"/&gt;&lt;seealso cref="oldinputs"/&gt;&lt;/remarks&gt;
   public InputBits inputs;
   /// &lt;summary&gt;
   /// Remembers the inputs that were active on this sprite in the previous frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This value is used to determine when a player (or other input source)
   /// has just started pressing an input versus continued pressing an input that was
   /// already pressed. It is copied from &lt;see cref="inputs"/&gt; when
   /// &lt;see cref="MapPlayerToInputs"/&gt; is called.&lt;seealso cref="inputs"/&gt;
   /// &lt;seealso cref="MapPlayerToInputs"/&gt;&lt;seealso cref="IsInputPressed"/&gt;&lt;/remarks&gt;
   public InputBits oldinputs;
   /// &lt;summary&gt;
   /// Determines if this sprite is currently active.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Only active sprites will be drawn and process rules. Attempting to
   /// refer to an inactive sprite from an active rule (on an active sprite or plan)
   /// will result in an error message in debug mode. &lt;seealso cref="Deactivate"/&gt;
   /// &lt;seealso cref="TileActivateSprite"/&gt;&lt;/remarks&gt;
   public bool isActive;
   protected LayerBase layer;
   protected Solidity m_solidity;
   /// &lt;summary&gt;
   /// A combination of &lt;see cref="ModulateRed"/&gt;, &lt;see cref="ModulateGreen"/&gt;,
   /// &lt;see cref="ModulateBlue"/&gt; and &lt;see cref="ModulateAlpha"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;&lt;para&gt;This member stores the actual data for all 4 of the Modulate properties
   /// that affect the sprite's color. Using the Modulate properties is easier to
   /// read and understand, but setting this property directly is simple and faster
   /// in terms of the amount of code.&lt;/para&gt;
   /// &lt;para&gt;This number consists of 4 bytes, which are, in order from least significant
   /// to most significant: Blue, Greed, Red, Alpha.  To to retrieve the alpha component of
   /// this value, you would divide it by 16777216 or shift the bits rightward 24 places.
   /// &lt;/para&gt;&lt;/remarks&gt;
   public int color;

   /// &lt;summary&gt;
   /// Horizontal velocity relative to the sprite's environment (like a platform)
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;If the sprite is riding a platform, changes to the sprite's velocity
   /// should affect this instead of &lt;see cref="dx"/&gt;. When the sprite is not riding
   /// a platform, this value will be set to double.NaN.&lt;/remarks&gt;
   public double LocalDX;
   /// &lt;summary&gt;
   /// Vertical velocity relative to the sprite's environment
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;If the sprite is riding an object within which it can move vertically
   /// (platforms only allow the sprite to move within the platform horizontally), changes
   /// to the sprite's velocity should affect this instead of &lt;see cref="dy"/&gt;.
   /// When the sprite is not riding such an object, this value will be set to double.NaN.&lt;/remarks&gt;
   public double LocalDY;

   /// &lt;summary&gt;
   /// Contains all the possible bits that can be set in a sprite's &lt;see cref="inputs"/&gt; and
   /// &lt;see cref="oldinputs"/&gt; properties.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Multiple bits may be set at once if multiple inputs are being pressed on this
   /// sprite at the same time.&lt;/remarks&gt;
   [FlagsAttribute()]
   public enum InputBits
   {
      /// &lt;summary&gt;
      /// Refers to an input that causes the sprite to move up or accelerate
      /// &lt;/summary&gt;
      Up = 1,
      /// &lt;summary&gt;
      /// Refers to an input that causes the sprite to move or turn right
      /// &lt;/summary&gt;
      Right = 2,
      /// &lt;summary&gt;
      /// Refers to an input that causes the sprite to move down or decelerate
      /// &lt;/summary&gt;
      Down = 4,
      /// &lt;summary&gt;
      /// Refers to an input that causes the sprite to move or turn left
      /// &lt;/summary&gt;
      Left = 8,
      /// &lt;summary&gt;
      /// Refers to 1 of 4 customizable inputs on the sprite.
      /// &lt;/summary&gt;
      Button1 = 16,
      /// &lt;summary&gt;
      /// Refers to 1 of 4 customizable inputs on the sprite.
      /// &lt;/summary&gt;
      Button2 = 32,
      /// &lt;summary&gt;
      /// Refers to 1 of 4 customizable inputs on the sprite.
      /// &lt;/summary&gt;
      Button3 = 64,
      /// &lt;summary&gt;
      /// Refers to 1 of 4 customizable inputs on the sprite.
      /// &lt;/summary&gt;
      Button4 = 128
   }

   /// &lt;summary&gt;
   /// Used to refer to 4 primary directions.
   /// &lt;/summary&gt;
   public enum Direction
   {
      Up,
      Right,
      Down,
      Left
   }

   /// &lt;summary&gt;
   /// Defines the basis for a sprite's animation
   /// &lt;/summary&gt;
   public enum SpriteAnimationType
   {
      /// &lt;summary&gt;
      /// Each frame that passes in the game will cause the sprite to advance its animation by one frame.
      /// &lt;/summary&gt;
      ByFrame,
      /// &lt;summary&gt;
      /// The sprite's animation will advance according to how many pixels it will move horizontally each frame.
      /// &lt;/summary&gt;
      ByHorizontalVelocity,
      /// &lt;summary&gt;
      /// The sprite's animation will advance according to how many pixels it will move vertically each frame.
      /// &lt;/summary&gt;
      ByVerticalVelocity,
      /// &lt;summary&gt;
      /// The sprite's animation will advance according to how many pixels it moves each frame in any direction (using the distance formula).
      /// &lt;/summary&gt;
      ByVectorVelocity
   }

   /// &lt;summary&gt;
   /// Constructs a new sprite instance given all its base properties.
   /// &lt;/summary&gt;
   /// &lt;param name="layer"&gt;Layer that contains the sprite.&lt;/param&gt;
   /// &lt;param name="x"&gt;Initial horizontal coordinate within the layer&lt;/param&gt;
   /// &lt;param name="y"&gt;Initial vertical coordinate within the layer&lt;/param&gt;
   /// &lt;param name="dx"&gt;Initial horizontal velocity&lt;/param&gt;
   /// &lt;param name="dy"&gt;Initial vertical velocity&lt;/param&gt;
   /// &lt;param name="state"&gt;Initial state&lt;/param&gt;
   /// &lt;param name="frame"&gt;Initial frame within the initial state&lt;/param&gt;
   /// &lt;param name="active"&gt;Determines if the sprite is initially active&lt;/param&gt;
   /// &lt;param name="solidity"&gt;Which solidity definition does the sprite initially react to&lt;/param&gt;
   /// &lt;param name="color"&gt;Initial color modulation settings&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;This cannot be called directly because SpriteBase is an abstract class,
   /// but it is called by the derived constructors on each individual sprite definition.&lt;/para&gt;
   /// &lt;para&gt;The sprite assumes that this is the layer to which it is added and will use it when
   /// looking for other objects or properties in the layer.&lt;/para&gt;&lt;/remarks&gt;
   public SpriteBase(LayerBase layer, double x, double y, double dx, double dy, int state, int frame, bool active, Solidity solidity, int color)
   {
      this.layer = layer;
      this.x = this.oldX = x;
      this.y = this.oldY = y;
      this.dx = dx;
      this.dy = dy;
      this.state = state;
      this.frame = frame;
      this.isActive = active;
      this.m_solidity = solidity;
      this.color = color;
      this.LocalDX = double.NaN;
      this.LocalDY = double.NaN;
   }

   #region Properties
   /// &lt;summary&gt;
   /// Horizontal position of the sprite within the layer rounded toward zero to yield an integer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This can only be changed by changing the sprite's &lt;see cref="dx"/&gt; property.&lt;/remarks&gt;
   public int PixelX
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access PixelX on an inactive sprite");
         // If you don't have the left edge of your map protected by a solid boundary,
         // and the different behavior of the left edge is bugging you, you can use this
         // return statement to work around the rounding difference of negative numbers,
         // but it involves just a bit of unnecessary overhead, and looks rather clumsy:
         // return (int)(x+16)-16;
         return (int)x;
      }
   }

   /// &lt;summary&gt;
   /// Vertical position of the sprite within the layer rounded toward zero to yield an integer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This can only be changed by changing the sprite's &lt;see cref="dy"/&gt; property.&lt;/remarks&gt;
   public int PixelY
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access PixelY on an inactive sprite");
         return (int)y;
      }
   }

   /// &lt;summary&gt;
   /// The horizontal coordinate that the sprite is expected to be at on the next frame based on its
   /// current position and velocity, rounded toward zero to yield an integer pixel coordinate.
   /// &lt;seealso cref="x"/&gt;&lt;seealso cref="dx"/&gt;
   /// &lt;/summary&gt;
   public int ProposedPixelX
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access ProposedPixelX on an inactive sprite");
         // If you don't have the left edge of your map protected by a solid boundary,
         // and the different behavior of the left edge is bugging you, you can use this
         // return statement to work around the rounding difference of negative numbers,
         // but it involves just a bit of unnecessary overhead, and looks rather clumsy:
         // return (int)(x+dx+16)-16
         return (int)(x + dx);
      }
   }

   /// &lt;summary&gt;
   /// The vertical coordinate that the sprite is expected to be at on the next frame based on its
   /// current position and velocity, rounded toward zero to yield an integer pixel coordinate.
   /// &lt;seealso cref="y"/&gt;&lt;seealso cref="dy"/&gt;
   /// &lt;/summary&gt;
   public int ProposedPixelY
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access ProposedPixelY on an inactive sprite");
         return (int)(y + dy);
      }
   }

   /// &lt;summary&gt;
   /// The horizontal pixel coordinate that the sprite was at on the previous frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;A pixel coordinate is the actual coordinate (&lt;see cref="oldX"/&gt; in this case)
   /// rounded toward zero to yield an integer.&lt;/remarks&gt;
   public int OldPixelX
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access OldPixelX on an inactive sprite");
         return (int)oldX;
      }
   }

   /// &lt;summary&gt;
   /// The vertical pixel coordinate that the sprite was at on the previous frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;A pixel coordinate is the actual coordinate (&lt;see cref="oldY"/&gt; in this case)
   /// rounded toward zero to yield an integer.&lt;/remarks&gt;
   public int OldPixelY
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access OldPixelY on an inactive sprite");
         return (int)oldY;
      }
   }

   /// &lt;summary&gt;
   /// Retrieves information about the state that the sprite is currently in.
   /// &lt;/summary&gt;
   public SpriteState CurrentState
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access CurrentState on an inactive sprite");
         return this[state];
      }
   }

   /// &lt;summary&gt;
   /// Retrieves information about the layer in which the sprite resides.
   /// &lt;/summary&gt;
   public override LayerBase ParentLayer
   {
      get
      {
         return layer;
      }
   }
   #endregion

   #region Abstract members
   /// &lt;summary&gt;
   /// How many pixels wide is the solid area of this sprite.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The solid area of the sprite is the area that avoids overlapping
   /// solid areas of the map. The width is measured from the origin and
   /// extends rightward. &lt;seealso cref="SolidHeight"/&gt;&lt;/remarks&gt;
   public abstract int SolidWidth
   {
      [Description("Returns the width of the sprite's solid area")]
      get;
   }

   /// &lt;summary&gt;
   /// How many pixels high is the solid area of this sprite. 
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The solid area of the sprite is the area that avoids overlapping
   /// solid areas of the map. The height is measured from the origin and
   /// extends downward. &lt;seealso cref="SolidWidth"/&gt;&lt;/remarks&gt;
   public abstract int SolidHeight
   {
      [Description("Returns the height of the sprite's solid area")]
      get;
   }

   /// &lt;summary&gt;
   /// Returns information about a specified state of this sprite
   /// &lt;/summary&gt;
   /// &lt;example&gt;The following code shows how you might retrieve the height
   /// of a sprite's crouching state assuming it has one:
   /// &lt;code&gt;crouchHeight = this[State.Crouch].LocalBounds.Height;&lt;/code&gt;&lt;/example&gt;
   public abstract SpriteState this[int state]
   {
      get;
   }

   /// &lt;summary&gt;
   /// Executes all the rules associated with this sprite.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;&lt;see cref="ProcessRules"/&gt; is the recommended alternative to execute the sprite's
   /// rules only once per frame by only calling ExecuteRules when the sprites rules haven't
   /// already been executed this frame. &lt;seealso cref="Processed"/&gt;&lt;/remarks&gt;
   protected abstract void ExecuteRules();

   /// &lt;summary&gt;
   /// Resets all parameter values defined on the specific sprite definition to 0.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is helpful in resetting a sprite's state without knowing specifically
   /// what its parameters are.  Then the sprite can internally re-initialize itself when
   /// it sees that it's parameters have been reset to 0.&lt;/remarks&gt;
   public abstract void ClearParameters();

   /// &lt;summary&gt;
   /// Remove the sprite from its designated categories.
   /// USE ONLY on dynamically added sprites.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is used by functions involved with the creation and deactivation of
   /// dynamically created sprites to ensure that a deactivated sprite no longer exists
   /// in any categories/collections. It's called by &lt;see cref="SpriteCollection.Clean"/&gt;,
   /// which is called by &lt;see cref="LayerBase.ProcessSprites"/&gt;.&lt;/remarks&gt;
   public abstract void RemoveFromCategories();

   #endregion

   #region Public Methods
   /// &lt;summary&gt;
   /// Returns information about the visual boundaries of the sprite's currently displayed frame(s).
   /// &lt;/summary&gt;
   /// &lt;returns&gt;Rectangle object containing layer-relative coordinates that encompass the
   /// sprite's current image.&lt;/returns&gt;
   public virtual System.Drawing.Rectangle GetBounds()
   {
      Debug.Assert(this.isActive, "Attempted to execute GetBounds on an inactive sprite");
      System.Drawing.Rectangle result = CurrentState.LocalBounds;
      result.Offset(PixelX, PixelY);
      return result;
   }

   /// &lt;summary&gt;
   /// Get a list of frameset frames that the sprite is currently displaying
   /// &lt;/summary&gt;
   /// &lt;returns&gt;
   /// Array of Frame objects representing the currently displayed frames.
   /// &lt;/returns&gt;
   /// &lt;remarks&gt;The array will only have more than one element if the sprite
   /// is currently displaying a composite frame.  The frames are ordered from
   /// background to foreground.&lt;/remarks&gt;
   public virtual Frame[] GetCurrentFramesetFrames()
   {
      Debug.Assert(this.isActive, "Attempted to execute GetCurrentFramesetFrames on an inactive sprite");
      SpriteState curstate = CurrentState;
      Frameset stateframes = curstate.Frameset;
      int[] subframes = curstate.GetFrame(frame);
      Frame[] result = new Frame[subframes.Length];
      for (int idx = 0; idx &lt; result.Length; idx++)
         result[idx] = stateframes[subframes[idx]];
      return result;
   }

   /// &lt;summary&gt;
   /// Execute the rules for this sprite if they have not already been executed this frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This checks &lt;see cref="Processed"/&gt; and calls &lt;see cref="ExecuteRules"/&gt;
   /// if it's not set, setting &lt;see cref="Processed"/&gt; to true first.  This function
   /// can be overridden in a partial class of the derived sprite to call ExecuteRules
   /// based on other conditions.&lt;/remarks&gt;
   public virtual void ProcessRules()
   {
      if ((!Processed) &amp;&amp; (this.isActive))
      {
         // Help prevent infinite recursion
         Processed = true;
         ExecuteRules();
      }
   }

   #endregion

   #region Sprite Interaction
   #region Rider Feature
   /// &lt;summary&gt;
   /// Stores the platform sprite (the sprite that this sprite rides on).
   /// If not set, then the sprite is not riding anything.
   /// &lt;/summary&gt;
   public SpriteBase RidingOn;
   /// &lt;summary&gt;
   /// Determines if this sprite's definition's rules have been processed yet this frame
   /// &lt;/summary&gt;
   [NonSerialized()]
   public bool Processed;

   /// &lt;summary&gt;
   /// Adjust this sprite's velocity according to the motion of the platform it is riding
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Apply this rule before &lt;see cref="ReactToSolid"/&gt; in order to prevent
   /// the platform from allowing the sprite to move through solids.&lt;/remarks&gt;
   [Description("Moves this sprite according to the motion of the platform it is riding.")]
   public virtual void ReactToPlatform()
   {
      Debug.Assert(this.isActive, "Attempted to execute ReactToPlatform on an inactive sprite");
      if (RidingOn == null)
         return;

      // Don't try to process the platform's rules if it's already moved.
      // Even though this is already being checked in ProcessRules, circular
      // references (which shouldn't exist) would lead to deadlock.
      if (!RidingOn.Processed)
         // Ensure that the sprite that this sprite is riding moves first
         RidingOn.ProcessRules();

      if ((RidingOn.isActive == false) || (x + SolidWidth &lt; RidingOn.oldX) || (x &gt; RidingOn.oldX + RidingOn.SolidWidth) ||
         (y + SolidHeight &lt; RidingOn.oldY - 1) || (y + SolidHeight &gt;= RidingOn.oldY + RidingOn.SolidHeight))
      {
         StopRiding();
         return;
      }

      if (double.IsNaN(LocalDX))
         Debug.Fail("LocalDX is not a number");
      else
         dx = LocalDX + RidingOn.dx;
      dy = RidingOn.y - SolidHeight - y;
   }

   /// &lt;summary&gt;
   /// Determine if the sprite is riding another sprite
   /// &lt;/summary&gt;
   /// &lt;returns&gt;True if this sprite is currently riding on another sprite&lt;/returns&gt;
   [Description("Determine if the sprite is riding another sprite")]
   public bool IsRidingPlatform()
   {
      Debug.Assert(this.isActive, "Attempted to execute IsRidingPlatform on an inactive sprite");
      return RidingOn != null;
   }

   /// &lt;summary&gt;
   /// Stop riding the sprite that this sprite is currently riding, if any.
   /// &lt;/summary&gt;
   [Description("Stop riding the sprite that this sprite is currently riding, if any.")]
   public virtual void StopRiding()
   {
      Debug.Assert(this.isActive, "Attempted to execute StopRiding on an inactive sprite");
      LocalDX = double.NaN;
      RidingOn = null;
   }

   /// &lt;summary&gt;
   /// Tests to see if this sprite is landing on a platform (from above), and if so,
   /// make the sprite ride the platform.
   /// &lt;/summary&gt;
   /// &lt;param name="PlatformList"&gt;List of platform sprites to check&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite landed on a platform, False if it is already riding a platform or doesn't need to&lt;/returns&gt;
   /// &lt;remarks&gt;
   /// This should be called after sprites are moved, but before
   /// they are drawn.&lt;/remarks&gt;
   [Description("Tests to see if this sprite is landing on a platform (from above). If it is, the sprite will begin riding the platform.")]
   public virtual bool LandDownOnPlatform(SpriteCollection PlatformList)
   {
      Debug.Assert(this.isActive, "Attempted to execute LandDownOnPlatform on an inactive sprite");
      if (RidingOn != null)
         return false;
      foreach (SpriteBase spr in PlatformList)
      {
         if (!spr.isActive)
            continue;
         if ((oldY + SolidHeight &lt;= spr.oldY) &amp;&amp;
            (y + SolidHeight &gt; spr.y) &amp;&amp;
            (x + SolidWidth &gt; spr.x) &amp;&amp;
            (x &lt; spr.x + spr.SolidWidth))
         {
            RidingOn = spr;
            spr.ProcessRules();
            LocalDX = dx - spr.dx;
            dy = spr.y - SolidHeight - y;
            return true;
         }
      }
      return false;
   }
   #endregion

   /// &lt;summary&gt;
   /// Determine whether the solidity rectangle of the sprite overlaps that of any sprite in the specified category.
   /// &lt;/summary&gt;
   /// &lt;param name="Targets"&gt;A sprite category containing sprites that will be checked for collision
   /// with this sprite.&lt;/param&gt;
   /// &lt;returns&gt;The index of the sprite within the category if a collision is occurring, otherwise -1.&lt;/returns&gt;
   /// &lt;remarks&gt;This can be used to force a simple rectangular collision test even if one or both
   /// sprites involved have a Mask Alpha level greater than 0.  This method is recommended
   /// for improved performance when pixel-perfect collision detection is not required.
   /// &lt;seealso cref="TestCollisionMask"/&gt;&lt;/remarks&gt;
   [Description("Determine whether the solidity rectangle of the sprite overlaps that of any sprite in the specified category. Return the index of the sprite within the category if a collision is occurring, otherwise return -1.")]
   public virtual int TestCollisionRect(SpriteCollection Targets)
   {
      if (!isActive)
         return -1;
      for (int idx = 0; idx &lt; Targets.Count; idx++)
      {
         SpriteBase TargetSprite = Targets[idx];
         if ((TargetSprite == this) || (!TargetSprite.isActive))
            continue;
         int x1 = PixelX;
         int w1 = SolidWidth;
         int x2 = TargetSprite.PixelX;
         int w2 = TargetSprite.SolidWidth;
         int y1 = PixelY;
         int h1 = SolidHeight;
         int y2 = TargetSprite.PixelY;
         int h2 = TargetSprite.SolidHeight;

         if ((x1 + w1 &gt; x2) &amp;&amp; (x2 + w2 &gt; x1) &amp;&amp; (y1 + h1 &gt; y2) &amp;&amp; (y2 + h2 &gt; y1))
            return idx;
      }
      return -1;
   }
   #endregion

   #region Movement
   /// &lt;summary&gt;
   /// Increment or decrement horizontal velocity 
   /// &lt;/summary&gt;
   /// &lt;param name="delta"&gt;Amount by which to change velocity in pixels per frame per frame&lt;/param&gt;
   [Description("Increment or decrement horizontal velocity")]
   public virtual void AlterXVelocity(double delta)
   {
      Debug.Assert(this.isActive, "Attempted to execute AlterXVelocity on an inactive sprite");
      dx += delta;
   }

   /// &lt;summary&gt;
   /// Increment or decrement vertical velocity 
   /// &lt;/summary&gt;
   /// &lt;param name="delta"&gt;Amount by which to change velocity in pixels per frame per frame&lt;/param&gt;
   [Description("Increment or decrement vertical velocity")]
   public virtual void AlterYVelocity(double delta)
   {
      Debug.Assert(this.isActive, "Attempted to execute AlterYVelocity on an inactive sprite");
      dy += delta;
   }

   /// &lt;summary&gt;
   /// Move this sprite according to its current velocity
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The &lt;see cref="oldX"/&gt; and &lt;see cref="oldY"/&gt; properties are
   /// set from the current position and a new position is calculated into
   /// &lt;see cref="x"/&gt; and &lt;see cref="y"/&gt; by adding &lt;see cref="dx"/&gt; and
   /// &lt;see cref="dy"/&gt; to them respectively.&lt;/remarks&gt;
   [Description("Move this sprite according to its current velocity")]
   public virtual void MoveByVelocity()
   {
      Debug.Assert(this.isActive, "Attempted to execute MoveByVelocity on an inactive sprite");
      oldX = x;
      oldY = y;
      x += dx;
      y += dy;
   }

   /// &lt;summary&gt;
   /// If the velocity of the sprite is more than the specified maximum, normalize it so that
   /// it's going the same direction, but at no more that the specified maximum speed.
   /// &lt;/summary&gt;
   /// &lt;param name="Maximum"&gt;Specifies the maximum speed in pixels per frame&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;The speed of the sprite is calculated with the distance formula, so a sprite
   /// moving 3 pixels horizontally and 4 pixels vertically, for example, is considered to be
   /// moving 5 pixels.&lt;/para&gt;
   /// &lt;para&gt;If the sprite is riding a platform, the maximum velocity is applied relative to
   /// the platform. For example, if the platform is moving rightward at 3 pixels per frame,
   /// and the sprite is moving rightward at 5 pixels per frame relative to the platform (8
   /// pixels per frame in absolute terms), and the maximum is set to 4 pixels per frame,
   /// the sprite's &lt;see cref="LocalDX"/&gt; will be reduced to 4 rather than to 1&lt;/para&gt;.&lt;/remarks&gt;
   [Description("Limit the velocity of the sprite to the specified maximum pixels per frame (affects only local velocity when applicable)")]
   public virtual void LimitVelocity(int Maximum)
   {
      Debug.Assert(this.isActive, "Attempted to execute LimitVelocity on an inactive sprite");
      double useDX, useDY;
      if (double.IsNaN(LocalDX))
         useDX = dx;
      else
         useDX = LocalDX;
      if (double.IsNaN(LocalDY))
         useDY = dy;
      else
         useDY = LocalDY;
      double dist = useDX * useDX + useDY * useDY;
      if (dist &gt; Maximum * Maximum)
      {
         dist = Math.Sqrt(dist);
         useDX = useDX * Maximum / dist;
         useDY = useDY * Maximum / dist;
         if (double.IsNaN(LocalDX))
            dx = useDX;
         else
            LocalDX = useDX;
         if (double.IsNaN(LocalDY))
            dy = useDY;
         else
            LocalDY = useDY;
      }
   }

   /// &lt;summary&gt;
   /// Reduces the sprite's velocity to simulate friction.
   /// &lt;/summary&gt;
   /// &lt;param name="RetainPercentVertical"&gt;What percent (0 to 100) of the sprite's horizontal velocity
   /// (&lt;see cref="dx"/&gt;) is retained.&lt;/param&gt;
   /// &lt;param name="RetainPercentHorizontal"&gt;What percent (0 to 100) of the sprite's vertical
   /// velocity (&lt;see cref="dy"/&gt;) is retained.&lt;/param&gt;
   /// &lt;remarks&gt;Note that inertia may have unexpected side-effects on gravity.  For example,
   /// if RetainPercentVertical is set to zero, this will cause the sprite to start from a
   /// vertical velocity of 0 on every frame, which will result in gravity being unable to
   /// accumulate any effect.  It's best to set RetainPercentVertical to a high number or 100
   /// when gravity is in effect. A gravity effect is simply an automatic adjustment to the
   /// Y velocity with &lt;see cref="AlterYVelocity"/&gt;.&lt;/remarks&gt;
   [Description("Reduces the sprite's velocity to simulate friction.  RetainPercent is a number 0 to 100 indicating how much inertia is retained.")]
   public virtual void ReactToInertia(int RetainPercentVertical, int RetainPercentHorizontal)
   {
      Debug.Assert(this.isActive, "Attempted to execute ReactToInertia on an inactive sprite");
      if (double.IsNaN(LocalDX))
      {
         if (Math.Abs(dx) &lt; .01)
            dx = 0;
         else
            dx *= RetainPercentHorizontal / 100.0f;
      }
      else
      {
         if (Math.Abs(LocalDX) &lt; .01)
            LocalDX = 0;
         else
            LocalDX *= RetainPercentHorizontal / 100.0f;
      }
      if (double.IsNaN(LocalDY))
      {
         if (Math.Abs(dy) &lt; .01)
            dy = 0;
         else
            dy *= RetainPercentVertical / 100.0f;
      }
      else
      {
         if (Math.Abs(LocalDY) &lt; .01)
            LocalDY = 0;
         else
            LocalDY *= RetainPercentVertical / 100.0f;
      }
   }

   /// &lt;summary&gt;
   /// Determines if the sprite is moving in the specified direction at all.
   /// &lt;/summary&gt;
   /// &lt;param name="Direction"&gt;Determines which direction to check&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite has any movement in the specified direction, otherwise false.&lt;/returns&gt;
   [Description("Returns true if the sprite is moving in the specified direction")]
   public virtual bool IsMoving(Direction Direction)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsMoving on an inactive sprite");
      double useDX, useDY;
      if (double.IsNaN(LocalDX))
         useDX = dx;
      else
         useDX = LocalDX;
      if (double.IsNaN(LocalDY))
         useDY = dy;
      else
         useDY = LocalDY;

      switch (Direction)
      {
         case Direction.Left:
            return useDX &lt; 0;
         case Direction.Right:
            return useDX &gt; 0;
         case Direction.Up:
            return useDY &lt; 0;
         case Direction.Down:
            return useDY &gt; 0;
      }
      return false;
   }

   /// &lt;summary&gt;
   /// Scroll all layers on this sprite's layer's map so that the sprite is within visible area of the map.
   /// &lt;/summary&gt;
   /// &lt;param name="UseScrollMargins"&gt;If true, scroll the sprite into the scroll margins of the map. Otherwise just scroll the layers var enough so the sprite is within the edges of the display.&lt;/param&gt;
   /// &lt;remarks&gt;For a multi-player game where both players are in the same view, you may want to
   /// set UseScrollMargins to false in order to allow the players to get closer to the edge of the
   /// display when moving apart from one another. This function will not affect layers with a scroll
   /// rate of zero. &lt;seealso cref="PushSpriteIntoView"/&gt;
   /// &lt;/remarks&gt;
   [Description("Scroll all layers on this sprite's layer's map so that the sprite is within visible area of the map.  If UseScrollMargins is true, scroll the sprite into the scroll margins of the map.")]
   public virtual void ScrollSpriteIntoView(bool UseScrollMargins)
   {
      ParentLayer.ScrollSpriteIntoView(this, UseScrollMargins);
   }

   /// &lt;summary&gt;
   /// Compute the index of the nearest active sprite from the specified category and return it.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Sprite category whose sprites will be searched for sprites near this sprite.&lt;/param&gt;
   /// &lt;returns&gt;An integer representing the 0-based index of the nearest active sprite, or -1 if
   /// there are no active sprites in the specified category.&lt;/returns&gt;
   /// &lt;remarks&gt;The output of this function would commonly be stored in a sprite parameter for
   /// passing to &lt;see cref="PushTowardCategory "/&gt;.&lt;/remarks&gt;
   [Description("Compute the index of the nearest active sprite from the specified category and return it.")]
   public virtual int GetNearestSpriteIndex(SpriteCollection Target)
   {
      int minDist = int.MaxValue;
      int result = -1;
      for (int i = 0; i &lt; Target.Count; i++)
      {
         if ((!Target[i].isActive) || (Target[i] == this))
            continue;
         int xOff = Target[i].PixelX - PixelX;
         int yOff = Target[i].PixelY - PixelY;
         int dist = xOff * xOff + yOff * yOff;
         if (dist &lt; minDist)
         {
            minDist = dist;
            result = i;
         }
      }
      return result;
   }

   /// &lt;summary&gt;
   /// Push this sprite toward a sprite in the specified category.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies a category containint the target
   /// sprite toward which this sprite will be pushed.&lt;/param&gt;
   /// &lt;param name="Index"&gt;Specifies the 0-based index of a sprite in the specified category.
   /// Use &lt;see cref="GetNearestSpriteIndex"/&gt; to compute the index of the nearest sprite, which
   /// can then be passed to this parameter.  Pass -1 in this parameter to push the sprite toward
   /// the current nearest sprite rather than a pre-computed index.&lt;/param&gt;
   /// &lt;param name="Force"&gt;Force in tenths of a pixel per frame per frame that will be applied.&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite was pushed, or false if there are no active sprites in the
   /// target category or the sprite is already overlapping the target.&lt;/returns&gt;
   /// &lt;remarks&gt;If there is no active sprite in the target category, or if the sprite is overlapping
   /// the target exactly, this function will have no effect.
   /// &lt;seealso cref="SetInputsTowardCategory"/&gt;
   /// &lt;seealso cref="PushTowardSprite"/&gt;
   /// &lt;seealso cref="SetInputsTowardSprite"/&gt;&lt;/remarks&gt;
   [Description("Push this sprite toward a sprite in the specified category. Use GetNearestSpriteIndex to compute the index of the nearest sprite and pass that to Index, or pass -1 to push toward the current nearest sprite. Force is in tenths of a pixel per frame per frame.")]
   public virtual bool PushTowardCategory(SpriteCollection Target, int Index, int Force)
   {
      Debug.Assert(this.isActive, "Attepmted to execute PushTowardCategory on an inactive sprite");
      Debug.Assert(Index &lt; Target.Count, "Attempted to PushTowardCategory on an index beyond the bounds of a collection");

      if (Index &lt; 0)
         Index = GetNearestSpriteIndex(Target);
      if (Index &lt; 0)
         return false;

      return PushTowardSprite(Target[Index], Force);
   }

   /// &lt;summary&gt;
   /// Push this sprite toward a specified sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Sprite toward which this sprite is pushed.&lt;/param&gt;
   /// &lt;param name="Force"&gt;Acceleration force in tenths of a pixel per frame per frame.&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite is pushed or false if the sprite is already overlapping
   /// the target.
   /// &lt;seealso cref="PushTowardCategory"/&gt;
   /// &lt;seealso cref="SetInputsTowardSprite"/&gt;
   /// &lt;seealso cref="SetInputsTowardCategory"/&gt;&lt;/returns&gt;
   public virtual bool PushTowardSprite(SpriteBase Target, int Force)
   {
      double vx = Target.PixelX - PixelX + (Target.SolidWidth - SolidWidth) / 2;
      double vy = Target.PixelY - PixelY + (Target.SolidHeight - SolidHeight) / 2;
      double dist = Math.Sqrt(vx * vx + vy * vy);
      if (dist &gt;= 1)
      {
         dx += vx * Force / dist / 10.0;
         dy += vy * Force / dist / 10.0;
         return true;
      }
      return false;
   }
   #endregion

   #region States and animation

   /// &lt;summary&gt;
   /// Advance the animation frame of this sprite according to its velocity or a constant rate.
   /// &lt;/summary&gt;
   /// &lt;param name="Correlation"&gt;Determines how and if the sprite's animation speed should be
   /// based on its movement.&lt;/param&gt;
   [Description("Advance the animation frame of this sprite according to its velocity or a constant rate")]
   public virtual void Animate(SpriteAnimationType Correlation)
   {
      Debug.Assert(this.isActive, "Attempted to execute Animate on an inactive sprite");
      switch (Correlation)
      {
         case SpriteAnimationType.ByFrame:
            frame++;
            break;
         case SpriteAnimationType.ByHorizontalVelocity:
            if (double.IsNaN(LocalDX))
               frame += System.Math.Abs(ProposedPixelX - PixelX);
            else
               frame += System.Math.Abs((int)LocalDX);
            break;
         case SpriteAnimationType.ByVerticalVelocity:
            if (double.IsNaN(LocalDY))
               frame += System.Math.Abs(ProposedPixelY - PixelY);
            else
               frame += System.Math.Abs((int)LocalDY);
            break;
         case SpriteAnimationType.ByVectorVelocity:
            {
               int tmpDx = ProposedPixelX - PixelX;
               int tmpDy = ProposedPixelY - PixelY;
               frame += (int)(System.Math.Sqrt(tmpDx * tmpDx + tmpDy * tmpDy));
            }
            break;
      }
   }

   /// &lt;summary&gt;
   /// Switch the sprite to the the specified state, ensuring that the sprite doesn't hit a solid.
   /// &lt;/summary&gt;
   /// &lt;param name="State"&gt;State to which the sprite will be switched&lt;/param&gt;
   /// &lt;param name="Alignment"&gt;Specifies a point within the sprite which will remain constant.  For example, RelativePosition.BottomCenter will ensure that the bottom center point of the new state aligns with the bottom center point of this state.&lt;/param&gt;
   /// &lt;returns&gt;True if the state could be switched, false if the new state's differing size would
   /// have caused the sprite the sprite to pass through a solid tile.&lt;/returns&gt;
   /// &lt;remarks&gt;This function is handy for performing action like switching from a crouching
   /// state to a standing state because it will prevent you from standing up if there is a low
   /// ceiling in the way. It also helps you align the two states properly. For example, if you
   /// switched from the crouching state to the standing state without moving the sprite at
   /// all, the origin (usually the top left corner of the sprite) would remain in the same place,
   /// which would cause the head to remain in the same place and the feet to stick through the
   /// floor. But by using the Alignment paremeter, you can make sure that the botton of the
   /// new state aligns with the bottom of the current state.&lt;/remarks&gt;
   [Description("Switch the sprite to the the specified state, ensuring that the specified alignment point in the new state lines up with the same point in the current state.  Returns false if the state could not switch due to solidity.")]
   public virtual bool SwitchToState([Editor("SpriteState", "UITypeEditor")] int State, RelativePosition Alignment)
   {
      Debug.Assert(this.isActive, "Attempted to execute SwitchToState on an inactive sprite");
      System.Drawing.Rectangle oldRect = new System.Drawing.Rectangle(PixelX, PixelY, SolidWidth, SolidHeight);
      int newWidth = this[State].SolidWidth;
      int newHeight = this[State].SolidHeight;
      double newX, newY;
      switch (Alignment)
      {
         case RelativePosition.TopCenter:
         case RelativePosition.CenterMiddle:
         case RelativePosition.BottomCenter:
            newX = x + (oldRect.Width - newWidth) / 2f;
            break;
         case RelativePosition.TopRight:
         case RelativePosition.RightMiddle:
         case RelativePosition.BottomRight:
            newX = x + oldRect.Width - newWidth;
            break;
         default:
            newX = x;
            break;
      }
      switch (Alignment)
      {
         case RelativePosition.LeftMiddle:
         case RelativePosition.CenterMiddle:
         case RelativePosition.RightMiddle:
            newY = y + (oldRect.Height - newHeight) / 2f;
            break;
         case RelativePosition.BottomLeft:
         case RelativePosition.BottomCenter:
         case RelativePosition.BottomRight:
            newY = y + oldRect.Height - newHeight;
            break;
         default:
            newY = y;
            break;
      }

      if (((int)Math.Ceiling(newY + newHeight) &gt; oldRect.Bottom) &amp;&amp; (layer.GetTopSolidPixel(new System.Drawing.Rectangle(
         (int)newX, oldRect.Bottom, newWidth, (int)Math.Ceiling(newY) + newHeight - oldRect.Bottom), m_solidity) != int.MinValue))
         return false;

      if (((int)newY &lt; oldRect.Top) &amp;&amp; (layer.GetBottomSolidPixel(new System.Drawing.Rectangle(
         (int)newX, (int)newY, newWidth, oldRect.Top - (int)newY), m_solidity) != int.MinValue))
         return false;

      if (((int)newX &lt; oldRect.Left) &amp;&amp; (layer.GetRightSolidPixel(new System.Drawing.Rectangle(
         (int)newX, (int)newY, oldRect.Left - (int)newX, newHeight), m_solidity) != int.MinValue))
         return false;

      if (((int)Math.Ceiling(newX + newWidth) &gt; oldRect.Right) &amp;&amp; (layer.GetLeftSolidPixel(new System.Drawing.Rectangle(
         oldRect.Right, (int)newY, (int)Math.Ceiling(newX) + newWidth - oldRect.Right, newHeight), m_solidity) != int.MinValue))
         return false;

      x = newX;
      y = newY;
      state = State;
      return true;
   }

   /// &lt;summary&gt;
   /// Determines if the sprite is in the specified range of states.
   /// &lt;/summary&gt;
   /// &lt;param name="FirstState"&gt;Minimum state number&lt;/param&gt;
   /// &lt;param name="LastState"&gt;Maximum state number&lt;/param&gt;
   /// &lt;returns&gt;Returns true if the sprite's current state is equal to &lt;paramref name="FirstState" /&gt; or
   /// &lt;paramref name="LastState" /&gt; or any state in between. False otherwise.&lt;/returns&gt;
   [Description("Determines if the sprite is in the specified range of states")]
   public virtual bool IsInState([Editor("SpriteState", "UITypeEditor")] int FirstState, [Editor("SpriteState", "UITypeEditor")] int LastState)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsInState on an inactive sprite");
      return (state &gt;= FirstState) &amp;&amp; (state &lt;= LastState);
   }

   #endregion

   #region Input Processing
   /// &lt;summary&gt;
   /// Determine if the specified input is being pressed for this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="Input"&gt;Which of thes sprite's inputs should be checked&lt;/param&gt;
   /// &lt;param name="InitialOnly"&gt;If this is true, the result will only be true if the input has just been pressed and was not pressed before.&lt;/param&gt;
   /// &lt;returns&gt;If &lt;paramref name="InitialOnly" /&gt; is set, true only when the specified input on this
   /// sprite has just been turned on or pressed, otherwise true if the input is currently on or
   /// "pressed" regardless of the previous state of the input.&lt;/returns&gt;
   /// &lt;remarks&gt;This function uses &lt;see cref="oldinputs"/&gt; to determine whether an input
   /// was pressed before or not (when InitialOnly is true). &lt;see cref="oldinputs"/&gt;
   /// is automatically managed by the &lt;see cref="MapPlayerToInputs"/&gt; function.
   /// &lt;seealso cref="oldinputs"/&gt;&lt;/remarks&gt;
   [Description("Determine if the specified input is being pressed for this sprite.  InitialOnly causes this to return true only if the input has just been pressed and was not pressed before.")]
   public virtual bool IsInputPressed(InputBits Input, bool InitialOnly)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsInputPressed on an inactive sprite");
      return (0 != (inputs &amp; Input)) &amp;&amp;
         (!InitialOnly || (0 == (oldinputs &amp; Input)));
   }

   /// &lt;summary&gt;
   /// Turns on or off the specified input on this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="Input"&gt;Indicates a particular input to be affected.&lt;/param&gt;
   /// &lt;param name="Press"&gt;True if the input should be turned on or "pressed", False if the
   /// input should be turned off or "released".&lt;/param&gt;
   /// &lt;remarks&gt;Although this function can be used to set a sprite's inputs based on rules,
   /// &lt;see cref="MapPlayerToInputs"/&gt; is the recommended means for setting inputs on a
   /// sprite. &lt;see cref="SetInputState"/&gt; does not affect &lt;see cref="oldinputs"/&gt;, so if
   /// you want to use this function with the InitialOnly feature of
   /// &lt;see cref="IsInputPressed"/&gt;, you will have to manage &lt;see cref="oldinputs"/&gt;
   /// manually.&lt;/remarks&gt;
   [Description("Turns on or off the specified input on this sprite.")]
   public virtual void SetInputState(InputBits Input, bool Press)
   {
      Debug.Assert(this.isActive, "Attempted to execute SetInputState on an inactive sprite");
      if (Press)
         inputs |= Input;
      else
         inputs &amp;= ~Input;
   }

   /// &lt;summary&gt;
   /// Turns off all current inputs on this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="SetOldInputs"&gt;True if you want to remember the current set of inputs
   /// as the inputs for the previous frame (&lt;see cref="oldinputs"/&gt;).
   /// False if you just want to clear the inputs.&lt;/param&gt;
   [Description("Turns off all current inputs on this sprite.")]
   public virtual void ClearInputs(bool SetOldInputs)
   {
      Debug.Assert(this.isActive, "Attempted to execute ClearInputs on an inactive sprite");
      if (SetOldInputs)
         oldinputs = inputs;
      inputs = 0;
   }

   /// &lt;summary&gt;
   /// Associate the state of the input device for the specified player with the inputs on this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="PlayerNumber"&gt;Player number 1 through 4. The number must not exceed
   /// the maximum number of players specified in the project properties and stored in
   /// &lt;see cref="Project.MaxPlayers"/&gt;.&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;Before the inputs are mapped from the player's input device to the sprite,
   /// the existing inputs are copied from &lt;see cref="inputs"/&gt; to &lt;see cref="oldinputs"/&gt;
   /// so other rules will be able to determine which inputs were pressed before.&lt;/para&gt;
   /// &lt;para&gt;The input device is defined by the player at runtime, and may come from a
   /// joystick, gamepad or keyboard.&lt;/para&gt;&lt;/remarks&gt;
   [Description("Associate the state of the input device for the specified player (1-4) with the inputs on this sprite.")]
   public virtual void MapPlayerToInputs(int PlayerNumber)
   {
      Debug.Assert(this.isActive, "Attempted to execute MapPlayerToInput on an inactive sprite");
      if (PlayerNumber &gt; Project.MaxPlayers)
      {
         Debug.Fail("Attempted to map inactive player input");
         return;
      }
      oldinputs = inputs;
      IPlayer player = Project.GameWindow.Players[PlayerNumber - 1];
      inputs = 0;
      if (PlayerPressButton(PlayerNumber, player))
      {
         if (player.Up) inputs |= InputBits.Up;
         if (player.Left) inputs |= InputBits.Left;
         if (player.Right) inputs |= InputBits.Right;
         if (player.Down) inputs |= InputBits.Down;
         if (player.Button1) inputs |= InputBits.Button1;
         if (player.Button2) inputs |= InputBits.Button2;
         if (player.Button3) inputs |= InputBits.Button3;
         if (player.Button4) inputs |= InputBits.Button4;
      }
   }

   /// &lt;summary&gt;
   /// Accelerate this sprite according to which directional inputs are on/pressed.
   /// &lt;/summary&gt;
   /// &lt;param name="Acceleration"&gt;Specifies how much effect any input can have on acceleration in tenths of a pixel per frame per frame&lt;/param&gt;
   /// &lt;param name="Max"&gt;Specifies the maximum speed to which the sprite can accelerate along any particular axis in pixels per frame&lt;/param&gt;
   /// &lt;param name="HorizontalOnly"&gt;If this is true, only horizontal acceleration will be applied. (Often times in platform games,
   /// a sprite can move horizontally, but in order to move vertically, must jump.)&lt;/param&gt;
   /// &lt;remarks&gt;If the sprite's &lt;see cref="LocalDX"/&gt; or &lt;see cref="LocalDY"/&gt; properties are
   /// set (if the sprite is riding another sprite) this will affect the local velocity and
   /// affect &lt;see cref="dx"/&gt; and/or &lt;see cref="dy"/&gt; only indirectly.&lt;/remarks&gt;
   /// &lt;example&gt;
   /// The following example would accelerate a sprite horizontally at 1 pixel per frame per frame
   /// up to a maximum of 5 pixels per frame.
   /// &lt;code&gt;AccelerateByInputs(10, 5, true)&lt;/code&gt;&lt;/example&gt;
   [Description("Accelerate this sprite according to which directional inputs are on.  Acceleration is in tenths of a pixel per frame squared.  Max is in pixels per frame.")]
   public virtual void AccelerateByInputs(int Acceleration, int Max, bool HorizontalOnly)
   {
      Debug.Assert(this.isActive, "Attempted to execute AccelerateByInputs on an inactive sprite");
      if (!HorizontalOnly)
      {
         if (double.IsNaN(LocalDY))
         {
            if (0 != (inputs &amp; InputBits.Up))
               dy -= ((double)Acceleration) / 10.0d;
            if (dy &lt; -(double)Max)
               dy = -(double)Max;
            if (0 != (inputs &amp; InputBits.Down))
               dy += ((double)Acceleration) / 10.0d;
            if (dy &gt; (double)Max)
               dy = (double)Max;
         }
         else
         {
            if (0 != (inputs &amp; InputBits.Up))
               LocalDY -= ((double)Acceleration) / 10.0d;
            if (LocalDY &lt; -(double)Max)
               LocalDY = -(double)Max;
            if (0 != (inputs &amp; InputBits.Down))
               LocalDY += ((double)Acceleration) / 10.0d;
            if (LocalDY &gt; (double)Max)
               LocalDY = (double)Max;
         }
      }
      if (double.IsNaN(LocalDX))
      {
         if (0 != (inputs &amp; InputBits.Left))
            dx -= ((double)Acceleration) / 10.0d;
         if (dx &lt; -(double)Max)
            dx = -(double)Max;
         if (0 != (inputs &amp; InputBits.Right))
            dx += ((double)Acceleration) / 10.0d;
         if (dx &gt; (double)Max)
            dx = (double)Max;
      }
      else
      {
         if (0 != (inputs &amp; InputBits.Left))
            LocalDX -= ((double)Acceleration) / 10.0d;
         if (LocalDX &lt; -(double)Max)
            LocalDX = -(double)Max;
         if (0 != (inputs &amp; InputBits.Right))
            LocalDX += ((double)Acceleration) / 10.0d;
         if (LocalDX &gt; (double)Max)
            LocalDX = (double)Max;
      }
   }

   /// &lt;summary&gt;
   /// Set the state of the directional inputs on this sprite to move toward the specified sprite in a category.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies the sprite collection containing the sprite toward which this sprite will try to move.&lt;/param&gt;
   /// &lt;param name="Index"&gt;Use &lt;see cref="GetNearestSpriteIndex"/&gt; to compute this value or pass -1 to compute the current nearest sprite each time this is called.&lt;/param&gt;
   /// &lt;remarks&gt;This function assumes that the directional inputs on the sprite
   /// cause the sprite to move directly in the direction associated with the input.  It will
   /// not work if, for example, left arrow causes the sprite to turn left instead of move left.
   /// &lt;seealso cref="SetInputsTowardSprite"/&gt;
   /// &lt;seealso cref="PushTowardCategory"/&gt;
   /// &lt;seealso cref="GetNearestSpriteIndex"/&gt;&lt;/remarks&gt;
   [Description("Set the state of the directional inputs on this sprite to move toward the specified sprite in a category, assuming the input causes the sprite to move directly in its direction. Use GetNearestSpriteIndex to compute an Index or pass -1 to use the current nearest sprite.")]
   public virtual void SetInputsTowardCategory(SpriteCollection Target, int Index)
   {
      Debug.Assert(this.isActive, "Attepmted to execute SetInputsTowardCategory on an inactive sprite");
      Debug.Assert(Index &lt; Target.Count, "Attempted to SetInputsTowardCategory on an index beyond the bounds of a collection");

      if (Index &lt; 0)
         Index = GetNearestSpriteIndex(Target);
      if (Index &lt; 0)
      {
         inputs &amp;= ~(InputBits.Left | InputBits.Right | InputBits.Up | InputBits.Down);
         return;
      }

      SetInputsTowardSprite(Target[Index]);
   }

   /// &lt;summary&gt;
   /// Set the state of the directional inputs on this sprite to move toward the specified sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies the sprite collection containing the sprite toward which
   /// this sprite will try to move.&lt;/param&gt;
   /// &lt;remarks&gt;This function is not exposed as a rule function because it is intended to be
   /// called by a plan or other code that can provide a target sprite based on specific
   /// context whereas a sprite definition rule function is supposed to be generic.
   /// This is called by &lt;see cref="SetInputsTowardCategory"/&gt;.&lt;/remarks&gt;
   public virtual void SetInputsTowardSprite(SpriteBase Target)
   {
      int targetCenter = Target.PixelX + Target.SolidWidth / 2;
      int myCenter = PixelX + SolidWidth / 2;

      if (targetCenter &lt; myCenter)
         inputs |= InputBits.Left;
      else if (targetCenter &gt; myCenter)
         inputs |= InputBits.Right;
      else
         inputs &amp;= ~(InputBits.Left | InputBits.Right);

      targetCenter = Target.PixelY + Target.SolidHeight / 2;
      myCenter = PixelY + SolidHeight / 2;
      if (targetCenter &lt; myCenter)
         inputs |= InputBits.Up;
      else if (targetCenter &gt; myCenter)
         inputs |= InputBits.Down;
      else
         inputs &amp;= ~(InputBits.Up | InputBits.Down);
   }

   /// &lt;summary&gt;
   /// Move the sprite to the position of the mouse cursor and set the sprite's button inputs based on mouse button states.
   /// &lt;/summary&gt;
   /// &lt;param name="InstantMove"&gt;If true, the sprite will be moved immediately without regard to
   /// the existing position or solidity or anything else.  If false, the sprite's position will
   /// not be immediately changed, but its velocity will be set so that the sprite will end up at
   /// the mouse cursor's location after &lt;see cref="MoveByVelocity"/&gt; executes. Note that moving
   /// the sprite instantly will ignore solidity and will not work well with sprites riding on
   /// this sprite, while allowing just the velocity to be set will allow this, but limit the
   /// sprite's movement based on solidity.&lt;/param&gt;
   /// &lt;param name="hotSpot"&gt;Which part of the sprite will move to the mouse point.&lt;/param&gt;
   /// &lt;remarks&gt;Before the button inputs are mapped from the mouse to the sprite,
   /// the existing inputs are copied from &lt;see cref="inputs"/&gt; to &lt;see cref="oldinputs"/&gt;
   /// so other rules will be able to determine which buttons were pressed before.
   /// &lt;/remarks&gt;
   [Description("Move the sprite to the position of the mouse cursor and set the sprite's button inputs based on mouse button states. If InstantMove is true, the sprite will be moved immediately, otherwise it the velocity will be set to move when MoveByVelocity runs.")]
   public virtual void MapMouseToSprite(bool InstantMove, RelativePosition hotSpot)
   {
      System.Drawing.Point pos = ParentLayer.GetMousePosition();
      System.Drawing.Point hotPoint = GetRelativePosition(hotSpot);
      if (InstantMove)
      {
         oldX = x;
         oldY = y;
         x = pos.X + x - hotPoint.X;
         y = pos.Y + y - hotPoint.Y;
      }
      else
      {
         dx = pos.X - hotPoint.X;
         dy = pos.Y - hotPoint.Y;
      }
      oldinputs = inputs;
      inputs = 0;
      if (0 != (System.Windows.Forms.Control.MouseButtons &amp; System.Windows.Forms.MouseButtons.Left))
         inputs |= InputBits.Button1;
      if (0 != (System.Windows.Forms.Control.MouseButtons &amp; System.Windows.Forms.MouseButtons.Right))
         inputs |= InputBits.Button2;
      if (0 != (System.Windows.Forms.Control.MouseButtons &amp; System.Windows.Forms.MouseButtons.Middle))
         inputs |= InputBits.Button3;
   }
   #endregion

   #region Solidity
   /// &lt;summary&gt;
   /// Set the solidity rules to which the sprite is currently reacting.
   /// &lt;/summary&gt;
   /// &lt;param name="Solidity"&gt;Specified which solidity rules should adopt.&lt;/param&gt;
   /// &lt;remarks&gt;Since solidity is based on tile categories which in turn can contain
   /// tiles from multiple tilesets, the same solidity definition can apply to any
   /// number of maps with different tilesets. So this doesn't need to be called
   /// just to handle tiles from a different tileset, but could be called to make
   /// the sprite act differently to all tiles (for example, to suddenly be able to
   /// traverse any water).&lt;/remarks&gt;
   [Description("Set the solidity rules to which the sprite is currently reacting.")]
   public virtual void SetSolidity(Solidity Solidity)
   {
      m_solidity = Solidity;
   }

   /// &lt;summary&gt;
   /// Alter the sprite's velocity to react to solid areas on the map.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;True if the sprite's velocity was altered; in other words, if it pushed
   /// against something solid. That doesn't necessarily mean the sprite was stopped by
   /// something solid because it may just be pushed uphill.&lt;/returns&gt;
   /// &lt;remarks&gt;It is recommended that this be the last rule applied to the sprite's velocity
   /// before &lt;see cref="MoveByVelocity"/&gt; is applied. This will help ensure that the sprite
   /// never goes through solids even if scrolling and platforms try to make it.&lt;/remarks&gt;
   [Description("Alter the sprite's velocity to react to solid areas on the map.  Returns true if velocity is affected by solid.")]
   public virtual bool ReactToSolid()
   {
      Debug.Assert(this.isActive, "Attempted to execute ReactToSolid on an inactive sprite");
      if (m_solidity == null)
         throw new System.ApplicationException("Attempted to execute ReactToSolid on sprite without solidity defined");
      bool hit = false;
      double dyOrig = dy;
      double dxOrig = dx;

      int ProposedPixelY2 = (int)Math.Ceiling(y + dy);
      int SolidPixelWidth = SolidWidth + (int)Math.Ceiling(x) - PixelX;
      if (dy &gt; 0)
      {
         int ground = layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX, PixelY + SolidHeight, SolidPixelWidth, ProposedPixelY2 - PixelY), m_solidity);
         if (ground != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ground - SolidHeight - y;
            hit = true;
         }
      }
      else if (dy &lt; 0)
      {
         int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX, ProposedPixelY, SolidPixelWidth, PixelY - ProposedPixelY), m_solidity);
         if (ceiling != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ceiling + 1 - y;
            hit = true;
         }
      }

      if (dx &gt; 0)
      {
         int ProposedPixelX2 = (int)Math.Ceiling(x + dx);
         int PixelX2 = (int)Math.Ceiling(x);
         int rightwall = layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, ProposedPixelY, ProposedPixelX2 - PixelX2, SolidHeight), m_solidity);
         bool hitWall = false;
         if (rightwall != int.MinValue)
         {
            int maxSlopeProposedY = (int)(y + dy - dx);
            int slopedFloor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, maxSlopeProposedY + SolidHeight, ProposedPixelX2 - PixelX2, ProposedPixelY - maxSlopeProposedY), m_solidity);
            if (slopedFloor != int.MinValue)
            {
               int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX2, slopedFloor - SolidHeight, SolidWidth, ProposedPixelY + SolidHeight - slopedFloor), m_solidity);
               if ((ceiling == int.MinValue) &amp;&amp; (RidingOn == null))
               {
                  int rightwall2 = layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, slopedFloor - SolidHeight, ProposedPixelX2 - PixelX2, SolidHeight), m_solidity);
                  if (rightwall2 == int.MinValue)
                     // Do integer arithmetic before double otherwise strange rounding seems to happen
                     dy = dyOrig = slopedFloor - SolidHeight - 1 - y;
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            else
            {
               maxSlopeProposedY = (int)(y + dy + dx);
               int slopedCeiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, ProposedPixelY, ProposedPixelX2 - PixelX2, maxSlopeProposedY - ProposedPixelY), m_solidity);
               if (slopedCeiling != int.MinValue)
               {
                  slopedCeiling++;
                  int floor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX2, ProposedPixelY + SolidHeight, SolidWidth, slopedCeiling - ProposedPixelY), m_solidity);
                  if ((floor == int.MinValue) &amp;&amp; (RidingOn == null))
                  {
                     int rightwall2 = layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, slopedCeiling, ProposedPixelX2 - PixelX2, SolidHeight), m_solidity);
                     if (rightwall2 == int.MinValue)
                        dy = dyOrig = slopedCeiling - y;
                     else
                        hitWall = true;
                  }
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            if (hitWall)
            {
               // Do integer arithmetic before double otherwise strange rounding seems to happen
               dx = rightwall - SolidWidth - x;
            }
            hit = true;
         }
      }
      else if (dx &lt; 0)
      {
         int leftwall = layer.GetRightSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY, PixelX - ProposedPixelX, SolidHeight), m_solidity);
         bool hitWall = false;
         if (leftwall != int.MinValue)
         {
            int maxSlopeProposedY = (int)(y + dy + dx);
            int slopedFloor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, maxSlopeProposedY + SolidHeight, PixelX - ProposedPixelX, ProposedPixelY - maxSlopeProposedY), m_solidity);
            if (slopedFloor != int.MinValue)
            {
               int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX, slopedFloor - SolidHeight, SolidWidth, ProposedPixelY + SolidHeight - slopedFloor), m_solidity);
               if ((ceiling == int.MinValue) &amp;&amp; (RidingOn == null))
               {
                  int leftwall2 = layer.GetRightSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, slopedFloor - SolidHeight, PixelX - ProposedPixelX, SolidHeight), m_solidity);
                  if (leftwall2 == int.MinValue)
                     // Do integer arithmetic before double otherwise strange rounding seems to happen
                     dy = dyOrig = slopedFloor - SolidHeight - 1 - y;
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            else
            {
               maxSlopeProposedY = (int)(y + dy - dx);
               int slopedCeiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY, PixelX - ProposedPixelX, maxSlopeProposedY - ProposedPixelY), m_solidity);
               if (slopedCeiling != int.MinValue)
               {
                  slopedCeiling++;
                  int floor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX, ProposedPixelY + SolidHeight, SolidWidth, slopedCeiling - ProposedPixelY), m_solidity);
                  if ((floor == int.MinValue) &amp;&amp; (RidingOn == null))
                  {
                     int leftwall2 = layer.GetRightSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, slopedCeiling, PixelX - ProposedPixelX, SolidHeight), m_solidity);
                     if (leftwall2 == int.MinValue)
                        dy = dyOrig = slopedCeiling - y;
                     else
                        hitWall = true;
                  }
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            if (hitWall)
            {
               // Do integer arithmetic before double otherwise strange rounding seems to happen
               dx = leftwall + 1 - x;
            }
            hit = true;
         }
      }

      dy = dyOrig;

      int ProposedSolidPixelWidth = SolidWidth + (int)Math.Ceiling(x + dx) - ProposedPixelX;
      if (dy &gt; 0)
      {
         ProposedPixelY2 = (int)Math.Ceiling(y + dy);
         int ground = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, PixelY + SolidHeight, ProposedSolidPixelWidth, ProposedPixelY2 - PixelY), m_solidity);
         if (ground != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ground - SolidHeight - y;
            hit = true;
         }
      }
      else if (dy &lt; 0)
      {
         int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY, ProposedSolidPixelWidth, PixelY - ProposedPixelY), m_solidity);
         if (ceiling != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ceiling + 1 - y;
            hit = true;
         }
      }

      if (hit &amp;&amp; !double.IsNaN(LocalDX))
         LocalDX += dx - dxOrig;

      return hit;
   }

   /// &lt;summary&gt;
   /// Ensure the sprite stays in contact with the ground by altering its velocity
   /// to snap down onto the ground when it is close to the ground.
   /// &lt;/summary&gt;
   /// &lt;param name="Threshhold"&gt;The number of pixels that mey separate the sprite from the ground.
   /// If the sprite is within this threshhold distance, it will be "snapped".&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite was snapped to the ground.&lt;/returns&gt;
   /// &lt;remarks&gt;Note that this does not actually move the sprite, but rather just alters its
   /// velocity so that when &lt;see cref="MoveByVelocity"/&gt; is applied, it will be touching the
   /// ground, if the appropriate conditions are met. The purpose of this rule is to help sprites
   /// behave as desired when going downhill in case the force of gravity isn't enough to keep
   /// them "grounded" (which it often isn't with the simple physics model used for sprites).
   /// &lt;/remarks&gt;
   [Description("If the sprite's proposed position is within &lt;Threshhold&gt; pixels of the ground, alter its velocity so it will touch the ground.  Returns true if snap occurred.")]
   public virtual bool SnapToGround(int Threshhold)
   {
      Debug.Assert(this.isActive, "Attempted to execute SnapToGround on an inactive sprite");

      int ProposedSolidPixelWidth = SolidWidth + (int)Math.Ceiling(x + dx) - ProposedPixelX;
      int ground = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY + SolidHeight, ProposedSolidPixelWidth, Threshhold), m_solidity);
      if (ground != int.MinValue)
      {
         // Do integer arithmetic before double otherwise strange rounding seems to happen
         double newDy = ground - SolidHeight - y;
         if (newDy &gt; dy)
            dy = newDy;
         return true;
      }
      return false;
   }

   /// &lt;summary&gt;
   /// Determines if the sprite is blocked from moving freely in a particular direction by solidity on the layer.
   /// &lt;/summary&gt;
   /// &lt;param name="Direction"&gt;Which direction should be tested&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite's velocity will be affected or stopped when attempting
   /// to move in the specified direction.  False if the sprite can move freely in that
   /// direction.&lt;/returns&gt;
   /// &lt;remarks&gt;Note that this function only tests if there is any solidity in the specified
   /// direction, but does not indicate whether the sprite will be blocked by it or simply
   /// deflected (up or down a hill) by it.&lt;/remarks&gt;
   [Description("Determines if the sprite is blocked from moving freely in a particular direction by solidity on the layer.")]
   public virtual bool Blocked(Direction Direction)
   {
      Debug.Assert(this.isActive, "Attempted to execute Blocked on an inactive sprite");

      int SolidPixelWidth;
      int SolidPixelHeight;
      switch (Direction)
      {
         case Direction.Up:
            SolidPixelWidth = SolidWidth + (int)Math.Ceiling(x) - PixelX;
            return layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX, PixelY - 1, SolidPixelWidth, 1), m_solidity) != int.MinValue;
         case Direction.Right:
            SolidPixelHeight = SolidHeight + (int)Math.Ceiling(y) - PixelY;
            return layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX + SolidWidth, PixelY, 1, SolidPixelHeight), m_solidity) != int.MinValue;
         case Direction.Down:
            SolidPixelWidth = SolidWidth + (int)Math.Ceiling(x) - PixelX;
            return layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX, PixelY + SolidHeight, SolidPixelWidth, 1), m_solidity) != int.MinValue;
         case Direction.Left:
            SolidPixelHeight = SolidHeight + (int)Math.Ceiling(y) - PixelY;
            return layer.GetRightSolidPixel(new System.Drawing.Rectangle(PixelX - 1, PixelY, 1, SolidPixelHeight), m_solidity) != int.MinValue;
      }
      return false;
   }

   #endregion

   #region Tile Interaction
   /// &lt;summary&gt;
   /// Tracks information about a tile for the purposes of processing interactions
   /// between a sprite and a tile that it is touching.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Instances of this class are created by &lt;see cref="TouchTiles"/&gt;.
   /// and added to &lt;see cref="TouchedTiles"/&gt;.&lt;/remarks&gt;
   public class TouchedTile
   {
      public int x;
      public int y;
      public int tileValue;
      public bool initial;
      public bool processed;

      public TouchedTile(int x, int y, int tileValue, bool initial)
      {
         this.x = x;
         this.y = y;
         this.tileValue = tileValue;
         this.initial = initial;
         processed = false;
      }
   }

   // Do not allocate appreciable memory unless this sprite
   // participates in tile interaction.
   /// &lt;summary&gt;
   /// A collection of tiles being processed by &lt;see cref="TouchTiles"/&gt; and other rules
   /// related to tile interactions.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;&lt;see cref="TouchTiles"/&gt; populates this object, and other touch-functions
   /// then process the data about tiles that the sprite is touching stored in this
   /// object. It's not usually necessary to refer to this object directly.&lt;/remarks&gt;
   [NonSerialized()]
   public System.Collections.Generic.List&lt;TouchedTile&gt; TouchedTiles = null;

   /// &lt;summary&gt;
   /// Collects information about tiles the sprite is currently touching.
   /// &lt;/summary&gt;
   /// &lt;param name="Category"&gt;This should supply a tile category that includes all tiles that the sprite interacts with.&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite is touching any tiles in the supplied category.&lt;/returns&gt;
   /// &lt;remarks&gt;This must be called before performing most forms of tile interaction.
   /// By supplying a single category containing all tiles with which the sprite may need
   /// to interact, performance is optimized so that each tile touching the sprite only
   /// needs to be inspected once to check if it's relevant.  This also helps simplify the
   /// process of processing each tile exactly once by queuing a list of tiles to be
   /// processed and tracking which of those tiles have been processed.
   /// &lt;seealso cref="TileTake"/&gt;&lt;seealso cref="TileUseUp"/&gt;&lt;seealso cref="TileTouchingIndex"/&gt;
   /// &lt;seealso cref="TileActivateSprite"/&gt;&lt;seealso cref="TileAddSprite"/&gt;
   /// &lt;seealso cref="TileChange"/&gt;&lt;seealso cref="TileChangeTouched"/&gt;&lt;/remarks&gt;
   /// &lt;example&gt;This example will check to see if the current sprite is touching
   /// any tiles in a category named "Touchable" and then (assuming tile numbers 10
   /// and 11 are members of this category) take any tiles whose number is 10 as an
   /// inventory item represented by a counter named "Coins", and take any tiles whose
   /// number is 11 as an inventory item represented by a counter named "Keys".
   /// &lt;code lang="C#"&gt;
   /// if (TouchTiles(TileCategoryName.Touchable))
   /// {
   ///    TileTake(10,Counter.Coins))
   ///    TileTake(11,Counter.Keys))
   /// }&lt;/code&gt;&lt;/example&gt;
   [Description("Collects information about tiles the sprite is currently touching.  Category should include all tiles that the sprite interacts with.  Must be called before performing any tile interaction.")]
   public virtual bool TouchTiles(TileCategoryName Category)
   {
      Debug.Assert(this.isActive, "Attempted to execute TouchTiles on an inactive sprite");

      if (TouchedTiles != null)
         TouchedTiles.Clear();

      int tw = layer.Tileset.TileWidth;
      int th = layer.Tileset.TileHeight;
      int minYEdge = (PixelY / th);
      int maxY = (PixelY + SolidHeight) / th;
      if (maxY &gt;= layer.VirtualRows)
         maxY = layer.VirtualRows - 1;
      int maxYEdge = (PixelY + SolidHeight - 1) / th;
      int minX = (PixelX - 1) / tw;
      int minXEdge = PixelX / tw;
      int maxX = (PixelX + SolidWidth) / tw;
      if (maxX &gt;= layer.VirtualColumns)
         maxX = layer.VirtualColumns - 1;
      int maxXEdge = (PixelX + SolidWidth - 1) / tw;
      for (int yidx = (PixelY - 1) / th; yidx &lt;= maxY; yidx++)
      {
         bool isYEdge = !((yidx &gt;= minYEdge) &amp;&amp; (yidx &lt;= maxYEdge));
         for (int xidx = (isYEdge ? minXEdge : minX);
            xidx &lt;= (isYEdge ? maxXEdge : maxX);
            xidx++)
         {
            if (layer.GetTile(xidx, yidx).IsMember(Category))
            {
               bool wasTouching;

               if ((OldPixelX &lt;= xidx * tw + tw) &amp;&amp;
                  (OldPixelX + SolidWidth &gt;= xidx * tw) &amp;&amp;
                  (OldPixelY &lt;= yidx * th + th) &amp;&amp;
                  (OldPixelY + SolidHeight &gt;= yidx * th))
               {
                  bool edgeX = (OldPixelX + SolidWidth == xidx * tw) ||
                     (OldPixelX == xidx * tw + tw);
                  bool edgeY = (OldPixelY + SolidHeight == yidx * th) ||
                     (OldPixelY == yidx * th + th);
                  if (edgeX &amp;&amp; edgeY)
                     wasTouching = false;
                  else
                     wasTouching = true;
               }
               else
                  wasTouching = false;

               if (TouchedTiles == null)
                  TouchedTiles = new System.Collections.Generic.List&lt;TouchedTile&gt;(10);
               TouchedTiles.Add(new TouchedTile(xidx, yidx, layer[xidx, yidx], !wasTouching));
            }
         }
      }
      if (TouchedTiles == null)
         return false;
      return TouchedTiles.Count &gt; 0;
   }

   /// &lt;summary&gt;
   /// Determine if the sprite is touching the specified tile, and if so,
   /// "take" it and increment a counter (requires &lt;see cref="TouchTiles"/&gt;).
   /// &lt;/summary&gt;
   /// &lt;param name="TileValue"&gt;Index of the tile to look for.&lt;/param&gt;
   /// &lt;param name="Counter"&gt;Counter to be checked and incremented when the specified tile is found.
   /// If the counter's maximum value has been reached, the tile will not be taken.&lt;/param&gt;
   /// &lt;param name="NewValue"&gt;Specified the tile value with which the touched tile will
   /// be replaced if the counter has not hit its maximum.&lt;/param&gt;
   /// &lt;returns&gt;The number of tiles affected.&lt;/returns&gt;
   /// &lt;remarks&gt;&lt;para&gt;This function will search through all tiles that have been touched (collected
   /// by &lt;see cref="TouchTiles"/&gt;, and for each tile that it finds that matches the specified
   /// &lt;paramref name="TileValue" /&gt;, it will check &lt;paramref name="Counter" /&gt;, and, if it
   /// has not yet reached the maximum value, increment the counter and replace the tile with
   /// the tile number specified by NewValue.&lt;/para&gt;&lt;para&gt;
   /// Only unprocessed tiles are considered. Once this function (or similar functions)
   /// affects the tile, it is marked as processed. It is only marked as processed if
   /// it is affected (if the counter changes).&lt;/para&gt;&lt;/remarks&gt;
   [Description("When the sprite is touching the specified tile, and the specified counter is not maxed, change/clear the tile value to NewValue and increment the specified counter/parameter. Returns the number of tiles affected. (Must run TouchTiles first.)")]
   public virtual int TileTake(int TileValue, Counter Counter, int NewValue)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileTake on an inactive sprite");

      if (TouchedTiles == null)
         return 0;

      int result = 0;

      for (int i = 0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = TouchedTiles[i];
         if ((tt.tileValue == TileValue) &amp;&amp; (!tt.processed))
         {
            if (Counter.CurrentValue &lt; Counter.MaxValue)
            {
               Counter.CurrentValue++;
               layer[tt.x, tt.y] = tt.tileValue = NewValue;
               tt.processed = true;
               result++;
            }
            else
               break;
         }
      }
      return result;
   }

   /// &lt;summary&gt;
   /// Make the specified tile behave like it is "using up" one of the items tracked by the specified counter (requires &lt;see cref="TouchTiles"/&gt;).
   /// &lt;/summary&gt;
   /// &lt;param name="TileValue"&gt;Index of the tile to look for&lt;/param&gt;
   /// &lt;param name="Counter"&gt;Specifies a counter that will be affected. If this counter's value is
   /// greater than 0, it will be decremented and the tile removed.&lt;/param&gt;
   /// &lt;param name="NewValue"&gt;Specifies a new tile value that will replace the touched tile when
   /// it is removed. This value is commonly 0, which usually represents a tileset's empty tile.&lt;/param&gt;
   /// &lt;returns&gt;The number of tiles affected&lt;/returns&gt;
   /// &lt;remarks&gt;&lt;para&gt;This function will search through all tiles that have been touched (collected
   /// by &lt;see cref="TouchTiles"/&gt;, and for each tile that it finds that matches the specified
   /// &lt;paramref name="TileValue" /&gt;, it will check &lt;paramref name="Counter" /&gt;, and, if it
   /// is greater than 0, decrement the counter and replace the tile with tile number
   /// &lt;paramref name="NewValue"/&gt;.&lt;/para&gt;
   /// &lt;para&gt;Only unprocessed tiles are considered. Once this function (or similar functions)
   /// affects the tile, it is marked as processed. It is only marked as processed if
   /// it is affected (if the counter changes).&lt;/para&gt;&lt;/remarks&gt;
   [Description("When the sprite is touching the specified tile, and the specified counter is greater than 0, decrement the counter and clear the tile value to NewValue. Returns the number of tiles affected. (Must run TouchTiles first.)")]
   public virtual int TileUseUp(int TileValue, Counter Counter, int NewValue)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileUseUp on an inactive sprite");

      if (TouchedTiles == null)
         return 0;

      int result = 0;

      for (int i = 0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = TouchedTiles[i];
         if ((tt.tileValue == TileValue) &amp;&amp; (!tt.processed))
         {
            if (Counter.CurrentValue &gt; 0)
            {
               Counter.CurrentValue--;
               layer[tt.x, tt.y] = tt.tileValue = NewValue;
               tt.processed = true;
               result++;
            }
            else
               break;
         }
      }
      return result;
   }

   /// &lt;summary&gt;
   /// Find the next unprocessed tile of the specified type (requires &lt;see cref="TouchTiles"/&gt;).
   /// &lt;/summary&gt;
   /// &lt;param name="TileValue"&gt;Tile index to search for&lt;/param&gt;
   /// &lt;param name="InitialOnly"&gt;If this is true, the tile will only be considered if the sprite
   /// just started touching it (was not touching it before).&lt;/param&gt;
   /// &lt;param name="MarkAsProcessed"&gt;If this is true, the tile that is returned is immediately
   /// marked as processed, otherwise it is left as unprocessed and may still be affected by
   /// other tile interaction functions.&lt;/param&gt;
   /// &lt;returns&gt;The index of the next unprocessed tile in &lt;see cref="TouchedTiles"/&gt; if one
   /// exists with the specified &lt;paramref name="TileValue" /&gt;, or -1 if no such tile exists.
   /// &lt;/returns&gt;
   /// &lt;remarks&gt;While &lt;see cref="TileUseUp"/&gt; and &lt;see cref="TileTake"/&gt; provide simple
   /// access to common behaviors related to tile interactions, they aren't expected to cover
   /// all behaviors you might want to implement related to tile interactions.  This function
   /// provides a piece of functionality that will be useful in more detailed control over
   /// tile interactions.&lt;seealso cref="TouchTiles"/&gt;&lt;seealso cref="TileActivateSprite"/&gt;
   /// &lt;seealso cref="TileAddSprite"/&gt;&lt;/remarks&gt;
   /// &lt;example&gt;
   /// The following example demonstrates how you could activate the next inactive instance of
   /// a sprite in the "Points" category at the location of any tile whose tile number is 10
   /// when the sprite touches the tile, only when the sprite first touches the tile. Performing
   /// this in a while loop ensures that all such tiles that the sprite is initially touching get
   /// processed at once, which is important because it won't be initially touching them any more
   /// in the next frame. TempNum is any temporary numeric variable, such as a sprite parameter.
   /// &lt;code&gt;
   /// if (TouchTiles(TileCategoryName.Touchable))
   /// {
   ///    TempNum = TileTouchingIndex(10, true, true);
   ///    while(TempNum &gt; 0)
   ///    {
   ///       TileActivateSprite(TempNum, ParentLayer.m_SpriteCategories.Points, true);
   ///       TempNum = TileTouchingIndex(10, true, true);
   ///    }
   /// }
   /// &lt;/code&gt;
   /// &lt;/example&gt;
   [Description("Return the index of the next unprocessed tile with the specified value from the list of tiles the sprite is touching. If InitialOnly is set, only return tiles that the sprite wasn't already touching. Return -1 if no tiles are being touched. (Must run TouchTiles first.)")]
   public virtual int TileTouchingIndex(int TileValue, bool InitialOnly, bool MarkAsProcessed)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileTouchingIndex on an inactive sprite");

      if (TouchedTiles == null)
         return -1;

      for (int i = 0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = TouchedTiles[i];
         if ((tt.tileValue == TileValue) &amp;&amp; (!tt.processed) &amp;&amp; (!InitialOnly || tt.initial))
         {
            tt.processed = MarkAsProcessed;
            return i;
         }
      }

      return -1;
   }

   /// &lt;summary&gt;
   /// Activate the next inactive sprite from a category at the coordinates of a tile being touched by the sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="TouchingIndex"&gt;Index of the tile in the array of tiles to process (&lt;see cref="TouchedTiles"/&gt;).
   /// This can be acquired using &lt;see cref="TileTouchingIndex"/&gt;.&lt;/param&gt;
   /// &lt;param name="Category"&gt;Category containing sprites that can be activated.&lt;/param&gt;
   /// &lt;param name="ClearParameters"&gt;True if the newly activated sprite's parameters should
   /// all be set to zero.&lt;/param&gt;
   /// &lt;returns&gt;The index of the newly activated sprite, if a sprite was activated (this
   /// value will be greater than or equal to zero) or -1 if all sprites in the specified
   /// category are already activate.&lt;/returns&gt;
   /// &lt;remarks&gt;&lt;para&gt;This function allows you to treat a number of sprites within a category
   /// as kind of a dynamic collection of sprites which can be activated one after the other.
   /// Each time this is called, it will find and activate the next inactive sprite within
   /// the category. This limits the number of sprites that can be activated by this function
   /// to the number of actual sprite instances in the specified category on the layer where
   /// the function is executed. For a truly dynamic collection of sprites, see
   /// &lt;see cref="TileAddSprite"/&gt;.&lt;/para&gt;
   /// &lt;para&gt;Clearing the parameters of a newly activated sprite can be very useful in initializing
   /// the sprite as soon as it is activated because the activated sprite can check to see
   /// when a particular parameter is zero. If it sees that it's zero, it can immediately set
   /// it to some other value and perform whatever initialization it needs to (such as offsetting
   /// its position from the tile by some pre-set distance).&lt;/para&gt;&lt;/remarks&gt;
   [Description("Activate the next inactive sprite from a category at the coordinates of a tile being touched by the sprite.  Use TileTouchingIndex to acquire TouchingIndex.  Returns the index into the category of the sprite that was activated, or -1 if all sprites in the category were already active.")]
   public virtual int TileActivateSprite(int TouchingIndex, SpriteCollection Category, bool ClearParameters)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileActivateSprite on an inactive sprite");

      for (int i = 0; i &lt; Category.Count; i++)
      {
         if (!Category[i].isActive)
         {
            Category[i].isActive = true;
            TouchedTile tt = TouchedTiles[TouchingIndex];
            Category[i].x = tt.x * layer.Tileset.TileWidth;
            Category[i].y = tt.y * layer.Tileset.TileHeight;
            if (ClearParameters)
            {
               Category[i].frame = 0;
               Category[i].state = 0;
               Category[i].ClearParameters();
            }
            Category[i].ProcessRules();
            return i;
         }
      }
      return -1;
   }

   /// &lt;summary&gt;
   /// Create a new (dynamic) instance of the specified sprite type at the coordinates
   /// of a tile being touched by the player.
   /// &lt;/summary&gt;
   /// &lt;param name="TouchingIndex"&gt;Refers to a tile in &lt;see cref="TouchedTiles"/&gt; by index.
   /// &lt;see cref="TileTouchingIndex"/&gt; can be used to acquire this value.&lt;/param&gt;
   /// &lt;param name="SpriteDefinition"&gt;Specifies the type of sprite that will be created.&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;As opposed to &lt;see cref="TileActivateSprite"/&gt;, which activates a pre-defined
   /// instance of a sprite, this function will actually create a new sprite instance on the
   /// fly (referred to as a "dynamic" sprite instance). Dynamic sprites cannot be referred
   /// to directly by other rules because they don't have names associated with them, therefore
   /// it's recommended that &lt;see cref="TileActivateSprite"/&gt; be used when more control is
   /// desired. However, for common sprites that may be created on any map, this is ideal
   /// because it doesn't require you to pre-define each possible instance.&lt;/para&gt;
   /// &lt;para&gt;Dynamic sprites are added to the end of each category that they belong to
   /// (categories are defined in terms of sprite definitions, so a dynamic sprite knows
   /// the categories in which it should participate). This happens as the sprite is created.
   /// When the sprite is deactivated, it will automatically be removed from all categories
   /// as part of &lt;see cref="LayerBase.ProcessSprites"/&gt;.&lt;/para&gt;
   /// &lt;para&gt;The maximum number of sprites that can be active on a layer at once is
   /// defined by &lt;see cref="SpriteCollection.maxCollectionSize"/&gt;. This includes static
   /// sprites as well as dynamic sprites. The purpose of this maximum is not a technical
   /// limitation (feel free to change the code in SpriteCollection.cs to increase the maximum
   /// all you like). It only exists to help developers realize when sprite instances are
   /// "leaking" (not being cleaned up or deactivated properly) or when more sprites than
   /// necessary are being created. In many cases, the engine can actually handle quite a
   /// bit more than 100 sprites without significant performance impact.&lt;/para&gt;
   /// &lt;para&gt;Because the sprite instances being created are not activations of already
   /// existing instances (as is the case with &lt;see cref="TileActivateSprite"/&gt;), there
   /// is no need for a parameter to reset all the sprite's parameters. All parameters of
   /// a newly created sprite instance are always initialized to zero. The solidity is copied
   /// from the sprite definition that created the sprite.&lt;/para&gt;
   /// &lt;para&gt;New sprite instances will not refer to any solidity, and will begin in the first
   /// frame of the first state, but you can use rules to affect &lt;see cref="GeneralRules.lastCreatedSprite"/&gt;
   /// to set values of the new sprite, or define rules on the created sprite type to make it
   /// initialize itself appropriately.&lt;/para&gt;
   /// &lt;seealso cref="PlanBase.AddSpriteAtPlan"/&gt;
   /// &lt;seealso cref="AddSpriteHere"/&gt;&lt;/remarks&gt;
   [Description("Create a new (dynamic) instance of the specified sprite type at the coordinates of a tile being touched by the player.  Use TileTouchingIndex to acquire TouchingIndex.")]
   public virtual void TileAddSprite(int TouchingIndex, [Editor("SpriteDefinition", "UITypeEditor")] System.Type SpriteDefinition)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileAddSprite on an inactive sprite");

      System.Reflection.ConstructorInfo constructor = SpriteDefinition.GetConstructor(new System.Type[]
      {
         typeof(LayerBase), typeof(double), typeof(double), typeof(double), typeof(double), typeof(int), typeof(int), typeof(bool), typeof(Display), typeof(Solidity), typeof(int), typeof(bool)
      });
      TouchedTile tt = TouchedTiles[TouchingIndex];
      lastCreatedSprite = (SpriteBase)constructor.Invoke(new object[]
      {
         layer, tt.x * layer.Tileset.TileWidth, tt.y * layer.Tileset.TileHeight, 0, 0, 0, 0, true, layer.ParentMap.Display, m_solidity, -1, true
      });
   }

   /// &lt;summary&gt;
   /// Create a new (dynamic) instance of the specified sprite positioned such that HotSpot on the created sprite overlaps Location on this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="SpriteDefinition"&gt;Specifies the type of sprite to create&lt;/param&gt;
   /// &lt;param name="Location"&gt;Specifies a point in the current sprite, relative to which the new
   /// sprite will be created.&lt;/param&gt;
   /// &lt;param name="HotSpot"&gt;Specifies a point within the created sprite that will be used to
   /// position the sprite (the location of the "handle" by which it is positioned).&lt;/param&gt;
   /// &lt;remarks&gt;See &lt;see cref="TileAddSprite"/&gt; for more information about dynamically added sprites.
   /// &lt;seealso cref="TileAddSprite"/&gt;&lt;seealso cref="PlanBase.AddSpriteAtPlan"/&gt;
   /// &lt;seealso cref="GeneralRules.lastCreatedSprite"/&gt;&lt;/remarks&gt;
   /// &lt;example&gt;
   /// The following code will create an instance of a sprite named "Bullet" such that the left side
   /// of the bullet matches up with the right side of the current sprite. (The bullet will be
   /// immediately to the right of this sprite, overlapping by 1 pixel.)
   /// &lt;code&gt;AddSpriteHere(typeof(Sprites.Bullet), RelativePosition.RightMiddle, RelativePosition.LeftMiddle);&lt;/code&gt;
   /// &lt;/example&gt;
   [Description("Create a new (dynamic) instance of the specified sprite positioned such that HotSpot on the created sprite overlaps Location on this sprite.")]
   public virtual void AddSpriteHere([Editor("SpriteDefinition", "UITypeEditor")] System.Type SpriteDefinition, RelativePosition Location, RelativePosition HotSpot)
   {
      Debug.Assert(this.isActive, "Attempted to execute AddSpriteHere on an inactive sprite");

      System.Reflection.ConstructorInfo constructor = SpriteDefinition.GetConstructor(new System.Type[]
      {
         typeof(LayerBase), typeof(double), typeof(double), typeof(double), typeof(double), typeof(int), typeof(int), typeof(bool), typeof(Display), typeof(Solidity), typeof(int), typeof(bool)
      });

      lastCreatedSprite = (SpriteBase)constructor.Invoke(new object[]
      {
         layer, 0, 0, 0, 0, 0, 0, true, layer.ParentMap.Display, m_solidity, -1, true
      });

      System.Drawing.Point ptLocation = GetRelativePosition(Location);
      System.Drawing.Point ptHotSpot = lastCreatedSprite.GetRelativePosition(HotSpot);
      lastCreatedSprite.x = lastCreatedSprite.oldX = ptLocation.X - ptHotSpot.X;
      lastCreatedSprite.y = lastCreatedSprite.oldY = ptLocation.Y - ptHotSpot.Y;
   }

   /// &lt;summary&gt;
   /// Change tiles of the specified type that the sprite is touching to another tile (requires &lt;see cref="TouchTiles"/&gt;).
   /// &lt;/summary&gt;
   /// &lt;param name="OldTileValue"&gt;Index of the tile type to search for&lt;/param&gt;
   /// &lt;param name="NewTileValue"&gt;Which tile should these tiles be changed to&lt;/param&gt;
   /// &lt;param name="InitialOnly"&gt;If true, only affect tiles that the player just started touching.&lt;/param&gt;
   /// &lt;returns&gt;The number of tiles affected.&lt;/returns&gt;
   /// &lt;remarks&gt;This function changes all specified tiles at once.
   /// Use &lt;see cref="TileChangeTouched"/&gt; to change only one tile.
   /// &lt;seealso cref="TileChangeTouched"/&gt;&lt;/remarks&gt;
   [Description("Change the specified tile that the sprite is touching to another tile. Return the number of tiles affected. (Must run TouchTiles first.)")]
   public virtual int TileChange(int OldTileValue, int NewTileValue, bool InitialOnly)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileChange on an inactive sprite");

      if (TouchedTiles == null)
         return 0;

      int result = 0;

      for (int i = 0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = TouchedTiles[i];
         if ((tt.tileValue == OldTileValue) &amp;&amp; (!tt.processed) &amp;&amp; (!InitialOnly || tt.initial))
         {
            tt.processed = true;
            layer[tt.x, tt.y] = tt.tileValue = NewTileValue;
            result++;
         }
      }
      return result;
   }

   /// &lt;summary&gt;
   /// Change the tile specified by TouchingIndex that is being touched by the sprite to another tile (requires &lt;see cref="TouchTiles"/&gt;).
   /// &lt;/summary&gt;
   /// &lt;param name="TouchingIndex"&gt;Refers to a tile in &lt;see cref="TouchedTiles"/&gt; by index.
   /// &lt;see cref="TileTouchingIndex"/&gt; can be used to acquire this value.&lt;/param&gt;
   /// &lt;param name="NewTileValue"&gt;Specifies the tileset tile index of the new tile that will appear in place of the specified tile.&lt;/param&gt;
   [Description("Change the tile specified by TouchingIndex that is being touched by the sprite to another tile. (Must run TouchTiles first.)")]
   public virtual void TileChangeTouched(int TouchingIndex, int NewTileValue)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileChangeTouched on an inactive sprite");
      Debug.Assert((TouchedTiles != null) &amp;&amp; (TouchedTiles.Count &gt; TouchingIndex),
         "Attempted to execute TileChangeTouched with invalid touched tiles");

      if ((TouchedTiles == null) || (TouchedTiles.Count &lt;= TouchingIndex))
         return;

      TouchedTile tt = TouchedTiles[TouchingIndex];
      layer[tt.x, tt.y] = tt.tileValue = NewTileValue;
   }

   /// &lt;summary&gt;
   /// Calculate the absolute position of a specified &lt;see cref="RelativePosition"/&gt; value with respect to this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="RelativePosition"&gt;Which position within this sprite should be retrieved.&lt;/param&gt;
   /// &lt;returns&gt;A point relative to the sprite's layer that represents the requested position in the sprite.&lt;/returns&gt;
   /// &lt;remarks&gt;This cannot be applied as a rule function because it returns a point object,
   /// which is not supported by the SGDK2 IDE as an output type.&lt;/remarks&gt;
   public virtual System.Drawing.Point GetRelativePosition(RelativePosition RelativePosition)
   {
      System.Drawing.Point rp = new System.Drawing.Point(PixelX, PixelY);

      switch (RelativePosition)
      {
         case RelativePosition.TopCenter:
            rp.X = (int)(PixelX + SolidWidth / 2);
            break;
         case RelativePosition.TopRight:
            rp.X = PixelX + SolidWidth - 1;
            break;
         case RelativePosition.LeftMiddle:
            rp.Y = PixelY + (int)(SolidHeight / 2);
            break;
         case RelativePosition.CenterMiddle:
            rp.X = PixelX + (int)(SolidWidth / 2);
            rp.Y = PixelY + (int)(SolidHeight / 2);
            break;
         case RelativePosition.RightMiddle:
            rp.X = PixelX + SolidWidth - 1;
            rp.Y = PixelY + (int)(SolidHeight / 2);
            break;
         case RelativePosition.BottomLeft:
            rp.Y = PixelY + SolidHeight - 1;
            break;
         case RelativePosition.BottomCenter:
            rp.X = PixelX + (int)(SolidWidth / 2);
            rp.Y = PixelY + SolidHeight - 1;
            break;
         case RelativePosition.BottomRight:
            rp.X = PixelX + SolidWidth - 1;
            rp.Y = PixelY + SolidHeight - 1;
            break;
      }
      return rp;
   }

   /// &lt;summary&gt;
   /// Determines if a tile at the sprite's current position is a member of the specified category.
   /// &lt;/summary&gt;
   /// &lt;param name="Category"&gt;Tile category against which the tile will be checked.&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;The sprite may be on multiple tiles at once. This parameter
   /// indicates which part of the sprite to look at, and gets the tile from the layer at
   /// the specified position.&lt;/param&gt;
   /// &lt;returns&gt;True if the specified point in the sprite is on a tile in the specified category, false otherwise.&lt;/returns&gt;
   [Description("Examines the tile on the layer at the sprite's current position and determines if it is a member of the specified category. The RelativePosition parameter determines which part of the sprite to use when identifying a location on the layer. (TouchTiles is not necessary for this function.)")]
   public virtual bool IsOnTile(TileCategoryName Category, RelativePosition RelativePosition)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsOnTile on an inactive sprite");

      System.Drawing.Point rp = GetRelativePosition(RelativePosition);
      return layer.GetTile((int)(rp.X / layer.Tileset.TileWidth), (int)(rp.Y / layer.Tileset.TileHeight)).IsMember(Category);
   }
   #endregion

   #region Activation
   /// &lt;summary&gt;
   /// Deactivate this sprite.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Deactivated sprites are no longer be drawn and their rules are not processed.
   /// In debug mode, attempting to refer to inactive sprites from active rules (or otherwise
   /// attempting to execute functions on inactive sprites) will display errors. If the
   /// sprite was added as a dynamic sprite by &lt;see cref="TileAddSprite"/&gt;, deactivating it
   /// will cause &lt;see cref="LayerBase.ProcessSprites"/&gt; to remove the sprite from all
   /// categories so it cannot even be considered for re-activation.
   /// &lt;seealso cref="TileAddSprite"/&gt;&lt;seealso cref="TileActivateSprite"/&gt;&lt;/remarks&gt;
   [Description("Deactivate this sprite.  It will no longer be drawn, and in debug mode, will display errors if rules try to execute on it.")]
   public virtual void Deactivate()
   {
      isActive = false;
   }
   #endregion

   /// &lt;summary&gt;
   /// Determine if this sprite is planning to overlap the target sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="TargetSprite"&gt;Sprite against which planned overlap is checked.&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite will overlap TargetSprite.&lt;/returns&gt;
   public virtual bool TestCollisionRect(SpriteBase TargetSprite)
   {
      Debug.Assert(this.isActive, "Attempted to execute TestCollision on an inactive sprite");

      int x1 = ProposedPixelX;
      int w1 = SolidWidth;
      int x2 = TargetSprite.ProposedPixelX;
      int w2 = TargetSprite.SolidWidth;
      int y1 = ProposedPixelY;
      int h1 = SolidHeight;
      int y2 = TargetSprite.ProposedPixelY;
      int h2 = TargetSprite.SolidHeight;

      int pushright = x1 + w1 - x2;
      int pushleft = x2 + w2 - x1;
      if ((pushright &gt; 0) &amp;&amp; (pushleft &gt; 0))
      {
         int pushdown = y1 + h1 - y2;
         int pushup = y2 + h2 - y1;
         if ((pushup &gt; 0) &amp;&amp; (pushdown &gt; 0))
            return true;
      }
      return false;
   }
}</Text>
  </SourceCode>
  <Project DisplayMode="m800x600x24" Windowed="true" TitleText="Mobile Device Sample Project" StartMap="Level 1" OverlayMap="Input Overlay" MaxPlayers="1" MaxViews="1" Credits="SGDK2 Engine: http://sgdk2.sf.net&#xD;&#xA;Graphics: Jeff Cruz (jeffc@comdel.net)&#xD;&#xA;Sound/Music support provided by FMOD: http://www.fmod.org/&#xD;&#xA;Music: Ceekayed (sampo.narhi@gmail.com)&#xD;&#xA;Spectrum Analyzer Display: Seth Marty&#xD;&#xA;">
    <Comments />
  </Project>
  <TileCategory Name="Solid">
    <CategorizedTileset Tileset="Main" Name="Solid">
      <CategoryTile TileValue="10" />
      <CategoryTile TileValue="12" />
    </CategorizedTileset>
  </TileCategory>
  <TileCategory Name="Touchable">
    <CategorizedTileset Tileset="Main" Name="Touchable">
      <CategoryTile TileValue="12" />
      <CategoryTile TileValue="11" />
      <CategoryTile TileValue="13" />
    </CategorizedTileset>
  </TileCategory>
</ProjectDataset>