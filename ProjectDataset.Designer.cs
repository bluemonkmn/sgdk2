//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SGDK2 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectDataset")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectDataset : global::System.Data.DataSet {
        
        private GraphicSheetDataTable tableGraphicSheet;
        
        private FramesetDataTable tableFrameset;
        
        private FrameDataTable tableFrame;
        
        private TilesetDataTable tableTileset;
        
        private TileDataTable tableTile;
        
        private TileFrameDataTable tableTileFrame;
        
        private CounterDataTable tableCounter;
        
        private MapDataTable tableMap;
        
        private LayerDataTable tableLayer;
        
        private SpriteDataTable tableSprite;
        
        private ParameterValueDataTable tableParameterValue;
        
        private SpritePlanDataTable tableSpritePlan;
        
        private CoordinateDataTable tableCoordinate;
        
        private PlanRuleDataTable tablePlanRule;
        
        private PlanParameterValueDataTable tablePlanParameterValue;
        
        private SpriteDefinitionDataTable tableSpriteDefinition;
        
        private SpriteRuleDataTable tableSpriteRule;
        
        private SpriteParameterDataTable tableSpriteParameter;
        
        private SpriteStateDataTable tableSpriteState;
        
        private SpriteFrameDataTable tableSpriteFrame;
        
        private SpriteCategoryDataTable tableSpriteCategory;
        
        private SpriteCategorySpriteDataTable tableSpriteCategorySprite;
        
        private SolidityDataTable tableSolidity;
        
        private SolidityShapeDataTable tableSolidityShape;
        
        private SourceCodeDataTable tableSourceCode;
        
        private ProjectDataTable tableProject;
        
        private TileCategoryDataTable tableTileCategory;
        
        private CategorizedTilesetDataTable tableCategorizedTileset;
        
        private CategoryTileDataTable tableCategoryTile;
        
        private CategoryFrameDataTable tableCategoryFrame;
        
        private global::System.Data.DataRelation relationFramesetFrame;
        
        private global::System.Data.DataRelation relationFramesetTileset;
        
        private global::System.Data.DataRelation relationTilesetTile;
        
        private global::System.Data.DataRelation relationCounterTile;
        
        private global::System.Data.DataRelation relationTileTileFrame;
        
        private global::System.Data.DataRelation relationMapLayer;
        
        private global::System.Data.DataRelation relationTilesetLayer;
        
        private global::System.Data.DataRelation relationLayerSprite;
        
        private global::System.Data.DataRelation relationSpriteDefinitionSprite;
        
        private global::System.Data.DataRelation relationSpriteParameterValue;
        
        private global::System.Data.DataRelation relationSpriteParameterParameterValue;
        
        private global::System.Data.DataRelation relationLayerSpritePlan;
        
        private global::System.Data.DataRelation relationSpritePlanCoordinate;
        
        private global::System.Data.DataRelation relationSpritePlanPlanRule;
        
        private global::System.Data.DataRelation relationSpritePlanPlanParameterValue;
        
        private global::System.Data.DataRelation relationSpriteDefinitionSpriteRule;
        
        private global::System.Data.DataRelation relationSpriteDefinitionSpriteParameter;
        
        private global::System.Data.DataRelation relationSpriteDefinitionState;
        
        private global::System.Data.DataRelation relationFramesetSpriteState;
        
        private global::System.Data.DataRelation relationSpriteStateFrame;
        
        private global::System.Data.DataRelation relationSpriteCategorySpriteCategorySprite;
        
        private global::System.Data.DataRelation relationSpriteDefinitionCategory;
        
        private global::System.Data.DataRelation relationSoliditySolidityShape;
        
        private global::System.Data.DataRelation relationCategorySolidityShape;
        
        private global::System.Data.DataRelation relationTileCategoryCategorizedTileset;
        
        private global::System.Data.DataRelation relationTilesetCategory;
        
        private global::System.Data.DataRelation relationCategoryCategoryTile;
        
        private global::System.Data.DataRelation relationCategoryTileCategoryFrame;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectDataset() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectDataset(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GraphicSheet"] != null)) {
                    base.Tables.Add(new GraphicSheetDataTable(ds.Tables["GraphicSheet"]));
                }
                if ((ds.Tables["Frameset"] != null)) {
                    base.Tables.Add(new FramesetDataTable(ds.Tables["Frameset"]));
                }
                if ((ds.Tables["Frame"] != null)) {
                    base.Tables.Add(new FrameDataTable(ds.Tables["Frame"]));
                }
                if ((ds.Tables["Tileset"] != null)) {
                    base.Tables.Add(new TilesetDataTable(ds.Tables["Tileset"]));
                }
                if ((ds.Tables["Tile"] != null)) {
                    base.Tables.Add(new TileDataTable(ds.Tables["Tile"]));
                }
                if ((ds.Tables["TileFrame"] != null)) {
                    base.Tables.Add(new TileFrameDataTable(ds.Tables["TileFrame"]));
                }
                if ((ds.Tables["Counter"] != null)) {
                    base.Tables.Add(new CounterDataTable(ds.Tables["Counter"]));
                }
                if ((ds.Tables["Map"] != null)) {
                    base.Tables.Add(new MapDataTable(ds.Tables["Map"]));
                }
                if ((ds.Tables["Layer"] != null)) {
                    base.Tables.Add(new LayerDataTable(ds.Tables["Layer"]));
                }
                if ((ds.Tables["Sprite"] != null)) {
                    base.Tables.Add(new SpriteDataTable(ds.Tables["Sprite"]));
                }
                if ((ds.Tables["ParameterValue"] != null)) {
                    base.Tables.Add(new ParameterValueDataTable(ds.Tables["ParameterValue"]));
                }
                if ((ds.Tables["SpritePlan"] != null)) {
                    base.Tables.Add(new SpritePlanDataTable(ds.Tables["SpritePlan"]));
                }
                if ((ds.Tables["Coordinate"] != null)) {
                    base.Tables.Add(new CoordinateDataTable(ds.Tables["Coordinate"]));
                }
                if ((ds.Tables["PlanRule"] != null)) {
                    base.Tables.Add(new PlanRuleDataTable(ds.Tables["PlanRule"]));
                }
                if ((ds.Tables["PlanParameterValue"] != null)) {
                    base.Tables.Add(new PlanParameterValueDataTable(ds.Tables["PlanParameterValue"]));
                }
                if ((ds.Tables["SpriteDefinition"] != null)) {
                    base.Tables.Add(new SpriteDefinitionDataTable(ds.Tables["SpriteDefinition"]));
                }
                if ((ds.Tables["SpriteRule"] != null)) {
                    base.Tables.Add(new SpriteRuleDataTable(ds.Tables["SpriteRule"]));
                }
                if ((ds.Tables["SpriteParameter"] != null)) {
                    base.Tables.Add(new SpriteParameterDataTable(ds.Tables["SpriteParameter"]));
                }
                if ((ds.Tables["SpriteState"] != null)) {
                    base.Tables.Add(new SpriteStateDataTable(ds.Tables["SpriteState"]));
                }
                if ((ds.Tables["SpriteFrame"] != null)) {
                    base.Tables.Add(new SpriteFrameDataTable(ds.Tables["SpriteFrame"]));
                }
                if ((ds.Tables["SpriteCategory"] != null)) {
                    base.Tables.Add(new SpriteCategoryDataTable(ds.Tables["SpriteCategory"]));
                }
                if ((ds.Tables["SpriteCategorySprite"] != null)) {
                    base.Tables.Add(new SpriteCategorySpriteDataTable(ds.Tables["SpriteCategorySprite"]));
                }
                if ((ds.Tables["Solidity"] != null)) {
                    base.Tables.Add(new SolidityDataTable(ds.Tables["Solidity"]));
                }
                if ((ds.Tables["SolidityShape"] != null)) {
                    base.Tables.Add(new SolidityShapeDataTable(ds.Tables["SolidityShape"]));
                }
                if ((ds.Tables["SourceCode"] != null)) {
                    base.Tables.Add(new SourceCodeDataTable(ds.Tables["SourceCode"]));
                }
                if ((ds.Tables["Project"] != null)) {
                    base.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                if ((ds.Tables["TileCategory"] != null)) {
                    base.Tables.Add(new TileCategoryDataTable(ds.Tables["TileCategory"]));
                }
                if ((ds.Tables["CategorizedTileset"] != null)) {
                    base.Tables.Add(new CategorizedTilesetDataTable(ds.Tables["CategorizedTileset"]));
                }
                if ((ds.Tables["CategoryTile"] != null)) {
                    base.Tables.Add(new CategoryTileDataTable(ds.Tables["CategoryTile"]));
                }
                if ((ds.Tables["CategoryFrame"] != null)) {
                    base.Tables.Add(new CategoryFrameDataTable(ds.Tables["CategoryFrame"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GraphicSheetDataTable GraphicSheet {
            get {
                return this.tableGraphicSheet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FramesetDataTable Frameset {
            get {
                return this.tableFrameset;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FrameDataTable Frame {
            get {
                return this.tableFrame;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TilesetDataTable Tileset {
            get {
                return this.tableTileset;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TileDataTable Tile {
            get {
                return this.tableTile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TileFrameDataTable TileFrame {
            get {
                return this.tableTileFrame;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CounterDataTable Counter {
            get {
                return this.tableCounter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MapDataTable Map {
            get {
                return this.tableMap;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LayerDataTable Layer {
            get {
                return this.tableLayer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteDataTable Sprite {
            get {
                return this.tableSprite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParameterValueDataTable ParameterValue {
            get {
                return this.tableParameterValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpritePlanDataTable SpritePlan {
            get {
                return this.tableSpritePlan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoordinateDataTable Coordinate {
            get {
                return this.tableCoordinate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlanRuleDataTable PlanRule {
            get {
                return this.tablePlanRule;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlanParameterValueDataTable PlanParameterValue {
            get {
                return this.tablePlanParameterValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteDefinitionDataTable SpriteDefinition {
            get {
                return this.tableSpriteDefinition;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteRuleDataTable SpriteRule {
            get {
                return this.tableSpriteRule;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteParameterDataTable SpriteParameter {
            get {
                return this.tableSpriteParameter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteStateDataTable SpriteState {
            get {
                return this.tableSpriteState;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteFrameDataTable SpriteFrame {
            get {
                return this.tableSpriteFrame;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteCategoryDataTable SpriteCategory {
            get {
                return this.tableSpriteCategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteCategorySpriteDataTable SpriteCategorySprite {
            get {
                return this.tableSpriteCategorySprite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SolidityDataTable Solidity {
            get {
                return this.tableSolidity;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SolidityShapeDataTable SolidityShape {
            get {
                return this.tableSolidityShape;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SourceCodeDataTable SourceCode {
            get {
                return this.tableSourceCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectDataTable Project {
            get {
                return this.tableProject;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TileCategoryDataTable TileCategory {
            get {
                return this.tableTileCategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategorizedTilesetDataTable CategorizedTileset {
            get {
                return this.tableCategorizedTileset;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoryTileDataTable CategoryTile {
            get {
                return this.tableCategoryTile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoryFrameDataTable CategoryFrame {
            get {
                return this.tableCategoryFrame;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectDataset cln = ((ProjectDataset)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GraphicSheet"] != null)) {
                    base.Tables.Add(new GraphicSheetDataTable(ds.Tables["GraphicSheet"]));
                }
                if ((ds.Tables["Frameset"] != null)) {
                    base.Tables.Add(new FramesetDataTable(ds.Tables["Frameset"]));
                }
                if ((ds.Tables["Frame"] != null)) {
                    base.Tables.Add(new FrameDataTable(ds.Tables["Frame"]));
                }
                if ((ds.Tables["Tileset"] != null)) {
                    base.Tables.Add(new TilesetDataTable(ds.Tables["Tileset"]));
                }
                if ((ds.Tables["Tile"] != null)) {
                    base.Tables.Add(new TileDataTable(ds.Tables["Tile"]));
                }
                if ((ds.Tables["TileFrame"] != null)) {
                    base.Tables.Add(new TileFrameDataTable(ds.Tables["TileFrame"]));
                }
                if ((ds.Tables["Counter"] != null)) {
                    base.Tables.Add(new CounterDataTable(ds.Tables["Counter"]));
                }
                if ((ds.Tables["Map"] != null)) {
                    base.Tables.Add(new MapDataTable(ds.Tables["Map"]));
                }
                if ((ds.Tables["Layer"] != null)) {
                    base.Tables.Add(new LayerDataTable(ds.Tables["Layer"]));
                }
                if ((ds.Tables["Sprite"] != null)) {
                    base.Tables.Add(new SpriteDataTable(ds.Tables["Sprite"]));
                }
                if ((ds.Tables["ParameterValue"] != null)) {
                    base.Tables.Add(new ParameterValueDataTable(ds.Tables["ParameterValue"]));
                }
                if ((ds.Tables["SpritePlan"] != null)) {
                    base.Tables.Add(new SpritePlanDataTable(ds.Tables["SpritePlan"]));
                }
                if ((ds.Tables["Coordinate"] != null)) {
                    base.Tables.Add(new CoordinateDataTable(ds.Tables["Coordinate"]));
                }
                if ((ds.Tables["PlanRule"] != null)) {
                    base.Tables.Add(new PlanRuleDataTable(ds.Tables["PlanRule"]));
                }
                if ((ds.Tables["PlanParameterValue"] != null)) {
                    base.Tables.Add(new PlanParameterValueDataTable(ds.Tables["PlanParameterValue"]));
                }
                if ((ds.Tables["SpriteDefinition"] != null)) {
                    base.Tables.Add(new SpriteDefinitionDataTable(ds.Tables["SpriteDefinition"]));
                }
                if ((ds.Tables["SpriteRule"] != null)) {
                    base.Tables.Add(new SpriteRuleDataTable(ds.Tables["SpriteRule"]));
                }
                if ((ds.Tables["SpriteParameter"] != null)) {
                    base.Tables.Add(new SpriteParameterDataTable(ds.Tables["SpriteParameter"]));
                }
                if ((ds.Tables["SpriteState"] != null)) {
                    base.Tables.Add(new SpriteStateDataTable(ds.Tables["SpriteState"]));
                }
                if ((ds.Tables["SpriteFrame"] != null)) {
                    base.Tables.Add(new SpriteFrameDataTable(ds.Tables["SpriteFrame"]));
                }
                if ((ds.Tables["SpriteCategory"] != null)) {
                    base.Tables.Add(new SpriteCategoryDataTable(ds.Tables["SpriteCategory"]));
                }
                if ((ds.Tables["SpriteCategorySprite"] != null)) {
                    base.Tables.Add(new SpriteCategorySpriteDataTable(ds.Tables["SpriteCategorySprite"]));
                }
                if ((ds.Tables["Solidity"] != null)) {
                    base.Tables.Add(new SolidityDataTable(ds.Tables["Solidity"]));
                }
                if ((ds.Tables["SolidityShape"] != null)) {
                    base.Tables.Add(new SolidityShapeDataTable(ds.Tables["SolidityShape"]));
                }
                if ((ds.Tables["SourceCode"] != null)) {
                    base.Tables.Add(new SourceCodeDataTable(ds.Tables["SourceCode"]));
                }
                if ((ds.Tables["Project"] != null)) {
                    base.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                if ((ds.Tables["TileCategory"] != null)) {
                    base.Tables.Add(new TileCategoryDataTable(ds.Tables["TileCategory"]));
                }
                if ((ds.Tables["CategorizedTileset"] != null)) {
                    base.Tables.Add(new CategorizedTilesetDataTable(ds.Tables["CategorizedTileset"]));
                }
                if ((ds.Tables["CategoryTile"] != null)) {
                    base.Tables.Add(new CategoryTileDataTable(ds.Tables["CategoryTile"]));
                }
                if ((ds.Tables["CategoryFrame"] != null)) {
                    base.Tables.Add(new CategoryFrameDataTable(ds.Tables["CategoryFrame"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGraphicSheet = ((GraphicSheetDataTable)(base.Tables["GraphicSheet"]));
            if ((initTable == true)) {
                if ((this.tableGraphicSheet != null)) {
                    this.tableGraphicSheet.InitVars();
                }
            }
            this.tableFrameset = ((FramesetDataTable)(base.Tables["Frameset"]));
            if ((initTable == true)) {
                if ((this.tableFrameset != null)) {
                    this.tableFrameset.InitVars();
                }
            }
            this.tableFrame = ((FrameDataTable)(base.Tables["Frame"]));
            if ((initTable == true)) {
                if ((this.tableFrame != null)) {
                    this.tableFrame.InitVars();
                }
            }
            this.tableTileset = ((TilesetDataTable)(base.Tables["Tileset"]));
            if ((initTable == true)) {
                if ((this.tableTileset != null)) {
                    this.tableTileset.InitVars();
                }
            }
            this.tableTile = ((TileDataTable)(base.Tables["Tile"]));
            if ((initTable == true)) {
                if ((this.tableTile != null)) {
                    this.tableTile.InitVars();
                }
            }
            this.tableTileFrame = ((TileFrameDataTable)(base.Tables["TileFrame"]));
            if ((initTable == true)) {
                if ((this.tableTileFrame != null)) {
                    this.tableTileFrame.InitVars();
                }
            }
            this.tableCounter = ((CounterDataTable)(base.Tables["Counter"]));
            if ((initTable == true)) {
                if ((this.tableCounter != null)) {
                    this.tableCounter.InitVars();
                }
            }
            this.tableMap = ((MapDataTable)(base.Tables["Map"]));
            if ((initTable == true)) {
                if ((this.tableMap != null)) {
                    this.tableMap.InitVars();
                }
            }
            this.tableLayer = ((LayerDataTable)(base.Tables["Layer"]));
            if ((initTable == true)) {
                if ((this.tableLayer != null)) {
                    this.tableLayer.InitVars();
                }
            }
            this.tableSprite = ((SpriteDataTable)(base.Tables["Sprite"]));
            if ((initTable == true)) {
                if ((this.tableSprite != null)) {
                    this.tableSprite.InitVars();
                }
            }
            this.tableParameterValue = ((ParameterValueDataTable)(base.Tables["ParameterValue"]));
            if ((initTable == true)) {
                if ((this.tableParameterValue != null)) {
                    this.tableParameterValue.InitVars();
                }
            }
            this.tableSpritePlan = ((SpritePlanDataTable)(base.Tables["SpritePlan"]));
            if ((initTable == true)) {
                if ((this.tableSpritePlan != null)) {
                    this.tableSpritePlan.InitVars();
                }
            }
            this.tableCoordinate = ((CoordinateDataTable)(base.Tables["Coordinate"]));
            if ((initTable == true)) {
                if ((this.tableCoordinate != null)) {
                    this.tableCoordinate.InitVars();
                }
            }
            this.tablePlanRule = ((PlanRuleDataTable)(base.Tables["PlanRule"]));
            if ((initTable == true)) {
                if ((this.tablePlanRule != null)) {
                    this.tablePlanRule.InitVars();
                }
            }
            this.tablePlanParameterValue = ((PlanParameterValueDataTable)(base.Tables["PlanParameterValue"]));
            if ((initTable == true)) {
                if ((this.tablePlanParameterValue != null)) {
                    this.tablePlanParameterValue.InitVars();
                }
            }
            this.tableSpriteDefinition = ((SpriteDefinitionDataTable)(base.Tables["SpriteDefinition"]));
            if ((initTable == true)) {
                if ((this.tableSpriteDefinition != null)) {
                    this.tableSpriteDefinition.InitVars();
                }
            }
            this.tableSpriteRule = ((SpriteRuleDataTable)(base.Tables["SpriteRule"]));
            if ((initTable == true)) {
                if ((this.tableSpriteRule != null)) {
                    this.tableSpriteRule.InitVars();
                }
            }
            this.tableSpriteParameter = ((SpriteParameterDataTable)(base.Tables["SpriteParameter"]));
            if ((initTable == true)) {
                if ((this.tableSpriteParameter != null)) {
                    this.tableSpriteParameter.InitVars();
                }
            }
            this.tableSpriteState = ((SpriteStateDataTable)(base.Tables["SpriteState"]));
            if ((initTable == true)) {
                if ((this.tableSpriteState != null)) {
                    this.tableSpriteState.InitVars();
                }
            }
            this.tableSpriteFrame = ((SpriteFrameDataTable)(base.Tables["SpriteFrame"]));
            if ((initTable == true)) {
                if ((this.tableSpriteFrame != null)) {
                    this.tableSpriteFrame.InitVars();
                }
            }
            this.tableSpriteCategory = ((SpriteCategoryDataTable)(base.Tables["SpriteCategory"]));
            if ((initTable == true)) {
                if ((this.tableSpriteCategory != null)) {
                    this.tableSpriteCategory.InitVars();
                }
            }
            this.tableSpriteCategorySprite = ((SpriteCategorySpriteDataTable)(base.Tables["SpriteCategorySprite"]));
            if ((initTable == true)) {
                if ((this.tableSpriteCategorySprite != null)) {
                    this.tableSpriteCategorySprite.InitVars();
                }
            }
            this.tableSolidity = ((SolidityDataTable)(base.Tables["Solidity"]));
            if ((initTable == true)) {
                if ((this.tableSolidity != null)) {
                    this.tableSolidity.InitVars();
                }
            }
            this.tableSolidityShape = ((SolidityShapeDataTable)(base.Tables["SolidityShape"]));
            if ((initTable == true)) {
                if ((this.tableSolidityShape != null)) {
                    this.tableSolidityShape.InitVars();
                }
            }
            this.tableSourceCode = ((SourceCodeDataTable)(base.Tables["SourceCode"]));
            if ((initTable == true)) {
                if ((this.tableSourceCode != null)) {
                    this.tableSourceCode.InitVars();
                }
            }
            this.tableProject = ((ProjectDataTable)(base.Tables["Project"]));
            if ((initTable == true)) {
                if ((this.tableProject != null)) {
                    this.tableProject.InitVars();
                }
            }
            this.tableTileCategory = ((TileCategoryDataTable)(base.Tables["TileCategory"]));
            if ((initTable == true)) {
                if ((this.tableTileCategory != null)) {
                    this.tableTileCategory.InitVars();
                }
            }
            this.tableCategorizedTileset = ((CategorizedTilesetDataTable)(base.Tables["CategorizedTileset"]));
            if ((initTable == true)) {
                if ((this.tableCategorizedTileset != null)) {
                    this.tableCategorizedTileset.InitVars();
                }
            }
            this.tableCategoryTile = ((CategoryTileDataTable)(base.Tables["CategoryTile"]));
            if ((initTable == true)) {
                if ((this.tableCategoryTile != null)) {
                    this.tableCategoryTile.InitVars();
                }
            }
            this.tableCategoryFrame = ((CategoryFrameDataTable)(base.Tables["CategoryFrame"]));
            if ((initTable == true)) {
                if ((this.tableCategoryFrame != null)) {
                    this.tableCategoryFrame.InitVars();
                }
            }
            this.relationFramesetFrame = this.Relations["FramesetFrame"];
            this.relationFramesetTileset = this.Relations["FramesetTileset"];
            this.relationTilesetTile = this.Relations["TilesetTile"];
            this.relationCounterTile = this.Relations["CounterTile"];
            this.relationTileTileFrame = this.Relations["TileTileFrame"];
            this.relationMapLayer = this.Relations["MapLayer"];
            this.relationTilesetLayer = this.Relations["TilesetLayer"];
            this.relationLayerSprite = this.Relations["LayerSprite"];
            this.relationSpriteDefinitionSprite = this.Relations["SpriteDefinitionSprite"];
            this.relationSpriteParameterValue = this.Relations["SpriteParameterValue"];
            this.relationSpriteParameterParameterValue = this.Relations["SpriteParameterParameterValue"];
            this.relationLayerSpritePlan = this.Relations["LayerSpritePlan"];
            this.relationSpritePlanCoordinate = this.Relations["SpritePlanCoordinate"];
            this.relationSpritePlanPlanRule = this.Relations["SpritePlanPlanRule"];
            this.relationSpritePlanPlanParameterValue = this.Relations["SpritePlanPlanParameterValue"];
            this.relationSpriteDefinitionSpriteRule = this.Relations["SpriteDefinitionSpriteRule"];
            this.relationSpriteDefinitionSpriteParameter = this.Relations["SpriteDefinitionSpriteParameter"];
            this.relationSpriteDefinitionState = this.Relations["SpriteDefinitionState"];
            this.relationFramesetSpriteState = this.Relations["FramesetSpriteState"];
            this.relationSpriteStateFrame = this.Relations["SpriteStateFrame"];
            this.relationSpriteCategorySpriteCategorySprite = this.Relations["SpriteCategorySpriteCategorySprite"];
            this.relationSpriteDefinitionCategory = this.Relations["SpriteDefinitionCategory"];
            this.relationSoliditySolidityShape = this.Relations["SoliditySolidityShape"];
            this.relationCategorySolidityShape = this.Relations["CategorySolidityShape"];
            this.relationTileCategoryCategorizedTileset = this.Relations["TileCategoryCategorizedTileset"];
            this.relationTilesetCategory = this.Relations["TilesetCategory"];
            this.relationCategoryCategoryTile = this.Relations["CategoryCategoryTile"];
            this.relationCategoryTileCategoryFrame = this.Relations["CategoryTileCategoryFrame"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectDataset";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGraphicSheet = new GraphicSheetDataTable();
            base.Tables.Add(this.tableGraphicSheet);
            this.tableFrameset = new FramesetDataTable();
            base.Tables.Add(this.tableFrameset);
            this.tableFrame = new FrameDataTable();
            base.Tables.Add(this.tableFrame);
            this.tableTileset = new TilesetDataTable();
            base.Tables.Add(this.tableTileset);
            this.tableTile = new TileDataTable();
            base.Tables.Add(this.tableTile);
            this.tableTileFrame = new TileFrameDataTable();
            base.Tables.Add(this.tableTileFrame);
            this.tableCounter = new CounterDataTable();
            base.Tables.Add(this.tableCounter);
            this.tableMap = new MapDataTable();
            base.Tables.Add(this.tableMap);
            this.tableLayer = new LayerDataTable();
            base.Tables.Add(this.tableLayer);
            this.tableSprite = new SpriteDataTable();
            base.Tables.Add(this.tableSprite);
            this.tableParameterValue = new ParameterValueDataTable();
            base.Tables.Add(this.tableParameterValue);
            this.tableSpritePlan = new SpritePlanDataTable();
            base.Tables.Add(this.tableSpritePlan);
            this.tableCoordinate = new CoordinateDataTable();
            base.Tables.Add(this.tableCoordinate);
            this.tablePlanRule = new PlanRuleDataTable();
            base.Tables.Add(this.tablePlanRule);
            this.tablePlanParameterValue = new PlanParameterValueDataTable();
            base.Tables.Add(this.tablePlanParameterValue);
            this.tableSpriteDefinition = new SpriteDefinitionDataTable();
            base.Tables.Add(this.tableSpriteDefinition);
            this.tableSpriteRule = new SpriteRuleDataTable();
            base.Tables.Add(this.tableSpriteRule);
            this.tableSpriteParameter = new SpriteParameterDataTable();
            base.Tables.Add(this.tableSpriteParameter);
            this.tableSpriteState = new SpriteStateDataTable();
            base.Tables.Add(this.tableSpriteState);
            this.tableSpriteFrame = new SpriteFrameDataTable();
            base.Tables.Add(this.tableSpriteFrame);
            this.tableSpriteCategory = new SpriteCategoryDataTable();
            base.Tables.Add(this.tableSpriteCategory);
            this.tableSpriteCategorySprite = new SpriteCategorySpriteDataTable();
            base.Tables.Add(this.tableSpriteCategorySprite);
            this.tableSolidity = new SolidityDataTable();
            base.Tables.Add(this.tableSolidity);
            this.tableSolidityShape = new SolidityShapeDataTable();
            base.Tables.Add(this.tableSolidityShape);
            this.tableSourceCode = new SourceCodeDataTable();
            base.Tables.Add(this.tableSourceCode);
            this.tableProject = new ProjectDataTable();
            base.Tables.Add(this.tableProject);
            this.tableTileCategory = new TileCategoryDataTable();
            base.Tables.Add(this.tableTileCategory);
            this.tableCategorizedTileset = new CategorizedTilesetDataTable();
            base.Tables.Add(this.tableCategorizedTileset);
            this.tableCategoryTile = new CategoryTileDataTable();
            base.Tables.Add(this.tableCategoryTile);
            this.tableCategoryFrame = new CategoryFrameDataTable();
            base.Tables.Add(this.tableCategoryFrame);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FramesetFrame", new global::System.Data.DataColumn[] {
                        this.tableFrameset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableFrame.NameColumn});
            this.tableFrame.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("GraphicSheetFrame", new global::System.Data.DataColumn[] {
                        this.tableGraphicSheet.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableFrame.GraphicSheetColumn});
            this.tableFrame.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FramesetTileset", new global::System.Data.DataColumn[] {
                        this.tableFrameset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableTileset.FramesetColumn});
            this.tableTileset.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TilesetTile", new global::System.Data.DataColumn[] {
                        this.tableTileset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableTile.NameColumn});
            this.tableTile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CounterTile", new global::System.Data.DataColumn[] {
                        this.tableCounter.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableTile.CounterColumn});
            this.tableTile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.SetNull;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TileTileFrame", new global::System.Data.DataColumn[] {
                        this.tableTile.NameColumn,
                        this.tableTile.TileValueColumn}, new global::System.Data.DataColumn[] {
                        this.tableTileFrame.NameColumn,
                        this.tableTileFrame.TileValueColumn});
            this.tableTileFrame.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MapLayer", new global::System.Data.DataColumn[] {
                        this.tableMap.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableLayer.MapNameColumn});
            this.tableLayer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TilesetLayer", new global::System.Data.DataColumn[] {
                        this.tableTileset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableLayer.TilesetColumn});
            this.tableLayer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("LayerSprite", new global::System.Data.DataColumn[] {
                        this.tableLayer.MapNameColumn,
                        this.tableLayer.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSprite.MapNameColumn,
                        this.tableSprite.LayerNameColumn});
            this.tableSprite.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpriteDefinitionSprite", new global::System.Data.DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn,
                        this.tableSpriteState.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSprite.DefinitionNameColumn,
                        this.tableSprite.StateNameColumn});
            this.tableSprite.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpriteParameterValue", new global::System.Data.DataColumn[] {
                        this.tableSprite.DefinitionNameColumn,
                        this.tableSprite.LayerNameColumn,
                        this.tableSprite.NameColumn,
                        this.tableSprite.MapNameColumn}, new global::System.Data.DataColumn[] {
                        this.tableParameterValue.DefinitionNameColumn,
                        this.tableParameterValue.LayerNameColumn,
                        this.tableParameterValue.SpriteNameColumn,
                        this.tableParameterValue.MapNameColumn});
            this.tableParameterValue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpriteParameterParameterValue", new global::System.Data.DataColumn[] {
                        this.tableSpriteParameter.DefinitionNameColumn,
                        this.tableSpriteParameter.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableParameterValue.DefinitionNameColumn,
                        this.tableParameterValue.ParameterNameColumn});
            this.tableParameterValue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("LayerSpritePlan", new global::System.Data.DataColumn[] {
                        this.tableLayer.MapNameColumn,
                        this.tableLayer.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn});
            this.tableSpritePlan.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpritePlanCoordinate", new global::System.Data.DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn,
                        this.tableSpritePlan.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoordinate.MapNameColumn,
                        this.tableCoordinate.LayerNameColumn,
                        this.tableCoordinate.PlanNameColumn});
            this.tableCoordinate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpritePlanPlanRule", new global::System.Data.DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn,
                        this.tableSpritePlan.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tablePlanRule.MapNameColumn,
                        this.tablePlanRule.LayerNameColumn,
                        this.tablePlanRule.PlanNameColumn});
            this.tablePlanRule.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpritePlanPlanParameterValue", new global::System.Data.DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn,
                        this.tableSpritePlan.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tablePlanParameterValue.MapNameColumn,
                        this.tablePlanParameterValue.LayerNameColumn,
                        this.tablePlanParameterValue.PlanNameColumn});
            this.tablePlanParameterValue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpriteDefinitionSpriteRule", new global::System.Data.DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteRule.DefinitionNameColumn});
            this.tableSpriteRule.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpriteDefinitionSpriteParameter", new global::System.Data.DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteParameter.DefinitionNameColumn});
            this.tableSpriteParameter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpriteDefinitionState", new global::System.Data.DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn});
            this.tableSpriteState.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FramesetSpriteState", new global::System.Data.DataColumn[] {
                        this.tableFrameset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteState.FramesetNameColumn});
            this.tableSpriteState.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpriteStateFrame", new global::System.Data.DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn,
                        this.tableSpriteState.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteFrame.DefinitionNameColumn,
                        this.tableSpriteFrame.StateNameColumn});
            this.tableSpriteFrame.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpriteCategorySpriteCategorySprite", new global::System.Data.DataColumn[] {
                        this.tableSpriteCategory.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteCategorySprite.CategoryNameColumn});
            this.tableSpriteCategorySprite.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SpriteDefinitionCategory", new global::System.Data.DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteCategorySprite.DefinitionNameColumn});
            this.tableSpriteCategorySprite.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SoliditySolidityShape", new global::System.Data.DataColumn[] {
                        this.tableSolidity.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSolidityShape.SolidityNameColumn});
            this.tableSolidityShape.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CategorySolidityShape", new global::System.Data.DataColumn[] {
                        this.tableTileCategory.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSolidityShape.CategoryNameColumn});
            this.tableSolidityShape.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MapProject", new global::System.Data.DataColumn[] {
                        this.tableMap.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableProject.StartMapColumn});
            this.tableProject.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.SetNull;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TileCategoryCategorizedTileset", new global::System.Data.DataColumn[] {
                        this.tableTileCategory.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableCategorizedTileset.NameColumn});
            this.tableCategorizedTileset.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TilesetCategory", new global::System.Data.DataColumn[] {
                        this.tableTileset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableCategorizedTileset.TilesetColumn});
            this.tableCategorizedTileset.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CategoryCategoryTile", new global::System.Data.DataColumn[] {
                        this.tableCategorizedTileset.TilesetColumn,
                        this.tableCategorizedTileset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableCategoryTile.TilesetColumn,
                        this.tableCategoryTile.CategoryColumn});
            this.tableCategoryTile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CategoryTileCategoryFrame", new global::System.Data.DataColumn[] {
                        this.tableCategoryTile.TilesetColumn,
                        this.tableCategoryTile.CategoryColumn,
                        this.tableCategoryTile.TileValueColumn}, new global::System.Data.DataColumn[] {
                        this.tableCategoryFrame.TilesetColumn,
                        this.tableCategoryFrame.CategoryColumn,
                        this.tableCategoryFrame.TileValueColumn});
            this.tableCategoryFrame.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFramesetFrame = new global::System.Data.DataRelation("FramesetFrame", new global::System.Data.DataColumn[] {
                        this.tableFrameset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableFrame.NameColumn}, false);
            this.relationFramesetFrame.Nested = true;
            this.Relations.Add(this.relationFramesetFrame);
            this.relationFramesetTileset = new global::System.Data.DataRelation("FramesetTileset", new global::System.Data.DataColumn[] {
                        this.tableFrameset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableTileset.FramesetColumn}, false);
            this.Relations.Add(this.relationFramesetTileset);
            this.relationTilesetTile = new global::System.Data.DataRelation("TilesetTile", new global::System.Data.DataColumn[] {
                        this.tableTileset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableTile.NameColumn}, false);
            this.relationTilesetTile.Nested = true;
            this.Relations.Add(this.relationTilesetTile);
            this.relationCounterTile = new global::System.Data.DataRelation("CounterTile", new global::System.Data.DataColumn[] {
                        this.tableCounter.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableTile.CounterColumn}, false);
            this.Relations.Add(this.relationCounterTile);
            this.relationTileTileFrame = new global::System.Data.DataRelation("TileTileFrame", new global::System.Data.DataColumn[] {
                        this.tableTile.NameColumn,
                        this.tableTile.TileValueColumn}, new global::System.Data.DataColumn[] {
                        this.tableTileFrame.NameColumn,
                        this.tableTileFrame.TileValueColumn}, false);
            this.relationTileTileFrame.Nested = true;
            this.Relations.Add(this.relationTileTileFrame);
            this.relationMapLayer = new global::System.Data.DataRelation("MapLayer", new global::System.Data.DataColumn[] {
                        this.tableMap.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableLayer.MapNameColumn}, false);
            this.relationMapLayer.Nested = true;
            this.Relations.Add(this.relationMapLayer);
            this.relationTilesetLayer = new global::System.Data.DataRelation("TilesetLayer", new global::System.Data.DataColumn[] {
                        this.tableTileset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableLayer.TilesetColumn}, false);
            this.Relations.Add(this.relationTilesetLayer);
            this.relationLayerSprite = new global::System.Data.DataRelation("LayerSprite", new global::System.Data.DataColumn[] {
                        this.tableLayer.MapNameColumn,
                        this.tableLayer.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSprite.MapNameColumn,
                        this.tableSprite.LayerNameColumn}, false);
            this.relationLayerSprite.Nested = true;
            this.Relations.Add(this.relationLayerSprite);
            this.relationSpriteDefinitionSprite = new global::System.Data.DataRelation("SpriteDefinitionSprite", new global::System.Data.DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn,
                        this.tableSpriteState.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSprite.DefinitionNameColumn,
                        this.tableSprite.StateNameColumn}, false);
            this.Relations.Add(this.relationSpriteDefinitionSprite);
            this.relationSpriteParameterValue = new global::System.Data.DataRelation("SpriteParameterValue", new global::System.Data.DataColumn[] {
                        this.tableSprite.DefinitionNameColumn,
                        this.tableSprite.LayerNameColumn,
                        this.tableSprite.NameColumn,
                        this.tableSprite.MapNameColumn}, new global::System.Data.DataColumn[] {
                        this.tableParameterValue.DefinitionNameColumn,
                        this.tableParameterValue.LayerNameColumn,
                        this.tableParameterValue.SpriteNameColumn,
                        this.tableParameterValue.MapNameColumn}, false);
            this.relationSpriteParameterValue.Nested = true;
            this.Relations.Add(this.relationSpriteParameterValue);
            this.relationSpriteParameterParameterValue = new global::System.Data.DataRelation("SpriteParameterParameterValue", new global::System.Data.DataColumn[] {
                        this.tableSpriteParameter.DefinitionNameColumn,
                        this.tableSpriteParameter.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableParameterValue.DefinitionNameColumn,
                        this.tableParameterValue.ParameterNameColumn}, false);
            this.Relations.Add(this.relationSpriteParameterParameterValue);
            this.relationLayerSpritePlan = new global::System.Data.DataRelation("LayerSpritePlan", new global::System.Data.DataColumn[] {
                        this.tableLayer.MapNameColumn,
                        this.tableLayer.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn}, false);
            this.relationLayerSpritePlan.Nested = true;
            this.Relations.Add(this.relationLayerSpritePlan);
            this.relationSpritePlanCoordinate = new global::System.Data.DataRelation("SpritePlanCoordinate", new global::System.Data.DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn,
                        this.tableSpritePlan.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoordinate.MapNameColumn,
                        this.tableCoordinate.LayerNameColumn,
                        this.tableCoordinate.PlanNameColumn}, false);
            this.relationSpritePlanCoordinate.Nested = true;
            this.Relations.Add(this.relationSpritePlanCoordinate);
            this.relationSpritePlanPlanRule = new global::System.Data.DataRelation("SpritePlanPlanRule", new global::System.Data.DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn,
                        this.tableSpritePlan.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tablePlanRule.MapNameColumn,
                        this.tablePlanRule.LayerNameColumn,
                        this.tablePlanRule.PlanNameColumn}, false);
            this.relationSpritePlanPlanRule.Nested = true;
            this.Relations.Add(this.relationSpritePlanPlanRule);
            this.relationSpritePlanPlanParameterValue = new global::System.Data.DataRelation("SpritePlanPlanParameterValue", new global::System.Data.DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn,
                        this.tableSpritePlan.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tablePlanParameterValue.MapNameColumn,
                        this.tablePlanParameterValue.LayerNameColumn,
                        this.tablePlanParameterValue.PlanNameColumn}, false);
            this.relationSpritePlanPlanParameterValue.Nested = true;
            this.Relations.Add(this.relationSpritePlanPlanParameterValue);
            this.relationSpriteDefinitionSpriteRule = new global::System.Data.DataRelation("SpriteDefinitionSpriteRule", new global::System.Data.DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteRule.DefinitionNameColumn}, false);
            this.relationSpriteDefinitionSpriteRule.Nested = true;
            this.Relations.Add(this.relationSpriteDefinitionSpriteRule);
            this.relationSpriteDefinitionSpriteParameter = new global::System.Data.DataRelation("SpriteDefinitionSpriteParameter", new global::System.Data.DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteParameter.DefinitionNameColumn}, false);
            this.relationSpriteDefinitionSpriteParameter.Nested = true;
            this.Relations.Add(this.relationSpriteDefinitionSpriteParameter);
            this.relationSpriteDefinitionState = new global::System.Data.DataRelation("SpriteDefinitionState", new global::System.Data.DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn}, false);
            this.relationSpriteDefinitionState.Nested = true;
            this.Relations.Add(this.relationSpriteDefinitionState);
            this.relationFramesetSpriteState = new global::System.Data.DataRelation("FramesetSpriteState", new global::System.Data.DataColumn[] {
                        this.tableFrameset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteState.FramesetNameColumn}, false);
            this.Relations.Add(this.relationFramesetSpriteState);
            this.relationSpriteStateFrame = new global::System.Data.DataRelation("SpriteStateFrame", new global::System.Data.DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn,
                        this.tableSpriteState.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteFrame.DefinitionNameColumn,
                        this.tableSpriteFrame.StateNameColumn}, false);
            this.relationSpriteStateFrame.Nested = true;
            this.Relations.Add(this.relationSpriteStateFrame);
            this.relationSpriteCategorySpriteCategorySprite = new global::System.Data.DataRelation("SpriteCategorySpriteCategorySprite", new global::System.Data.DataColumn[] {
                        this.tableSpriteCategory.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteCategorySprite.CategoryNameColumn}, false);
            this.relationSpriteCategorySpriteCategorySprite.Nested = true;
            this.Relations.Add(this.relationSpriteCategorySpriteCategorySprite);
            this.relationSpriteDefinitionCategory = new global::System.Data.DataRelation("SpriteDefinitionCategory", new global::System.Data.DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpriteCategorySprite.DefinitionNameColumn}, false);
            this.Relations.Add(this.relationSpriteDefinitionCategory);
            this.relationSoliditySolidityShape = new global::System.Data.DataRelation("SoliditySolidityShape", new global::System.Data.DataColumn[] {
                        this.tableSolidity.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSolidityShape.SolidityNameColumn}, false);
            this.relationSoliditySolidityShape.Nested = true;
            this.Relations.Add(this.relationSoliditySolidityShape);
            this.relationCategorySolidityShape = new global::System.Data.DataRelation("CategorySolidityShape", new global::System.Data.DataColumn[] {
                        this.tableTileCategory.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableSolidityShape.CategoryNameColumn}, false);
            this.Relations.Add(this.relationCategorySolidityShape);
            this.relationTileCategoryCategorizedTileset = new global::System.Data.DataRelation("TileCategoryCategorizedTileset", new global::System.Data.DataColumn[] {
                        this.tableTileCategory.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableCategorizedTileset.NameColumn}, false);
            this.relationTileCategoryCategorizedTileset.Nested = true;
            this.Relations.Add(this.relationTileCategoryCategorizedTileset);
            this.relationTilesetCategory = new global::System.Data.DataRelation("TilesetCategory", new global::System.Data.DataColumn[] {
                        this.tableTileset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableCategorizedTileset.TilesetColumn}, false);
            this.Relations.Add(this.relationTilesetCategory);
            this.relationCategoryCategoryTile = new global::System.Data.DataRelation("CategoryCategoryTile", new global::System.Data.DataColumn[] {
                        this.tableCategorizedTileset.TilesetColumn,
                        this.tableCategorizedTileset.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableCategoryTile.TilesetColumn,
                        this.tableCategoryTile.CategoryColumn}, false);
            this.relationCategoryCategoryTile.Nested = true;
            this.Relations.Add(this.relationCategoryCategoryTile);
            this.relationCategoryTileCategoryFrame = new global::System.Data.DataRelation("CategoryTileCategoryFrame", new global::System.Data.DataColumn[] {
                        this.tableCategoryTile.TilesetColumn,
                        this.tableCategoryTile.CategoryColumn,
                        this.tableCategoryTile.TileValueColumn}, new global::System.Data.DataColumn[] {
                        this.tableCategoryFrame.TilesetColumn,
                        this.tableCategoryFrame.CategoryColumn,
                        this.tableCategoryFrame.TileValueColumn}, false);
            this.relationCategoryTileCategoryFrame.Nested = true;
            this.Relations.Add(this.relationCategoryTileCategoryFrame);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGraphicSheet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFrameset() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFrame() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTileset() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTileFrame() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCounter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMap() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLayer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSprite() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParameterValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSpritePlan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoordinate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePlanRule() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePlanParameterValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSpriteDefinition() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSpriteRule() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSpriteParameter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSpriteState() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSpriteFrame() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSpriteCategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSpriteCategorySprite() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSolidity() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSolidityShape() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSourceCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProject() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTileCategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCategorizedTileset() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCategoryTile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCategoryFrame() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectDataset ds = new ProjectDataset();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GraphicSheetRowChangeEventHandler(object sender, GraphicSheetRowChangeEvent e);
        
        public delegate void FramesetRowChangeEventHandler(object sender, FramesetRowChangeEvent e);
        
        public delegate void FrameRowChangeEventHandler(object sender, FrameRowChangeEvent e);
        
        public delegate void TilesetRowChangeEventHandler(object sender, TilesetRowChangeEvent e);
        
        public delegate void TileRowChangeEventHandler(object sender, TileRowChangeEvent e);
        
        public delegate void TileFrameRowChangeEventHandler(object sender, TileFrameRowChangeEvent e);
        
        public delegate void CounterRowChangeEventHandler(object sender, CounterRowChangeEvent e);
        
        public delegate void MapRowChangeEventHandler(object sender, MapRowChangeEvent e);
        
        public delegate void LayerRowChangeEventHandler(object sender, LayerRowChangeEvent e);
        
        public delegate void SpriteRowChangeEventHandler(object sender, SpriteRowChangeEvent e);
        
        public delegate void ParameterValueRowChangeEventHandler(object sender, ParameterValueRowChangeEvent e);
        
        public delegate void SpritePlanRowChangeEventHandler(object sender, SpritePlanRowChangeEvent e);
        
        public delegate void CoordinateRowChangeEventHandler(object sender, CoordinateRowChangeEvent e);
        
        public delegate void PlanRuleRowChangeEventHandler(object sender, PlanRuleRowChangeEvent e);
        
        public delegate void PlanParameterValueRowChangeEventHandler(object sender, PlanParameterValueRowChangeEvent e);
        
        public delegate void SpriteDefinitionRowChangeEventHandler(object sender, SpriteDefinitionRowChangeEvent e);
        
        public delegate void SpriteRuleRowChangeEventHandler(object sender, SpriteRuleRowChangeEvent e);
        
        public delegate void SpriteParameterRowChangeEventHandler(object sender, SpriteParameterRowChangeEvent e);
        
        public delegate void SpriteStateRowChangeEventHandler(object sender, SpriteStateRowChangeEvent e);
        
        public delegate void SpriteFrameRowChangeEventHandler(object sender, SpriteFrameRowChangeEvent e);
        
        public delegate void SpriteCategoryRowChangeEventHandler(object sender, SpriteCategoryRowChangeEvent e);
        
        public delegate void SpriteCategorySpriteRowChangeEventHandler(object sender, SpriteCategorySpriteRowChangeEvent e);
        
        public delegate void SolidityRowChangeEventHandler(object sender, SolidityRowChangeEvent e);
        
        public delegate void SolidityShapeRowChangeEventHandler(object sender, SolidityShapeRowChangeEvent e);
        
        public delegate void SourceCodeRowChangeEventHandler(object sender, SourceCodeRowChangeEvent e);
        
        public delegate void ProjectRowChangeEventHandler(object sender, ProjectRowChangeEvent e);
        
        public delegate void TileCategoryRowChangeEventHandler(object sender, TileCategoryRowChangeEvent e);
        
        public delegate void CategorizedTilesetRowChangeEventHandler(object sender, CategorizedTilesetRowChangeEvent e);
        
        public delegate void CategoryTileRowChangeEventHandler(object sender, CategoryTileRowChangeEvent e);
        
        public delegate void CategoryFrameRowChangeEventHandler(object sender, CategoryFrameRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GraphicSheetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnColumns;
            
            private global::System.Data.DataColumn columnRows;
            
            private global::System.Data.DataColumn columnCellWidth;
            
            private global::System.Data.DataColumn columnCellHeight;
            
            private global::System.Data.DataColumn columnImage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GraphicSheetDataTable() {
                this.TableName = "GraphicSheet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GraphicSheetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GraphicSheetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColumnsColumn {
                get {
                    return this.columnColumns;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowsColumn {
                get {
                    return this.columnRows;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellWidthColumn {
                get {
                    return this.columnCellWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellHeightColumn {
                get {
                    return this.columnCellHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageColumn {
                get {
                    return this.columnImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GraphicSheetRow this[int index] {
                get {
                    return ((GraphicSheetRow)(this.Rows[index]));
                }
            }
            
            public event GraphicSheetRowChangeEventHandler GraphicSheetRowChanging;
            
            public event GraphicSheetRowChangeEventHandler GraphicSheetRowChanged;
            
            public event GraphicSheetRowChangeEventHandler GraphicSheetRowDeleting;
            
            public event GraphicSheetRowChangeEventHandler GraphicSheetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGraphicSheetRow(GraphicSheetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GraphicSheetRow AddGraphicSheetRow(string Name, short Columns, short Rows, short CellWidth, short CellHeight, byte[] Image) {
                GraphicSheetRow rowGraphicSheetRow = ((GraphicSheetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Columns,
                        Rows,
                        CellWidth,
                        CellHeight,
                        Image};
                rowGraphicSheetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGraphicSheetRow);
                return rowGraphicSheetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GraphicSheetRow FindByName(string Name) {
                return ((GraphicSheetRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GraphicSheetDataTable cln = ((GraphicSheetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GraphicSheetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnColumns = base.Columns["Columns"];
                this.columnRows = base.Columns["Rows"];
                this.columnCellWidth = base.Columns["CellWidth"];
                this.columnCellHeight = base.Columns["CellHeight"];
                this.columnImage = base.Columns["Image"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnColumns = new global::System.Data.DataColumn("Columns", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnColumns);
                this.columnRows = new global::System.Data.DataColumn("Rows", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRows);
                this.columnCellWidth = new global::System.Data.DataColumn("CellWidth", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCellWidth);
                this.columnCellHeight = new global::System.Data.DataColumn("CellHeight", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCellHeight);
                this.columnImage = new global::System.Data.DataColumn("Image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImage);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("GraphicSheetKey", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnColumns.Namespace = "";
                this.columnColumns.DefaultValue = ((short)(16));
                this.columnRows.Namespace = "";
                this.columnRows.DefaultValue = ((short)(8));
                this.columnCellWidth.Namespace = "";
                this.columnCellWidth.Caption = "Cell Width";
                this.columnCellWidth.DefaultValue = ((short)(32));
                this.columnCellHeight.Namespace = "";
                this.columnCellHeight.Caption = "Cell Height";
                this.columnCellHeight.DefaultValue = ((short)(32));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GraphicSheetRow NewGraphicSheetRow() {
                return ((GraphicSheetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GraphicSheetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GraphicSheetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GraphicSheetRowChanged != null)) {
                    this.GraphicSheetRowChanged(this, new GraphicSheetRowChangeEvent(((GraphicSheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GraphicSheetRowChanging != null)) {
                    this.GraphicSheetRowChanging(this, new GraphicSheetRowChangeEvent(((GraphicSheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GraphicSheetRowDeleted != null)) {
                    this.GraphicSheetRowDeleted(this, new GraphicSheetRowChangeEvent(((GraphicSheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GraphicSheetRowDeleting != null)) {
                    this.GraphicSheetRowDeleting(this, new GraphicSheetRowChangeEvent(((GraphicSheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGraphicSheetRow(GraphicSheetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GraphicSheetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FramesetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FramesetDataTable() {
                this.TableName = "Frameset";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FramesetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FramesetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FramesetRow this[int index] {
                get {
                    return ((FramesetRow)(this.Rows[index]));
                }
            }
            
            public event FramesetRowChangeEventHandler FramesetRowChanging;
            
            public event FramesetRowChangeEventHandler FramesetRowChanged;
            
            public event FramesetRowChangeEventHandler FramesetRowDeleting;
            
            public event FramesetRowChangeEventHandler FramesetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFramesetRow(FramesetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FramesetRow AddFramesetRow(string Name) {
                FramesetRow rowFramesetRow = ((FramesetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name};
                rowFramesetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFramesetRow);
                return rowFramesetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FramesetRow FindByName(string Name) {
                return ((FramesetRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FramesetDataTable cln = ((FramesetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FramesetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("FramesetKey", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FramesetRow NewFramesetRow() {
                return ((FramesetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FramesetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FramesetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FramesetRowChanged != null)) {
                    this.FramesetRowChanged(this, new FramesetRowChangeEvent(((FramesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FramesetRowChanging != null)) {
                    this.FramesetRowChanging(this, new FramesetRowChangeEvent(((FramesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FramesetRowDeleted != null)) {
                    this.FramesetRowDeleted(this, new FramesetRowChangeEvent(((FramesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FramesetRowDeleting != null)) {
                    this.FramesetRowDeleting(this, new FramesetRowChangeEvent(((FramesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFramesetRow(FramesetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FramesetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FrameDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFrameValue;
            
            private global::System.Data.DataColumn columnGraphicSheet;
            
            private global::System.Data.DataColumn columnCellIndex;
            
            private global::System.Data.DataColumn columnm11;
            
            private global::System.Data.DataColumn columnm12;
            
            private global::System.Data.DataColumn columnm21;
            
            private global::System.Data.DataColumn columnm22;
            
            private global::System.Data.DataColumn columndx;
            
            private global::System.Data.DataColumn columndy;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columncolor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrameDataTable() {
                this.TableName = "Frame";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FrameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FrameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrameValueColumn {
                get {
                    return this.columnFrameValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GraphicSheetColumn {
                get {
                    return this.columnGraphicSheet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellIndexColumn {
                get {
                    return this.columnCellIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn m11Column {
                get {
                    return this.columnm11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn m12Column {
                get {
                    return this.columnm12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn m21Column {
                get {
                    return this.columnm21;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn m22Column {
                get {
                    return this.columnm22;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dxColumn {
                get {
                    return this.columndx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dyColumn {
                get {
                    return this.columndy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn colorColumn {
                get {
                    return this.columncolor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrameRow this[int index] {
                get {
                    return ((FrameRow)(this.Rows[index]));
                }
            }
            
            public event FrameRowChangeEventHandler FrameRowChanging;
            
            public event FrameRowChangeEventHandler FrameRowChanged;
            
            public event FrameRowChangeEventHandler FrameRowDeleting;
            
            public event FrameRowChangeEventHandler FrameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFrameRow(FrameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrameRow AddFrameRow(int FrameValue, string GraphicSheet, short CellIndex, float m11, float m12, float m21, float m22, float dx, float dy, FramesetRow parentFramesetRowByFramesetFrame, int color) {
                FrameRow rowFrameRow = ((FrameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FrameValue,
                        GraphicSheet,
                        CellIndex,
                        m11,
                        m12,
                        m21,
                        m22,
                        dx,
                        dy,
                        null,
                        color};
                if ((parentFramesetRowByFramesetFrame != null)) {
                    columnValuesArray[9] = parentFramesetRowByFramesetFrame[0];
                }
                rowFrameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFrameRow);
                return rowFrameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrameRow FindByNameFrameValue(string Name, int FrameValue) {
                return ((FrameRow)(this.Rows.Find(new object[] {
                            Name,
                            FrameValue})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FrameDataTable cln = ((FrameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FrameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFrameValue = base.Columns["FrameValue"];
                this.columnGraphicSheet = base.Columns["GraphicSheet"];
                this.columnCellIndex = base.Columns["CellIndex"];
                this.columnm11 = base.Columns["m11"];
                this.columnm12 = base.Columns["m12"];
                this.columnm21 = base.Columns["m21"];
                this.columnm22 = base.Columns["m22"];
                this.columndx = base.Columns["dx"];
                this.columndy = base.Columns["dy"];
                this.columnName = base.Columns["Name"];
                this.columncolor = base.Columns["color"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFrameValue = new global::System.Data.DataColumn("FrameValue", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFrameValue);
                this.columnGraphicSheet = new global::System.Data.DataColumn("GraphicSheet", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGraphicSheet);
                this.columnCellIndex = new global::System.Data.DataColumn("CellIndex", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCellIndex);
                this.columnm11 = new global::System.Data.DataColumn("m11", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnm11);
                this.columnm12 = new global::System.Data.DataColumn("m12", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnm12);
                this.columnm21 = new global::System.Data.DataColumn("m21", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnm21);
                this.columnm22 = new global::System.Data.DataColumn("m22", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnm22);
                this.columndx = new global::System.Data.DataColumn("dx", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndx);
                this.columndy = new global::System.Data.DataColumn("dy", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndy);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnName);
                this.columncolor = new global::System.Data.DataColumn("color", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncolor);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("FrameKey", new global::System.Data.DataColumn[] {
                                this.columnName,
                                this.columnFrameValue}, true));
                this.columnFrameValue.AllowDBNull = false;
                this.columnFrameValue.Namespace = "";
                this.columnGraphicSheet.AllowDBNull = false;
                this.columnGraphicSheet.Namespace = "";
                this.columnCellIndex.AllowDBNull = false;
                this.columnCellIndex.Namespace = "";
                this.columnm11.Namespace = "";
                this.columnm11.DefaultValue = ((float)(1F));
                this.columnm12.Namespace = "";
                this.columnm12.DefaultValue = ((float)(0F));
                this.columnm21.Namespace = "";
                this.columnm21.DefaultValue = ((float)(0F));
                this.columnm22.Namespace = "";
                this.columnm22.DefaultValue = ((float)(1F));
                this.columndx.Namespace = "";
                this.columndx.DefaultValue = ((float)(0F));
                this.columndy.Namespace = "";
                this.columndy.DefaultValue = ((float)(0F));
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columncolor.Namespace = "";
                this.columncolor.DefaultValue = ((int)(-1));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrameRow NewFrameRow() {
                return ((FrameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FrameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FrameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FrameRowChanged != null)) {
                    this.FrameRowChanged(this, new FrameRowChangeEvent(((FrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FrameRowChanging != null)) {
                    this.FrameRowChanging(this, new FrameRowChangeEvent(((FrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FrameRowDeleted != null)) {
                    this.FrameRowDeleted(this, new FrameRowChangeEvent(((FrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FrameRowDeleting != null)) {
                    this.FrameRowDeleting(this, new FrameRowChangeEvent(((FrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFrameRow(FrameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FrameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TilesetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnFrameset;
            
            private global::System.Data.DataColumn columnTileWidth;
            
            private global::System.Data.DataColumn columnTileHeight;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetDataTable() {
                this.TableName = "Tileset";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TilesetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TilesetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FramesetColumn {
                get {
                    return this.columnFrameset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TileWidthColumn {
                get {
                    return this.columnTileWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TileHeightColumn {
                get {
                    return this.columnTileHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetRow this[int index] {
                get {
                    return ((TilesetRow)(this.Rows[index]));
                }
            }
            
            public event TilesetRowChangeEventHandler TilesetRowChanging;
            
            public event TilesetRowChangeEventHandler TilesetRowChanged;
            
            public event TilesetRowChangeEventHandler TilesetRowDeleting;
            
            public event TilesetRowChangeEventHandler TilesetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTilesetRow(TilesetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetRow AddTilesetRow(string Name, FramesetRow parentFramesetRowByFramesetTileset, short TileWidth, short TileHeight) {
                TilesetRow rowTilesetRow = ((TilesetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        null,
                        TileWidth,
                        TileHeight};
                if ((parentFramesetRowByFramesetTileset != null)) {
                    columnValuesArray[1] = parentFramesetRowByFramesetTileset[0];
                }
                rowTilesetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTilesetRow);
                return rowTilesetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetRow FindByName(string Name) {
                return ((TilesetRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TilesetDataTable cln = ((TilesetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TilesetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnFrameset = base.Columns["Frameset"];
                this.columnTileWidth = base.Columns["TileWidth"];
                this.columnTileHeight = base.Columns["TileHeight"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnFrameset = new global::System.Data.DataColumn("Frameset", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFrameset);
                this.columnTileWidth = new global::System.Data.DataColumn("TileWidth", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTileWidth);
                this.columnTileHeight = new global::System.Data.DataColumn("TileHeight", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTileHeight);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TilesetKey", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnFrameset.Namespace = "";
                this.columnTileWidth.AllowDBNull = false;
                this.columnTileWidth.Namespace = "";
                this.columnTileHeight.AllowDBNull = false;
                this.columnTileHeight.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetRow NewTilesetRow() {
                return ((TilesetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TilesetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TilesetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TilesetRowChanged != null)) {
                    this.TilesetRowChanged(this, new TilesetRowChangeEvent(((TilesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TilesetRowChanging != null)) {
                    this.TilesetRowChanging(this, new TilesetRowChangeEvent(((TilesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TilesetRowDeleted != null)) {
                    this.TilesetRowDeleted(this, new TilesetRowChangeEvent(((TilesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TilesetRowDeleting != null)) {
                    this.TilesetRowDeleting(this, new TilesetRowChangeEvent(((TilesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTilesetRow(TilesetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TilesetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TileDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTileValue;
            
            private global::System.Data.DataColumn columnCounter;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileDataTable() {
                this.TableName = "Tile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TileValueColumn {
                get {
                    return this.columnTileValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CounterColumn {
                get {
                    return this.columnCounter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileRow this[int index] {
                get {
                    return ((TileRow)(this.Rows[index]));
                }
            }
            
            public event TileRowChangeEventHandler TileRowChanging;
            
            public event TileRowChangeEventHandler TileRowChanged;
            
            public event TileRowChangeEventHandler TileRowDeleting;
            
            public event TileRowChangeEventHandler TileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTileRow(TileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileRow AddTileRow(int TileValue, CounterRow parentCounterRowByCounterTile, TilesetRow parentTilesetRowByTilesetTile) {
                TileRow rowTileRow = ((TileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TileValue,
                        null,
                        null};
                if ((parentCounterRowByCounterTile != null)) {
                    columnValuesArray[1] = parentCounterRowByCounterTile[0];
                }
                if ((parentTilesetRowByTilesetTile != null)) {
                    columnValuesArray[2] = parentTilesetRowByTilesetTile[0];
                }
                rowTileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTileRow);
                return rowTileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileRow FindByNameTileValue(string Name, int TileValue) {
                return ((TileRow)(this.Rows.Find(new object[] {
                            Name,
                            TileValue})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TileDataTable cln = ((TileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTileValue = base.Columns["TileValue"];
                this.columnCounter = base.Columns["Counter"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTileValue = new global::System.Data.DataColumn("TileValue", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTileValue);
                this.columnCounter = new global::System.Data.DataColumn("Counter", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCounter);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TileKey", new global::System.Data.DataColumn[] {
                                this.columnName,
                                this.columnTileValue}, true));
                this.columnTileValue.AllowDBNull = false;
                this.columnTileValue.Namespace = "";
                this.columnCounter.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileRow NewTileRow() {
                return ((TileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TileRowChanged != null)) {
                    this.TileRowChanged(this, new TileRowChangeEvent(((TileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TileRowChanging != null)) {
                    this.TileRowChanging(this, new TileRowChangeEvent(((TileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TileRowDeleted != null)) {
                    this.TileRowDeleted(this, new TileRowChangeEvent(((TileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TileRowDeleting != null)) {
                    this.TileRowDeleting(this, new TileRowChangeEvent(((TileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTileRow(TileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TileFrameDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSequence;
            
            private global::System.Data.DataColumn columnFrameValue;
            
            private global::System.Data.DataColumn columnDuration;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnTileValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileFrameDataTable() {
                this.TableName = "TileFrame";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TileFrameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TileFrameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrameValueColumn {
                get {
                    return this.columnFrameValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TileValueColumn {
                get {
                    return this.columnTileValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileFrameRow this[int index] {
                get {
                    return ((TileFrameRow)(this.Rows[index]));
                }
            }
            
            public event TileFrameRowChangeEventHandler TileFrameRowChanging;
            
            public event TileFrameRowChangeEventHandler TileFrameRowChanged;
            
            public event TileFrameRowChangeEventHandler TileFrameRowDeleting;
            
            public event TileFrameRowChangeEventHandler TileFrameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTileFrameRow(TileFrameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileFrameRow AddTileFrameRow(short Sequence, int FrameValue, short Duration, string Name, int TileValue) {
                TileFrameRow rowTileFrameRow = ((TileFrameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Sequence,
                        FrameValue,
                        Duration,
                        Name,
                        TileValue};
                rowTileFrameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTileFrameRow);
                return rowTileFrameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileFrameRow FindByNameTileValueSequence(string Name, int TileValue, short Sequence) {
                return ((TileFrameRow)(this.Rows.Find(new object[] {
                            Name,
                            TileValue,
                            Sequence})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TileFrameDataTable cln = ((TileFrameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TileFrameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSequence = base.Columns["Sequence"];
                this.columnFrameValue = base.Columns["FrameValue"];
                this.columnDuration = base.Columns["Duration"];
                this.columnName = base.Columns["Name"];
                this.columnTileValue = base.Columns["TileValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSequence = new global::System.Data.DataColumn("Sequence", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSequence);
                this.columnFrameValue = new global::System.Data.DataColumn("FrameValue", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFrameValue);
                this.columnDuration = new global::System.Data.DataColumn("Duration", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDuration);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnName);
                this.columnTileValue = new global::System.Data.DataColumn("TileValue", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTileValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TileFrameKey", new global::System.Data.DataColumn[] {
                                this.columnName,
                                this.columnTileValue,
                                this.columnSequence}, true));
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
                this.columnFrameValue.Namespace = "";
                this.columnDuration.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnTileValue.AllowDBNull = false;
                this.columnTileValue.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileFrameRow NewTileFrameRow() {
                return ((TileFrameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TileFrameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TileFrameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TileFrameRowChanged != null)) {
                    this.TileFrameRowChanged(this, new TileFrameRowChangeEvent(((TileFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TileFrameRowChanging != null)) {
                    this.TileFrameRowChanging(this, new TileFrameRowChangeEvent(((TileFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TileFrameRowDeleted != null)) {
                    this.TileFrameRowDeleted(this, new TileFrameRowChangeEvent(((TileFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TileFrameRowDeleting != null)) {
                    this.TileFrameRowDeleting(this, new TileFrameRowChangeEvent(((TileFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTileFrameRow(TileFrameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TileFrameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CounterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnMax;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CounterDataTable() {
                this.TableName = "Counter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CounterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CounterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxColumn {
                get {
                    return this.columnMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CounterRow this[int index] {
                get {
                    return ((CounterRow)(this.Rows[index]));
                }
            }
            
            public event CounterRowChangeEventHandler CounterRowChanging;
            
            public event CounterRowChangeEventHandler CounterRowChanged;
            
            public event CounterRowChangeEventHandler CounterRowDeleting;
            
            public event CounterRowChangeEventHandler CounterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCounterRow(CounterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CounterRow AddCounterRow(string Name, int Value, int Max) {
                CounterRow rowCounterRow = ((CounterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Value,
                        Max};
                rowCounterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCounterRow);
                return rowCounterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CounterRow FindByName(string Name) {
                return ((CounterRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CounterDataTable cln = ((CounterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CounterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
                this.columnMax = base.Columns["Max"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnMax = new global::System.Data.DataColumn("Max", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMax);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("CounterKey", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnValue.Namespace = "";
                this.columnMax.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CounterRow NewCounterRow() {
                return ((CounterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CounterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CounterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CounterRowChanged != null)) {
                    this.CounterRowChanged(this, new CounterRowChangeEvent(((CounterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CounterRowChanging != null)) {
                    this.CounterRowChanging(this, new CounterRowChangeEvent(((CounterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CounterRowDeleted != null)) {
                    this.CounterRowDeleted(this, new CounterRowChangeEvent(((CounterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CounterRowDeleting != null)) {
                    this.CounterRowDeleting(this, new CounterRowChangeEvent(((CounterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCounterRow(CounterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CounterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MapDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnScrollMarginLeft;
            
            private global::System.Data.DataColumn columnScrollMarginTop;
            
            private global::System.Data.DataColumn columnScrollMarginRight;
            
            private global::System.Data.DataColumn columnScrollMarginBottom;
            
            private global::System.Data.DataColumn columnScrollWidth;
            
            private global::System.Data.DataColumn columnScrollHeight;
            
            private global::System.Data.DataColumn columnViewLeft;
            
            private global::System.Data.DataColumn columnViewTop;
            
            private global::System.Data.DataColumn columnViewWidth;
            
            private global::System.Data.DataColumn columnViewHeight;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapDataTable() {
                this.TableName = "Map";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MapDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MapDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrollMarginLeftColumn {
                get {
                    return this.columnScrollMarginLeft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrollMarginTopColumn {
                get {
                    return this.columnScrollMarginTop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrollMarginRightColumn {
                get {
                    return this.columnScrollMarginRight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrollMarginBottomColumn {
                get {
                    return this.columnScrollMarginBottom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrollWidthColumn {
                get {
                    return this.columnScrollWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrollHeightColumn {
                get {
                    return this.columnScrollHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewLeftColumn {
                get {
                    return this.columnViewLeft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewTopColumn {
                get {
                    return this.columnViewTop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewWidthColumn {
                get {
                    return this.columnViewWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewHeightColumn {
                get {
                    return this.columnViewHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow this[int index] {
                get {
                    return ((MapRow)(this.Rows[index]));
                }
            }
            
            public event MapRowChangeEventHandler MapRowChanging;
            
            public event MapRowChangeEventHandler MapRowChanged;
            
            public event MapRowChangeEventHandler MapRowDeleting;
            
            public event MapRowChangeEventHandler MapRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMapRow(MapRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow AddMapRow(string Name, short ScrollMarginLeft, short ScrollMarginTop, short ScrollMarginRight, short ScrollMarginBottom, int ScrollWidth, int ScrollHeight, short ViewLeft, short ViewTop, short ViewWidth, short ViewHeight) {
                MapRow rowMapRow = ((MapRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        ScrollMarginLeft,
                        ScrollMarginTop,
                        ScrollMarginRight,
                        ScrollMarginBottom,
                        ScrollWidth,
                        ScrollHeight,
                        ViewLeft,
                        ViewTop,
                        ViewWidth,
                        ViewHeight};
                rowMapRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMapRow);
                return rowMapRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow FindByName(string Name) {
                return ((MapRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MapDataTable cln = ((MapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MapDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnScrollMarginLeft = base.Columns["ScrollMarginLeft"];
                this.columnScrollMarginTop = base.Columns["ScrollMarginTop"];
                this.columnScrollMarginRight = base.Columns["ScrollMarginRight"];
                this.columnScrollMarginBottom = base.Columns["ScrollMarginBottom"];
                this.columnScrollWidth = base.Columns["ScrollWidth"];
                this.columnScrollHeight = base.Columns["ScrollHeight"];
                this.columnViewLeft = base.Columns["ViewLeft"];
                this.columnViewTop = base.Columns["ViewTop"];
                this.columnViewWidth = base.Columns["ViewWidth"];
                this.columnViewHeight = base.Columns["ViewHeight"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnScrollMarginLeft = new global::System.Data.DataColumn("ScrollMarginLeft", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnScrollMarginLeft);
                this.columnScrollMarginTop = new global::System.Data.DataColumn("ScrollMarginTop", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnScrollMarginTop);
                this.columnScrollMarginRight = new global::System.Data.DataColumn("ScrollMarginRight", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnScrollMarginRight);
                this.columnScrollMarginBottom = new global::System.Data.DataColumn("ScrollMarginBottom", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnScrollMarginBottom);
                this.columnScrollWidth = new global::System.Data.DataColumn("ScrollWidth", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnScrollWidth);
                this.columnScrollHeight = new global::System.Data.DataColumn("ScrollHeight", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnScrollHeight);
                this.columnViewLeft = new global::System.Data.DataColumn("ViewLeft", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnViewLeft);
                this.columnViewTop = new global::System.Data.DataColumn("ViewTop", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnViewTop);
                this.columnViewWidth = new global::System.Data.DataColumn("ViewWidth", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnViewWidth);
                this.columnViewHeight = new global::System.Data.DataColumn("ViewHeight", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnViewHeight);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MapKey", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnScrollMarginLeft.AllowDBNull = false;
                this.columnScrollMarginLeft.Namespace = "";
                this.columnScrollMarginTop.AllowDBNull = false;
                this.columnScrollMarginTop.Namespace = "";
                this.columnScrollMarginRight.AllowDBNull = false;
                this.columnScrollMarginRight.Namespace = "";
                this.columnScrollMarginBottom.AllowDBNull = false;
                this.columnScrollMarginBottom.Namespace = "";
                this.columnScrollWidth.Namespace = "";
                this.columnScrollWidth.Caption = "Scrollable pixel width of the map independent of its layers";
                this.columnScrollHeight.Namespace = "";
                this.columnScrollHeight.Caption = "Scrollable pixel height of the map independent of its layers";
                this.columnViewLeft.Namespace = "";
                this.columnViewTop.Namespace = "";
                this.columnViewWidth.Namespace = "";
                this.columnViewHeight.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow NewMapRow() {
                return ((MapRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MapRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MapRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MapRowChanged != null)) {
                    this.MapRowChanged(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MapRowChanging != null)) {
                    this.MapRowChanging(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MapRowDeleted != null)) {
                    this.MapRowDeleted(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MapRowDeleting != null)) {
                    this.MapRowDeleting(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMapRow(MapRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MapDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LayerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnWidth;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnTileset;
            
            private global::System.Data.DataColumn columnBytesPerTile;
            
            private global::System.Data.DataColumn columnMapName;
            
            private global::System.Data.DataColumn columnOffsetX;
            
            private global::System.Data.DataColumn columnOffsetY;
            
            private global::System.Data.DataColumn columnScrollRateX;
            
            private global::System.Data.DataColumn columnScrollRateY;
            
            private global::System.Data.DataColumn columnZIndex;
            
            private global::System.Data.DataColumn columnPriority;
            
            private global::System.Data.DataColumn columnVirtualWidth;
            
            private global::System.Data.DataColumn columnVirtualHeight;
            
            private global::System.Data.DataColumn columnTiles;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerDataTable() {
                this.TableName = "Layer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LayerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LayerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TilesetColumn {
                get {
                    return this.columnTileset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BytesPerTileColumn {
                get {
                    return this.columnBytesPerTile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OffsetXColumn {
                get {
                    return this.columnOffsetX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OffsetYColumn {
                get {
                    return this.columnOffsetY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrollRateXColumn {
                get {
                    return this.columnScrollRateX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrollRateYColumn {
                get {
                    return this.columnScrollRateY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIndexColumn {
                get {
                    return this.columnZIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VirtualWidthColumn {
                get {
                    return this.columnVirtualWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VirtualHeightColumn {
                get {
                    return this.columnVirtualHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TilesColumn {
                get {
                    return this.columnTiles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow this[int index] {
                get {
                    return ((LayerRow)(this.Rows[index]));
                }
            }
            
            public event LayerRowChangeEventHandler LayerRowChanging;
            
            public event LayerRowChangeEventHandler LayerRowChanged;
            
            public event LayerRowChangeEventHandler LayerRowDeleting;
            
            public event LayerRowChangeEventHandler LayerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLayerRow(LayerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow AddLayerRow(string Name, int Width, int Height, TilesetRow parentTilesetRowByTilesetLayer, byte BytesPerTile, MapRow parentMapRowByMapLayer, int OffsetX, int OffsetY, float ScrollRateX, float ScrollRateY, int ZIndex, int Priority, int VirtualWidth, int VirtualHeight, byte[] Tiles) {
                LayerRow rowLayerRow = ((LayerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Width,
                        Height,
                        null,
                        BytesPerTile,
                        null,
                        OffsetX,
                        OffsetY,
                        ScrollRateX,
                        ScrollRateY,
                        ZIndex,
                        Priority,
                        VirtualWidth,
                        VirtualHeight,
                        Tiles};
                if ((parentTilesetRowByTilesetLayer != null)) {
                    columnValuesArray[3] = parentTilesetRowByTilesetLayer[0];
                }
                if ((parentMapRowByMapLayer != null)) {
                    columnValuesArray[5] = parentMapRowByMapLayer[0];
                }
                rowLayerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLayerRow);
                return rowLayerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow FindByMapNameName(string MapName, string Name) {
                return ((LayerRow)(this.Rows.Find(new object[] {
                            MapName,
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LayerDataTable cln = ((LayerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LayerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnWidth = base.Columns["Width"];
                this.columnHeight = base.Columns["Height"];
                this.columnTileset = base.Columns["Tileset"];
                this.columnBytesPerTile = base.Columns["BytesPerTile"];
                this.columnMapName = base.Columns["MapName"];
                this.columnOffsetX = base.Columns["OffsetX"];
                this.columnOffsetY = base.Columns["OffsetY"];
                this.columnScrollRateX = base.Columns["ScrollRateX"];
                this.columnScrollRateY = base.Columns["ScrollRateY"];
                this.columnZIndex = base.Columns["ZIndex"];
                this.columnPriority = base.Columns["Priority"];
                this.columnVirtualWidth = base.Columns["VirtualWidth"];
                this.columnVirtualHeight = base.Columns["VirtualHeight"];
                this.columnTiles = base.Columns["Tiles"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnWidth = new global::System.Data.DataColumn("Width", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnWidth);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHeight);
                this.columnTileset = new global::System.Data.DataColumn("Tileset", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTileset);
                this.columnBytesPerTile = new global::System.Data.DataColumn("BytesPerTile", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBytesPerTile);
                this.columnMapName = new global::System.Data.DataColumn("MapName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMapName);
                this.columnOffsetX = new global::System.Data.DataColumn("OffsetX", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOffsetX);
                this.columnOffsetY = new global::System.Data.DataColumn("OffsetY", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOffsetY);
                this.columnScrollRateX = new global::System.Data.DataColumn("ScrollRateX", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnScrollRateX);
                this.columnScrollRateY = new global::System.Data.DataColumn("ScrollRateY", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnScrollRateY);
                this.columnZIndex = new global::System.Data.DataColumn("ZIndex", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnZIndex);
                this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPriority);
                this.columnVirtualWidth = new global::System.Data.DataColumn("VirtualWidth", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVirtualWidth);
                this.columnVirtualHeight = new global::System.Data.DataColumn("VirtualHeight", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVirtualHeight);
                this.columnTiles = new global::System.Data.DataColumn("Tiles", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTiles);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("LayerKey", new global::System.Data.DataColumn[] {
                                this.columnMapName,
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnWidth.AllowDBNull = false;
                this.columnWidth.Namespace = "";
                this.columnHeight.AllowDBNull = false;
                this.columnHeight.Namespace = "";
                this.columnTileset.Namespace = "";
                this.columnBytesPerTile.AllowDBNull = false;
                this.columnBytesPerTile.Namespace = "";
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnOffsetX.Namespace = "";
                this.columnOffsetX.DefaultValue = ((int)(0));
                this.columnOffsetY.Namespace = "";
                this.columnOffsetY.DefaultValue = ((int)(0));
                this.columnScrollRateX.Namespace = "";
                this.columnScrollRateX.DefaultValue = ((float)(1F));
                this.columnScrollRateY.Namespace = "";
                this.columnScrollRateY.DefaultValue = ((float)(1F));
                this.columnZIndex.Namespace = "";
                this.columnPriority.Namespace = "";
                this.columnPriority.DefaultValue = ((int)(0));
                this.columnVirtualWidth.Namespace = "";
                this.columnVirtualWidth.DefaultValue = ((int)(0));
                this.columnVirtualHeight.Namespace = "";
                this.columnVirtualHeight.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow NewLayerRow() {
                return ((LayerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LayerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LayerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LayerRowChanged != null)) {
                    this.LayerRowChanged(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LayerRowChanging != null)) {
                    this.LayerRowChanging(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LayerRowDeleted != null)) {
                    this.LayerRowDeleted(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LayerRowDeleting != null)) {
                    this.LayerRowDeleting(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLayerRow(LayerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LayerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpriteDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLayerName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDefinitionName;
            
            private global::System.Data.DataColumn columnStateName;
            
            private global::System.Data.DataColumn columnCurrentFrame;
            
            private global::System.Data.DataColumn columnX;
            
            private global::System.Data.DataColumn columnY;
            
            private global::System.Data.DataColumn columnDX;
            
            private global::System.Data.DataColumn columnDY;
            
            private global::System.Data.DataColumn columnMapName;
            
            private global::System.Data.DataColumn columnPriority;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnSolidity;
            
            private global::System.Data.DataColumn columnColor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDataTable() {
                this.TableName = "Sprite";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpriteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateNameColumn {
                get {
                    return this.columnStateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentFrameColumn {
                get {
                    return this.columnCurrentFrame;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DXColumn {
                get {
                    return this.columnDX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DYColumn {
                get {
                    return this.columnDY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SolidityColumn {
                get {
                    return this.columnSolidity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColorColumn {
                get {
                    return this.columnColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRow this[int index] {
                get {
                    return ((SpriteRow)(this.Rows[index]));
                }
            }
            
            public event SpriteRowChangeEventHandler SpriteRowChanging;
            
            public event SpriteRowChangeEventHandler SpriteRowChanged;
            
            public event SpriteRowChangeEventHandler SpriteRowDeleting;
            
            public event SpriteRowChangeEventHandler SpriteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpriteRow(SpriteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRow AddSpriteRow(string LayerName, string Name, string DefinitionName, string StateName, short CurrentFrame, int X, int Y, float DX, float DY, string MapName, int Priority, bool Active, string Solidity, int Color) {
                SpriteRow rowSpriteRow = ((SpriteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LayerName,
                        Name,
                        DefinitionName,
                        StateName,
                        CurrentFrame,
                        X,
                        Y,
                        DX,
                        DY,
                        MapName,
                        Priority,
                        Active,
                        Solidity,
                        Color};
                rowSpriteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpriteRow);
                return rowSpriteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRow FindByLayerNameNameMapName(string LayerName, string Name, string MapName) {
                return ((SpriteRow)(this.Rows.Find(new object[] {
                            LayerName,
                            Name,
                            MapName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpriteDataTable cln = ((SpriteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpriteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLayerName = base.Columns["LayerName"];
                this.columnName = base.Columns["Name"];
                this.columnDefinitionName = base.Columns["DefinitionName"];
                this.columnStateName = base.Columns["StateName"];
                this.columnCurrentFrame = base.Columns["CurrentFrame"];
                this.columnX = base.Columns["X"];
                this.columnY = base.Columns["Y"];
                this.columnDX = base.Columns["DX"];
                this.columnDY = base.Columns["DY"];
                this.columnMapName = base.Columns["MapName"];
                this.columnPriority = base.Columns["Priority"];
                this.columnActive = base.Columns["Active"];
                this.columnSolidity = base.Columns["Solidity"];
                this.columnColor = base.Columns["Color"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLayerName = new global::System.Data.DataColumn("LayerName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLayerName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnDefinitionName = new global::System.Data.DataColumn("DefinitionName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDefinitionName);
                this.columnStateName = new global::System.Data.DataColumn("StateName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStateName);
                this.columnCurrentFrame = new global::System.Data.DataColumn("CurrentFrame", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCurrentFrame);
                this.columnX = new global::System.Data.DataColumn("X", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnX);
                this.columnY = new global::System.Data.DataColumn("Y", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnY);
                this.columnDX = new global::System.Data.DataColumn("DX", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDX);
                this.columnDY = new global::System.Data.DataColumn("DY", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDY);
                this.columnMapName = new global::System.Data.DataColumn("MapName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMapName);
                this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPriority);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActive);
                this.columnSolidity = new global::System.Data.DataColumn("Solidity", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSolidity);
                this.columnColor = new global::System.Data.DataColumn("Color", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnColor);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpriteKey", new global::System.Data.DataColumn[] {
                                this.columnLayerName,
                                this.columnName,
                                this.columnMapName}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpriteKeyWithDefinition", new global::System.Data.DataColumn[] {
                                this.columnDefinitionName,
                                this.columnLayerName,
                                this.columnName,
                                this.columnMapName}, false));
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
                this.columnStateName.Namespace = "";
                this.columnCurrentFrame.Namespace = "";
                this.columnX.Namespace = "";
                this.columnY.Namespace = "";
                this.columnDX.Namespace = "";
                this.columnDY.Namespace = "";
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnPriority.Namespace = "";
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = ((bool)(true));
                this.columnSolidity.Namespace = "";
                this.columnColor.Namespace = "";
                this.columnColor.DefaultValue = ((int)(-1));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRow NewSpriteRow() {
                return ((SpriteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpriteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpriteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteRowChanged != null)) {
                    this.SpriteRowChanged(this, new SpriteRowChangeEvent(((SpriteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteRowChanging != null)) {
                    this.SpriteRowChanging(this, new SpriteRowChangeEvent(((SpriteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteRowDeleted != null)) {
                    this.SpriteRowDeleted(this, new SpriteRowChangeEvent(((SpriteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteRowDeleting != null)) {
                    this.SpriteRowDeleting(this, new SpriteRowChangeEvent(((SpriteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpriteRow(SpriteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpriteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParameterValueDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLayerName;
            
            private global::System.Data.DataColumn columnSpriteName;
            
            private global::System.Data.DataColumn columnParameterName;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnDefinitionName;
            
            private global::System.Data.DataColumn columnMapName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterValueDataTable() {
                this.TableName = "ParameterValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParameterValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParameterValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpriteNameColumn {
                get {
                    return this.columnSpriteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParameterNameColumn {
                get {
                    return this.columnParameterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterValueRow this[int index] {
                get {
                    return ((ParameterValueRow)(this.Rows[index]));
                }
            }
            
            public event ParameterValueRowChangeEventHandler ParameterValueRowChanging;
            
            public event ParameterValueRowChangeEventHandler ParameterValueRowChanged;
            
            public event ParameterValueRowChangeEventHandler ParameterValueRowDeleting;
            
            public event ParameterValueRowChangeEventHandler ParameterValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParameterValueRow(ParameterValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterValueRow AddParameterValueRow(string LayerName, string SpriteName, string ParameterName, int Value, string DefinitionName, string MapName) {
                ParameterValueRow rowParameterValueRow = ((ParameterValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LayerName,
                        SpriteName,
                        ParameterName,
                        Value,
                        DefinitionName,
                        MapName};
                rowParameterValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParameterValueRow);
                return rowParameterValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterValueRow FindByLayerNameSpriteNameParameterNameMapName(string LayerName, string SpriteName, string ParameterName, string MapName) {
                return ((ParameterValueRow)(this.Rows.Find(new object[] {
                            LayerName,
                            SpriteName,
                            ParameterName,
                            MapName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParameterValueDataTable cln = ((ParameterValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParameterValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLayerName = base.Columns["LayerName"];
                this.columnSpriteName = base.Columns["SpriteName"];
                this.columnParameterName = base.Columns["ParameterName"];
                this.columnValue = base.Columns["Value"];
                this.columnDefinitionName = base.Columns["DefinitionName"];
                this.columnMapName = base.Columns["MapName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLayerName = new global::System.Data.DataColumn("LayerName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLayerName);
                this.columnSpriteName = new global::System.Data.DataColumn("SpriteName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSpriteName);
                this.columnParameterName = new global::System.Data.DataColumn("ParameterName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnParameterName);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnDefinitionName = new global::System.Data.DataColumn("DefinitionName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDefinitionName);
                this.columnMapName = new global::System.Data.DataColumn("MapName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMapName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ParameterValueKey", new global::System.Data.DataColumn[] {
                                this.columnLayerName,
                                this.columnSpriteName,
                                this.columnParameterName,
                                this.columnMapName}, true));
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnSpriteName.AllowDBNull = false;
                this.columnSpriteName.Namespace = "";
                this.columnParameterName.AllowDBNull = false;
                this.columnParameterName.Namespace = "";
                this.columnValue.Namespace = "";
                this.columnDefinitionName.Namespace = "";
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterValueRow NewParameterValueRow() {
                return ((ParameterValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParameterValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParameterValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParameterValueRowChanged != null)) {
                    this.ParameterValueRowChanged(this, new ParameterValueRowChangeEvent(((ParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParameterValueRowChanging != null)) {
                    this.ParameterValueRowChanging(this, new ParameterValueRowChangeEvent(((ParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParameterValueRowDeleted != null)) {
                    this.ParameterValueRowDeleted(this, new ParameterValueRowChangeEvent(((ParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParameterValueRowDeleting != null)) {
                    this.ParameterValueRowDeleting(this, new ParameterValueRowChangeEvent(((ParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParameterValueRow(ParameterValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParameterValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpritePlanDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMapName;
            
            private global::System.Data.DataColumn columnLayerName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnPriority;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanDataTable() {
                this.TableName = "SpritePlan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpritePlanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpritePlanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanRow this[int index] {
                get {
                    return ((SpritePlanRow)(this.Rows[index]));
                }
            }
            
            public event SpritePlanRowChangeEventHandler SpritePlanRowChanging;
            
            public event SpritePlanRowChangeEventHandler SpritePlanRowChanged;
            
            public event SpritePlanRowChangeEventHandler SpritePlanRowDeleting;
            
            public event SpritePlanRowChangeEventHandler SpritePlanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpritePlanRow(SpritePlanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanRow AddSpritePlanRow(string MapName, string LayerName, string Name, int Priority) {
                SpritePlanRow rowSpritePlanRow = ((SpritePlanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MapName,
                        LayerName,
                        Name,
                        Priority};
                rowSpritePlanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpritePlanRow);
                return rowSpritePlanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanRow FindByMapNameLayerNameName(string MapName, string LayerName, string Name) {
                return ((SpritePlanRow)(this.Rows.Find(new object[] {
                            MapName,
                            LayerName,
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpritePlanDataTable cln = ((SpritePlanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpritePlanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapName = base.Columns["MapName"];
                this.columnLayerName = base.Columns["LayerName"];
                this.columnName = base.Columns["Name"];
                this.columnPriority = base.Columns["Priority"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapName = new global::System.Data.DataColumn("MapName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMapName);
                this.columnLayerName = new global::System.Data.DataColumn("LayerName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLayerName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPriority);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpritePlanKey", new global::System.Data.DataColumn[] {
                                this.columnMapName,
                                this.columnLayerName,
                                this.columnName}, true));
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnPriority.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanRow NewSpritePlanRow() {
                return ((SpritePlanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpritePlanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpritePlanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpritePlanRowChanged != null)) {
                    this.SpritePlanRowChanged(this, new SpritePlanRowChangeEvent(((SpritePlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpritePlanRowChanging != null)) {
                    this.SpritePlanRowChanging(this, new SpritePlanRowChangeEvent(((SpritePlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpritePlanRowDeleted != null)) {
                    this.SpritePlanRowDeleted(this, new SpritePlanRowChangeEvent(((SpritePlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpritePlanRowDeleting != null)) {
                    this.SpritePlanRowDeleting(this, new SpritePlanRowChangeEvent(((SpritePlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpritePlanRow(SpritePlanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpritePlanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoordinateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMapName;
            
            private global::System.Data.DataColumn columnLayerName;
            
            private global::System.Data.DataColumn columnPlanName;
            
            private global::System.Data.DataColumn columnSequence;
            
            private global::System.Data.DataColumn columnX;
            
            private global::System.Data.DataColumn columnY;
            
            private global::System.Data.DataColumn columnWeight;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinateDataTable() {
                this.TableName = "Coordinate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoordinateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoordinateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlanNameColumn {
                get {
                    return this.columnPlanName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinateRow this[int index] {
                get {
                    return ((CoordinateRow)(this.Rows[index]));
                }
            }
            
            public event CoordinateRowChangeEventHandler CoordinateRowChanging;
            
            public event CoordinateRowChangeEventHandler CoordinateRowChanged;
            
            public event CoordinateRowChangeEventHandler CoordinateRowDeleting;
            
            public event CoordinateRowChangeEventHandler CoordinateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoordinateRow(CoordinateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinateRow AddCoordinateRow(string MapName, string LayerName, string PlanName, short Sequence, int X, int Y, int Weight) {
                CoordinateRow rowCoordinateRow = ((CoordinateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MapName,
                        LayerName,
                        PlanName,
                        Sequence,
                        X,
                        Y,
                        Weight};
                rowCoordinateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoordinateRow);
                return rowCoordinateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinateRow FindByMapNameLayerNamePlanNameSequence(string MapName, string LayerName, string PlanName, short Sequence) {
                return ((CoordinateRow)(this.Rows.Find(new object[] {
                            MapName,
                            LayerName,
                            PlanName,
                            Sequence})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoordinateDataTable cln = ((CoordinateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoordinateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapName = base.Columns["MapName"];
                this.columnLayerName = base.Columns["LayerName"];
                this.columnPlanName = base.Columns["PlanName"];
                this.columnSequence = base.Columns["Sequence"];
                this.columnX = base.Columns["X"];
                this.columnY = base.Columns["Y"];
                this.columnWeight = base.Columns["Weight"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapName = new global::System.Data.DataColumn("MapName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMapName);
                this.columnLayerName = new global::System.Data.DataColumn("LayerName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLayerName);
                this.columnPlanName = new global::System.Data.DataColumn("PlanName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPlanName);
                this.columnSequence = new global::System.Data.DataColumn("Sequence", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSequence);
                this.columnX = new global::System.Data.DataColumn("X", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnX);
                this.columnY = new global::System.Data.DataColumn("Y", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnY);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnWeight);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("CoordinateKey", new global::System.Data.DataColumn[] {
                                this.columnMapName,
                                this.columnLayerName,
                                this.columnPlanName,
                                this.columnSequence}, true));
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnPlanName.AllowDBNull = false;
                this.columnPlanName.Namespace = "";
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
                this.columnX.Namespace = "";
                this.columnY.Namespace = "";
                this.columnWeight.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinateRow NewCoordinateRow() {
                return ((CoordinateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoordinateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoordinateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoordinateRowChanged != null)) {
                    this.CoordinateRowChanged(this, new CoordinateRowChangeEvent(((CoordinateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoordinateRowChanging != null)) {
                    this.CoordinateRowChanging(this, new CoordinateRowChangeEvent(((CoordinateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoordinateRowDeleted != null)) {
                    this.CoordinateRowDeleted(this, new CoordinateRowChangeEvent(((CoordinateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoordinateRowDeleting != null)) {
                    this.CoordinateRowDeleting(this, new CoordinateRowChangeEvent(((CoordinateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoordinateRow(CoordinateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoordinateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlanRuleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMapName;
            
            private global::System.Data.DataColumn columnLayerName;
            
            private global::System.Data.DataColumn columnPlanName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnSequence;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnFunction;
            
            private global::System.Data.DataColumn columnParameter1;
            
            private global::System.Data.DataColumn columnParameter2;
            
            private global::System.Data.DataColumn columnParameter3;
            
            private global::System.Data.DataColumn columnResultParameter;
            
            private global::System.Data.DataColumn columnEndIf;
            
            private global::System.Data.DataColumn columnSuspended;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanRuleDataTable() {
                this.TableName = "PlanRule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlanRuleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PlanRuleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlanNameColumn {
                get {
                    return this.columnPlanName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FunctionColumn {
                get {
                    return this.columnFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Parameter1Column {
                get {
                    return this.columnParameter1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Parameter2Column {
                get {
                    return this.columnParameter2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Parameter3Column {
                get {
                    return this.columnParameter3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultParameterColumn {
                get {
                    return this.columnResultParameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndIfColumn {
                get {
                    return this.columnEndIf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuspendedColumn {
                get {
                    return this.columnSuspended;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanRuleRow this[int index] {
                get {
                    return ((PlanRuleRow)(this.Rows[index]));
                }
            }
            
            public event PlanRuleRowChangeEventHandler PlanRuleRowChanging;
            
            public event PlanRuleRowChangeEventHandler PlanRuleRowChanged;
            
            public event PlanRuleRowChangeEventHandler PlanRuleRowDeleting;
            
            public event PlanRuleRowChangeEventHandler PlanRuleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPlanRuleRow(PlanRuleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanRuleRow AddPlanRuleRow(string MapName, string LayerName, string PlanName, string Name, int Sequence, string Type, string Function, string Parameter1, string Parameter2, string Parameter3, string ResultParameter, bool EndIf, bool Suspended) {
                PlanRuleRow rowPlanRuleRow = ((PlanRuleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MapName,
                        LayerName,
                        PlanName,
                        Name,
                        Sequence,
                        Type,
                        Function,
                        Parameter1,
                        Parameter2,
                        Parameter3,
                        ResultParameter,
                        EndIf,
                        Suspended};
                rowPlanRuleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPlanRuleRow);
                return rowPlanRuleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanRuleRow FindByMapNameLayerNamePlanNameName(string MapName, string LayerName, string PlanName, string Name) {
                return ((PlanRuleRow)(this.Rows.Find(new object[] {
                            MapName,
                            LayerName,
                            PlanName,
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PlanRuleDataTable cln = ((PlanRuleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PlanRuleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapName = base.Columns["MapName"];
                this.columnLayerName = base.Columns["LayerName"];
                this.columnPlanName = base.Columns["PlanName"];
                this.columnName = base.Columns["Name"];
                this.columnSequence = base.Columns["Sequence"];
                this.columnType = base.Columns["Type"];
                this.columnFunction = base.Columns["Function"];
                this.columnParameter1 = base.Columns["Parameter1"];
                this.columnParameter2 = base.Columns["Parameter2"];
                this.columnParameter3 = base.Columns["Parameter3"];
                this.columnResultParameter = base.Columns["ResultParameter"];
                this.columnEndIf = base.Columns["EndIf"];
                this.columnSuspended = base.Columns["Suspended"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapName = new global::System.Data.DataColumn("MapName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMapName);
                this.columnLayerName = new global::System.Data.DataColumn("LayerName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLayerName);
                this.columnPlanName = new global::System.Data.DataColumn("PlanName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPlanName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnSequence = new global::System.Data.DataColumn("Sequence", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSequence);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnFunction = new global::System.Data.DataColumn("Function", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFunction);
                this.columnParameter1 = new global::System.Data.DataColumn("Parameter1", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnParameter1);
                this.columnParameter2 = new global::System.Data.DataColumn("Parameter2", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnParameter2);
                this.columnParameter3 = new global::System.Data.DataColumn("Parameter3", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnParameter3);
                this.columnResultParameter = new global::System.Data.DataColumn("ResultParameter", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnResultParameter);
                this.columnEndIf = new global::System.Data.DataColumn("EndIf", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEndIf);
                this.columnSuspended = new global::System.Data.DataColumn("Suspended", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSuspended);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PlanRuleKey", new global::System.Data.DataColumn[] {
                                this.columnMapName,
                                this.columnLayerName,
                                this.columnPlanName,
                                this.columnName}, true));
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnPlanName.AllowDBNull = false;
                this.columnPlanName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
                this.columnType.AllowDBNull = false;
                this.columnType.Namespace = "";
                this.columnFunction.AllowDBNull = false;
                this.columnFunction.Namespace = "";
                this.columnParameter1.Namespace = "";
                this.columnParameter2.Namespace = "";
                this.columnParameter3.Namespace = "";
                this.columnResultParameter.Namespace = "";
                this.columnEndIf.Namespace = "";
                this.columnEndIf.DefaultValue = ((bool)(false));
                this.columnSuspended.Namespace = "";
                this.columnSuspended.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanRuleRow NewPlanRuleRow() {
                return ((PlanRuleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PlanRuleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PlanRuleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlanRuleRowChanged != null)) {
                    this.PlanRuleRowChanged(this, new PlanRuleRowChangeEvent(((PlanRuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlanRuleRowChanging != null)) {
                    this.PlanRuleRowChanging(this, new PlanRuleRowChangeEvent(((PlanRuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlanRuleRowDeleted != null)) {
                    this.PlanRuleRowDeleted(this, new PlanRuleRowChangeEvent(((PlanRuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlanRuleRowDeleting != null)) {
                    this.PlanRuleRowDeleting(this, new PlanRuleRowChangeEvent(((PlanRuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePlanRuleRow(PlanRuleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlanRuleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlanParameterValueDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMapName;
            
            private global::System.Data.DataColumn columnLayerName;
            
            private global::System.Data.DataColumn columnPlanName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanParameterValueDataTable() {
                this.TableName = "PlanParameterValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlanParameterValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PlanParameterValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlanNameColumn {
                get {
                    return this.columnPlanName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanParameterValueRow this[int index] {
                get {
                    return ((PlanParameterValueRow)(this.Rows[index]));
                }
            }
            
            public event PlanParameterValueRowChangeEventHandler PlanParameterValueRowChanging;
            
            public event PlanParameterValueRowChangeEventHandler PlanParameterValueRowChanged;
            
            public event PlanParameterValueRowChangeEventHandler PlanParameterValueRowDeleting;
            
            public event PlanParameterValueRowChangeEventHandler PlanParameterValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPlanParameterValueRow(PlanParameterValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanParameterValueRow AddPlanParameterValueRow(string MapName, string LayerName, string PlanName, string Name, string Value) {
                PlanParameterValueRow rowPlanParameterValueRow = ((PlanParameterValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MapName,
                        LayerName,
                        PlanName,
                        Name,
                        Value};
                rowPlanParameterValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPlanParameterValueRow);
                return rowPlanParameterValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanParameterValueRow FindByMapNameLayerNamePlanNameName(string MapName, string LayerName, string PlanName, string Name) {
                return ((PlanParameterValueRow)(this.Rows.Find(new object[] {
                            MapName,
                            LayerName,
                            PlanName,
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PlanParameterValueDataTable cln = ((PlanParameterValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PlanParameterValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapName = base.Columns["MapName"];
                this.columnLayerName = base.Columns["LayerName"];
                this.columnPlanName = base.Columns["PlanName"];
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapName = new global::System.Data.DataColumn("MapName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMapName);
                this.columnLayerName = new global::System.Data.DataColumn("LayerName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLayerName);
                this.columnPlanName = new global::System.Data.DataColumn("PlanName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPlanName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PlanParameterValueKey", new global::System.Data.DataColumn[] {
                                this.columnMapName,
                                this.columnLayerName,
                                this.columnPlanName,
                                this.columnName}, true));
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnPlanName.AllowDBNull = false;
                this.columnPlanName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnValue.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanParameterValueRow NewPlanParameterValueRow() {
                return ((PlanParameterValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PlanParameterValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PlanParameterValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlanParameterValueRowChanged != null)) {
                    this.PlanParameterValueRowChanged(this, new PlanParameterValueRowChangeEvent(((PlanParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlanParameterValueRowChanging != null)) {
                    this.PlanParameterValueRowChanging(this, new PlanParameterValueRowChangeEvent(((PlanParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlanParameterValueRowDeleted != null)) {
                    this.PlanParameterValueRowDeleted(this, new PlanParameterValueRowChangeEvent(((PlanParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlanParameterValueRowDeleting != null)) {
                    this.PlanParameterValueRowDeleting(this, new PlanParameterValueRowChangeEvent(((PlanParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePlanParameterValueRow(PlanParameterValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlanParameterValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpriteDefinitionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionDataTable() {
                this.TableName = "SpriteDefinition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteDefinitionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpriteDefinitionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionRow this[int index] {
                get {
                    return ((SpriteDefinitionRow)(this.Rows[index]));
                }
            }
            
            public event SpriteDefinitionRowChangeEventHandler SpriteDefinitionRowChanging;
            
            public event SpriteDefinitionRowChangeEventHandler SpriteDefinitionRowChanged;
            
            public event SpriteDefinitionRowChangeEventHandler SpriteDefinitionRowDeleting;
            
            public event SpriteDefinitionRowChangeEventHandler SpriteDefinitionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpriteDefinitionRow(SpriteDefinitionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionRow AddSpriteDefinitionRow(string Name) {
                SpriteDefinitionRow rowSpriteDefinitionRow = ((SpriteDefinitionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name};
                rowSpriteDefinitionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpriteDefinitionRow);
                return rowSpriteDefinitionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionRow FindByName(string Name) {
                return ((SpriteDefinitionRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpriteDefinitionDataTable cln = ((SpriteDefinitionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpriteDefinitionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpriteDefinitionKey", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionRow NewSpriteDefinitionRow() {
                return ((SpriteDefinitionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpriteDefinitionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpriteDefinitionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteDefinitionRowChanged != null)) {
                    this.SpriteDefinitionRowChanged(this, new SpriteDefinitionRowChangeEvent(((SpriteDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteDefinitionRowChanging != null)) {
                    this.SpriteDefinitionRowChanging(this, new SpriteDefinitionRowChangeEvent(((SpriteDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteDefinitionRowDeleted != null)) {
                    this.SpriteDefinitionRowDeleted(this, new SpriteDefinitionRowChangeEvent(((SpriteDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteDefinitionRowDeleting != null)) {
                    this.SpriteDefinitionRowDeleting(this, new SpriteDefinitionRowChangeEvent(((SpriteDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpriteDefinitionRow(SpriteDefinitionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpriteDefinitionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpriteRuleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDefinitionName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnSequence;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnFunction;
            
            private global::System.Data.DataColumn columnParameter1;
            
            private global::System.Data.DataColumn columnParameter2;
            
            private global::System.Data.DataColumn columnParameter3;
            
            private global::System.Data.DataColumn columnResultParameter;
            
            private global::System.Data.DataColumn columnEndIf;
            
            private global::System.Data.DataColumn columnSuspended;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRuleDataTable() {
                this.TableName = "SpriteRule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteRuleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpriteRuleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FunctionColumn {
                get {
                    return this.columnFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Parameter1Column {
                get {
                    return this.columnParameter1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Parameter2Column {
                get {
                    return this.columnParameter2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Parameter3Column {
                get {
                    return this.columnParameter3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultParameterColumn {
                get {
                    return this.columnResultParameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndIfColumn {
                get {
                    return this.columnEndIf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuspendedColumn {
                get {
                    return this.columnSuspended;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRuleRow this[int index] {
                get {
                    return ((SpriteRuleRow)(this.Rows[index]));
                }
            }
            
            public event SpriteRuleRowChangeEventHandler SpriteRuleRowChanging;
            
            public event SpriteRuleRowChangeEventHandler SpriteRuleRowChanged;
            
            public event SpriteRuleRowChangeEventHandler SpriteRuleRowDeleting;
            
            public event SpriteRuleRowChangeEventHandler SpriteRuleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpriteRuleRow(SpriteRuleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRuleRow AddSpriteRuleRow(SpriteDefinitionRow parentSpriteDefinitionRowBySpriteDefinitionSpriteRule, string Name, int Sequence, string Type, string Function, string Parameter1, string Parameter2, string Parameter3, string ResultParameter, bool EndIf, bool Suspended) {
                SpriteRuleRow rowSpriteRuleRow = ((SpriteRuleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Sequence,
                        Type,
                        Function,
                        Parameter1,
                        Parameter2,
                        Parameter3,
                        ResultParameter,
                        EndIf,
                        Suspended};
                if ((parentSpriteDefinitionRowBySpriteDefinitionSpriteRule != null)) {
                    columnValuesArray[0] = parentSpriteDefinitionRowBySpriteDefinitionSpriteRule[0];
                }
                rowSpriteRuleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpriteRuleRow);
                return rowSpriteRuleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRuleRow FindByDefinitionNameName(string DefinitionName, string Name) {
                return ((SpriteRuleRow)(this.Rows.Find(new object[] {
                            DefinitionName,
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpriteRuleDataTable cln = ((SpriteRuleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpriteRuleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDefinitionName = base.Columns["DefinitionName"];
                this.columnName = base.Columns["Name"];
                this.columnSequence = base.Columns["Sequence"];
                this.columnType = base.Columns["Type"];
                this.columnFunction = base.Columns["Function"];
                this.columnParameter1 = base.Columns["Parameter1"];
                this.columnParameter2 = base.Columns["Parameter2"];
                this.columnParameter3 = base.Columns["Parameter3"];
                this.columnResultParameter = base.Columns["ResultParameter"];
                this.columnEndIf = base.Columns["EndIf"];
                this.columnSuspended = base.Columns["Suspended"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDefinitionName = new global::System.Data.DataColumn("DefinitionName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDefinitionName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnSequence = new global::System.Data.DataColumn("Sequence", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSequence);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnFunction = new global::System.Data.DataColumn("Function", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFunction);
                this.columnParameter1 = new global::System.Data.DataColumn("Parameter1", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnParameter1);
                this.columnParameter2 = new global::System.Data.DataColumn("Parameter2", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnParameter2);
                this.columnParameter3 = new global::System.Data.DataColumn("Parameter3", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnParameter3);
                this.columnResultParameter = new global::System.Data.DataColumn("ResultParameter", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnResultParameter);
                this.columnEndIf = new global::System.Data.DataColumn("EndIf", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEndIf);
                this.columnSuspended = new global::System.Data.DataColumn("Suspended", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSuspended);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpriteRuleKey", new global::System.Data.DataColumn[] {
                                this.columnDefinitionName,
                                this.columnName}, true));
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
                this.columnType.AllowDBNull = false;
                this.columnType.Namespace = "";
                this.columnFunction.AllowDBNull = false;
                this.columnFunction.Namespace = "";
                this.columnParameter1.Namespace = "";
                this.columnParameter2.Namespace = "";
                this.columnParameter3.Namespace = "";
                this.columnResultParameter.Namespace = "";
                this.columnEndIf.Namespace = "";
                this.columnEndIf.DefaultValue = ((bool)(false));
                this.columnSuspended.Namespace = "";
                this.columnSuspended.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRuleRow NewSpriteRuleRow() {
                return ((SpriteRuleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpriteRuleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpriteRuleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteRuleRowChanged != null)) {
                    this.SpriteRuleRowChanged(this, new SpriteRuleRowChangeEvent(((SpriteRuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteRuleRowChanging != null)) {
                    this.SpriteRuleRowChanging(this, new SpriteRuleRowChangeEvent(((SpriteRuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteRuleRowDeleted != null)) {
                    this.SpriteRuleRowDeleted(this, new SpriteRuleRowChangeEvent(((SpriteRuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteRuleRowDeleting != null)) {
                    this.SpriteRuleRowDeleting(this, new SpriteRuleRowChangeEvent(((SpriteRuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpriteRuleRow(SpriteRuleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpriteRuleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpriteParameterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDefinitionName;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteParameterDataTable() {
                this.TableName = "SpriteParameter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteParameterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpriteParameterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteParameterRow this[int index] {
                get {
                    return ((SpriteParameterRow)(this.Rows[index]));
                }
            }
            
            public event SpriteParameterRowChangeEventHandler SpriteParameterRowChanging;
            
            public event SpriteParameterRowChangeEventHandler SpriteParameterRowChanged;
            
            public event SpriteParameterRowChangeEventHandler SpriteParameterRowDeleting;
            
            public event SpriteParameterRowChangeEventHandler SpriteParameterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpriteParameterRow(SpriteParameterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteParameterRow AddSpriteParameterRow(SpriteDefinitionRow parentSpriteDefinitionRowBySpriteDefinitionSpriteParameter, string Name) {
                SpriteParameterRow rowSpriteParameterRow = ((SpriteParameterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                if ((parentSpriteDefinitionRowBySpriteDefinitionSpriteParameter != null)) {
                    columnValuesArray[0] = parentSpriteDefinitionRowBySpriteDefinitionSpriteParameter[0];
                }
                rowSpriteParameterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpriteParameterRow);
                return rowSpriteParameterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteParameterRow FindByDefinitionNameName(string DefinitionName, string Name) {
                return ((SpriteParameterRow)(this.Rows.Find(new object[] {
                            DefinitionName,
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpriteParameterDataTable cln = ((SpriteParameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpriteParameterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDefinitionName = base.Columns["DefinitionName"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDefinitionName = new global::System.Data.DataColumn("DefinitionName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDefinitionName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpriteParameterKey", new global::System.Data.DataColumn[] {
                                this.columnDefinitionName,
                                this.columnName}, true));
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteParameterRow NewSpriteParameterRow() {
                return ((SpriteParameterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpriteParameterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpriteParameterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteParameterRowChanged != null)) {
                    this.SpriteParameterRowChanged(this, new SpriteParameterRowChangeEvent(((SpriteParameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteParameterRowChanging != null)) {
                    this.SpriteParameterRowChanging(this, new SpriteParameterRowChangeEvent(((SpriteParameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteParameterRowDeleted != null)) {
                    this.SpriteParameterRowDeleted(this, new SpriteParameterRowChangeEvent(((SpriteParameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteParameterRowDeleting != null)) {
                    this.SpriteParameterRowDeleting(this, new SpriteParameterRowChangeEvent(((SpriteParameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpriteParameterRow(SpriteParameterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpriteParameterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpriteStateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDefinitionName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnFramesetName;
            
            private global::System.Data.DataColumn columnSolidWidth;
            
            private global::System.Data.DataColumn columnSolidHeight;
            
            private global::System.Data.DataColumn columnSequence;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateDataTable() {
                this.TableName = "SpriteState";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteStateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpriteStateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FramesetNameColumn {
                get {
                    return this.columnFramesetName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SolidWidthColumn {
                get {
                    return this.columnSolidWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SolidHeightColumn {
                get {
                    return this.columnSolidHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateRow this[int index] {
                get {
                    return ((SpriteStateRow)(this.Rows[index]));
                }
            }
            
            public event SpriteStateRowChangeEventHandler SpriteStateRowChanging;
            
            public event SpriteStateRowChangeEventHandler SpriteStateRowChanged;
            
            public event SpriteStateRowChangeEventHandler SpriteStateRowDeleting;
            
            public event SpriteStateRowChangeEventHandler SpriteStateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpriteStateRow(SpriteStateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateRow AddSpriteStateRow(SpriteDefinitionRow parentSpriteDefinitionRowBySpriteDefinitionState, string Name, FramesetRow parentFramesetRowByFramesetSpriteState, short SolidWidth, short SolidHeight, short Sequence) {
                SpriteStateRow rowSpriteStateRow = ((SpriteStateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        null,
                        SolidWidth,
                        SolidHeight,
                        Sequence};
                if ((parentSpriteDefinitionRowBySpriteDefinitionState != null)) {
                    columnValuesArray[0] = parentSpriteDefinitionRowBySpriteDefinitionState[0];
                }
                if ((parentFramesetRowByFramesetSpriteState != null)) {
                    columnValuesArray[2] = parentFramesetRowByFramesetSpriteState[0];
                }
                rowSpriteStateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpriteStateRow);
                return rowSpriteStateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateRow FindByDefinitionNameName(string DefinitionName, string Name) {
                return ((SpriteStateRow)(this.Rows.Find(new object[] {
                            DefinitionName,
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpriteStateDataTable cln = ((SpriteStateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpriteStateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDefinitionName = base.Columns["DefinitionName"];
                this.columnName = base.Columns["Name"];
                this.columnFramesetName = base.Columns["FramesetName"];
                this.columnSolidWidth = base.Columns["SolidWidth"];
                this.columnSolidHeight = base.Columns["SolidHeight"];
                this.columnSequence = base.Columns["Sequence"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDefinitionName = new global::System.Data.DataColumn("DefinitionName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDefinitionName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnFramesetName = new global::System.Data.DataColumn("FramesetName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFramesetName);
                this.columnSolidWidth = new global::System.Data.DataColumn("SolidWidth", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSolidWidth);
                this.columnSolidHeight = new global::System.Data.DataColumn("SolidHeight", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSolidHeight);
                this.columnSequence = new global::System.Data.DataColumn("Sequence", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSequence);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpriteStateKey", new global::System.Data.DataColumn[] {
                                this.columnDefinitionName,
                                this.columnName}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpriteStateFramesetKey", new global::System.Data.DataColumn[] {
                                this.columnDefinitionName,
                                this.columnName,
                                this.columnFramesetName}, false));
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnFramesetName.AllowDBNull = false;
                this.columnFramesetName.Namespace = "";
                this.columnSolidWidth.AllowDBNull = false;
                this.columnSolidWidth.Namespace = "";
                this.columnSolidHeight.AllowDBNull = false;
                this.columnSolidHeight.Namespace = "";
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateRow NewSpriteStateRow() {
                return ((SpriteStateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpriteStateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpriteStateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteStateRowChanged != null)) {
                    this.SpriteStateRowChanged(this, new SpriteStateRowChangeEvent(((SpriteStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteStateRowChanging != null)) {
                    this.SpriteStateRowChanging(this, new SpriteStateRowChangeEvent(((SpriteStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteStateRowDeleted != null)) {
                    this.SpriteStateRowDeleted(this, new SpriteStateRowChangeEvent(((SpriteStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteStateRowDeleting != null)) {
                    this.SpriteStateRowDeleting(this, new SpriteStateRowChangeEvent(((SpriteStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpriteStateRow(SpriteStateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpriteStateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpriteFrameDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDefinitionName;
            
            private global::System.Data.DataColumn columnStateName;
            
            private global::System.Data.DataColumn columnSequence;
            
            private global::System.Data.DataColumn columnFrameValue;
            
            private global::System.Data.DataColumn columnDuration;
            
            private global::System.Data.DataColumn columnMaskAlphaLevel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteFrameDataTable() {
                this.TableName = "SpriteFrame";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteFrameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpriteFrameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateNameColumn {
                get {
                    return this.columnStateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrameValueColumn {
                get {
                    return this.columnFrameValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaskAlphaLevelColumn {
                get {
                    return this.columnMaskAlphaLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteFrameRow this[int index] {
                get {
                    return ((SpriteFrameRow)(this.Rows[index]));
                }
            }
            
            public event SpriteFrameRowChangeEventHandler SpriteFrameRowChanging;
            
            public event SpriteFrameRowChangeEventHandler SpriteFrameRowChanged;
            
            public event SpriteFrameRowChangeEventHandler SpriteFrameRowDeleting;
            
            public event SpriteFrameRowChangeEventHandler SpriteFrameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpriteFrameRow(SpriteFrameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteFrameRow AddSpriteFrameRow(string DefinitionName, string StateName, short Sequence, int FrameValue, short Duration, byte MaskAlphaLevel) {
                SpriteFrameRow rowSpriteFrameRow = ((SpriteFrameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DefinitionName,
                        StateName,
                        Sequence,
                        FrameValue,
                        Duration,
                        MaskAlphaLevel};
                rowSpriteFrameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpriteFrameRow);
                return rowSpriteFrameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteFrameRow FindByDefinitionNameStateNameSequence(string DefinitionName, string StateName, short Sequence) {
                return ((SpriteFrameRow)(this.Rows.Find(new object[] {
                            DefinitionName,
                            StateName,
                            Sequence})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpriteFrameDataTable cln = ((SpriteFrameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpriteFrameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDefinitionName = base.Columns["DefinitionName"];
                this.columnStateName = base.Columns["StateName"];
                this.columnSequence = base.Columns["Sequence"];
                this.columnFrameValue = base.Columns["FrameValue"];
                this.columnDuration = base.Columns["Duration"];
                this.columnMaskAlphaLevel = base.Columns["MaskAlphaLevel"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDefinitionName = new global::System.Data.DataColumn("DefinitionName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDefinitionName);
                this.columnStateName = new global::System.Data.DataColumn("StateName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStateName);
                this.columnSequence = new global::System.Data.DataColumn("Sequence", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSequence);
                this.columnFrameValue = new global::System.Data.DataColumn("FrameValue", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFrameValue);
                this.columnDuration = new global::System.Data.DataColumn("Duration", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDuration);
                this.columnMaskAlphaLevel = new global::System.Data.DataColumn("MaskAlphaLevel", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMaskAlphaLevel);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpriteFrameKey", new global::System.Data.DataColumn[] {
                                this.columnDefinitionName,
                                this.columnStateName,
                                this.columnSequence}, true));
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
                this.columnStateName.AllowDBNull = false;
                this.columnStateName.Namespace = "";
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
                this.columnFrameValue.Namespace = "";
                this.columnDuration.Namespace = "";
                this.columnMaskAlphaLevel.Namespace = "";
                this.columnMaskAlphaLevel.DefaultValue = ((byte)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteFrameRow NewSpriteFrameRow() {
                return ((SpriteFrameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpriteFrameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpriteFrameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteFrameRowChanged != null)) {
                    this.SpriteFrameRowChanged(this, new SpriteFrameRowChangeEvent(((SpriteFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteFrameRowChanging != null)) {
                    this.SpriteFrameRowChanging(this, new SpriteFrameRowChangeEvent(((SpriteFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteFrameRowDeleted != null)) {
                    this.SpriteFrameRowDeleted(this, new SpriteFrameRowChangeEvent(((SpriteFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteFrameRowDeleting != null)) {
                    this.SpriteFrameRowDeleting(this, new SpriteFrameRowChangeEvent(((SpriteFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpriteFrameRow(SpriteFrameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpriteFrameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpriteCategoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategoryDataTable() {
                this.TableName = "SpriteCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteCategoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpriteCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategoryRow this[int index] {
                get {
                    return ((SpriteCategoryRow)(this.Rows[index]));
                }
            }
            
            public event SpriteCategoryRowChangeEventHandler SpriteCategoryRowChanging;
            
            public event SpriteCategoryRowChangeEventHandler SpriteCategoryRowChanged;
            
            public event SpriteCategoryRowChangeEventHandler SpriteCategoryRowDeleting;
            
            public event SpriteCategoryRowChangeEventHandler SpriteCategoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpriteCategoryRow(SpriteCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategoryRow AddSpriteCategoryRow(string Name) {
                SpriteCategoryRow rowSpriteCategoryRow = ((SpriteCategoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name};
                rowSpriteCategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpriteCategoryRow);
                return rowSpriteCategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategoryRow FindByName(string Name) {
                return ((SpriteCategoryRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpriteCategoryDataTable cln = ((SpriteCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpriteCategoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpriteCategoryKey", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategoryRow NewSpriteCategoryRow() {
                return ((SpriteCategoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpriteCategoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpriteCategoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteCategoryRowChanged != null)) {
                    this.SpriteCategoryRowChanged(this, new SpriteCategoryRowChangeEvent(((SpriteCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteCategoryRowChanging != null)) {
                    this.SpriteCategoryRowChanging(this, new SpriteCategoryRowChangeEvent(((SpriteCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteCategoryRowDeleted != null)) {
                    this.SpriteCategoryRowDeleted(this, new SpriteCategoryRowChangeEvent(((SpriteCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteCategoryRowDeleting != null)) {
                    this.SpriteCategoryRowDeleting(this, new SpriteCategoryRowChangeEvent(((SpriteCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpriteCategoryRow(SpriteCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpriteCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpriteCategorySpriteDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCategoryName;
            
            private global::System.Data.DataColumn columnDefinitionName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategorySpriteDataTable() {
                this.TableName = "SpriteCategorySprite";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteCategorySpriteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpriteCategorySpriteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategorySpriteRow this[int index] {
                get {
                    return ((SpriteCategorySpriteRow)(this.Rows[index]));
                }
            }
            
            public event SpriteCategorySpriteRowChangeEventHandler SpriteCategorySpriteRowChanging;
            
            public event SpriteCategorySpriteRowChangeEventHandler SpriteCategorySpriteRowChanged;
            
            public event SpriteCategorySpriteRowChangeEventHandler SpriteCategorySpriteRowDeleting;
            
            public event SpriteCategorySpriteRowChangeEventHandler SpriteCategorySpriteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpriteCategorySpriteRow(SpriteCategorySpriteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategorySpriteRow AddSpriteCategorySpriteRow(SpriteCategoryRow parentSpriteCategoryRowBySpriteCategorySpriteCategorySprite, SpriteDefinitionRow parentSpriteDefinitionRowBySpriteDefinitionCategory) {
                SpriteCategorySpriteRow rowSpriteCategorySpriteRow = ((SpriteCategorySpriteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentSpriteCategoryRowBySpriteCategorySpriteCategorySprite != null)) {
                    columnValuesArray[0] = parentSpriteCategoryRowBySpriteCategorySpriteCategorySprite[0];
                }
                if ((parentSpriteDefinitionRowBySpriteDefinitionCategory != null)) {
                    columnValuesArray[1] = parentSpriteDefinitionRowBySpriteDefinitionCategory[0];
                }
                rowSpriteCategorySpriteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpriteCategorySpriteRow);
                return rowSpriteCategorySpriteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategorySpriteRow FindByCategoryNameDefinitionName(string CategoryName, string DefinitionName) {
                return ((SpriteCategorySpriteRow)(this.Rows.Find(new object[] {
                            CategoryName,
                            DefinitionName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpriteCategorySpriteDataTable cln = ((SpriteCategorySpriteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpriteCategorySpriteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCategoryName = base.Columns["CategoryName"];
                this.columnDefinitionName = base.Columns["DefinitionName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCategoryName = new global::System.Data.DataColumn("CategoryName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCategoryName);
                this.columnDefinitionName = new global::System.Data.DataColumn("DefinitionName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDefinitionName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SpriteCategorySpriteKey", new global::System.Data.DataColumn[] {
                                this.columnCategoryName,
                                this.columnDefinitionName}, true));
                this.columnCategoryName.AllowDBNull = false;
                this.columnCategoryName.Namespace = "";
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategorySpriteRow NewSpriteCategorySpriteRow() {
                return ((SpriteCategorySpriteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpriteCategorySpriteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpriteCategorySpriteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteCategorySpriteRowChanged != null)) {
                    this.SpriteCategorySpriteRowChanged(this, new SpriteCategorySpriteRowChangeEvent(((SpriteCategorySpriteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteCategorySpriteRowChanging != null)) {
                    this.SpriteCategorySpriteRowChanging(this, new SpriteCategorySpriteRowChangeEvent(((SpriteCategorySpriteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteCategorySpriteRowDeleted != null)) {
                    this.SpriteCategorySpriteRowDeleted(this, new SpriteCategorySpriteRowChangeEvent(((SpriteCategorySpriteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteCategorySpriteRowDeleting != null)) {
                    this.SpriteCategorySpriteRowDeleting(this, new SpriteCategorySpriteRowChangeEvent(((SpriteCategorySpriteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpriteCategorySpriteRow(SpriteCategorySpriteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpriteCategorySpriteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SolidityDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityDataTable() {
                this.TableName = "Solidity";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SolidityDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SolidityDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityRow this[int index] {
                get {
                    return ((SolidityRow)(this.Rows[index]));
                }
            }
            
            public event SolidityRowChangeEventHandler SolidityRowChanging;
            
            public event SolidityRowChangeEventHandler SolidityRowChanged;
            
            public event SolidityRowChangeEventHandler SolidityRowDeleting;
            
            public event SolidityRowChangeEventHandler SolidityRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSolidityRow(SolidityRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityRow AddSolidityRow(string Name) {
                SolidityRow rowSolidityRow = ((SolidityRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name};
                rowSolidityRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSolidityRow);
                return rowSolidityRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityRow FindByName(string Name) {
                return ((SolidityRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SolidityDataTable cln = ((SolidityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SolidityDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SolidityKey", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityRow NewSolidityRow() {
                return ((SolidityRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SolidityRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SolidityRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SolidityRowChanged != null)) {
                    this.SolidityRowChanged(this, new SolidityRowChangeEvent(((SolidityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SolidityRowChanging != null)) {
                    this.SolidityRowChanging(this, new SolidityRowChangeEvent(((SolidityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SolidityRowDeleted != null)) {
                    this.SolidityRowDeleted(this, new SolidityRowChangeEvent(((SolidityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SolidityRowDeleting != null)) {
                    this.SolidityRowDeleting(this, new SolidityRowChangeEvent(((SolidityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSolidityRow(SolidityRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SolidityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SolidityShapeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSolidityName;
            
            private global::System.Data.DataColumn columnCategoryName;
            
            private global::System.Data.DataColumn columnShapeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityShapeDataTable() {
                this.TableName = "SolidityShape";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SolidityShapeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SolidityShapeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SolidityNameColumn {
                get {
                    return this.columnSolidityName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeNameColumn {
                get {
                    return this.columnShapeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityShapeRow this[int index] {
                get {
                    return ((SolidityShapeRow)(this.Rows[index]));
                }
            }
            
            public event SolidityShapeRowChangeEventHandler SolidityShapeRowChanging;
            
            public event SolidityShapeRowChangeEventHandler SolidityShapeRowChanged;
            
            public event SolidityShapeRowChangeEventHandler SolidityShapeRowDeleting;
            
            public event SolidityShapeRowChangeEventHandler SolidityShapeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSolidityShapeRow(SolidityShapeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityShapeRow AddSolidityShapeRow(SolidityRow parentSolidityRowBySoliditySolidityShape, TileCategoryRow parentTileCategoryRowByCategorySolidityShape, string ShapeName) {
                SolidityShapeRow rowSolidityShapeRow = ((SolidityShapeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ShapeName};
                if ((parentSolidityRowBySoliditySolidityShape != null)) {
                    columnValuesArray[0] = parentSolidityRowBySoliditySolidityShape[0];
                }
                if ((parentTileCategoryRowByCategorySolidityShape != null)) {
                    columnValuesArray[1] = parentTileCategoryRowByCategorySolidityShape[0];
                }
                rowSolidityShapeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSolidityShapeRow);
                return rowSolidityShapeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityShapeRow FindBySolidityNameCategoryName(string SolidityName, string CategoryName) {
                return ((SolidityShapeRow)(this.Rows.Find(new object[] {
                            SolidityName,
                            CategoryName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SolidityShapeDataTable cln = ((SolidityShapeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SolidityShapeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSolidityName = base.Columns["SolidityName"];
                this.columnCategoryName = base.Columns["CategoryName"];
                this.columnShapeName = base.Columns["ShapeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSolidityName = new global::System.Data.DataColumn("SolidityName", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSolidityName);
                this.columnCategoryName = new global::System.Data.DataColumn("CategoryName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCategoryName);
                this.columnShapeName = new global::System.Data.DataColumn("ShapeName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnShapeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SolidityShapeKey", new global::System.Data.DataColumn[] {
                                this.columnSolidityName,
                                this.columnCategoryName}, true));
                this.columnSolidityName.AllowDBNull = false;
                this.columnSolidityName.Namespace = "";
                this.columnCategoryName.AllowDBNull = false;
                this.columnCategoryName.Namespace = "";
                this.columnShapeName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityShapeRow NewSolidityShapeRow() {
                return ((SolidityShapeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SolidityShapeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SolidityShapeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SolidityShapeRowChanged != null)) {
                    this.SolidityShapeRowChanged(this, new SolidityShapeRowChangeEvent(((SolidityShapeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SolidityShapeRowChanging != null)) {
                    this.SolidityShapeRowChanging(this, new SolidityShapeRowChangeEvent(((SolidityShapeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SolidityShapeRowDeleted != null)) {
                    this.SolidityShapeRowDeleted(this, new SolidityShapeRowChangeEvent(((SolidityShapeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SolidityShapeRowDeleting != null)) {
                    this.SolidityShapeRowDeleting(this, new SolidityShapeRowChangeEvent(((SolidityShapeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSolidityShapeRow(SolidityShapeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SolidityShapeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SourceCodeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnIsCustomObject;
            
            private global::System.Data.DataColumn columnDependsOn;
            
            private global::System.Data.DataColumn columnText;
            
            private global::System.Data.DataColumn columnCustomObjectData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceCodeDataTable() {
                this.TableName = "SourceCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SourceCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SourceCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCustomObjectColumn {
                get {
                    return this.columnIsCustomObject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DependsOnColumn {
                get {
                    return this.columnDependsOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomObjectDataColumn {
                get {
                    return this.columnCustomObjectData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceCodeRow this[int index] {
                get {
                    return ((SourceCodeRow)(this.Rows[index]));
                }
            }
            
            public event SourceCodeRowChangeEventHandler SourceCodeRowChanging;
            
            public event SourceCodeRowChangeEventHandler SourceCodeRowChanged;
            
            public event SourceCodeRowChangeEventHandler SourceCodeRowDeleting;
            
            public event SourceCodeRowChangeEventHandler SourceCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSourceCodeRow(SourceCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceCodeRow AddSourceCodeRow(string Name, bool IsCustomObject, string DependsOn, string Text, byte[] CustomObjectData) {
                SourceCodeRow rowSourceCodeRow = ((SourceCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        IsCustomObject,
                        DependsOn,
                        Text,
                        CustomObjectData};
                rowSourceCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSourceCodeRow);
                return rowSourceCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceCodeRow FindByName(string Name) {
                return ((SourceCodeRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SourceCodeDataTable cln = ((SourceCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SourceCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnIsCustomObject = base.Columns["IsCustomObject"];
                this.columnDependsOn = base.Columns["DependsOn"];
                this.columnText = base.Columns["Text"];
                this.columnCustomObjectData = base.Columns["CustomObjectData"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnIsCustomObject = new global::System.Data.DataColumn("IsCustomObject", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsCustomObject);
                this.columnDependsOn = new global::System.Data.DataColumn("DependsOn", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDependsOn);
                this.columnText = new global::System.Data.DataColumn("Text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText);
                this.columnCustomObjectData = new global::System.Data.DataColumn("CustomObjectData", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomObjectData);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SourceCodeKey", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnIsCustomObject.Namespace = "";
                this.columnIsCustomObject.DefaultValue = ((bool)(false));
                this.columnDependsOn.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceCodeRow NewSourceCodeRow() {
                return ((SourceCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SourceCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SourceCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SourceCodeRowChanged != null)) {
                    this.SourceCodeRowChanged(this, new SourceCodeRowChangeEvent(((SourceCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SourceCodeRowChanging != null)) {
                    this.SourceCodeRowChanging(this, new SourceCodeRowChangeEvent(((SourceCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SourceCodeRowDeleted != null)) {
                    this.SourceCodeRowDeleted(this, new SourceCodeRowChangeEvent(((SourceCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SourceCodeRowDeleting != null)) {
                    this.SourceCodeRowDeleting(this, new SourceCodeRowChangeEvent(((SourceCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSourceCodeRow(SourceCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SourceCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDisplayMode;
            
            private global::System.Data.DataColumn columnWindowed;
            
            private global::System.Data.DataColumn columnTitleText;
            
            private global::System.Data.DataColumn columnStartMap;
            
            private global::System.Data.DataColumn columnOverlayMap;
            
            private global::System.Data.DataColumn columnMaxPlayers;
            
            private global::System.Data.DataColumn columnMaxViews;
            
            private global::System.Data.DataColumn columnCredits;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectDataTable() {
                this.TableName = "Project";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayModeColumn {
                get {
                    return this.columnDisplayMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WindowedColumn {
                get {
                    return this.columnWindowed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleTextColumn {
                get {
                    return this.columnTitleText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartMapColumn {
                get {
                    return this.columnStartMap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverlayMapColumn {
                get {
                    return this.columnOverlayMap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxPlayersColumn {
                get {
                    return this.columnMaxPlayers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxViewsColumn {
                get {
                    return this.columnMaxViews;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditsColumn {
                get {
                    return this.columnCredits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow this[int index] {
                get {
                    return ((ProjectRow)(this.Rows[index]));
                }
            }
            
            public event ProjectRowChangeEventHandler ProjectRowChanging;
            
            public event ProjectRowChangeEventHandler ProjectRowChanged;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleting;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectRow(ProjectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow AddProjectRow(string DisplayMode, bool Windowed, string TitleText, string StartMap, string OverlayMap, byte MaxPlayers, byte MaxViews, string Credits) {
                ProjectRow rowProjectRow = ((ProjectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DisplayMode,
                        Windowed,
                        TitleText,
                        StartMap,
                        OverlayMap,
                        MaxPlayers,
                        MaxViews,
                        Credits};
                rowProjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectRow);
                return rowProjectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectDataTable cln = ((ProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDisplayMode = base.Columns["DisplayMode"];
                this.columnWindowed = base.Columns["Windowed"];
                this.columnTitleText = base.Columns["TitleText"];
                this.columnStartMap = base.Columns["StartMap"];
                this.columnOverlayMap = base.Columns["OverlayMap"];
                this.columnMaxPlayers = base.Columns["MaxPlayers"];
                this.columnMaxViews = base.Columns["MaxViews"];
                this.columnCredits = base.Columns["Credits"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDisplayMode = new global::System.Data.DataColumn("DisplayMode", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisplayMode);
                this.columnWindowed = new global::System.Data.DataColumn("Windowed", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnWindowed);
                this.columnTitleText = new global::System.Data.DataColumn("TitleText", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTitleText);
                this.columnStartMap = new global::System.Data.DataColumn("StartMap", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStartMap);
                this.columnOverlayMap = new global::System.Data.DataColumn("OverlayMap", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverlayMap);
                this.columnMaxPlayers = new global::System.Data.DataColumn("MaxPlayers", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMaxPlayers);
                this.columnMaxViews = new global::System.Data.DataColumn("MaxViews", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMaxViews);
                this.columnCredits = new global::System.Data.DataColumn("Credits", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCredits);
                this.columnDisplayMode.AllowDBNull = false;
                this.columnDisplayMode.Namespace = "";
                this.columnWindowed.AllowDBNull = false;
                this.columnWindowed.Namespace = "";
                this.columnTitleText.Namespace = "";
                this.columnStartMap.Namespace = "";
                this.columnOverlayMap.Namespace = "";
                this.columnMaxPlayers.Namespace = "";
                this.columnMaxPlayers.DefaultValue = ((byte)(1));
                this.columnMaxViews.Namespace = "";
                this.columnMaxViews.DefaultValue = ((byte)(1));
                this.columnCredits.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow NewProjectRow() {
                return ((ProjectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectRowChanged != null)) {
                    this.ProjectRowChanged(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectRowChanging != null)) {
                    this.ProjectRowChanging(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectRowDeleted != null)) {
                    this.ProjectRowDeleted(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectRowDeleting != null)) {
                    this.ProjectRowDeleting(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectRow(ProjectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TileCategoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileCategoryDataTable() {
                this.TableName = "TileCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TileCategoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TileCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileCategoryRow this[int index] {
                get {
                    return ((TileCategoryRow)(this.Rows[index]));
                }
            }
            
            public event TileCategoryRowChangeEventHandler TileCategoryRowChanging;
            
            public event TileCategoryRowChangeEventHandler TileCategoryRowChanged;
            
            public event TileCategoryRowChangeEventHandler TileCategoryRowDeleting;
            
            public event TileCategoryRowChangeEventHandler TileCategoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTileCategoryRow(TileCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileCategoryRow AddTileCategoryRow(string Name) {
                TileCategoryRow rowTileCategoryRow = ((TileCategoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name};
                rowTileCategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTileCategoryRow);
                return rowTileCategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileCategoryRow FindByName(string Name) {
                return ((TileCategoryRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TileCategoryDataTable cln = ((TileCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TileCategoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("CategoryKey", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileCategoryRow NewTileCategoryRow() {
                return ((TileCategoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TileCategoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TileCategoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TileCategoryRowChanged != null)) {
                    this.TileCategoryRowChanged(this, new TileCategoryRowChangeEvent(((TileCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TileCategoryRowChanging != null)) {
                    this.TileCategoryRowChanging(this, new TileCategoryRowChangeEvent(((TileCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TileCategoryRowDeleted != null)) {
                    this.TileCategoryRowDeleted(this, new TileCategoryRowChangeEvent(((TileCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TileCategoryRowDeleting != null)) {
                    this.TileCategoryRowDeleting(this, new TileCategoryRowChangeEvent(((TileCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTileCategoryRow(TileCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TileCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CategorizedTilesetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTileset;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategorizedTilesetDataTable() {
                this.TableName = "CategorizedTileset";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategorizedTilesetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CategorizedTilesetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TilesetColumn {
                get {
                    return this.columnTileset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategorizedTilesetRow this[int index] {
                get {
                    return ((CategorizedTilesetRow)(this.Rows[index]));
                }
            }
            
            public event CategorizedTilesetRowChangeEventHandler CategorizedTilesetRowChanging;
            
            public event CategorizedTilesetRowChangeEventHandler CategorizedTilesetRowChanged;
            
            public event CategorizedTilesetRowChangeEventHandler CategorizedTilesetRowDeleting;
            
            public event CategorizedTilesetRowChangeEventHandler CategorizedTilesetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCategorizedTilesetRow(CategorizedTilesetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategorizedTilesetRow AddCategorizedTilesetRow(TilesetRow parentTilesetRowByTilesetCategory, TileCategoryRow parentTileCategoryRowByTileCategoryCategorizedTileset) {
                CategorizedTilesetRow rowCategorizedTilesetRow = ((CategorizedTilesetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentTilesetRowByTilesetCategory != null)) {
                    columnValuesArray[0] = parentTilesetRowByTilesetCategory[0];
                }
                if ((parentTileCategoryRowByTileCategoryCategorizedTileset != null)) {
                    columnValuesArray[1] = parentTileCategoryRowByTileCategoryCategorizedTileset[0];
                }
                rowCategorizedTilesetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCategorizedTilesetRow);
                return rowCategorizedTilesetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategorizedTilesetRow FindByTilesetName(string Tileset, string Name) {
                return ((CategorizedTilesetRow)(this.Rows.Find(new object[] {
                            Tileset,
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CategorizedTilesetDataTable cln = ((CategorizedTilesetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CategorizedTilesetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTileset = base.Columns["Tileset"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTileset = new global::System.Data.DataColumn("Tileset", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTileset);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("CategorizedTilesetKey", new global::System.Data.DataColumn[] {
                                this.columnTileset,
                                this.columnName}, true));
                this.columnTileset.AllowDBNull = false;
                this.columnTileset.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategorizedTilesetRow NewCategorizedTilesetRow() {
                return ((CategorizedTilesetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CategorizedTilesetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CategorizedTilesetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategorizedTilesetRowChanged != null)) {
                    this.CategorizedTilesetRowChanged(this, new CategorizedTilesetRowChangeEvent(((CategorizedTilesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategorizedTilesetRowChanging != null)) {
                    this.CategorizedTilesetRowChanging(this, new CategorizedTilesetRowChangeEvent(((CategorizedTilesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategorizedTilesetRowDeleted != null)) {
                    this.CategorizedTilesetRowDeleted(this, new CategorizedTilesetRowChangeEvent(((CategorizedTilesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategorizedTilesetRowDeleting != null)) {
                    this.CategorizedTilesetRowDeleting(this, new CategorizedTilesetRowChangeEvent(((CategorizedTilesetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCategorizedTilesetRow(CategorizedTilesetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategorizedTilesetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CategoryTileDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTileset;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnTileValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryTileDataTable() {
                this.TableName = "CategoryTile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoryTileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CategoryTileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TilesetColumn {
                get {
                    return this.columnTileset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TileValueColumn {
                get {
                    return this.columnTileValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryTileRow this[int index] {
                get {
                    return ((CategoryTileRow)(this.Rows[index]));
                }
            }
            
            public event CategoryTileRowChangeEventHandler CategoryTileRowChanging;
            
            public event CategoryTileRowChangeEventHandler CategoryTileRowChanged;
            
            public event CategoryTileRowChangeEventHandler CategoryTileRowDeleting;
            
            public event CategoryTileRowChangeEventHandler CategoryTileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCategoryTileRow(CategoryTileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryTileRow AddCategoryTileRow(string Tileset, string Category, int TileValue) {
                CategoryTileRow rowCategoryTileRow = ((CategoryTileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Tileset,
                        Category,
                        TileValue};
                rowCategoryTileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCategoryTileRow);
                return rowCategoryTileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryTileRow FindByTilesetCategoryTileValue(string Tileset, string Category, int TileValue) {
                return ((CategoryTileRow)(this.Rows.Find(new object[] {
                            Tileset,
                            Category,
                            TileValue})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CategoryTileDataTable cln = ((CategoryTileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CategoryTileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTileset = base.Columns["Tileset"];
                this.columnCategory = base.Columns["Category"];
                this.columnTileValue = base.Columns["TileValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTileset = new global::System.Data.DataColumn("Tileset", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTileset);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCategory);
                this.columnTileValue = new global::System.Data.DataColumn("TileValue", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTileValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("CategoryTileKey", new global::System.Data.DataColumn[] {
                                this.columnTileset,
                                this.columnCategory,
                                this.columnTileValue}, true));
                this.columnTileset.AllowDBNull = false;
                this.columnTileset.Namespace = "";
                this.columnCategory.AllowDBNull = false;
                this.columnCategory.Namespace = "";
                this.columnTileValue.AllowDBNull = false;
                this.columnTileValue.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryTileRow NewCategoryTileRow() {
                return ((CategoryTileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CategoryTileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CategoryTileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoryTileRowChanged != null)) {
                    this.CategoryTileRowChanged(this, new CategoryTileRowChangeEvent(((CategoryTileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoryTileRowChanging != null)) {
                    this.CategoryTileRowChanging(this, new CategoryTileRowChangeEvent(((CategoryTileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoryTileRowDeleted != null)) {
                    this.CategoryTileRowDeleted(this, new CategoryTileRowChangeEvent(((CategoryTileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoryTileRowDeleting != null)) {
                    this.CategoryTileRowDeleting(this, new CategoryTileRowChangeEvent(((CategoryTileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCategoryTileRow(CategoryTileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoryTileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CategoryFrameDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTileset;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnTileValue;
            
            private global::System.Data.DataColumn columnFrame;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryFrameDataTable() {
                this.TableName = "CategoryFrame";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoryFrameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CategoryFrameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TilesetColumn {
                get {
                    return this.columnTileset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TileValueColumn {
                get {
                    return this.columnTileValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrameColumn {
                get {
                    return this.columnFrame;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryFrameRow this[int index] {
                get {
                    return ((CategoryFrameRow)(this.Rows[index]));
                }
            }
            
            public event CategoryFrameRowChangeEventHandler CategoryFrameRowChanging;
            
            public event CategoryFrameRowChangeEventHandler CategoryFrameRowChanged;
            
            public event CategoryFrameRowChangeEventHandler CategoryFrameRowDeleting;
            
            public event CategoryFrameRowChangeEventHandler CategoryFrameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCategoryFrameRow(CategoryFrameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryFrameRow AddCategoryFrameRow(string Tileset, string Category, int TileValue, short Frame) {
                CategoryFrameRow rowCategoryFrameRow = ((CategoryFrameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Tileset,
                        Category,
                        TileValue,
                        Frame};
                rowCategoryFrameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCategoryFrameRow);
                return rowCategoryFrameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryFrameRow FindByTilesetCategoryTileValueFrame(string Tileset, string Category, int TileValue, short Frame) {
                return ((CategoryFrameRow)(this.Rows.Find(new object[] {
                            Tileset,
                            Category,
                            TileValue,
                            Frame})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CategoryFrameDataTable cln = ((CategoryFrameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CategoryFrameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTileset = base.Columns["Tileset"];
                this.columnCategory = base.Columns["Category"];
                this.columnTileValue = base.Columns["TileValue"];
                this.columnFrame = base.Columns["Frame"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTileset = new global::System.Data.DataColumn("Tileset", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTileset);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCategory);
                this.columnTileValue = new global::System.Data.DataColumn("TileValue", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTileValue);
                this.columnFrame = new global::System.Data.DataColumn("Frame", typeof(short), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFrame);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("CategoryFrameKey", new global::System.Data.DataColumn[] {
                                this.columnTileset,
                                this.columnCategory,
                                this.columnTileValue,
                                this.columnFrame}, true));
                this.columnTileset.AllowDBNull = false;
                this.columnTileset.Namespace = "";
                this.columnCategory.AllowDBNull = false;
                this.columnCategory.Namespace = "";
                this.columnTileValue.AllowDBNull = false;
                this.columnTileValue.Namespace = "";
                this.columnFrame.AllowDBNull = false;
                this.columnFrame.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryFrameRow NewCategoryFrameRow() {
                return ((CategoryFrameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CategoryFrameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CategoryFrameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoryFrameRowChanged != null)) {
                    this.CategoryFrameRowChanged(this, new CategoryFrameRowChangeEvent(((CategoryFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoryFrameRowChanging != null)) {
                    this.CategoryFrameRowChanging(this, new CategoryFrameRowChangeEvent(((CategoryFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoryFrameRowDeleted != null)) {
                    this.CategoryFrameRowDeleted(this, new CategoryFrameRowChangeEvent(((CategoryFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoryFrameRowDeleting != null)) {
                    this.CategoryFrameRowDeleting(this, new CategoryFrameRowChangeEvent(((CategoryFrameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCategoryFrameRow(CategoryFrameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataset ds = new ProjectDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoryFrameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GraphicSheetRow : global::System.Data.DataRow {
            
            private GraphicSheetDataTable tableGraphicSheet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GraphicSheetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGraphicSheet = ((GraphicSheetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableGraphicSheet.NameColumn]));
                }
                set {
                    this[this.tableGraphicSheet.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Columns {
                get {
                    try {
                        return ((short)(this[this.tableGraphicSheet.ColumnsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Columns\' in table \'GraphicSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGraphicSheet.ColumnsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Rows {
                get {
                    try {
                        return ((short)(this[this.tableGraphicSheet.RowsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rows\' in table \'GraphicSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGraphicSheet.RowsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CellWidth {
                get {
                    try {
                        return ((short)(this[this.tableGraphicSheet.CellWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellWidth\' in table \'GraphicSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGraphicSheet.CellWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CellHeight {
                get {
                    try {
                        return ((short)(this[this.tableGraphicSheet.CellHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellHeight\' in table \'GraphicSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGraphicSheet.CellHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Image {
                get {
                    try {
                        return ((byte[])(this[this.tableGraphicSheet.ImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Image\' in table \'GraphicSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGraphicSheet.ImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumnsNull() {
                return this.IsNull(this.tableGraphicSheet.ColumnsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumnsNull() {
                this[this.tableGraphicSheet.ColumnsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowsNull() {
                return this.IsNull(this.tableGraphicSheet.RowsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowsNull() {
                this[this.tableGraphicSheet.RowsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellWidthNull() {
                return this.IsNull(this.tableGraphicSheet.CellWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellWidthNull() {
                this[this.tableGraphicSheet.CellWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellHeightNull() {
                return this.IsNull(this.tableGraphicSheet.CellHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellHeightNull() {
                this[this.tableGraphicSheet.CellHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageNull() {
                return this.IsNull(this.tableGraphicSheet.ImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageNull() {
                this[this.tableGraphicSheet.ImageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FramesetRow : global::System.Data.DataRow {
            
            private FramesetDataTable tableFrameset;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FramesetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFrameset = ((FramesetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableFrameset.NameColumn]));
                }
                set {
                    this[this.tableFrameset.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrameRow[] GetFrameRows() {
                if ((this.Table.ChildRelations["FramesetFrame"] == null)) {
                    return new FrameRow[0];
                }
                else {
                    return ((FrameRow[])(base.GetChildRows(this.Table.ChildRelations["FramesetFrame"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetRow[] GetTilesetRows() {
                if ((this.Table.ChildRelations["FramesetTileset"] == null)) {
                    return new TilesetRow[0];
                }
                else {
                    return ((TilesetRow[])(base.GetChildRows(this.Table.ChildRelations["FramesetTileset"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateRow[] GetSpriteStateRows() {
                if ((this.Table.ChildRelations["FramesetSpriteState"] == null)) {
                    return new SpriteStateRow[0];
                }
                else {
                    return ((SpriteStateRow[])(base.GetChildRows(this.Table.ChildRelations["FramesetSpriteState"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FrameRow : global::System.Data.DataRow {
            
            private FrameDataTable tableFrame;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FrameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFrame = ((FrameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FrameValue {
                get {
                    return ((int)(this[this.tableFrame.FrameValueColumn]));
                }
                set {
                    this[this.tableFrame.FrameValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GraphicSheet {
                get {
                    return ((string)(this[this.tableFrame.GraphicSheetColumn]));
                }
                set {
                    this[this.tableFrame.GraphicSheetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CellIndex {
                get {
                    return ((short)(this[this.tableFrame.CellIndexColumn]));
                }
                set {
                    this[this.tableFrame.CellIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float m11 {
                get {
                    try {
                        return ((float)(this[this.tableFrame.m11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'m11\' in table \'Frame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.m11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float m12 {
                get {
                    try {
                        return ((float)(this[this.tableFrame.m12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'m12\' in table \'Frame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.m12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float m21 {
                get {
                    try {
                        return ((float)(this[this.tableFrame.m21Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'m21\' in table \'Frame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.m21Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float m22 {
                get {
                    try {
                        return ((float)(this[this.tableFrame.m22Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'m22\' in table \'Frame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.m22Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float dx {
                get {
                    try {
                        return ((float)(this[this.tableFrame.dxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dx\' in table \'Frame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.dxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float dy {
                get {
                    try {
                        return ((float)(this[this.tableFrame.dyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dy\' in table \'Frame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.dyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableFrame.NameColumn]));
                }
                set {
                    this[this.tableFrame.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int color {
                get {
                    if (this.IscolorNull()) {
                        return -1;
                    }
                    else {
                        return ((int)(this[this.tableFrame.colorColumn]));
                    }
                }
                set {
                    this[this.tableFrame.colorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FramesetRow FramesetRow {
                get {
                    return ((FramesetRow)(this.GetParentRow(this.Table.ParentRelations["FramesetFrame"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FramesetFrame"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ism11Null() {
                return this.IsNull(this.tableFrame.m11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setm11Null() {
                this[this.tableFrame.m11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ism12Null() {
                return this.IsNull(this.tableFrame.m12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setm12Null() {
                this[this.tableFrame.m12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ism21Null() {
                return this.IsNull(this.tableFrame.m21Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setm21Null() {
                this[this.tableFrame.m21Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ism22Null() {
                return this.IsNull(this.tableFrame.m22Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setm22Null() {
                this[this.tableFrame.m22Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdxNull() {
                return this.IsNull(this.tableFrame.dxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdxNull() {
                this[this.tableFrame.dxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdyNull() {
                return this.IsNull(this.tableFrame.dyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdyNull() {
                this[this.tableFrame.dyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscolorNull() {
                return this.IsNull(this.tableFrame.colorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcolorNull() {
                this[this.tableFrame.colorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TilesetRow : global::System.Data.DataRow {
            
            private TilesetDataTable tableTileset;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TilesetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTileset = ((TilesetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTileset.NameColumn]));
                }
                set {
                    this[this.tableTileset.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frameset {
                get {
                    try {
                        return ((string)(this[this.tableTileset.FramesetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frameset\' in table \'Tileset\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTileset.FramesetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short TileWidth {
                get {
                    return ((short)(this[this.tableTileset.TileWidthColumn]));
                }
                set {
                    this[this.tableTileset.TileWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short TileHeight {
                get {
                    return ((short)(this[this.tableTileset.TileHeightColumn]));
                }
                set {
                    this[this.tableTileset.TileHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FramesetRow FramesetRow {
                get {
                    return ((FramesetRow)(this.GetParentRow(this.Table.ParentRelations["FramesetTileset"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FramesetTileset"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFramesetNull() {
                return this.IsNull(this.tableTileset.FramesetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFramesetNull() {
                this[this.tableTileset.FramesetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileRow[] GetTileRows() {
                if ((this.Table.ChildRelations["TilesetTile"] == null)) {
                    return new TileRow[0];
                }
                else {
                    return ((TileRow[])(base.GetChildRows(this.Table.ChildRelations["TilesetTile"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRows() {
                if ((this.Table.ChildRelations["TilesetLayer"] == null)) {
                    return new LayerRow[0];
                }
                else {
                    return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["TilesetLayer"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategorizedTilesetRow[] GetCategorizedTilesetRows() {
                if ((this.Table.ChildRelations["TilesetCategory"] == null)) {
                    return new CategorizedTilesetRow[0];
                }
                else {
                    return ((CategorizedTilesetRow[])(base.GetChildRows(this.Table.ChildRelations["TilesetCategory"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TileRow : global::System.Data.DataRow {
            
            private TileDataTable tableTile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTile = ((TileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TileValue {
                get {
                    return ((int)(this[this.tableTile.TileValueColumn]));
                }
                set {
                    this[this.tableTile.TileValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Counter {
                get {
                    try {
                        return ((string)(this[this.tableTile.CounterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Counter\' in table \'Tile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTile.CounterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTile.NameColumn]));
                }
                set {
                    this[this.tableTile.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetRow TilesetRow {
                get {
                    return ((TilesetRow)(this.GetParentRow(this.Table.ParentRelations["TilesetTile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TilesetTile"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CounterRow CounterRow {
                get {
                    return ((CounterRow)(this.GetParentRow(this.Table.ParentRelations["CounterTile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CounterTile"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCounterNull() {
                return this.IsNull(this.tableTile.CounterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCounterNull() {
                this[this.tableTile.CounterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileFrameRow[] GetTileFrameRows() {
                if ((this.Table.ChildRelations["TileTileFrame"] == null)) {
                    return new TileFrameRow[0];
                }
                else {
                    return ((TileFrameRow[])(base.GetChildRows(this.Table.ChildRelations["TileTileFrame"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TileFrameRow : global::System.Data.DataRow {
            
            private TileFrameDataTable tableTileFrame;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TileFrameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTileFrame = ((TileFrameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Sequence {
                get {
                    return ((short)(this[this.tableTileFrame.SequenceColumn]));
                }
                set {
                    this[this.tableTileFrame.SequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FrameValue {
                get {
                    try {
                        return ((int)(this[this.tableTileFrame.FrameValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FrameValue\' in table \'TileFrame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTileFrame.FrameValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Duration {
                get {
                    try {
                        return ((short)(this[this.tableTileFrame.DurationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Duration\' in table \'TileFrame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTileFrame.DurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTileFrame.NameColumn]));
                }
                set {
                    this[this.tableTileFrame.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TileValue {
                get {
                    return ((int)(this[this.tableTileFrame.TileValueColumn]));
                }
                set {
                    this[this.tableTileFrame.TileValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileRow TileRowParent {
                get {
                    return ((TileRow)(this.GetParentRow(this.Table.ParentRelations["TileTileFrame"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TileTileFrame"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrameValueNull() {
                return this.IsNull(this.tableTileFrame.FrameValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrameValueNull() {
                this[this.tableTileFrame.FrameValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDurationNull() {
                return this.IsNull(this.tableTileFrame.DurationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDurationNull() {
                this[this.tableTileFrame.DurationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CounterRow : global::System.Data.DataRow {
            
            private CounterDataTable tableCounter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CounterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCounter = ((CounterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCounter.NameColumn]));
                }
                set {
                    this[this.tableCounter.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Value {
                get {
                    try {
                        return ((int)(this[this.tableCounter.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'Counter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCounter.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Max {
                get {
                    try {
                        return ((int)(this[this.tableCounter.MaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Max\' in table \'Counter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCounter.MaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableCounter.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableCounter.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxNull() {
                return this.IsNull(this.tableCounter.MaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxNull() {
                this[this.tableCounter.MaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileRow[] GetTileRows() {
                if ((this.Table.ChildRelations["CounterTile"] == null)) {
                    return new TileRow[0];
                }
                else {
                    return ((TileRow[])(base.GetChildRows(this.Table.ChildRelations["CounterTile"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MapRow : global::System.Data.DataRow {
            
            private MapDataTable tableMap;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MapRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMap = ((MapDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableMap.NameColumn]));
                }
                set {
                    this[this.tableMap.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ScrollMarginLeft {
                get {
                    return ((short)(this[this.tableMap.ScrollMarginLeftColumn]));
                }
                set {
                    this[this.tableMap.ScrollMarginLeftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ScrollMarginTop {
                get {
                    return ((short)(this[this.tableMap.ScrollMarginTopColumn]));
                }
                set {
                    this[this.tableMap.ScrollMarginTopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ScrollMarginRight {
                get {
                    return ((short)(this[this.tableMap.ScrollMarginRightColumn]));
                }
                set {
                    this[this.tableMap.ScrollMarginRightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ScrollMarginBottom {
                get {
                    return ((short)(this[this.tableMap.ScrollMarginBottomColumn]));
                }
                set {
                    this[this.tableMap.ScrollMarginBottomColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScrollWidth {
                get {
                    if (this.IsScrollWidthNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableMap.ScrollWidthColumn]));
                    }
                }
                set {
                    this[this.tableMap.ScrollWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScrollHeight {
                get {
                    if (this.IsScrollHeightNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableMap.ScrollHeightColumn]));
                    }
                }
                set {
                    this[this.tableMap.ScrollHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ViewLeft {
                get {
                    if (this.IsViewLeftNull()) {
                        return 0;
                    }
                    else {
                        return ((short)(this[this.tableMap.ViewLeftColumn]));
                    }
                }
                set {
                    this[this.tableMap.ViewLeftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ViewTop {
                get {
                    if (this.IsViewTopNull()) {
                        return 0;
                    }
                    else {
                        return ((short)(this[this.tableMap.ViewTopColumn]));
                    }
                }
                set {
                    this[this.tableMap.ViewTopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ViewWidth {
                get {
                    if (this.IsViewWidthNull()) {
                        return 0;
                    }
                    else {
                        return ((short)(this[this.tableMap.ViewWidthColumn]));
                    }
                }
                set {
                    this[this.tableMap.ViewWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ViewHeight {
                get {
                    if (this.IsViewHeightNull()) {
                        return 0;
                    }
                    else {
                        return ((short)(this[this.tableMap.ViewHeightColumn]));
                    }
                }
                set {
                    this[this.tableMap.ViewHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScrollWidthNull() {
                return this.IsNull(this.tableMap.ScrollWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScrollWidthNull() {
                this[this.tableMap.ScrollWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScrollHeightNull() {
                return this.IsNull(this.tableMap.ScrollHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScrollHeightNull() {
                this[this.tableMap.ScrollHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsViewLeftNull() {
                return this.IsNull(this.tableMap.ViewLeftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetViewLeftNull() {
                this[this.tableMap.ViewLeftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsViewTopNull() {
                return this.IsNull(this.tableMap.ViewTopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetViewTopNull() {
                this[this.tableMap.ViewTopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsViewWidthNull() {
                return this.IsNull(this.tableMap.ViewWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetViewWidthNull() {
                this[this.tableMap.ViewWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsViewHeightNull() {
                return this.IsNull(this.tableMap.ViewHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetViewHeightNull() {
                this[this.tableMap.ViewHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRows() {
                if ((this.Table.ChildRelations["MapLayer"] == null)) {
                    return new LayerRow[0];
                }
                else {
                    return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["MapLayer"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LayerRow : global::System.Data.DataRow {
            
            private LayerDataTable tableLayer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LayerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLayer = ((LayerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLayer.NameColumn]));
                }
                set {
                    this[this.tableLayer.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Width {
                get {
                    return ((int)(this[this.tableLayer.WidthColumn]));
                }
                set {
                    this[this.tableLayer.WidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Height {
                get {
                    return ((int)(this[this.tableLayer.HeightColumn]));
                }
                set {
                    this[this.tableLayer.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tileset {
                get {
                    try {
                        return ((string)(this[this.tableLayer.TilesetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tileset\' in table \'Layer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLayer.TilesetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte BytesPerTile {
                get {
                    return ((byte)(this[this.tableLayer.BytesPerTileColumn]));
                }
                set {
                    this[this.tableLayer.BytesPerTileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapName {
                get {
                    return ((string)(this[this.tableLayer.MapNameColumn]));
                }
                set {
                    this[this.tableLayer.MapNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OffsetX {
                get {
                    if (this.IsOffsetXNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableLayer.OffsetXColumn]));
                    }
                }
                set {
                    this[this.tableLayer.OffsetXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OffsetY {
                get {
                    if (this.IsOffsetYNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableLayer.OffsetYColumn]));
                    }
                }
                set {
                    this[this.tableLayer.OffsetYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ScrollRateX {
                get {
                    if (this.IsScrollRateXNull()) {
                        return 1F;
                    }
                    else {
                        return ((float)(this[this.tableLayer.ScrollRateXColumn]));
                    }
                }
                set {
                    this[this.tableLayer.ScrollRateXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ScrollRateY {
                get {
                    if (this.IsScrollRateYNull()) {
                        return 1F;
                    }
                    else {
                        return ((float)(this[this.tableLayer.ScrollRateYColumn]));
                    }
                }
                set {
                    this[this.tableLayer.ScrollRateYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZIndex {
                get {
                    if (this.IsZIndexNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableLayer.ZIndexColumn]));
                    }
                }
                set {
                    this[this.tableLayer.ZIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Priority {
                get {
                    if (this.IsPriorityNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableLayer.PriorityColumn]));
                    }
                }
                set {
                    this[this.tableLayer.PriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VirtualWidth {
                get {
                    if (this.IsVirtualWidthNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableLayer.VirtualWidthColumn]));
                    }
                }
                set {
                    this[this.tableLayer.VirtualWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VirtualHeight {
                get {
                    if (this.IsVirtualHeightNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableLayer.VirtualHeightColumn]));
                    }
                }
                set {
                    this[this.tableLayer.VirtualHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Tiles {
                get {
                    try {
                        return ((byte[])(this[this.tableLayer.TilesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tiles\' in table \'Layer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLayer.TilesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow MapRow {
                get {
                    return ((MapRow)(this.GetParentRow(this.Table.ParentRelations["MapLayer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MapLayer"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetRow TilesetRow {
                get {
                    return ((TilesetRow)(this.GetParentRow(this.Table.ParentRelations["TilesetLayer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TilesetLayer"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTilesetNull() {
                return this.IsNull(this.tableLayer.TilesetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTilesetNull() {
                this[this.tableLayer.TilesetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOffsetXNull() {
                return this.IsNull(this.tableLayer.OffsetXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOffsetXNull() {
                this[this.tableLayer.OffsetXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOffsetYNull() {
                return this.IsNull(this.tableLayer.OffsetYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOffsetYNull() {
                this[this.tableLayer.OffsetYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScrollRateXNull() {
                return this.IsNull(this.tableLayer.ScrollRateXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScrollRateXNull() {
                this[this.tableLayer.ScrollRateXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScrollRateYNull() {
                return this.IsNull(this.tableLayer.ScrollRateYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScrollRateYNull() {
                this[this.tableLayer.ScrollRateYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIndexNull() {
                return this.IsNull(this.tableLayer.ZIndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIndexNull() {
                this[this.tableLayer.ZIndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityNull() {
                return this.IsNull(this.tableLayer.PriorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityNull() {
                this[this.tableLayer.PriorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVirtualWidthNull() {
                return this.IsNull(this.tableLayer.VirtualWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVirtualWidthNull() {
                this[this.tableLayer.VirtualWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVirtualHeightNull() {
                return this.IsNull(this.tableLayer.VirtualHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVirtualHeightNull() {
                this[this.tableLayer.VirtualHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTilesNull() {
                return this.IsNull(this.tableLayer.TilesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTilesNull() {
                this[this.tableLayer.TilesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRow[] GetSpriteRows() {
                if ((this.Table.ChildRelations["LayerSprite"] == null)) {
                    return new SpriteRow[0];
                }
                else {
                    return ((SpriteRow[])(base.GetChildRows(this.Table.ChildRelations["LayerSprite"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanRow[] GetSpritePlanRows() {
                if ((this.Table.ChildRelations["LayerSpritePlan"] == null)) {
                    return new SpritePlanRow[0];
                }
                else {
                    return ((SpritePlanRow[])(base.GetChildRows(this.Table.ChildRelations["LayerSpritePlan"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpriteRow : global::System.Data.DataRow {
            
            private SpriteDataTable tableSprite;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSprite = ((SpriteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayerName {
                get {
                    return ((string)(this[this.tableSprite.LayerNameColumn]));
                }
                set {
                    this[this.tableSprite.LayerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSprite.NameColumn]));
                }
                set {
                    this[this.tableSprite.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefinitionName {
                get {
                    return ((string)(this[this.tableSprite.DefinitionNameColumn]));
                }
                set {
                    this[this.tableSprite.DefinitionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateName {
                get {
                    try {
                        return ((string)(this[this.tableSprite.StateNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateName\' in table \'Sprite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.StateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CurrentFrame {
                get {
                    try {
                        return ((short)(this[this.tableSprite.CurrentFrameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentFrame\' in table \'Sprite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.CurrentFrameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableSprite.XColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'X\' in table \'Sprite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.XColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableSprite.YColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Y\' in table \'Sprite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.YColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DX {
                get {
                    try {
                        return ((float)(this[this.tableSprite.DXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DX\' in table \'Sprite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.DXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DY {
                get {
                    try {
                        return ((float)(this[this.tableSprite.DYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DY\' in table \'Sprite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.DYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapName {
                get {
                    return ((string)(this[this.tableSprite.MapNameColumn]));
                }
                set {
                    this[this.tableSprite.MapNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Priority {
                get {
                    try {
                        return ((int)(this[this.tableSprite.PriorityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Priority\' in table \'Sprite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.PriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    if (this.IsActiveNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSprite.ActiveColumn]));
                    }
                }
                set {
                    this[this.tableSprite.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Solidity {
                get {
                    if (this.IsSolidityNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSprite.SolidityColumn]));
                    }
                }
                set {
                    this[this.tableSprite.SolidityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Color {
                get {
                    if (this.IsColorNull()) {
                        return -1;
                    }
                    else {
                        return ((int)(this[this.tableSprite.ColorColumn]));
                    }
                }
                set {
                    this[this.tableSprite.ColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow LayerRowParent {
                get {
                    return ((LayerRow)(this.GetParentRow(this.Table.ParentRelations["LayerSprite"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LayerSprite"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateRow SpriteStateRowParent {
                get {
                    return ((SpriteStateRow)(this.GetParentRow(this.Table.ParentRelations["SpriteDefinitionSprite"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteDefinitionSprite"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNameNull() {
                return this.IsNull(this.tableSprite.StateNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNameNull() {
                this[this.tableSprite.StateNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentFrameNull() {
                return this.IsNull(this.tableSprite.CurrentFrameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentFrameNull() {
                this[this.tableSprite.CurrentFrameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXNull() {
                return this.IsNull(this.tableSprite.XColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXNull() {
                this[this.tableSprite.XColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYNull() {
                return this.IsNull(this.tableSprite.YColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYNull() {
                this[this.tableSprite.YColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDXNull() {
                return this.IsNull(this.tableSprite.DXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDXNull() {
                this[this.tableSprite.DXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDYNull() {
                return this.IsNull(this.tableSprite.DYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDYNull() {
                this[this.tableSprite.DYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityNull() {
                return this.IsNull(this.tableSprite.PriorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityNull() {
                this[this.tableSprite.PriorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiveNull() {
                return this.IsNull(this.tableSprite.ActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActiveNull() {
                this[this.tableSprite.ActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSolidityNull() {
                return this.IsNull(this.tableSprite.SolidityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSolidityNull() {
                this[this.tableSprite.SolidityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColorNull() {
                return this.IsNull(this.tableSprite.ColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColorNull() {
                this[this.tableSprite.ColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterValueRow[] GetParameterValueRows() {
                if ((this.Table.ChildRelations["SpriteParameterValue"] == null)) {
                    return new ParameterValueRow[0];
                }
                else {
                    return ((ParameterValueRow[])(base.GetChildRows(this.Table.ChildRelations["SpriteParameterValue"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParameterValueRow : global::System.Data.DataRow {
            
            private ParameterValueDataTable tableParameterValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParameterValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParameterValue = ((ParameterValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayerName {
                get {
                    return ((string)(this[this.tableParameterValue.LayerNameColumn]));
                }
                set {
                    this[this.tableParameterValue.LayerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpriteName {
                get {
                    return ((string)(this[this.tableParameterValue.SpriteNameColumn]));
                }
                set {
                    this[this.tableParameterValue.SpriteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParameterName {
                get {
                    return ((string)(this[this.tableParameterValue.ParameterNameColumn]));
                }
                set {
                    this[this.tableParameterValue.ParameterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Value {
                get {
                    try {
                        return ((int)(this[this.tableParameterValue.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'ParameterValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParameterValue.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefinitionName {
                get {
                    try {
                        return ((string)(this[this.tableParameterValue.DefinitionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefinitionName\' in table \'ParameterValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParameterValue.DefinitionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapName {
                get {
                    return ((string)(this[this.tableParameterValue.MapNameColumn]));
                }
                set {
                    this[this.tableParameterValue.MapNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRow SpriteRowParent {
                get {
                    return ((SpriteRow)(this.GetParentRow(this.Table.ParentRelations["SpriteParameterValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteParameterValue"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteParameterRow SpriteParameterRowParent {
                get {
                    return ((SpriteParameterRow)(this.GetParentRow(this.Table.ParentRelations["SpriteParameterParameterValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteParameterParameterValue"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableParameterValue.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableParameterValue.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefinitionNameNull() {
                return this.IsNull(this.tableParameterValue.DefinitionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefinitionNameNull() {
                this[this.tableParameterValue.DefinitionNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpritePlanRow : global::System.Data.DataRow {
            
            private SpritePlanDataTable tableSpritePlan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpritePlanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpritePlan = ((SpritePlanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapName {
                get {
                    return ((string)(this[this.tableSpritePlan.MapNameColumn]));
                }
                set {
                    this[this.tableSpritePlan.MapNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayerName {
                get {
                    return ((string)(this[this.tableSpritePlan.LayerNameColumn]));
                }
                set {
                    this[this.tableSpritePlan.LayerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSpritePlan.NameColumn]));
                }
                set {
                    this[this.tableSpritePlan.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Priority {
                get {
                    try {
                        return ((int)(this[this.tableSpritePlan.PriorityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Priority\' in table \'SpritePlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpritePlan.PriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow LayerRowParent {
                get {
                    return ((LayerRow)(this.GetParentRow(this.Table.ParentRelations["LayerSpritePlan"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LayerSpritePlan"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityNull() {
                return this.IsNull(this.tableSpritePlan.PriorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityNull() {
                this[this.tableSpritePlan.PriorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinateRow[] GetCoordinateRows() {
                if ((this.Table.ChildRelations["SpritePlanCoordinate"] == null)) {
                    return new CoordinateRow[0];
                }
                else {
                    return ((CoordinateRow[])(base.GetChildRows(this.Table.ChildRelations["SpritePlanCoordinate"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanRuleRow[] GetPlanRuleRows() {
                if ((this.Table.ChildRelations["SpritePlanPlanRule"] == null)) {
                    return new PlanRuleRow[0];
                }
                else {
                    return ((PlanRuleRow[])(base.GetChildRows(this.Table.ChildRelations["SpritePlanPlanRule"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanParameterValueRow[] GetPlanParameterValueRows() {
                if ((this.Table.ChildRelations["SpritePlanPlanParameterValue"] == null)) {
                    return new PlanParameterValueRow[0];
                }
                else {
                    return ((PlanParameterValueRow[])(base.GetChildRows(this.Table.ChildRelations["SpritePlanPlanParameterValue"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoordinateRow : global::System.Data.DataRow {
            
            private CoordinateDataTable tableCoordinate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoordinateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoordinate = ((CoordinateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapName {
                get {
                    return ((string)(this[this.tableCoordinate.MapNameColumn]));
                }
                set {
                    this[this.tableCoordinate.MapNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayerName {
                get {
                    return ((string)(this[this.tableCoordinate.LayerNameColumn]));
                }
                set {
                    this[this.tableCoordinate.LayerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlanName {
                get {
                    return ((string)(this[this.tableCoordinate.PlanNameColumn]));
                }
                set {
                    this[this.tableCoordinate.PlanNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Sequence {
                get {
                    return ((short)(this[this.tableCoordinate.SequenceColumn]));
                }
                set {
                    this[this.tableCoordinate.SequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableCoordinate.XColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'X\' in table \'Coordinate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinate.XColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableCoordinate.YColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Y\' in table \'Coordinate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinate.YColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableCoordinate.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weight\' in table \'Coordinate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinate.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanRow SpritePlanRowParent {
                get {
                    return ((SpritePlanRow)(this.GetParentRow(this.Table.ParentRelations["SpritePlanCoordinate"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpritePlanCoordinate"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXNull() {
                return this.IsNull(this.tableCoordinate.XColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXNull() {
                this[this.tableCoordinate.XColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYNull() {
                return this.IsNull(this.tableCoordinate.YColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYNull() {
                this[this.tableCoordinate.YColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tableCoordinate.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tableCoordinate.WeightColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PlanRuleRow : global::System.Data.DataRow {
            
            private PlanRuleDataTable tablePlanRule;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlanRuleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlanRule = ((PlanRuleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapName {
                get {
                    return ((string)(this[this.tablePlanRule.MapNameColumn]));
                }
                set {
                    this[this.tablePlanRule.MapNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayerName {
                get {
                    return ((string)(this[this.tablePlanRule.LayerNameColumn]));
                }
                set {
                    this[this.tablePlanRule.LayerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlanName {
                get {
                    return ((string)(this[this.tablePlanRule.PlanNameColumn]));
                }
                set {
                    this[this.tablePlanRule.PlanNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tablePlanRule.NameColumn]));
                }
                set {
                    this[this.tablePlanRule.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sequence {
                get {
                    return ((int)(this[this.tablePlanRule.SequenceColumn]));
                }
                set {
                    this[this.tablePlanRule.SequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tablePlanRule.TypeColumn]));
                }
                set {
                    this[this.tablePlanRule.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function {
                get {
                    return ((string)(this[this.tablePlanRule.FunctionColumn]));
                }
                set {
                    this[this.tablePlanRule.FunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameter1 {
                get {
                    try {
                        return ((string)(this[this.tablePlanRule.Parameter1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Parameter1\' in table \'PlanRule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlanRule.Parameter1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameter2 {
                get {
                    try {
                        return ((string)(this[this.tablePlanRule.Parameter2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Parameter2\' in table \'PlanRule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlanRule.Parameter2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameter3 {
                get {
                    try {
                        return ((string)(this[this.tablePlanRule.Parameter3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Parameter3\' in table \'PlanRule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlanRule.Parameter3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResultParameter {
                get {
                    try {
                        return ((string)(this[this.tablePlanRule.ResultParameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResultParameter\' in table \'PlanRule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlanRule.ResultParameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EndIf {
                get {
                    if (this.IsEndIfNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tablePlanRule.EndIfColumn]));
                    }
                }
                set {
                    this[this.tablePlanRule.EndIfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Suspended {
                get {
                    if (this.IsSuspendedNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tablePlanRule.SuspendedColumn]));
                    }
                }
                set {
                    this[this.tablePlanRule.SuspendedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanRow SpritePlanRowParent {
                get {
                    return ((SpritePlanRow)(this.GetParentRow(this.Table.ParentRelations["SpritePlanPlanRule"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpritePlanPlanRule"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParameter1Null() {
                return this.IsNull(this.tablePlanRule.Parameter1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParameter1Null() {
                this[this.tablePlanRule.Parameter1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParameter2Null() {
                return this.IsNull(this.tablePlanRule.Parameter2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParameter2Null() {
                this[this.tablePlanRule.Parameter2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParameter3Null() {
                return this.IsNull(this.tablePlanRule.Parameter3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParameter3Null() {
                this[this.tablePlanRule.Parameter3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultParameterNull() {
                return this.IsNull(this.tablePlanRule.ResultParameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultParameterNull() {
                this[this.tablePlanRule.ResultParameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndIfNull() {
                return this.IsNull(this.tablePlanRule.EndIfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndIfNull() {
                this[this.tablePlanRule.EndIfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSuspendedNull() {
                return this.IsNull(this.tablePlanRule.SuspendedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSuspendedNull() {
                this[this.tablePlanRule.SuspendedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PlanParameterValueRow : global::System.Data.DataRow {
            
            private PlanParameterValueDataTable tablePlanParameterValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlanParameterValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlanParameterValue = ((PlanParameterValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapName {
                get {
                    return ((string)(this[this.tablePlanParameterValue.MapNameColumn]));
                }
                set {
                    this[this.tablePlanParameterValue.MapNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayerName {
                get {
                    return ((string)(this[this.tablePlanParameterValue.LayerNameColumn]));
                }
                set {
                    this[this.tablePlanParameterValue.LayerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlanName {
                get {
                    return ((string)(this[this.tablePlanParameterValue.PlanNameColumn]));
                }
                set {
                    this[this.tablePlanParameterValue.PlanNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tablePlanParameterValue.NameColumn]));
                }
                set {
                    this[this.tablePlanParameterValue.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tablePlanParameterValue.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'PlanParameterValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlanParameterValue.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanRow SpritePlanRowParent {
                get {
                    return ((SpritePlanRow)(this.GetParentRow(this.Table.ParentRelations["SpritePlanPlanParameterValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpritePlanPlanParameterValue"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tablePlanParameterValue.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tablePlanParameterValue.ValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpriteDefinitionRow : global::System.Data.DataRow {
            
            private SpriteDefinitionDataTable tableSpriteDefinition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteDefinitionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteDefinition = ((SpriteDefinitionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSpriteDefinition.NameColumn]));
                }
                set {
                    this[this.tableSpriteDefinition.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRuleRow[] GetSpriteRuleRows() {
                if ((this.Table.ChildRelations["SpriteDefinitionSpriteRule"] == null)) {
                    return new SpriteRuleRow[0];
                }
                else {
                    return ((SpriteRuleRow[])(base.GetChildRows(this.Table.ChildRelations["SpriteDefinitionSpriteRule"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteParameterRow[] GetSpriteParameterRows() {
                if ((this.Table.ChildRelations["SpriteDefinitionSpriteParameter"] == null)) {
                    return new SpriteParameterRow[0];
                }
                else {
                    return ((SpriteParameterRow[])(base.GetChildRows(this.Table.ChildRelations["SpriteDefinitionSpriteParameter"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateRow[] GetSpriteStateRows() {
                if ((this.Table.ChildRelations["SpriteDefinitionState"] == null)) {
                    return new SpriteStateRow[0];
                }
                else {
                    return ((SpriteStateRow[])(base.GetChildRows(this.Table.ChildRelations["SpriteDefinitionState"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategorySpriteRow[] GetSpriteCategorySpriteRows() {
                if ((this.Table.ChildRelations["SpriteDefinitionCategory"] == null)) {
                    return new SpriteCategorySpriteRow[0];
                }
                else {
                    return ((SpriteCategorySpriteRow[])(base.GetChildRows(this.Table.ChildRelations["SpriteDefinitionCategory"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpriteRuleRow : global::System.Data.DataRow {
            
            private SpriteRuleDataTable tableSpriteRule;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteRuleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteRule = ((SpriteRuleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefinitionName {
                get {
                    return ((string)(this[this.tableSpriteRule.DefinitionNameColumn]));
                }
                set {
                    this[this.tableSpriteRule.DefinitionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSpriteRule.NameColumn]));
                }
                set {
                    this[this.tableSpriteRule.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sequence {
                get {
                    return ((int)(this[this.tableSpriteRule.SequenceColumn]));
                }
                set {
                    this[this.tableSpriteRule.SequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableSpriteRule.TypeColumn]));
                }
                set {
                    this[this.tableSpriteRule.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function {
                get {
                    return ((string)(this[this.tableSpriteRule.FunctionColumn]));
                }
                set {
                    this[this.tableSpriteRule.FunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameter1 {
                get {
                    try {
                        return ((string)(this[this.tableSpriteRule.Parameter1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Parameter1\' in table \'SpriteRule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteRule.Parameter1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameter2 {
                get {
                    try {
                        return ((string)(this[this.tableSpriteRule.Parameter2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Parameter2\' in table \'SpriteRule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteRule.Parameter2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameter3 {
                get {
                    try {
                        return ((string)(this[this.tableSpriteRule.Parameter3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Parameter3\' in table \'SpriteRule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteRule.Parameter3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResultParameter {
                get {
                    try {
                        return ((string)(this[this.tableSpriteRule.ResultParameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResultParameter\' in table \'SpriteRule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteRule.ResultParameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EndIf {
                get {
                    if (this.IsEndIfNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSpriteRule.EndIfColumn]));
                    }
                }
                set {
                    this[this.tableSpriteRule.EndIfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Suspended {
                get {
                    if (this.IsSuspendedNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSpriteRule.SuspendedColumn]));
                    }
                }
                set {
                    this[this.tableSpriteRule.SuspendedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionRow SpriteDefinitionRow {
                get {
                    return ((SpriteDefinitionRow)(this.GetParentRow(this.Table.ParentRelations["SpriteDefinitionSpriteRule"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteDefinitionSpriteRule"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParameter1Null() {
                return this.IsNull(this.tableSpriteRule.Parameter1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParameter1Null() {
                this[this.tableSpriteRule.Parameter1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParameter2Null() {
                return this.IsNull(this.tableSpriteRule.Parameter2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParameter2Null() {
                this[this.tableSpriteRule.Parameter2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParameter3Null() {
                return this.IsNull(this.tableSpriteRule.Parameter3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParameter3Null() {
                this[this.tableSpriteRule.Parameter3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultParameterNull() {
                return this.IsNull(this.tableSpriteRule.ResultParameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultParameterNull() {
                this[this.tableSpriteRule.ResultParameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndIfNull() {
                return this.IsNull(this.tableSpriteRule.EndIfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndIfNull() {
                this[this.tableSpriteRule.EndIfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSuspendedNull() {
                return this.IsNull(this.tableSpriteRule.SuspendedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSuspendedNull() {
                this[this.tableSpriteRule.SuspendedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpriteParameterRow : global::System.Data.DataRow {
            
            private SpriteParameterDataTable tableSpriteParameter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteParameterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteParameter = ((SpriteParameterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefinitionName {
                get {
                    return ((string)(this[this.tableSpriteParameter.DefinitionNameColumn]));
                }
                set {
                    this[this.tableSpriteParameter.DefinitionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSpriteParameter.NameColumn]));
                }
                set {
                    this[this.tableSpriteParameter.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionRow SpriteDefinitionRow {
                get {
                    return ((SpriteDefinitionRow)(this.GetParentRow(this.Table.ParentRelations["SpriteDefinitionSpriteParameter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteDefinitionSpriteParameter"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterValueRow[] GetParameterValueRows() {
                if ((this.Table.ChildRelations["SpriteParameterParameterValue"] == null)) {
                    return new ParameterValueRow[0];
                }
                else {
                    return ((ParameterValueRow[])(base.GetChildRows(this.Table.ChildRelations["SpriteParameterParameterValue"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpriteStateRow : global::System.Data.DataRow {
            
            private SpriteStateDataTable tableSpriteState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteStateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteState = ((SpriteStateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefinitionName {
                get {
                    return ((string)(this[this.tableSpriteState.DefinitionNameColumn]));
                }
                set {
                    this[this.tableSpriteState.DefinitionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSpriteState.NameColumn]));
                }
                set {
                    this[this.tableSpriteState.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FramesetName {
                get {
                    return ((string)(this[this.tableSpriteState.FramesetNameColumn]));
                }
                set {
                    this[this.tableSpriteState.FramesetNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SolidWidth {
                get {
                    return ((short)(this[this.tableSpriteState.SolidWidthColumn]));
                }
                set {
                    this[this.tableSpriteState.SolidWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SolidHeight {
                get {
                    return ((short)(this[this.tableSpriteState.SolidHeightColumn]));
                }
                set {
                    this[this.tableSpriteState.SolidHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Sequence {
                get {
                    return ((short)(this[this.tableSpriteState.SequenceColumn]));
                }
                set {
                    this[this.tableSpriteState.SequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionRow SpriteDefinitionRow {
                get {
                    return ((SpriteDefinitionRow)(this.GetParentRow(this.Table.ParentRelations["SpriteDefinitionState"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteDefinitionState"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FramesetRow FramesetRow {
                get {
                    return ((FramesetRow)(this.GetParentRow(this.Table.ParentRelations["FramesetSpriteState"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FramesetSpriteState"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteFrameRow[] GetSpriteFrameRows() {
                if ((this.Table.ChildRelations["SpriteStateFrame"] == null)) {
                    return new SpriteFrameRow[0];
                }
                else {
                    return ((SpriteFrameRow[])(base.GetChildRows(this.Table.ChildRelations["SpriteStateFrame"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRow[] GetSpriteRows() {
                if ((this.Table.ChildRelations["SpriteDefinitionSprite"] == null)) {
                    return new SpriteRow[0];
                }
                else {
                    return ((SpriteRow[])(base.GetChildRows(this.Table.ChildRelations["SpriteDefinitionSprite"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpriteFrameRow : global::System.Data.DataRow {
            
            private SpriteFrameDataTable tableSpriteFrame;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteFrameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteFrame = ((SpriteFrameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefinitionName {
                get {
                    return ((string)(this[this.tableSpriteFrame.DefinitionNameColumn]));
                }
                set {
                    this[this.tableSpriteFrame.DefinitionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateName {
                get {
                    return ((string)(this[this.tableSpriteFrame.StateNameColumn]));
                }
                set {
                    this[this.tableSpriteFrame.StateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Sequence {
                get {
                    return ((short)(this[this.tableSpriteFrame.SequenceColumn]));
                }
                set {
                    this[this.tableSpriteFrame.SequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FrameValue {
                get {
                    try {
                        return ((int)(this[this.tableSpriteFrame.FrameValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FrameValue\' in table \'SpriteFrame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteFrame.FrameValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Duration {
                get {
                    try {
                        return ((short)(this[this.tableSpriteFrame.DurationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Duration\' in table \'SpriteFrame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteFrame.DurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MaskAlphaLevel {
                get {
                    try {
                        return ((byte)(this[this.tableSpriteFrame.MaskAlphaLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaskAlphaLevel\' in table \'SpriteFrame\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteFrame.MaskAlphaLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateRow SpriteStateRowParent {
                get {
                    return ((SpriteStateRow)(this.GetParentRow(this.Table.ParentRelations["SpriteStateFrame"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteStateFrame"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrameValueNull() {
                return this.IsNull(this.tableSpriteFrame.FrameValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrameValueNull() {
                this[this.tableSpriteFrame.FrameValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDurationNull() {
                return this.IsNull(this.tableSpriteFrame.DurationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDurationNull() {
                this[this.tableSpriteFrame.DurationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaskAlphaLevelNull() {
                return this.IsNull(this.tableSpriteFrame.MaskAlphaLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaskAlphaLevelNull() {
                this[this.tableSpriteFrame.MaskAlphaLevelColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpriteCategoryRow : global::System.Data.DataRow {
            
            private SpriteCategoryDataTable tableSpriteCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteCategoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteCategory = ((SpriteCategoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSpriteCategory.NameColumn]));
                }
                set {
                    this[this.tableSpriteCategory.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategorySpriteRow[] GetSpriteCategorySpriteRows() {
                if ((this.Table.ChildRelations["SpriteCategorySpriteCategorySprite"] == null)) {
                    return new SpriteCategorySpriteRow[0];
                }
                else {
                    return ((SpriteCategorySpriteRow[])(base.GetChildRows(this.Table.ChildRelations["SpriteCategorySpriteCategorySprite"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpriteCategorySpriteRow : global::System.Data.DataRow {
            
            private SpriteCategorySpriteDataTable tableSpriteCategorySprite;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpriteCategorySpriteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteCategorySprite = ((SpriteCategorySpriteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryName {
                get {
                    return ((string)(this[this.tableSpriteCategorySprite.CategoryNameColumn]));
                }
                set {
                    this[this.tableSpriteCategorySprite.CategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefinitionName {
                get {
                    return ((string)(this[this.tableSpriteCategorySprite.DefinitionNameColumn]));
                }
                set {
                    this[this.tableSpriteCategorySprite.DefinitionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategoryRow SpriteCategoryRow {
                get {
                    return ((SpriteCategoryRow)(this.GetParentRow(this.Table.ParentRelations["SpriteCategorySpriteCategorySprite"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteCategorySpriteCategorySprite"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionRow SpriteDefinitionRow {
                get {
                    return ((SpriteDefinitionRow)(this.GetParentRow(this.Table.ParentRelations["SpriteDefinitionCategory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteDefinitionCategory"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SolidityRow : global::System.Data.DataRow {
            
            private SolidityDataTable tableSolidity;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SolidityRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSolidity = ((SolidityDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSolidity.NameColumn]));
                }
                set {
                    this[this.tableSolidity.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityShapeRow[] GetSolidityShapeRows() {
                if ((this.Table.ChildRelations["SoliditySolidityShape"] == null)) {
                    return new SolidityShapeRow[0];
                }
                else {
                    return ((SolidityShapeRow[])(base.GetChildRows(this.Table.ChildRelations["SoliditySolidityShape"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SolidityShapeRow : global::System.Data.DataRow {
            
            private SolidityShapeDataTable tableSolidityShape;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SolidityShapeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSolidityShape = ((SolidityShapeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SolidityName {
                get {
                    return ((string)(this[this.tableSolidityShape.SolidityNameColumn]));
                }
                set {
                    this[this.tableSolidityShape.SolidityNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryName {
                get {
                    return ((string)(this[this.tableSolidityShape.CategoryNameColumn]));
                }
                set {
                    this[this.tableSolidityShape.CategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShapeName {
                get {
                    try {
                        return ((string)(this[this.tableSolidityShape.ShapeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShapeName\' in table \'SolidityShape\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSolidityShape.ShapeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityRow SolidityRow {
                get {
                    return ((SolidityRow)(this.GetParentRow(this.Table.ParentRelations["SoliditySolidityShape"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SoliditySolidityShape"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileCategoryRow TileCategoryRow {
                get {
                    return ((TileCategoryRow)(this.GetParentRow(this.Table.ParentRelations["CategorySolidityShape"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CategorySolidityShape"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeNameNull() {
                return this.IsNull(this.tableSolidityShape.ShapeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeNameNull() {
                this[this.tableSolidityShape.ShapeNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SourceCodeRow : global::System.Data.DataRow {
            
            private SourceCodeDataTable tableSourceCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SourceCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSourceCode = ((SourceCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSourceCode.NameColumn]));
                }
                set {
                    this[this.tableSourceCode.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomObject {
                get {
                    if (this.IsIsCustomObjectNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSourceCode.IsCustomObjectColumn]));
                    }
                }
                set {
                    this[this.tableSourceCode.IsCustomObjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DependsOn {
                get {
                    try {
                        return ((string)(this[this.tableSourceCode.DependsOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DependsOn\' in table \'SourceCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCode.DependsOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    try {
                        return ((string)(this[this.tableSourceCode.TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text\' in table \'SourceCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCode.TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] CustomObjectData {
                get {
                    try {
                        return ((byte[])(this[this.tableSourceCode.CustomObjectDataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomObjectData\' in table \'SourceCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCode.CustomObjectDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCustomObjectNull() {
                return this.IsNull(this.tableSourceCode.IsCustomObjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCustomObjectNull() {
                this[this.tableSourceCode.IsCustomObjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDependsOnNull() {
                return this.IsNull(this.tableSourceCode.DependsOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDependsOnNull() {
                this[this.tableSourceCode.DependsOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextNull() {
                return this.IsNull(this.tableSourceCode.TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextNull() {
                this[this.tableSourceCode.TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomObjectDataNull() {
                return this.IsNull(this.tableSourceCode.CustomObjectDataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomObjectDataNull() {
                this[this.tableSourceCode.CustomObjectDataColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectRow : global::System.Data.DataRow {
            
            private ProjectDataTable tableProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProject = ((ProjectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisplayMode {
                get {
                    return ((string)(this[this.tableProject.DisplayModeColumn]));
                }
                set {
                    this[this.tableProject.DisplayModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Windowed {
                get {
                    return ((bool)(this[this.tableProject.WindowedColumn]));
                }
                set {
                    this[this.tableProject.WindowedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TitleText {
                get {
                    try {
                        return ((string)(this[this.tableProject.TitleTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TitleText\' in table \'Project\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.TitleTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartMap {
                get {
                    if (this.IsStartMapNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProject.StartMapColumn]));
                    }
                }
                set {
                    this[this.tableProject.StartMapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverlayMap {
                get {
                    if (this.IsOverlayMapNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableProject.OverlayMapColumn]));
                    }
                }
                set {
                    this[this.tableProject.OverlayMapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MaxPlayers {
                get {
                    if (this.IsMaxPlayersNull()) {
                        return 1;
                    }
                    else {
                        return ((byte)(this[this.tableProject.MaxPlayersColumn]));
                    }
                }
                set {
                    this[this.tableProject.MaxPlayersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MaxViews {
                get {
                    if (this.IsMaxViewsNull()) {
                        return 1;
                    }
                    else {
                        return ((byte)(this[this.tableProject.MaxViewsColumn]));
                    }
                }
                set {
                    this[this.tableProject.MaxViewsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Credits {
                get {
                    try {
                        return ((string)(this[this.tableProject.CreditsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Credits\' in table \'Project\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.CreditsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleTextNull() {
                return this.IsNull(this.tableProject.TitleTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleTextNull() {
                this[this.tableProject.TitleTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartMapNull() {
                return this.IsNull(this.tableProject.StartMapColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartMapNull() {
                this[this.tableProject.StartMapColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverlayMapNull() {
                return this.IsNull(this.tableProject.OverlayMapColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverlayMapNull() {
                this[this.tableProject.OverlayMapColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxPlayersNull() {
                return this.IsNull(this.tableProject.MaxPlayersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxPlayersNull() {
                this[this.tableProject.MaxPlayersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxViewsNull() {
                return this.IsNull(this.tableProject.MaxViewsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxViewsNull() {
                this[this.tableProject.MaxViewsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditsNull() {
                return this.IsNull(this.tableProject.CreditsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditsNull() {
                this[this.tableProject.CreditsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TileCategoryRow : global::System.Data.DataRow {
            
            private TileCategoryDataTable tableTileCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TileCategoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTileCategory = ((TileCategoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTileCategory.NameColumn]));
                }
                set {
                    this[this.tableTileCategory.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategorizedTilesetRow[] GetCategorizedTilesetRows() {
                if ((this.Table.ChildRelations["TileCategoryCategorizedTileset"] == null)) {
                    return new CategorizedTilesetRow[0];
                }
                else {
                    return ((CategorizedTilesetRow[])(base.GetChildRows(this.Table.ChildRelations["TileCategoryCategorizedTileset"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityShapeRow[] GetSolidityShapeRows() {
                if ((this.Table.ChildRelations["CategorySolidityShape"] == null)) {
                    return new SolidityShapeRow[0];
                }
                else {
                    return ((SolidityShapeRow[])(base.GetChildRows(this.Table.ChildRelations["CategorySolidityShape"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CategorizedTilesetRow : global::System.Data.DataRow {
            
            private CategorizedTilesetDataTable tableCategorizedTileset;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategorizedTilesetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategorizedTileset = ((CategorizedTilesetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tileset {
                get {
                    return ((string)(this[this.tableCategorizedTileset.TilesetColumn]));
                }
                set {
                    this[this.tableCategorizedTileset.TilesetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCategorizedTileset.NameColumn]));
                }
                set {
                    this[this.tableCategorizedTileset.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileCategoryRow TileCategoryRow {
                get {
                    return ((TileCategoryRow)(this.GetParentRow(this.Table.ParentRelations["TileCategoryCategorizedTileset"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TileCategoryCategorizedTileset"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetRow TilesetRow {
                get {
                    return ((TilesetRow)(this.GetParentRow(this.Table.ParentRelations["TilesetCategory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TilesetCategory"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryTileRow[] GetCategoryTileRows() {
                if ((this.Table.ChildRelations["CategoryCategoryTile"] == null)) {
                    return new CategoryTileRow[0];
                }
                else {
                    return ((CategoryTileRow[])(base.GetChildRows(this.Table.ChildRelations["CategoryCategoryTile"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CategoryTileRow : global::System.Data.DataRow {
            
            private CategoryTileDataTable tableCategoryTile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoryTileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategoryTile = ((CategoryTileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tileset {
                get {
                    return ((string)(this[this.tableCategoryTile.TilesetColumn]));
                }
                set {
                    this[this.tableCategoryTile.TilesetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    return ((string)(this[this.tableCategoryTile.CategoryColumn]));
                }
                set {
                    this[this.tableCategoryTile.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TileValue {
                get {
                    return ((int)(this[this.tableCategoryTile.TileValueColumn]));
                }
                set {
                    this[this.tableCategoryTile.TileValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategorizedTilesetRow CategorizedTilesetRowParent {
                get {
                    return ((CategorizedTilesetRow)(this.GetParentRow(this.Table.ParentRelations["CategoryCategoryTile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CategoryCategoryTile"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryFrameRow[] GetCategoryFrameRows() {
                if ((this.Table.ChildRelations["CategoryTileCategoryFrame"] == null)) {
                    return new CategoryFrameRow[0];
                }
                else {
                    return ((CategoryFrameRow[])(base.GetChildRows(this.Table.ChildRelations["CategoryTileCategoryFrame"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CategoryFrameRow : global::System.Data.DataRow {
            
            private CategoryFrameDataTable tableCategoryFrame;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoryFrameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategoryFrame = ((CategoryFrameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tileset {
                get {
                    return ((string)(this[this.tableCategoryFrame.TilesetColumn]));
                }
                set {
                    this[this.tableCategoryFrame.TilesetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    return ((string)(this[this.tableCategoryFrame.CategoryColumn]));
                }
                set {
                    this[this.tableCategoryFrame.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TileValue {
                get {
                    return ((int)(this[this.tableCategoryFrame.TileValueColumn]));
                }
                set {
                    this[this.tableCategoryFrame.TileValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Frame {
                get {
                    return ((short)(this[this.tableCategoryFrame.FrameColumn]));
                }
                set {
                    this[this.tableCategoryFrame.FrameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryTileRow CategoryTileRowParent {
                get {
                    return ((CategoryTileRow)(this.GetParentRow(this.Table.ParentRelations["CategoryTileCategoryFrame"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CategoryTileCategoryFrame"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GraphicSheetRowChangeEvent : global::System.EventArgs {
            
            private GraphicSheetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GraphicSheetRowChangeEvent(GraphicSheetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GraphicSheetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FramesetRowChangeEvent : global::System.EventArgs {
            
            private FramesetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FramesetRowChangeEvent(FramesetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FramesetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FrameRowChangeEvent : global::System.EventArgs {
            
            private FrameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrameRowChangeEvent(FrameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TilesetRowChangeEvent : global::System.EventArgs {
            
            private TilesetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetRowChangeEvent(TilesetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TilesetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TileRowChangeEvent : global::System.EventArgs {
            
            private TileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileRowChangeEvent(TileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TileFrameRowChangeEvent : global::System.EventArgs {
            
            private TileFrameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileFrameRowChangeEvent(TileFrameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileFrameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CounterRowChangeEvent : global::System.EventArgs {
            
            private CounterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CounterRowChangeEvent(CounterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CounterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MapRowChangeEvent : global::System.EventArgs {
            
            private MapRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRowChangeEvent(MapRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LayerRowChangeEvent : global::System.EventArgs {
            
            private LayerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRowChangeEvent(LayerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpriteRowChangeEvent : global::System.EventArgs {
            
            private SpriteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRowChangeEvent(SpriteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParameterValueRowChangeEvent : global::System.EventArgs {
            
            private ParameterValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterValueRowChangeEvent(ParameterValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParameterValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpritePlanRowChangeEvent : global::System.EventArgs {
            
            private SpritePlanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanRowChangeEvent(SpritePlanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpritePlanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoordinateRowChangeEvent : global::System.EventArgs {
            
            private CoordinateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinateRowChangeEvent(CoordinateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PlanRuleRowChangeEvent : global::System.EventArgs {
            
            private PlanRuleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanRuleRowChangeEvent(PlanRuleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanRuleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PlanParameterValueRowChangeEvent : global::System.EventArgs {
            
            private PlanParameterValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanParameterValueRowChangeEvent(PlanParameterValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlanParameterValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpriteDefinitionRowChangeEvent : global::System.EventArgs {
            
            private SpriteDefinitionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionRowChangeEvent(SpriteDefinitionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteDefinitionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpriteRuleRowChangeEvent : global::System.EventArgs {
            
            private SpriteRuleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRuleRowChangeEvent(SpriteRuleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteRuleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpriteParameterRowChangeEvent : global::System.EventArgs {
            
            private SpriteParameterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteParameterRowChangeEvent(SpriteParameterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteParameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpriteStateRowChangeEvent : global::System.EventArgs {
            
            private SpriteStateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateRowChangeEvent(SpriteStateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteStateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpriteFrameRowChangeEvent : global::System.EventArgs {
            
            private SpriteFrameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteFrameRowChangeEvent(SpriteFrameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteFrameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpriteCategoryRowChangeEvent : global::System.EventArgs {
            
            private SpriteCategoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategoryRowChangeEvent(SpriteCategoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpriteCategorySpriteRowChangeEvent : global::System.EventArgs {
            
            private SpriteCategorySpriteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategorySpriteRowChangeEvent(SpriteCategorySpriteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpriteCategorySpriteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SolidityRowChangeEvent : global::System.EventArgs {
            
            private SolidityRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityRowChangeEvent(SolidityRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SolidityShapeRowChangeEvent : global::System.EventArgs {
            
            private SolidityShapeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityShapeRowChangeEvent(SolidityShapeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SolidityShapeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SourceCodeRowChangeEvent : global::System.EventArgs {
            
            private SourceCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceCodeRowChangeEvent(SourceCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectRowChangeEvent : global::System.EventArgs {
            
            private ProjectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRowChangeEvent(ProjectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TileCategoryRowChangeEvent : global::System.EventArgs {
            
            private TileCategoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileCategoryRowChangeEvent(TileCategoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TileCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CategorizedTilesetRowChangeEvent : global::System.EventArgs {
            
            private CategorizedTilesetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategorizedTilesetRowChangeEvent(CategorizedTilesetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategorizedTilesetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CategoryTileRowChangeEvent : global::System.EventArgs {
            
            private CategoryTileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryTileRowChangeEvent(CategoryTileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryTileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CategoryFrameRowChangeEvent : global::System.EventArgs {
            
            private CategoryFrameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryFrameRowChangeEvent(CategoryFrameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryFrameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591