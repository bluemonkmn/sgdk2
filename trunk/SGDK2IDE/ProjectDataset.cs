//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SGDK2 {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ProjectDataset : DataSet {
        
        private GraphicSheetDataTable tableGraphicSheet;
        
        private FramesetDataTable tableFrameset;
        
        private FrameDataTable tableFrame;
        
        private TilesetDataTable tableTileset;
        
        private TileDataTable tableTile;
        
        private TileFrameDataTable tableTileFrame;
        
        private CounterDataTable tableCounter;
        
        private MapDataTable tableMap;
        
        private LayerDataTable tableLayer;
        
        private SpriteDataTable tableSprite;
        
        private ParameterValueDataTable tableParameterValue;
        
        private SpritePlanDataTable tableSpritePlan;
        
        private CoordinateDataTable tableCoordinate;
        
        private PlanRuleDataTable tablePlanRule;
        
        private SpriteDefinitionDataTable tableSpriteDefinition;
        
        private SpriteRuleDataTable tableSpriteRule;
        
        private SpriteParameterDataTable tableSpriteParameter;
        
        private SpriteStateDataTable tableSpriteState;
        
        private SpriteFrameDataTable tableSpriteFrame;
        
        private SpriteCategoryDataTable tableSpriteCategory;
        
        private SpriteCategorySpriteDataTable tableSpriteCategorySprite;
        
        private SolidityDataTable tableSolidity;
        
        private SolidityShapeDataTable tableSolidityShape;
        
        private SourceCodeDataTable tableSourceCode;
        
        private ProjectDataTable tableProject;
        
        private TileCategoryDataTable tableTileCategory;
        
        private CategorizedTilesetDataTable tableCategorizedTileset;
        
        private CategoryTileDataTable tableCategoryTile;
        
        private CategoryFrameDataTable tableCategoryFrame;
        
        private DataRelation relationFramesetFrame;
        
        private DataRelation relationTileTileFrame;
        
        private DataRelation relationTilesetTile;
        
        private DataRelation relationSpriteParameterValue;
        
        private DataRelation relationSpritePlanCoordinate;
        
        private DataRelation relationSpritePlanPlanRule;
        
        private DataRelation relationLayerSprite;
        
        private DataRelation relationLayerSpritePlan;
        
        private DataRelation relationMapLayer;
        
        private DataRelation relationSpriteStateFrame;
        
        private DataRelation relationSpriteDefinitionSpriteRule;
        
        private DataRelation relationSpriteDefinitionSpriteParameter;
        
        private DataRelation relationSpriteDefinitionState;
        
        private DataRelation relationSpriteCategorySpriteCategorySprite;
        
        private DataRelation relationSoliditySolidityShape;
        
        private DataRelation relationCategoryTileCategoryFrame;
        
        private DataRelation relationCategoryCategoryTile;
        
        private DataRelation relationTileCategoryCategorizedTileset;
        
        private DataRelation relationFramesetTileset;
        
        private DataRelation relationCounterTile;
        
        private DataRelation relationTilesetLayer;
        
        private DataRelation relationTilesetCategory;
        
        private DataRelation relationSpriteDefinitionSprite;
        
        private DataRelation relationSpriteParameterParameterValue;
        
        private DataRelation relationSpriteDefinitionCategory;
        
        private DataRelation relationCategorySolidityShape;
        
        private DataRelation relationFramesetSpriteState;
        
        public ProjectDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ProjectDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GraphicSheet"] != null)) {
                    this.Tables.Add(new GraphicSheetDataTable(ds.Tables["GraphicSheet"]));
                }
                if ((ds.Tables["Frameset"] != null)) {
                    this.Tables.Add(new FramesetDataTable(ds.Tables["Frameset"]));
                }
                if ((ds.Tables["Frame"] != null)) {
                    this.Tables.Add(new FrameDataTable(ds.Tables["Frame"]));
                }
                if ((ds.Tables["Tileset"] != null)) {
                    this.Tables.Add(new TilesetDataTable(ds.Tables["Tileset"]));
                }
                if ((ds.Tables["Tile"] != null)) {
                    this.Tables.Add(new TileDataTable(ds.Tables["Tile"]));
                }
                if ((ds.Tables["TileFrame"] != null)) {
                    this.Tables.Add(new TileFrameDataTable(ds.Tables["TileFrame"]));
                }
                if ((ds.Tables["Counter"] != null)) {
                    this.Tables.Add(new CounterDataTable(ds.Tables["Counter"]));
                }
                if ((ds.Tables["Map"] != null)) {
                    this.Tables.Add(new MapDataTable(ds.Tables["Map"]));
                }
                if ((ds.Tables["Layer"] != null)) {
                    this.Tables.Add(new LayerDataTable(ds.Tables["Layer"]));
                }
                if ((ds.Tables["Sprite"] != null)) {
                    this.Tables.Add(new SpriteDataTable(ds.Tables["Sprite"]));
                }
                if ((ds.Tables["ParameterValue"] != null)) {
                    this.Tables.Add(new ParameterValueDataTable(ds.Tables["ParameterValue"]));
                }
                if ((ds.Tables["SpritePlan"] != null)) {
                    this.Tables.Add(new SpritePlanDataTable(ds.Tables["SpritePlan"]));
                }
                if ((ds.Tables["Coordinate"] != null)) {
                    this.Tables.Add(new CoordinateDataTable(ds.Tables["Coordinate"]));
                }
                if ((ds.Tables["PlanRule"] != null)) {
                    this.Tables.Add(new PlanRuleDataTable(ds.Tables["PlanRule"]));
                }
                if ((ds.Tables["SpriteDefinition"] != null)) {
                    this.Tables.Add(new SpriteDefinitionDataTable(ds.Tables["SpriteDefinition"]));
                }
                if ((ds.Tables["SpriteRule"] != null)) {
                    this.Tables.Add(new SpriteRuleDataTable(ds.Tables["SpriteRule"]));
                }
                if ((ds.Tables["SpriteParameter"] != null)) {
                    this.Tables.Add(new SpriteParameterDataTable(ds.Tables["SpriteParameter"]));
                }
                if ((ds.Tables["SpriteState"] != null)) {
                    this.Tables.Add(new SpriteStateDataTable(ds.Tables["SpriteState"]));
                }
                if ((ds.Tables["SpriteFrame"] != null)) {
                    this.Tables.Add(new SpriteFrameDataTable(ds.Tables["SpriteFrame"]));
                }
                if ((ds.Tables["SpriteCategory"] != null)) {
                    this.Tables.Add(new SpriteCategoryDataTable(ds.Tables["SpriteCategory"]));
                }
                if ((ds.Tables["SpriteCategorySprite"] != null)) {
                    this.Tables.Add(new SpriteCategorySpriteDataTable(ds.Tables["SpriteCategorySprite"]));
                }
                if ((ds.Tables["Solidity"] != null)) {
                    this.Tables.Add(new SolidityDataTable(ds.Tables["Solidity"]));
                }
                if ((ds.Tables["SolidityShape"] != null)) {
                    this.Tables.Add(new SolidityShapeDataTable(ds.Tables["SolidityShape"]));
                }
                if ((ds.Tables["SourceCode"] != null)) {
                    this.Tables.Add(new SourceCodeDataTable(ds.Tables["SourceCode"]));
                }
                if ((ds.Tables["Project"] != null)) {
                    this.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                if ((ds.Tables["TileCategory"] != null)) {
                    this.Tables.Add(new TileCategoryDataTable(ds.Tables["TileCategory"]));
                }
                if ((ds.Tables["CategorizedTileset"] != null)) {
                    this.Tables.Add(new CategorizedTilesetDataTable(ds.Tables["CategorizedTileset"]));
                }
                if ((ds.Tables["CategoryTile"] != null)) {
                    this.Tables.Add(new CategoryTileDataTable(ds.Tables["CategoryTile"]));
                }
                if ((ds.Tables["CategoryFrame"] != null)) {
                    this.Tables.Add(new CategoryFrameDataTable(ds.Tables["CategoryFrame"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GraphicSheetDataTable GraphicSheet {
            get {
                return this.tableGraphicSheet;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FramesetDataTable Frameset {
            get {
                return this.tableFrameset;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FrameDataTable Frame {
            get {
                return this.tableFrame;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TilesetDataTable Tileset {
            get {
                return this.tableTileset;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TileDataTable Tile {
            get {
                return this.tableTile;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TileFrameDataTable TileFrame {
            get {
                return this.tableTileFrame;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CounterDataTable Counter {
            get {
                return this.tableCounter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MapDataTable Map {
            get {
                return this.tableMap;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LayerDataTable Layer {
            get {
                return this.tableLayer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteDataTable Sprite {
            get {
                return this.tableSprite;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParameterValueDataTable ParameterValue {
            get {
                return this.tableParameterValue;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpritePlanDataTable SpritePlan {
            get {
                return this.tableSpritePlan;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoordinateDataTable Coordinate {
            get {
                return this.tableCoordinate;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlanRuleDataTable PlanRule {
            get {
                return this.tablePlanRule;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteDefinitionDataTable SpriteDefinition {
            get {
                return this.tableSpriteDefinition;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteRuleDataTable SpriteRule {
            get {
                return this.tableSpriteRule;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteParameterDataTable SpriteParameter {
            get {
                return this.tableSpriteParameter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteStateDataTable SpriteState {
            get {
                return this.tableSpriteState;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteFrameDataTable SpriteFrame {
            get {
                return this.tableSpriteFrame;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteCategoryDataTable SpriteCategory {
            get {
                return this.tableSpriteCategory;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpriteCategorySpriteDataTable SpriteCategorySprite {
            get {
                return this.tableSpriteCategorySprite;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SolidityDataTable Solidity {
            get {
                return this.tableSolidity;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SolidityShapeDataTable SolidityShape {
            get {
                return this.tableSolidityShape;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SourceCodeDataTable SourceCode {
            get {
                return this.tableSourceCode;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectDataTable Project {
            get {
                return this.tableProject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TileCategoryDataTable TileCategory {
            get {
                return this.tableTileCategory;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategorizedTilesetDataTable CategorizedTileset {
            get {
                return this.tableCategorizedTileset;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoryTileDataTable CategoryTile {
            get {
                return this.tableCategoryTile;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoryFrameDataTable CategoryFrame {
            get {
                return this.tableCategoryFrame;
            }
        }
        
        public override DataSet Clone() {
            ProjectDataset cln = ((ProjectDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GraphicSheet"] != null)) {
                this.Tables.Add(new GraphicSheetDataTable(ds.Tables["GraphicSheet"]));
            }
            if ((ds.Tables["Frameset"] != null)) {
                this.Tables.Add(new FramesetDataTable(ds.Tables["Frameset"]));
            }
            if ((ds.Tables["Frame"] != null)) {
                this.Tables.Add(new FrameDataTable(ds.Tables["Frame"]));
            }
            if ((ds.Tables["Tileset"] != null)) {
                this.Tables.Add(new TilesetDataTable(ds.Tables["Tileset"]));
            }
            if ((ds.Tables["Tile"] != null)) {
                this.Tables.Add(new TileDataTable(ds.Tables["Tile"]));
            }
            if ((ds.Tables["TileFrame"] != null)) {
                this.Tables.Add(new TileFrameDataTable(ds.Tables["TileFrame"]));
            }
            if ((ds.Tables["Counter"] != null)) {
                this.Tables.Add(new CounterDataTable(ds.Tables["Counter"]));
            }
            if ((ds.Tables["Map"] != null)) {
                this.Tables.Add(new MapDataTable(ds.Tables["Map"]));
            }
            if ((ds.Tables["Layer"] != null)) {
                this.Tables.Add(new LayerDataTable(ds.Tables["Layer"]));
            }
            if ((ds.Tables["Sprite"] != null)) {
                this.Tables.Add(new SpriteDataTable(ds.Tables["Sprite"]));
            }
            if ((ds.Tables["ParameterValue"] != null)) {
                this.Tables.Add(new ParameterValueDataTable(ds.Tables["ParameterValue"]));
            }
            if ((ds.Tables["SpritePlan"] != null)) {
                this.Tables.Add(new SpritePlanDataTable(ds.Tables["SpritePlan"]));
            }
            if ((ds.Tables["Coordinate"] != null)) {
                this.Tables.Add(new CoordinateDataTable(ds.Tables["Coordinate"]));
            }
            if ((ds.Tables["PlanRule"] != null)) {
                this.Tables.Add(new PlanRuleDataTable(ds.Tables["PlanRule"]));
            }
            if ((ds.Tables["SpriteDefinition"] != null)) {
                this.Tables.Add(new SpriteDefinitionDataTable(ds.Tables["SpriteDefinition"]));
            }
            if ((ds.Tables["SpriteRule"] != null)) {
                this.Tables.Add(new SpriteRuleDataTable(ds.Tables["SpriteRule"]));
            }
            if ((ds.Tables["SpriteParameter"] != null)) {
                this.Tables.Add(new SpriteParameterDataTable(ds.Tables["SpriteParameter"]));
            }
            if ((ds.Tables["SpriteState"] != null)) {
                this.Tables.Add(new SpriteStateDataTable(ds.Tables["SpriteState"]));
            }
            if ((ds.Tables["SpriteFrame"] != null)) {
                this.Tables.Add(new SpriteFrameDataTable(ds.Tables["SpriteFrame"]));
            }
            if ((ds.Tables["SpriteCategory"] != null)) {
                this.Tables.Add(new SpriteCategoryDataTable(ds.Tables["SpriteCategory"]));
            }
            if ((ds.Tables["SpriteCategorySprite"] != null)) {
                this.Tables.Add(new SpriteCategorySpriteDataTable(ds.Tables["SpriteCategorySprite"]));
            }
            if ((ds.Tables["Solidity"] != null)) {
                this.Tables.Add(new SolidityDataTable(ds.Tables["Solidity"]));
            }
            if ((ds.Tables["SolidityShape"] != null)) {
                this.Tables.Add(new SolidityShapeDataTable(ds.Tables["SolidityShape"]));
            }
            if ((ds.Tables["SourceCode"] != null)) {
                this.Tables.Add(new SourceCodeDataTable(ds.Tables["SourceCode"]));
            }
            if ((ds.Tables["Project"] != null)) {
                this.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
            }
            if ((ds.Tables["TileCategory"] != null)) {
                this.Tables.Add(new TileCategoryDataTable(ds.Tables["TileCategory"]));
            }
            if ((ds.Tables["CategorizedTileset"] != null)) {
                this.Tables.Add(new CategorizedTilesetDataTable(ds.Tables["CategorizedTileset"]));
            }
            if ((ds.Tables["CategoryTile"] != null)) {
                this.Tables.Add(new CategoryTileDataTable(ds.Tables["CategoryTile"]));
            }
            if ((ds.Tables["CategoryFrame"] != null)) {
                this.Tables.Add(new CategoryFrameDataTable(ds.Tables["CategoryFrame"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGraphicSheet = ((GraphicSheetDataTable)(this.Tables["GraphicSheet"]));
            if ((this.tableGraphicSheet != null)) {
                this.tableGraphicSheet.InitVars();
            }
            this.tableFrameset = ((FramesetDataTable)(this.Tables["Frameset"]));
            if ((this.tableFrameset != null)) {
                this.tableFrameset.InitVars();
            }
            this.tableFrame = ((FrameDataTable)(this.Tables["Frame"]));
            if ((this.tableFrame != null)) {
                this.tableFrame.InitVars();
            }
            this.tableTileset = ((TilesetDataTable)(this.Tables["Tileset"]));
            if ((this.tableTileset != null)) {
                this.tableTileset.InitVars();
            }
            this.tableTile = ((TileDataTable)(this.Tables["Tile"]));
            if ((this.tableTile != null)) {
                this.tableTile.InitVars();
            }
            this.tableTileFrame = ((TileFrameDataTable)(this.Tables["TileFrame"]));
            if ((this.tableTileFrame != null)) {
                this.tableTileFrame.InitVars();
            }
            this.tableCounter = ((CounterDataTable)(this.Tables["Counter"]));
            if ((this.tableCounter != null)) {
                this.tableCounter.InitVars();
            }
            this.tableMap = ((MapDataTable)(this.Tables["Map"]));
            if ((this.tableMap != null)) {
                this.tableMap.InitVars();
            }
            this.tableLayer = ((LayerDataTable)(this.Tables["Layer"]));
            if ((this.tableLayer != null)) {
                this.tableLayer.InitVars();
            }
            this.tableSprite = ((SpriteDataTable)(this.Tables["Sprite"]));
            if ((this.tableSprite != null)) {
                this.tableSprite.InitVars();
            }
            this.tableParameterValue = ((ParameterValueDataTable)(this.Tables["ParameterValue"]));
            if ((this.tableParameterValue != null)) {
                this.tableParameterValue.InitVars();
            }
            this.tableSpritePlan = ((SpritePlanDataTable)(this.Tables["SpritePlan"]));
            if ((this.tableSpritePlan != null)) {
                this.tableSpritePlan.InitVars();
            }
            this.tableCoordinate = ((CoordinateDataTable)(this.Tables["Coordinate"]));
            if ((this.tableCoordinate != null)) {
                this.tableCoordinate.InitVars();
            }
            this.tablePlanRule = ((PlanRuleDataTable)(this.Tables["PlanRule"]));
            if ((this.tablePlanRule != null)) {
                this.tablePlanRule.InitVars();
            }
            this.tableSpriteDefinition = ((SpriteDefinitionDataTable)(this.Tables["SpriteDefinition"]));
            if ((this.tableSpriteDefinition != null)) {
                this.tableSpriteDefinition.InitVars();
            }
            this.tableSpriteRule = ((SpriteRuleDataTable)(this.Tables["SpriteRule"]));
            if ((this.tableSpriteRule != null)) {
                this.tableSpriteRule.InitVars();
            }
            this.tableSpriteParameter = ((SpriteParameterDataTable)(this.Tables["SpriteParameter"]));
            if ((this.tableSpriteParameter != null)) {
                this.tableSpriteParameter.InitVars();
            }
            this.tableSpriteState = ((SpriteStateDataTable)(this.Tables["SpriteState"]));
            if ((this.tableSpriteState != null)) {
                this.tableSpriteState.InitVars();
            }
            this.tableSpriteFrame = ((SpriteFrameDataTable)(this.Tables["SpriteFrame"]));
            if ((this.tableSpriteFrame != null)) {
                this.tableSpriteFrame.InitVars();
            }
            this.tableSpriteCategory = ((SpriteCategoryDataTable)(this.Tables["SpriteCategory"]));
            if ((this.tableSpriteCategory != null)) {
                this.tableSpriteCategory.InitVars();
            }
            this.tableSpriteCategorySprite = ((SpriteCategorySpriteDataTable)(this.Tables["SpriteCategorySprite"]));
            if ((this.tableSpriteCategorySprite != null)) {
                this.tableSpriteCategorySprite.InitVars();
            }
            this.tableSolidity = ((SolidityDataTable)(this.Tables["Solidity"]));
            if ((this.tableSolidity != null)) {
                this.tableSolidity.InitVars();
            }
            this.tableSolidityShape = ((SolidityShapeDataTable)(this.Tables["SolidityShape"]));
            if ((this.tableSolidityShape != null)) {
                this.tableSolidityShape.InitVars();
            }
            this.tableSourceCode = ((SourceCodeDataTable)(this.Tables["SourceCode"]));
            if ((this.tableSourceCode != null)) {
                this.tableSourceCode.InitVars();
            }
            this.tableProject = ((ProjectDataTable)(this.Tables["Project"]));
            if ((this.tableProject != null)) {
                this.tableProject.InitVars();
            }
            this.tableTileCategory = ((TileCategoryDataTable)(this.Tables["TileCategory"]));
            if ((this.tableTileCategory != null)) {
                this.tableTileCategory.InitVars();
            }
            this.tableCategorizedTileset = ((CategorizedTilesetDataTable)(this.Tables["CategorizedTileset"]));
            if ((this.tableCategorizedTileset != null)) {
                this.tableCategorizedTileset.InitVars();
            }
            this.tableCategoryTile = ((CategoryTileDataTable)(this.Tables["CategoryTile"]));
            if ((this.tableCategoryTile != null)) {
                this.tableCategoryTile.InitVars();
            }
            this.tableCategoryFrame = ((CategoryFrameDataTable)(this.Tables["CategoryFrame"]));
            if ((this.tableCategoryFrame != null)) {
                this.tableCategoryFrame.InitVars();
            }
            this.relationFramesetFrame = this.Relations["FramesetFrame"];
            this.relationTileTileFrame = this.Relations["TileTileFrame"];
            this.relationTilesetTile = this.Relations["TilesetTile"];
            this.relationSpriteParameterValue = this.Relations["SpriteParameterValue"];
            this.relationSpritePlanCoordinate = this.Relations["SpritePlanCoordinate"];
            this.relationSpritePlanPlanRule = this.Relations["SpritePlanPlanRule"];
            this.relationLayerSprite = this.Relations["LayerSprite"];
            this.relationLayerSpritePlan = this.Relations["LayerSpritePlan"];
            this.relationMapLayer = this.Relations["MapLayer"];
            this.relationSpriteStateFrame = this.Relations["SpriteStateFrame"];
            this.relationSpriteDefinitionSpriteRule = this.Relations["SpriteDefinitionSpriteRule"];
            this.relationSpriteDefinitionSpriteParameter = this.Relations["SpriteDefinitionSpriteParameter"];
            this.relationSpriteDefinitionState = this.Relations["SpriteDefinitionState"];
            this.relationSpriteCategorySpriteCategorySprite = this.Relations["SpriteCategorySpriteCategorySprite"];
            this.relationSoliditySolidityShape = this.Relations["SoliditySolidityShape"];
            this.relationCategoryTileCategoryFrame = this.Relations["CategoryTileCategoryFrame"];
            this.relationCategoryCategoryTile = this.Relations["CategoryCategoryTile"];
            this.relationTileCategoryCategorizedTileset = this.Relations["TileCategoryCategorizedTileset"];
            this.relationFramesetTileset = this.Relations["FramesetTileset"];
            this.relationCounterTile = this.Relations["CounterTile"];
            this.relationTilesetLayer = this.Relations["TilesetLayer"];
            this.relationTilesetCategory = this.Relations["TilesetCategory"];
            this.relationSpriteDefinitionSprite = this.Relations["SpriteDefinitionSprite"];
            this.relationSpriteParameterParameterValue = this.Relations["SpriteParameterParameterValue"];
            this.relationSpriteDefinitionCategory = this.Relations["SpriteDefinitionCategory"];
            this.relationCategorySolidityShape = this.Relations["CategorySolidityShape"];
            this.relationFramesetSpriteState = this.Relations["FramesetSpriteState"];
        }
        
        private void InitClass() {
            this.DataSetName = "ProjectDataset";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGraphicSheet = new GraphicSheetDataTable();
            this.Tables.Add(this.tableGraphicSheet);
            this.tableFrameset = new FramesetDataTable();
            this.Tables.Add(this.tableFrameset);
            this.tableFrame = new FrameDataTable();
            this.Tables.Add(this.tableFrame);
            this.tableTileset = new TilesetDataTable();
            this.Tables.Add(this.tableTileset);
            this.tableTile = new TileDataTable();
            this.Tables.Add(this.tableTile);
            this.tableTileFrame = new TileFrameDataTable();
            this.Tables.Add(this.tableTileFrame);
            this.tableCounter = new CounterDataTable();
            this.Tables.Add(this.tableCounter);
            this.tableMap = new MapDataTable();
            this.Tables.Add(this.tableMap);
            this.tableLayer = new LayerDataTable();
            this.Tables.Add(this.tableLayer);
            this.tableSprite = new SpriteDataTable();
            this.Tables.Add(this.tableSprite);
            this.tableParameterValue = new ParameterValueDataTable();
            this.Tables.Add(this.tableParameterValue);
            this.tableSpritePlan = new SpritePlanDataTable();
            this.Tables.Add(this.tableSpritePlan);
            this.tableCoordinate = new CoordinateDataTable();
            this.Tables.Add(this.tableCoordinate);
            this.tablePlanRule = new PlanRuleDataTable();
            this.Tables.Add(this.tablePlanRule);
            this.tableSpriteDefinition = new SpriteDefinitionDataTable();
            this.Tables.Add(this.tableSpriteDefinition);
            this.tableSpriteRule = new SpriteRuleDataTable();
            this.Tables.Add(this.tableSpriteRule);
            this.tableSpriteParameter = new SpriteParameterDataTable();
            this.Tables.Add(this.tableSpriteParameter);
            this.tableSpriteState = new SpriteStateDataTable();
            this.Tables.Add(this.tableSpriteState);
            this.tableSpriteFrame = new SpriteFrameDataTable();
            this.Tables.Add(this.tableSpriteFrame);
            this.tableSpriteCategory = new SpriteCategoryDataTable();
            this.Tables.Add(this.tableSpriteCategory);
            this.tableSpriteCategorySprite = new SpriteCategorySpriteDataTable();
            this.Tables.Add(this.tableSpriteCategorySprite);
            this.tableSolidity = new SolidityDataTable();
            this.Tables.Add(this.tableSolidity);
            this.tableSolidityShape = new SolidityShapeDataTable();
            this.Tables.Add(this.tableSolidityShape);
            this.tableSourceCode = new SourceCodeDataTable();
            this.Tables.Add(this.tableSourceCode);
            this.tableProject = new ProjectDataTable();
            this.Tables.Add(this.tableProject);
            this.tableTileCategory = new TileCategoryDataTable();
            this.Tables.Add(this.tableTileCategory);
            this.tableCategorizedTileset = new CategorizedTilesetDataTable();
            this.Tables.Add(this.tableCategorizedTileset);
            this.tableCategoryTile = new CategoryTileDataTable();
            this.Tables.Add(this.tableCategoryTile);
            this.tableCategoryFrame = new CategoryFrameDataTable();
            this.Tables.Add(this.tableCategoryFrame);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("FramesetFrame", new DataColumn[] {
                        this.tableFrameset.NameColumn}, new DataColumn[] {
                        this.tableFrame.NameColumn});
            this.tableFrame.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("GraphicSheetFrame", new DataColumn[] {
                        this.tableGraphicSheet.NameColumn}, new DataColumn[] {
                        this.tableFrame.GraphicSheetColumn});
            this.tableFrame.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FramesetTileset", new DataColumn[] {
                        this.tableFrameset.NameColumn}, new DataColumn[] {
                        this.tableTileset.FramesetColumn});
            this.tableTileset.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TilesetTile", new DataColumn[] {
                        this.tableTileset.NameColumn}, new DataColumn[] {
                        this.tableTile.NameColumn});
            this.tableTile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CounterTile", new DataColumn[] {
                        this.tableCounter.NameColumn}, new DataColumn[] {
                        this.tableTile.CounterColumn});
            this.tableTile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.SetNull;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TileTileFrame", new DataColumn[] {
                        this.tableTile.NameColumn,
                        this.tableTile.TileValueColumn}, new DataColumn[] {
                        this.tableTileFrame.NameColumn,
                        this.tableTileFrame.TileValueColumn});
            this.tableTileFrame.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("MapLayer", new DataColumn[] {
                        this.tableMap.NameColumn}, new DataColumn[] {
                        this.tableLayer.MapNameColumn});
            this.tableLayer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TilesetLayer", new DataColumn[] {
                        this.tableTileset.NameColumn}, new DataColumn[] {
                        this.tableLayer.TilesetColumn});
            this.tableLayer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.SetNull;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("LayerSprite", new DataColumn[] {
                        this.tableLayer.MapNameColumn,
                        this.tableLayer.NameColumn}, new DataColumn[] {
                        this.tableSprite.MapNameColumn,
                        this.tableSprite.LayerNameColumn});
            this.tableSprite.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpriteDefinitionSprite", new DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn,
                        this.tableSpriteState.NameColumn}, new DataColumn[] {
                        this.tableSprite.DefinitionNameColumn,
                        this.tableSprite.StateNameColumn});
            this.tableSprite.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpriteParameterValue", new DataColumn[] {
                        this.tableSprite.DefinitionNameColumn,
                        this.tableSprite.LayerNameColumn,
                        this.tableSprite.NameColumn,
                        this.tableSprite.MapNameColumn}, new DataColumn[] {
                        this.tableParameterValue.DefinitionNameColumn,
                        this.tableParameterValue.LayerNameColumn,
                        this.tableParameterValue.SpriteNameColumn,
                        this.tableParameterValue.MapNameColumn});
            this.tableParameterValue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpriteParameterParameterValue", new DataColumn[] {
                        this.tableSpriteParameter.DefinitionNameColumn,
                        this.tableSpriteParameter.NameColumn}, new DataColumn[] {
                        this.tableParameterValue.DefinitionNameColumn,
                        this.tableParameterValue.ParameterNameColumn});
            this.tableParameterValue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("LayerSpritePlan", new DataColumn[] {
                        this.tableLayer.MapNameColumn,
                        this.tableLayer.NameColumn}, new DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn});
            this.tableSpritePlan.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpritePlanCoordinate", new DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn,
                        this.tableSpritePlan.NameColumn}, new DataColumn[] {
                        this.tableCoordinate.MapNameColumn,
                        this.tableCoordinate.LayerNameColumn,
                        this.tableCoordinate.PlanNameColumn});
            this.tableCoordinate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpritePlanPlanRule", new DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn,
                        this.tableSpritePlan.NameColumn}, new DataColumn[] {
                        this.tablePlanRule.MapNameColumn,
                        this.tablePlanRule.LayerNameColumn,
                        this.tablePlanRule.PlanNameColumn});
            this.tablePlanRule.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpriteDefinitionSpriteRule", new DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new DataColumn[] {
                        this.tableSpriteRule.DefinitionNameColumn});
            this.tableSpriteRule.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpriteDefinitionSpriteParameter", new DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new DataColumn[] {
                        this.tableSpriteParameter.DefinitionNameColumn});
            this.tableSpriteParameter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpriteDefinitionState", new DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn});
            this.tableSpriteState.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FramesetSpriteState", new DataColumn[] {
                        this.tableFrameset.NameColumn}, new DataColumn[] {
                        this.tableSpriteState.FramesetNameColumn});
            this.tableSpriteState.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpriteStateFrame", new DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn,
                        this.tableSpriteState.NameColumn}, new DataColumn[] {
                        this.tableSpriteFrame.DefinitionNameColumn,
                        this.tableSpriteFrame.StateNameColumn});
            this.tableSpriteFrame.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpriteCategorySpriteCategorySprite", new DataColumn[] {
                        this.tableSpriteCategory.NameColumn}, new DataColumn[] {
                        this.tableSpriteCategorySprite.CategoryNameColumn});
            this.tableSpriteCategorySprite.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SpriteDefinitionCategory", new DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new DataColumn[] {
                        this.tableSpriteCategorySprite.DefinitionNameColumn});
            this.tableSpriteCategorySprite.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SoliditySolidityShape", new DataColumn[] {
                        this.tableSolidity.NameColumn}, new DataColumn[] {
                        this.tableSolidityShape.SolidityNameColumn});
            this.tableSolidityShape.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CategorySolidityShape", new DataColumn[] {
                        this.tableTileCategory.NameColumn}, new DataColumn[] {
                        this.tableSolidityShape.CategoryNameColumn});
            this.tableSolidityShape.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("MapProject", new DataColumn[] {
                        this.tableMap.NameColumn}, new DataColumn[] {
                        this.tableProject.StartMapColumn});
            this.tableProject.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.SetNull;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TileCategoryCategorizedTileset", new DataColumn[] {
                        this.tableTileCategory.NameColumn}, new DataColumn[] {
                        this.tableCategorizedTileset.NameColumn});
            this.tableCategorizedTileset.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TilesetCategory", new DataColumn[] {
                        this.tableTileset.NameColumn}, new DataColumn[] {
                        this.tableCategorizedTileset.TilesetColumn});
            this.tableCategorizedTileset.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CategoryCategoryTile", new DataColumn[] {
                        this.tableCategorizedTileset.TilesetColumn,
                        this.tableCategorizedTileset.NameColumn}, new DataColumn[] {
                        this.tableCategoryTile.TilesetColumn,
                        this.tableCategoryTile.CategoryColumn});
            this.tableCategoryTile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CategoryTileCategoryFrame", new DataColumn[] {
                        this.tableCategoryTile.TilesetColumn,
                        this.tableCategoryTile.CategoryColumn,
                        this.tableCategoryTile.TileValueColumn}, new DataColumn[] {
                        this.tableCategoryFrame.TilesetColumn,
                        this.tableCategoryFrame.CategoryColumn,
                        this.tableCategoryFrame.TileValueColumn});
            this.tableCategoryFrame.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFramesetFrame = new DataRelation("FramesetFrame", new DataColumn[] {
                        this.tableFrameset.NameColumn}, new DataColumn[] {
                        this.tableFrame.NameColumn}, false);
            this.relationFramesetFrame.Nested = true;
            this.Relations.Add(this.relationFramesetFrame);
            this.relationTileTileFrame = new DataRelation("TileTileFrame", new DataColumn[] {
                        this.tableTile.NameColumn,
                        this.tableTile.TileValueColumn}, new DataColumn[] {
                        this.tableTileFrame.NameColumn,
                        this.tableTileFrame.TileValueColumn}, false);
            this.relationTileTileFrame.Nested = true;
            this.Relations.Add(this.relationTileTileFrame);
            this.relationTilesetTile = new DataRelation("TilesetTile", new DataColumn[] {
                        this.tableTileset.NameColumn}, new DataColumn[] {
                        this.tableTile.NameColumn}, false);
            this.relationTilesetTile.Nested = true;
            this.Relations.Add(this.relationTilesetTile);
            this.relationSpriteParameterValue = new DataRelation("SpriteParameterValue", new DataColumn[] {
                        this.tableSprite.DefinitionNameColumn,
                        this.tableSprite.LayerNameColumn,
                        this.tableSprite.NameColumn,
                        this.tableSprite.MapNameColumn}, new DataColumn[] {
                        this.tableParameterValue.DefinitionNameColumn,
                        this.tableParameterValue.LayerNameColumn,
                        this.tableParameterValue.SpriteNameColumn,
                        this.tableParameterValue.MapNameColumn}, false);
            this.relationSpriteParameterValue.Nested = true;
            this.Relations.Add(this.relationSpriteParameterValue);
            this.relationSpritePlanCoordinate = new DataRelation("SpritePlanCoordinate", new DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn,
                        this.tableSpritePlan.NameColumn}, new DataColumn[] {
                        this.tableCoordinate.MapNameColumn,
                        this.tableCoordinate.LayerNameColumn,
                        this.tableCoordinate.PlanNameColumn}, false);
            this.relationSpritePlanCoordinate.Nested = true;
            this.Relations.Add(this.relationSpritePlanCoordinate);
            this.relationSpritePlanPlanRule = new DataRelation("SpritePlanPlanRule", new DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn,
                        this.tableSpritePlan.NameColumn}, new DataColumn[] {
                        this.tablePlanRule.MapNameColumn,
                        this.tablePlanRule.LayerNameColumn,
                        this.tablePlanRule.PlanNameColumn}, false);
            this.relationSpritePlanPlanRule.Nested = true;
            this.Relations.Add(this.relationSpritePlanPlanRule);
            this.relationLayerSprite = new DataRelation("LayerSprite", new DataColumn[] {
                        this.tableLayer.MapNameColumn,
                        this.tableLayer.NameColumn}, new DataColumn[] {
                        this.tableSprite.MapNameColumn,
                        this.tableSprite.LayerNameColumn}, false);
            this.relationLayerSprite.Nested = true;
            this.Relations.Add(this.relationLayerSprite);
            this.relationLayerSpritePlan = new DataRelation("LayerSpritePlan", new DataColumn[] {
                        this.tableLayer.MapNameColumn,
                        this.tableLayer.NameColumn}, new DataColumn[] {
                        this.tableSpritePlan.MapNameColumn,
                        this.tableSpritePlan.LayerNameColumn}, false);
            this.relationLayerSpritePlan.Nested = true;
            this.Relations.Add(this.relationLayerSpritePlan);
            this.relationMapLayer = new DataRelation("MapLayer", new DataColumn[] {
                        this.tableMap.NameColumn}, new DataColumn[] {
                        this.tableLayer.MapNameColumn}, false);
            this.relationMapLayer.Nested = true;
            this.Relations.Add(this.relationMapLayer);
            this.relationSpriteStateFrame = new DataRelation("SpriteStateFrame", new DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn,
                        this.tableSpriteState.NameColumn}, new DataColumn[] {
                        this.tableSpriteFrame.DefinitionNameColumn,
                        this.tableSpriteFrame.StateNameColumn}, false);
            this.relationSpriteStateFrame.Nested = true;
            this.Relations.Add(this.relationSpriteStateFrame);
            this.relationSpriteDefinitionSpriteRule = new DataRelation("SpriteDefinitionSpriteRule", new DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new DataColumn[] {
                        this.tableSpriteRule.DefinitionNameColumn}, false);
            this.relationSpriteDefinitionSpriteRule.Nested = true;
            this.Relations.Add(this.relationSpriteDefinitionSpriteRule);
            this.relationSpriteDefinitionSpriteParameter = new DataRelation("SpriteDefinitionSpriteParameter", new DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new DataColumn[] {
                        this.tableSpriteParameter.DefinitionNameColumn}, false);
            this.relationSpriteDefinitionSpriteParameter.Nested = true;
            this.Relations.Add(this.relationSpriteDefinitionSpriteParameter);
            this.relationSpriteDefinitionState = new DataRelation("SpriteDefinitionState", new DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn}, false);
            this.relationSpriteDefinitionState.Nested = true;
            this.Relations.Add(this.relationSpriteDefinitionState);
            this.relationSpriteCategorySpriteCategorySprite = new DataRelation("SpriteCategorySpriteCategorySprite", new DataColumn[] {
                        this.tableSpriteCategory.NameColumn}, new DataColumn[] {
                        this.tableSpriteCategorySprite.CategoryNameColumn}, false);
            this.relationSpriteCategorySpriteCategorySprite.Nested = true;
            this.Relations.Add(this.relationSpriteCategorySpriteCategorySprite);
            this.relationSoliditySolidityShape = new DataRelation("SoliditySolidityShape", new DataColumn[] {
                        this.tableSolidity.NameColumn}, new DataColumn[] {
                        this.tableSolidityShape.SolidityNameColumn}, false);
            this.relationSoliditySolidityShape.Nested = true;
            this.Relations.Add(this.relationSoliditySolidityShape);
            this.relationCategoryTileCategoryFrame = new DataRelation("CategoryTileCategoryFrame", new DataColumn[] {
                        this.tableCategoryTile.TilesetColumn,
                        this.tableCategoryTile.CategoryColumn,
                        this.tableCategoryTile.TileValueColumn}, new DataColumn[] {
                        this.tableCategoryFrame.TilesetColumn,
                        this.tableCategoryFrame.CategoryColumn,
                        this.tableCategoryFrame.TileValueColumn}, false);
            this.relationCategoryTileCategoryFrame.Nested = true;
            this.Relations.Add(this.relationCategoryTileCategoryFrame);
            this.relationCategoryCategoryTile = new DataRelation("CategoryCategoryTile", new DataColumn[] {
                        this.tableCategorizedTileset.TilesetColumn,
                        this.tableCategorizedTileset.NameColumn}, new DataColumn[] {
                        this.tableCategoryTile.TilesetColumn,
                        this.tableCategoryTile.CategoryColumn}, false);
            this.relationCategoryCategoryTile.Nested = true;
            this.Relations.Add(this.relationCategoryCategoryTile);
            this.relationTileCategoryCategorizedTileset = new DataRelation("TileCategoryCategorizedTileset", new DataColumn[] {
                        this.tableTileCategory.NameColumn}, new DataColumn[] {
                        this.tableCategorizedTileset.NameColumn}, false);
            this.relationTileCategoryCategorizedTileset.Nested = true;
            this.Relations.Add(this.relationTileCategoryCategorizedTileset);
            this.relationFramesetTileset = new DataRelation("FramesetTileset", new DataColumn[] {
                        this.tableFrameset.NameColumn}, new DataColumn[] {
                        this.tableTileset.FramesetColumn}, false);
            this.Relations.Add(this.relationFramesetTileset);
            this.relationCounterTile = new DataRelation("CounterTile", new DataColumn[] {
                        this.tableCounter.NameColumn}, new DataColumn[] {
                        this.tableTile.CounterColumn}, false);
            this.Relations.Add(this.relationCounterTile);
            this.relationTilesetLayer = new DataRelation("TilesetLayer", new DataColumn[] {
                        this.tableTileset.NameColumn}, new DataColumn[] {
                        this.tableLayer.TilesetColumn}, false);
            this.Relations.Add(this.relationTilesetLayer);
            this.relationTilesetCategory = new DataRelation("TilesetCategory", new DataColumn[] {
                        this.tableTileset.NameColumn}, new DataColumn[] {
                        this.tableCategorizedTileset.TilesetColumn}, false);
            this.Relations.Add(this.relationTilesetCategory);
            this.relationSpriteDefinitionSprite = new DataRelation("SpriteDefinitionSprite", new DataColumn[] {
                        this.tableSpriteState.DefinitionNameColumn,
                        this.tableSpriteState.NameColumn}, new DataColumn[] {
                        this.tableSprite.DefinitionNameColumn,
                        this.tableSprite.StateNameColumn}, false);
            this.Relations.Add(this.relationSpriteDefinitionSprite);
            this.relationSpriteParameterParameterValue = new DataRelation("SpriteParameterParameterValue", new DataColumn[] {
                        this.tableSpriteParameter.DefinitionNameColumn,
                        this.tableSpriteParameter.NameColumn}, new DataColumn[] {
                        this.tableParameterValue.DefinitionNameColumn,
                        this.tableParameterValue.ParameterNameColumn}, false);
            this.Relations.Add(this.relationSpriteParameterParameterValue);
            this.relationSpriteDefinitionCategory = new DataRelation("SpriteDefinitionCategory", new DataColumn[] {
                        this.tableSpriteDefinition.NameColumn}, new DataColumn[] {
                        this.tableSpriteCategorySprite.DefinitionNameColumn}, false);
            this.Relations.Add(this.relationSpriteDefinitionCategory);
            this.relationCategorySolidityShape = new DataRelation("CategorySolidityShape", new DataColumn[] {
                        this.tableTileCategory.NameColumn}, new DataColumn[] {
                        this.tableSolidityShape.CategoryNameColumn}, false);
            this.Relations.Add(this.relationCategorySolidityShape);
            this.relationFramesetSpriteState = new DataRelation("FramesetSpriteState", new DataColumn[] {
                        this.tableFrameset.NameColumn}, new DataColumn[] {
                        this.tableSpriteState.FramesetNameColumn}, false);
            this.Relations.Add(this.relationFramesetSpriteState);
        }
        
        private bool ShouldSerializeGraphicSheet() {
            return false;
        }
        
        private bool ShouldSerializeFrameset() {
            return false;
        }
        
        private bool ShouldSerializeFrame() {
            return false;
        }
        
        private bool ShouldSerializeTileset() {
            return false;
        }
        
        private bool ShouldSerializeTile() {
            return false;
        }
        
        private bool ShouldSerializeTileFrame() {
            return false;
        }
        
        private bool ShouldSerializeCounter() {
            return false;
        }
        
        private bool ShouldSerializeMap() {
            return false;
        }
        
        private bool ShouldSerializeLayer() {
            return false;
        }
        
        private bool ShouldSerializeSprite() {
            return false;
        }
        
        private bool ShouldSerializeParameterValue() {
            return false;
        }
        
        private bool ShouldSerializeSpritePlan() {
            return false;
        }
        
        private bool ShouldSerializeCoordinate() {
            return false;
        }
        
        private bool ShouldSerializePlanRule() {
            return false;
        }
        
        private bool ShouldSerializeSpriteDefinition() {
            return false;
        }
        
        private bool ShouldSerializeSpriteRule() {
            return false;
        }
        
        private bool ShouldSerializeSpriteParameter() {
            return false;
        }
        
        private bool ShouldSerializeSpriteState() {
            return false;
        }
        
        private bool ShouldSerializeSpriteFrame() {
            return false;
        }
        
        private bool ShouldSerializeSpriteCategory() {
            return false;
        }
        
        private bool ShouldSerializeSpriteCategorySprite() {
            return false;
        }
        
        private bool ShouldSerializeSolidity() {
            return false;
        }
        
        private bool ShouldSerializeSolidityShape() {
            return false;
        }
        
        private bool ShouldSerializeSourceCode() {
            return false;
        }
        
        private bool ShouldSerializeProject() {
            return false;
        }
        
        private bool ShouldSerializeTileCategory() {
            return false;
        }
        
        private bool ShouldSerializeCategorizedTileset() {
            return false;
        }
        
        private bool ShouldSerializeCategoryTile() {
            return false;
        }
        
        private bool ShouldSerializeCategoryFrame() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GraphicSheetRowChangeEventHandler(object sender, GraphicSheetRowChangeEvent e);
        
        public delegate void FramesetRowChangeEventHandler(object sender, FramesetRowChangeEvent e);
        
        public delegate void FrameRowChangeEventHandler(object sender, FrameRowChangeEvent e);
        
        public delegate void TilesetRowChangeEventHandler(object sender, TilesetRowChangeEvent e);
        
        public delegate void TileRowChangeEventHandler(object sender, TileRowChangeEvent e);
        
        public delegate void TileFrameRowChangeEventHandler(object sender, TileFrameRowChangeEvent e);
        
        public delegate void CounterRowChangeEventHandler(object sender, CounterRowChangeEvent e);
        
        public delegate void MapRowChangeEventHandler(object sender, MapRowChangeEvent e);
        
        public delegate void LayerRowChangeEventHandler(object sender, LayerRowChangeEvent e);
        
        public delegate void SpriteRowChangeEventHandler(object sender, SpriteRowChangeEvent e);
        
        public delegate void ParameterValueRowChangeEventHandler(object sender, ParameterValueRowChangeEvent e);
        
        public delegate void SpritePlanRowChangeEventHandler(object sender, SpritePlanRowChangeEvent e);
        
        public delegate void CoordinateRowChangeEventHandler(object sender, CoordinateRowChangeEvent e);
        
        public delegate void PlanRuleRowChangeEventHandler(object sender, PlanRuleRowChangeEvent e);
        
        public delegate void SpriteDefinitionRowChangeEventHandler(object sender, SpriteDefinitionRowChangeEvent e);
        
        public delegate void SpriteRuleRowChangeEventHandler(object sender, SpriteRuleRowChangeEvent e);
        
        public delegate void SpriteParameterRowChangeEventHandler(object sender, SpriteParameterRowChangeEvent e);
        
        public delegate void SpriteStateRowChangeEventHandler(object sender, SpriteStateRowChangeEvent e);
        
        public delegate void SpriteFrameRowChangeEventHandler(object sender, SpriteFrameRowChangeEvent e);
        
        public delegate void SpriteCategoryRowChangeEventHandler(object sender, SpriteCategoryRowChangeEvent e);
        
        public delegate void SpriteCategorySpriteRowChangeEventHandler(object sender, SpriteCategorySpriteRowChangeEvent e);
        
        public delegate void SolidityRowChangeEventHandler(object sender, SolidityRowChangeEvent e);
        
        public delegate void SolidityShapeRowChangeEventHandler(object sender, SolidityShapeRowChangeEvent e);
        
        public delegate void SourceCodeRowChangeEventHandler(object sender, SourceCodeRowChangeEvent e);
        
        public delegate void ProjectRowChangeEventHandler(object sender, ProjectRowChangeEvent e);
        
        public delegate void TileCategoryRowChangeEventHandler(object sender, TileCategoryRowChangeEvent e);
        
        public delegate void CategorizedTilesetRowChangeEventHandler(object sender, CategorizedTilesetRowChangeEvent e);
        
        public delegate void CategoryTileRowChangeEventHandler(object sender, CategoryTileRowChangeEvent e);
        
        public delegate void CategoryFrameRowChangeEventHandler(object sender, CategoryFrameRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GraphicSheetDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnColumns;
            
            private DataColumn columnRows;
            
            private DataColumn columnCellWidth;
            
            private DataColumn columnCellHeight;
            
            private DataColumn columnImage;
            
            internal GraphicSheetDataTable() : 
                    base("GraphicSheet") {
                this.InitClass();
            }
            
            internal GraphicSheetDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ColumnsColumn {
                get {
                    return this.columnColumns;
                }
            }
            
            internal DataColumn RowsColumn {
                get {
                    return this.columnRows;
                }
            }
            
            internal DataColumn CellWidthColumn {
                get {
                    return this.columnCellWidth;
                }
            }
            
            internal DataColumn CellHeightColumn {
                get {
                    return this.columnCellHeight;
                }
            }
            
            internal DataColumn ImageColumn {
                get {
                    return this.columnImage;
                }
            }
            
            public GraphicSheetRow this[int index] {
                get {
                    return ((GraphicSheetRow)(this.Rows[index]));
                }
            }
            
            public event GraphicSheetRowChangeEventHandler GraphicSheetRowChanged;
            
            public event GraphicSheetRowChangeEventHandler GraphicSheetRowChanging;
            
            public event GraphicSheetRowChangeEventHandler GraphicSheetRowDeleted;
            
            public event GraphicSheetRowChangeEventHandler GraphicSheetRowDeleting;
            
            public void AddGraphicSheetRow(GraphicSheetRow row) {
                this.Rows.Add(row);
            }
            
            public GraphicSheetRow AddGraphicSheetRow(string Name, short Columns, short Rows, short CellWidth, short CellHeight, System.Byte[] Image) {
                GraphicSheetRow rowGraphicSheetRow = ((GraphicSheetRow)(this.NewRow()));
                rowGraphicSheetRow.ItemArray = new object[] {
                        Name,
                        Columns,
                        Rows,
                        CellWidth,
                        CellHeight,
                        Image};
                this.Rows.Add(rowGraphicSheetRow);
                return rowGraphicSheetRow;
            }
            
            public GraphicSheetRow FindByName(string Name) {
                return ((GraphicSheetRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GraphicSheetDataTable cln = ((GraphicSheetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GraphicSheetDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnColumns = this.Columns["Columns"];
                this.columnRows = this.Columns["Rows"];
                this.columnCellWidth = this.Columns["CellWidth"];
                this.columnCellHeight = this.Columns["CellHeight"];
                this.columnImage = this.Columns["Image"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnColumns = new DataColumn("Columns", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnColumns);
                this.columnRows = new DataColumn("Rows", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRows);
                this.columnCellWidth = new DataColumn("CellWidth", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCellWidth);
                this.columnCellHeight = new DataColumn("CellHeight", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCellHeight);
                this.columnImage = new DataColumn("Image", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnImage);
                this.Constraints.Add(new UniqueConstraint("GraphicSheetKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnColumns.Namespace = "";
                this.columnColumns.DefaultValue = 16;
                this.columnRows.Namespace = "";
                this.columnRows.DefaultValue = 8;
                this.columnCellWidth.Namespace = "";
                this.columnCellWidth.Caption = "Cell Width";
                this.columnCellWidth.DefaultValue = 32;
                this.columnCellHeight.Namespace = "";
                this.columnCellHeight.Caption = "Cell Height";
                this.columnCellHeight.DefaultValue = 32;
            }
            
            public GraphicSheetRow NewGraphicSheetRow() {
                return ((GraphicSheetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GraphicSheetRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GraphicSheetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GraphicSheetRowChanged != null)) {
                    this.GraphicSheetRowChanged(this, new GraphicSheetRowChangeEvent(((GraphicSheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GraphicSheetRowChanging != null)) {
                    this.GraphicSheetRowChanging(this, new GraphicSheetRowChangeEvent(((GraphicSheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GraphicSheetRowDeleted != null)) {
                    this.GraphicSheetRowDeleted(this, new GraphicSheetRowChangeEvent(((GraphicSheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GraphicSheetRowDeleting != null)) {
                    this.GraphicSheetRowDeleting(this, new GraphicSheetRowChangeEvent(((GraphicSheetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGraphicSheetRow(GraphicSheetRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GraphicSheetRow : DataRow {
            
            private GraphicSheetDataTable tableGraphicSheet;
            
            internal GraphicSheetRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGraphicSheet = ((GraphicSheetDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableGraphicSheet.NameColumn]));
                }
                set {
                    this[this.tableGraphicSheet.NameColumn] = value;
                }
            }
            
            public short Columns {
                get {
                    try {
                        return ((short)(this[this.tableGraphicSheet.ColumnsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGraphicSheet.ColumnsColumn] = value;
                }
            }
            
            public short Rows {
                get {
                    try {
                        return ((short)(this[this.tableGraphicSheet.RowsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGraphicSheet.RowsColumn] = value;
                }
            }
            
            public short CellWidth {
                get {
                    try {
                        return ((short)(this[this.tableGraphicSheet.CellWidthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGraphicSheet.CellWidthColumn] = value;
                }
            }
            
            public short CellHeight {
                get {
                    try {
                        return ((short)(this[this.tableGraphicSheet.CellHeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGraphicSheet.CellHeightColumn] = value;
                }
            }
            
            public System.Byte[] Image {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableGraphicSheet.ImageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGraphicSheet.ImageColumn] = value;
                }
            }
            
            public bool IsColumnsNull() {
                return this.IsNull(this.tableGraphicSheet.ColumnsColumn);
            }
            
            public void SetColumnsNull() {
                this[this.tableGraphicSheet.ColumnsColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowsNull() {
                return this.IsNull(this.tableGraphicSheet.RowsColumn);
            }
            
            public void SetRowsNull() {
                this[this.tableGraphicSheet.RowsColumn] = System.Convert.DBNull;
            }
            
            public bool IsCellWidthNull() {
                return this.IsNull(this.tableGraphicSheet.CellWidthColumn);
            }
            
            public void SetCellWidthNull() {
                this[this.tableGraphicSheet.CellWidthColumn] = System.Convert.DBNull;
            }
            
            public bool IsCellHeightNull() {
                return this.IsNull(this.tableGraphicSheet.CellHeightColumn);
            }
            
            public void SetCellHeightNull() {
                this[this.tableGraphicSheet.CellHeightColumn] = System.Convert.DBNull;
            }
            
            public bool IsImageNull() {
                return this.IsNull(this.tableGraphicSheet.ImageColumn);
            }
            
            public void SetImageNull() {
                this[this.tableGraphicSheet.ImageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GraphicSheetRowChangeEvent : EventArgs {
            
            private GraphicSheetRow eventRow;
            
            private DataRowAction eventAction;
            
            public GraphicSheetRowChangeEvent(GraphicSheetRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GraphicSheetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FramesetDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            internal FramesetDataTable() : 
                    base("Frameset") {
                this.InitClass();
            }
            
            internal FramesetDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public FramesetRow this[int index] {
                get {
                    return ((FramesetRow)(this.Rows[index]));
                }
            }
            
            public event FramesetRowChangeEventHandler FramesetRowChanged;
            
            public event FramesetRowChangeEventHandler FramesetRowChanging;
            
            public event FramesetRowChangeEventHandler FramesetRowDeleted;
            
            public event FramesetRowChangeEventHandler FramesetRowDeleting;
            
            public void AddFramesetRow(FramesetRow row) {
                this.Rows.Add(row);
            }
            
            public FramesetRow AddFramesetRow(string Name) {
                FramesetRow rowFramesetRow = ((FramesetRow)(this.NewRow()));
                rowFramesetRow.ItemArray = new object[] {
                        Name};
                this.Rows.Add(rowFramesetRow);
                return rowFramesetRow;
            }
            
            public FramesetRow FindByName(string Name) {
                return ((FramesetRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FramesetDataTable cln = ((FramesetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FramesetDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("FramesetKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
            }
            
            public FramesetRow NewFramesetRow() {
                return ((FramesetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FramesetRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FramesetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FramesetRowChanged != null)) {
                    this.FramesetRowChanged(this, new FramesetRowChangeEvent(((FramesetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FramesetRowChanging != null)) {
                    this.FramesetRowChanging(this, new FramesetRowChangeEvent(((FramesetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FramesetRowDeleted != null)) {
                    this.FramesetRowDeleted(this, new FramesetRowChangeEvent(((FramesetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FramesetRowDeleting != null)) {
                    this.FramesetRowDeleting(this, new FramesetRowChangeEvent(((FramesetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFramesetRow(FramesetRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FramesetRow : DataRow {
            
            private FramesetDataTable tableFrameset;
            
            internal FramesetRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFrameset = ((FramesetDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableFrameset.NameColumn]));
                }
                set {
                    this[this.tableFrameset.NameColumn] = value;
                }
            }
            
            public FrameRow[] GetFrameRows() {
                return ((FrameRow[])(this.GetChildRows(this.Table.ChildRelations["FramesetFrame"])));
            }
            
            public TilesetRow[] GetTilesetRows() {
                return ((TilesetRow[])(this.GetChildRows(this.Table.ChildRelations["FramesetTileset"])));
            }
            
            public SpriteStateRow[] GetSpriteStateRows() {
                return ((SpriteStateRow[])(this.GetChildRows(this.Table.ChildRelations["FramesetSpriteState"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FramesetRowChangeEvent : EventArgs {
            
            private FramesetRow eventRow;
            
            private DataRowAction eventAction;
            
            public FramesetRowChangeEvent(FramesetRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FramesetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FrameDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFrameValue;
            
            private DataColumn columnGraphicSheet;
            
            private DataColumn columnCellIndex;
            
            private DataColumn columnm11;
            
            private DataColumn columnm12;
            
            private DataColumn columnm21;
            
            private DataColumn columnm22;
            
            private DataColumn columndx;
            
            private DataColumn columndy;
            
            private DataColumn columnName;
            
            internal FrameDataTable() : 
                    base("Frame") {
                this.InitClass();
            }
            
            internal FrameDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FrameValueColumn {
                get {
                    return this.columnFrameValue;
                }
            }
            
            internal DataColumn GraphicSheetColumn {
                get {
                    return this.columnGraphicSheet;
                }
            }
            
            internal DataColumn CellIndexColumn {
                get {
                    return this.columnCellIndex;
                }
            }
            
            internal DataColumn m11Column {
                get {
                    return this.columnm11;
                }
            }
            
            internal DataColumn m12Column {
                get {
                    return this.columnm12;
                }
            }
            
            internal DataColumn m21Column {
                get {
                    return this.columnm21;
                }
            }
            
            internal DataColumn m22Column {
                get {
                    return this.columnm22;
                }
            }
            
            internal DataColumn dxColumn {
                get {
                    return this.columndx;
                }
            }
            
            internal DataColumn dyColumn {
                get {
                    return this.columndy;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public FrameRow this[int index] {
                get {
                    return ((FrameRow)(this.Rows[index]));
                }
            }
            
            public event FrameRowChangeEventHandler FrameRowChanged;
            
            public event FrameRowChangeEventHandler FrameRowChanging;
            
            public event FrameRowChangeEventHandler FrameRowDeleted;
            
            public event FrameRowChangeEventHandler FrameRowDeleting;
            
            public void AddFrameRow(FrameRow row) {
                this.Rows.Add(row);
            }
            
            public FrameRow AddFrameRow(int FrameValue, string GraphicSheet, short CellIndex, System.Single m11, System.Single m12, System.Single m21, System.Single m22, System.Single dx, System.Single dy, FramesetRow parentFramesetRowByFramesetFrame) {
                FrameRow rowFrameRow = ((FrameRow)(this.NewRow()));
                rowFrameRow.ItemArray = new object[] {
                        FrameValue,
                        GraphicSheet,
                        CellIndex,
                        m11,
                        m12,
                        m21,
                        m22,
                        dx,
                        dy,
                        parentFramesetRowByFramesetFrame[0]};
                this.Rows.Add(rowFrameRow);
                return rowFrameRow;
            }
            
            public FrameRow FindByNameFrameValue(string Name, int FrameValue) {
                return ((FrameRow)(this.Rows.Find(new object[] {
                            Name,
                            FrameValue})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FrameDataTable cln = ((FrameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FrameDataTable();
            }
            
            internal void InitVars() {
                this.columnFrameValue = this.Columns["FrameValue"];
                this.columnGraphicSheet = this.Columns["GraphicSheet"];
                this.columnCellIndex = this.Columns["CellIndex"];
                this.columnm11 = this.Columns["m11"];
                this.columnm12 = this.Columns["m12"];
                this.columnm21 = this.Columns["m21"];
                this.columnm22 = this.Columns["m22"];
                this.columndx = this.Columns["dx"];
                this.columndy = this.Columns["dy"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnFrameValue = new DataColumn("FrameValue", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFrameValue);
                this.columnGraphicSheet = new DataColumn("GraphicSheet", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnGraphicSheet);
                this.columnCellIndex = new DataColumn("CellIndex", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCellIndex);
                this.columnm11 = new DataColumn("m11", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnm11);
                this.columnm12 = new DataColumn("m12", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnm12);
                this.columnm21 = new DataColumn("m21", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnm21);
                this.columnm22 = new DataColumn("m22", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnm22);
                this.columndx = new DataColumn("dx", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columndx);
                this.columndy = new DataColumn("dy", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columndy);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("FrameKey", new DataColumn[] {
                                this.columnName,
                                this.columnFrameValue}, true));
                this.columnFrameValue.AllowDBNull = false;
                this.columnFrameValue.Namespace = "";
                this.columnGraphicSheet.AllowDBNull = false;
                this.columnGraphicSheet.Namespace = "";
                this.columnCellIndex.AllowDBNull = false;
                this.columnCellIndex.Namespace = "";
                this.columnm11.Namespace = "";
                this.columnm11.DefaultValue = 1F;
                this.columnm12.Namespace = "";
                this.columnm12.DefaultValue = 0F;
                this.columnm21.Namespace = "";
                this.columnm21.DefaultValue = 0F;
                this.columnm22.Namespace = "";
                this.columnm22.DefaultValue = 1F;
                this.columndx.Namespace = "";
                this.columndx.DefaultValue = 0F;
                this.columndy.Namespace = "";
                this.columndy.DefaultValue = 0F;
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            public FrameRow NewFrameRow() {
                return ((FrameRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FrameRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FrameRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FrameRowChanged != null)) {
                    this.FrameRowChanged(this, new FrameRowChangeEvent(((FrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FrameRowChanging != null)) {
                    this.FrameRowChanging(this, new FrameRowChangeEvent(((FrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FrameRowDeleted != null)) {
                    this.FrameRowDeleted(this, new FrameRowChangeEvent(((FrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FrameRowDeleting != null)) {
                    this.FrameRowDeleting(this, new FrameRowChangeEvent(((FrameRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFrameRow(FrameRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FrameRow : DataRow {
            
            private FrameDataTable tableFrame;
            
            internal FrameRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFrame = ((FrameDataTable)(this.Table));
            }
            
            public int FrameValue {
                get {
                    return ((int)(this[this.tableFrame.FrameValueColumn]));
                }
                set {
                    this[this.tableFrame.FrameValueColumn] = value;
                }
            }
            
            public string GraphicSheet {
                get {
                    return ((string)(this[this.tableFrame.GraphicSheetColumn]));
                }
                set {
                    this[this.tableFrame.GraphicSheetColumn] = value;
                }
            }
            
            public short CellIndex {
                get {
                    return ((short)(this[this.tableFrame.CellIndexColumn]));
                }
                set {
                    this[this.tableFrame.CellIndexColumn] = value;
                }
            }
            
            public System.Single m11 {
                get {
                    try {
                        return ((System.Single)(this[this.tableFrame.m11Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.m11Column] = value;
                }
            }
            
            public System.Single m12 {
                get {
                    try {
                        return ((System.Single)(this[this.tableFrame.m12Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.m12Column] = value;
                }
            }
            
            public System.Single m21 {
                get {
                    try {
                        return ((System.Single)(this[this.tableFrame.m21Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.m21Column] = value;
                }
            }
            
            public System.Single m22 {
                get {
                    try {
                        return ((System.Single)(this[this.tableFrame.m22Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.m22Column] = value;
                }
            }
            
            public System.Single dx {
                get {
                    try {
                        return ((System.Single)(this[this.tableFrame.dxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.dxColumn] = value;
                }
            }
            
            public System.Single dy {
                get {
                    try {
                        return ((System.Single)(this[this.tableFrame.dyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrame.dyColumn] = value;
                }
            }
            
            public FramesetRow FramesetRow {
                get {
                    return ((FramesetRow)(this.GetParentRow(this.Table.ParentRelations["FramesetFrame"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FramesetFrame"]);
                }
            }
            
            public bool Ism11Null() {
                return this.IsNull(this.tableFrame.m11Column);
            }
            
            public void Setm11Null() {
                this[this.tableFrame.m11Column] = System.Convert.DBNull;
            }
            
            public bool Ism12Null() {
                return this.IsNull(this.tableFrame.m12Column);
            }
            
            public void Setm12Null() {
                this[this.tableFrame.m12Column] = System.Convert.DBNull;
            }
            
            public bool Ism21Null() {
                return this.IsNull(this.tableFrame.m21Column);
            }
            
            public void Setm21Null() {
                this[this.tableFrame.m21Column] = System.Convert.DBNull;
            }
            
            public bool Ism22Null() {
                return this.IsNull(this.tableFrame.m22Column);
            }
            
            public void Setm22Null() {
                this[this.tableFrame.m22Column] = System.Convert.DBNull;
            }
            
            public bool IsdxNull() {
                return this.IsNull(this.tableFrame.dxColumn);
            }
            
            public void SetdxNull() {
                this[this.tableFrame.dxColumn] = System.Convert.DBNull;
            }
            
            public bool IsdyNull() {
                return this.IsNull(this.tableFrame.dyColumn);
            }
            
            public void SetdyNull() {
                this[this.tableFrame.dyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FrameRowChangeEvent : EventArgs {
            
            private FrameRow eventRow;
            
            private DataRowAction eventAction;
            
            public FrameRowChangeEvent(FrameRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FrameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TilesetDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnFrameset;
            
            private DataColumn columnTileWidth;
            
            private DataColumn columnTileHeight;
            
            internal TilesetDataTable() : 
                    base("Tileset") {
                this.InitClass();
            }
            
            internal TilesetDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn FramesetColumn {
                get {
                    return this.columnFrameset;
                }
            }
            
            internal DataColumn TileWidthColumn {
                get {
                    return this.columnTileWidth;
                }
            }
            
            internal DataColumn TileHeightColumn {
                get {
                    return this.columnTileHeight;
                }
            }
            
            public TilesetRow this[int index] {
                get {
                    return ((TilesetRow)(this.Rows[index]));
                }
            }
            
            public event TilesetRowChangeEventHandler TilesetRowChanged;
            
            public event TilesetRowChangeEventHandler TilesetRowChanging;
            
            public event TilesetRowChangeEventHandler TilesetRowDeleted;
            
            public event TilesetRowChangeEventHandler TilesetRowDeleting;
            
            public void AddTilesetRow(TilesetRow row) {
                this.Rows.Add(row);
            }
            
            public TilesetRow AddTilesetRow(string Name, FramesetRow parentFramesetRowByFramesetTileset, short TileWidth, short TileHeight) {
                TilesetRow rowTilesetRow = ((TilesetRow)(this.NewRow()));
                rowTilesetRow.ItemArray = new object[] {
                        Name,
                        parentFramesetRowByFramesetTileset[0],
                        TileWidth,
                        TileHeight};
                this.Rows.Add(rowTilesetRow);
                return rowTilesetRow;
            }
            
            public TilesetRow FindByName(string Name) {
                return ((TilesetRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TilesetDataTable cln = ((TilesetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TilesetDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnFrameset = this.Columns["Frameset"];
                this.columnTileWidth = this.Columns["TileWidth"];
                this.columnTileHeight = this.Columns["TileHeight"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnFrameset = new DataColumn("Frameset", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFrameset);
                this.columnTileWidth = new DataColumn("TileWidth", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTileWidth);
                this.columnTileHeight = new DataColumn("TileHeight", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTileHeight);
                this.Constraints.Add(new UniqueConstraint("TilesetKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnFrameset.Namespace = "";
                this.columnTileWidth.AllowDBNull = false;
                this.columnTileWidth.Namespace = "";
                this.columnTileHeight.AllowDBNull = false;
                this.columnTileHeight.Namespace = "";
            }
            
            public TilesetRow NewTilesetRow() {
                return ((TilesetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TilesetRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TilesetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TilesetRowChanged != null)) {
                    this.TilesetRowChanged(this, new TilesetRowChangeEvent(((TilesetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TilesetRowChanging != null)) {
                    this.TilesetRowChanging(this, new TilesetRowChangeEvent(((TilesetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TilesetRowDeleted != null)) {
                    this.TilesetRowDeleted(this, new TilesetRowChangeEvent(((TilesetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TilesetRowDeleting != null)) {
                    this.TilesetRowDeleting(this, new TilesetRowChangeEvent(((TilesetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTilesetRow(TilesetRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TilesetRow : DataRow {
            
            private TilesetDataTable tableTileset;
            
            internal TilesetRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTileset = ((TilesetDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableTileset.NameColumn]));
                }
                set {
                    this[this.tableTileset.NameColumn] = value;
                }
            }
            
            public string Frameset {
                get {
                    try {
                        return ((string)(this[this.tableTileset.FramesetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTileset.FramesetColumn] = value;
                }
            }
            
            public short TileWidth {
                get {
                    return ((short)(this[this.tableTileset.TileWidthColumn]));
                }
                set {
                    this[this.tableTileset.TileWidthColumn] = value;
                }
            }
            
            public short TileHeight {
                get {
                    return ((short)(this[this.tableTileset.TileHeightColumn]));
                }
                set {
                    this[this.tableTileset.TileHeightColumn] = value;
                }
            }
            
            public FramesetRow FramesetRow {
                get {
                    return ((FramesetRow)(this.GetParentRow(this.Table.ParentRelations["FramesetTileset"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FramesetTileset"]);
                }
            }
            
            public bool IsFramesetNull() {
                return this.IsNull(this.tableTileset.FramesetColumn);
            }
            
            public void SetFramesetNull() {
                this[this.tableTileset.FramesetColumn] = System.Convert.DBNull;
            }
            
            public TileRow[] GetTileRows() {
                return ((TileRow[])(this.GetChildRows(this.Table.ChildRelations["TilesetTile"])));
            }
            
            public LayerRow[] GetLayerRows() {
                return ((LayerRow[])(this.GetChildRows(this.Table.ChildRelations["TilesetLayer"])));
            }
            
            public CategorizedTilesetRow[] GetCategorizedTilesetRows() {
                return ((CategorizedTilesetRow[])(this.GetChildRows(this.Table.ChildRelations["TilesetCategory"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TilesetRowChangeEvent : EventArgs {
            
            private TilesetRow eventRow;
            
            private DataRowAction eventAction;
            
            public TilesetRowChangeEvent(TilesetRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TilesetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TileDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTileValue;
            
            private DataColumn columnCounter;
            
            private DataColumn columnName;
            
            internal TileDataTable() : 
                    base("Tile") {
                this.InitClass();
            }
            
            internal TileDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TileValueColumn {
                get {
                    return this.columnTileValue;
                }
            }
            
            internal DataColumn CounterColumn {
                get {
                    return this.columnCounter;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public TileRow this[int index] {
                get {
                    return ((TileRow)(this.Rows[index]));
                }
            }
            
            public event TileRowChangeEventHandler TileRowChanged;
            
            public event TileRowChangeEventHandler TileRowChanging;
            
            public event TileRowChangeEventHandler TileRowDeleted;
            
            public event TileRowChangeEventHandler TileRowDeleting;
            
            public void AddTileRow(TileRow row) {
                this.Rows.Add(row);
            }
            
            public TileRow AddTileRow(int TileValue, CounterRow parentCounterRowByCounterTile, TilesetRow parentTilesetRowByTilesetTile) {
                TileRow rowTileRow = ((TileRow)(this.NewRow()));
                rowTileRow.ItemArray = new object[] {
                        TileValue,
                        parentCounterRowByCounterTile[0],
                        parentTilesetRowByTilesetTile[0]};
                this.Rows.Add(rowTileRow);
                return rowTileRow;
            }
            
            public TileRow FindByNameTileValue(string Name, int TileValue) {
                return ((TileRow)(this.Rows.Find(new object[] {
                            Name,
                            TileValue})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TileDataTable cln = ((TileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TileDataTable();
            }
            
            internal void InitVars() {
                this.columnTileValue = this.Columns["TileValue"];
                this.columnCounter = this.Columns["Counter"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnTileValue = new DataColumn("TileValue", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTileValue);
                this.columnCounter = new DataColumn("Counter", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCounter);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("TileKey", new DataColumn[] {
                                this.columnName,
                                this.columnTileValue}, true));
                this.columnTileValue.AllowDBNull = false;
                this.columnTileValue.Namespace = "";
                this.columnCounter.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            public TileRow NewTileRow() {
                return ((TileRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TileRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TileRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TileRowChanged != null)) {
                    this.TileRowChanged(this, new TileRowChangeEvent(((TileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TileRowChanging != null)) {
                    this.TileRowChanging(this, new TileRowChangeEvent(((TileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TileRowDeleted != null)) {
                    this.TileRowDeleted(this, new TileRowChangeEvent(((TileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TileRowDeleting != null)) {
                    this.TileRowDeleting(this, new TileRowChangeEvent(((TileRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTileRow(TileRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TileRow : DataRow {
            
            private TileDataTable tableTile;
            
            internal TileRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTile = ((TileDataTable)(this.Table));
            }
            
            public int TileValue {
                get {
                    return ((int)(this[this.tableTile.TileValueColumn]));
                }
                set {
                    this[this.tableTile.TileValueColumn] = value;
                }
            }
            
            public string Counter {
                get {
                    try {
                        return ((string)(this[this.tableTile.CounterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTile.CounterColumn] = value;
                }
            }
            
            public TilesetRow TilesetRow {
                get {
                    return ((TilesetRow)(this.GetParentRow(this.Table.ParentRelations["TilesetTile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TilesetTile"]);
                }
            }
            
            public CounterRow CounterRow {
                get {
                    return ((CounterRow)(this.GetParentRow(this.Table.ParentRelations["CounterTile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CounterTile"]);
                }
            }
            
            public bool IsCounterNull() {
                return this.IsNull(this.tableTile.CounterColumn);
            }
            
            public void SetCounterNull() {
                this[this.tableTile.CounterColumn] = System.Convert.DBNull;
            }
            
            public TileFrameRow[] GetTileFrameRows() {
                return ((TileFrameRow[])(this.GetChildRows(this.Table.ChildRelations["TileTileFrame"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TileRowChangeEvent : EventArgs {
            
            private TileRow eventRow;
            
            private DataRowAction eventAction;
            
            public TileRowChangeEvent(TileRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TileFrameDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSequence;
            
            private DataColumn columnFrameValue;
            
            private DataColumn columnDuration;
            
            private DataColumn columnName;
            
            private DataColumn columnTileValue;
            
            internal TileFrameDataTable() : 
                    base("TileFrame") {
                this.InitClass();
            }
            
            internal TileFrameDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            internal DataColumn FrameValueColumn {
                get {
                    return this.columnFrameValue;
                }
            }
            
            internal DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn TileValueColumn {
                get {
                    return this.columnTileValue;
                }
            }
            
            public TileFrameRow this[int index] {
                get {
                    return ((TileFrameRow)(this.Rows[index]));
                }
            }
            
            public event TileFrameRowChangeEventHandler TileFrameRowChanged;
            
            public event TileFrameRowChangeEventHandler TileFrameRowChanging;
            
            public event TileFrameRowChangeEventHandler TileFrameRowDeleted;
            
            public event TileFrameRowChangeEventHandler TileFrameRowDeleting;
            
            public void AddTileFrameRow(TileFrameRow row) {
                this.Rows.Add(row);
            }
            
            public TileFrameRow AddTileFrameRow(short Sequence, int FrameValue, short Duration, string Name, int TileValue) {
                TileFrameRow rowTileFrameRow = ((TileFrameRow)(this.NewRow()));
                rowTileFrameRow.ItemArray = new object[] {
                        Sequence,
                        FrameValue,
                        Duration,
                        Name,
                        TileValue};
                this.Rows.Add(rowTileFrameRow);
                return rowTileFrameRow;
            }
            
            public TileFrameRow FindByNameTileValueSequence(string Name, int TileValue, short Sequence) {
                return ((TileFrameRow)(this.Rows.Find(new object[] {
                            Name,
                            TileValue,
                            Sequence})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TileFrameDataTable cln = ((TileFrameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TileFrameDataTable();
            }
            
            internal void InitVars() {
                this.columnSequence = this.Columns["Sequence"];
                this.columnFrameValue = this.Columns["FrameValue"];
                this.columnDuration = this.Columns["Duration"];
                this.columnName = this.Columns["Name"];
                this.columnTileValue = this.Columns["TileValue"];
            }
            
            private void InitClass() {
                this.columnSequence = new DataColumn("Sequence", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSequence);
                this.columnFrameValue = new DataColumn("FrameValue", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFrameValue);
                this.columnDuration = new DataColumn("Duration", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDuration);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnName);
                this.columnTileValue = new DataColumn("TileValue", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTileValue);
                this.Constraints.Add(new UniqueConstraint("TileFrameKey", new DataColumn[] {
                                this.columnName,
                                this.columnTileValue,
                                this.columnSequence}, true));
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
                this.columnFrameValue.Namespace = "";
                this.columnDuration.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnTileValue.AllowDBNull = false;
                this.columnTileValue.Namespace = "";
            }
            
            public TileFrameRow NewTileFrameRow() {
                return ((TileFrameRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TileFrameRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TileFrameRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TileFrameRowChanged != null)) {
                    this.TileFrameRowChanged(this, new TileFrameRowChangeEvent(((TileFrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TileFrameRowChanging != null)) {
                    this.TileFrameRowChanging(this, new TileFrameRowChangeEvent(((TileFrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TileFrameRowDeleted != null)) {
                    this.TileFrameRowDeleted(this, new TileFrameRowChangeEvent(((TileFrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TileFrameRowDeleting != null)) {
                    this.TileFrameRowDeleting(this, new TileFrameRowChangeEvent(((TileFrameRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTileFrameRow(TileFrameRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TileFrameRow : DataRow {
            
            private TileFrameDataTable tableTileFrame;
            
            internal TileFrameRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTileFrame = ((TileFrameDataTable)(this.Table));
            }
            
            public short Sequence {
                get {
                    return ((short)(this[this.tableTileFrame.SequenceColumn]));
                }
                set {
                    this[this.tableTileFrame.SequenceColumn] = value;
                }
            }
            
            public int FrameValue {
                get {
                    try {
                        return ((int)(this[this.tableTileFrame.FrameValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTileFrame.FrameValueColumn] = value;
                }
            }
            
            public short Duration {
                get {
                    try {
                        return ((short)(this[this.tableTileFrame.DurationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTileFrame.DurationColumn] = value;
                }
            }
            
            public TileRow TileRowParent {
                get {
                    return ((TileRow)(this.GetParentRow(this.Table.ParentRelations["TileTileFrame"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TileTileFrame"]);
                }
            }
            
            public bool IsFrameValueNull() {
                return this.IsNull(this.tableTileFrame.FrameValueColumn);
            }
            
            public void SetFrameValueNull() {
                this[this.tableTileFrame.FrameValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsDurationNull() {
                return this.IsNull(this.tableTileFrame.DurationColumn);
            }
            
            public void SetDurationNull() {
                this[this.tableTileFrame.DurationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TileFrameRowChangeEvent : EventArgs {
            
            private TileFrameRow eventRow;
            
            private DataRowAction eventAction;
            
            public TileFrameRowChangeEvent(TileFrameRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TileFrameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CounterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnValue;
            
            private DataColumn columnMax;
            
            internal CounterDataTable() : 
                    base("Counter") {
                this.InitClass();
            }
            
            internal CounterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn MaxColumn {
                get {
                    return this.columnMax;
                }
            }
            
            public CounterRow this[int index] {
                get {
                    return ((CounterRow)(this.Rows[index]));
                }
            }
            
            public event CounterRowChangeEventHandler CounterRowChanged;
            
            public event CounterRowChangeEventHandler CounterRowChanging;
            
            public event CounterRowChangeEventHandler CounterRowDeleted;
            
            public event CounterRowChangeEventHandler CounterRowDeleting;
            
            public void AddCounterRow(CounterRow row) {
                this.Rows.Add(row);
            }
            
            public CounterRow AddCounterRow(string Name, int Value, int Max) {
                CounterRow rowCounterRow = ((CounterRow)(this.NewRow()));
                rowCounterRow.ItemArray = new object[] {
                        Name,
                        Value,
                        Max};
                this.Rows.Add(rowCounterRow);
                return rowCounterRow;
            }
            
            public CounterRow FindByName(string Name) {
                return ((CounterRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CounterDataTable cln = ((CounterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CounterDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnValue = this.Columns["Value"];
                this.columnMax = this.Columns["Max"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnValue = new DataColumn("Value", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnValue);
                this.columnMax = new DataColumn("Max", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMax);
                this.Constraints.Add(new UniqueConstraint("CounterKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnValue.Namespace = "";
                this.columnMax.Namespace = "";
            }
            
            public CounterRow NewCounterRow() {
                return ((CounterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CounterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CounterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CounterRowChanged != null)) {
                    this.CounterRowChanged(this, new CounterRowChangeEvent(((CounterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CounterRowChanging != null)) {
                    this.CounterRowChanging(this, new CounterRowChangeEvent(((CounterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CounterRowDeleted != null)) {
                    this.CounterRowDeleted(this, new CounterRowChangeEvent(((CounterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CounterRowDeleting != null)) {
                    this.CounterRowDeleting(this, new CounterRowChangeEvent(((CounterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCounterRow(CounterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CounterRow : DataRow {
            
            private CounterDataTable tableCounter;
            
            internal CounterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCounter = ((CounterDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableCounter.NameColumn]));
                }
                set {
                    this[this.tableCounter.NameColumn] = value;
                }
            }
            
            public int Value {
                get {
                    try {
                        return ((int)(this[this.tableCounter.ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCounter.ValueColumn] = value;
                }
            }
            
            public int Max {
                get {
                    try {
                        return ((int)(this[this.tableCounter.MaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCounter.MaxColumn] = value;
                }
            }
            
            public bool IsValueNull() {
                return this.IsNull(this.tableCounter.ValueColumn);
            }
            
            public void SetValueNull() {
                this[this.tableCounter.ValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaxNull() {
                return this.IsNull(this.tableCounter.MaxColumn);
            }
            
            public void SetMaxNull() {
                this[this.tableCounter.MaxColumn] = System.Convert.DBNull;
            }
            
            public TileRow[] GetTileRows() {
                return ((TileRow[])(this.GetChildRows(this.Table.ChildRelations["CounterTile"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CounterRowChangeEvent : EventArgs {
            
            private CounterRow eventRow;
            
            private DataRowAction eventAction;
            
            public CounterRowChangeEvent(CounterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CounterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnScrollMarginLeft;
            
            private DataColumn columnScrollMarginTop;
            
            private DataColumn columnScrollMarginRight;
            
            private DataColumn columnScrollMarginBottom;
            
            private DataColumn columnScrollWidth;
            
            private DataColumn columnScrollHeight;
            
            private DataColumn columnViewLeft;
            
            private DataColumn columnViewTop;
            
            private DataColumn columnViewWidth;
            
            private DataColumn columnViewHeight;
            
            internal MapDataTable() : 
                    base("Map") {
                this.InitClass();
            }
            
            internal MapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ScrollMarginLeftColumn {
                get {
                    return this.columnScrollMarginLeft;
                }
            }
            
            internal DataColumn ScrollMarginTopColumn {
                get {
                    return this.columnScrollMarginTop;
                }
            }
            
            internal DataColumn ScrollMarginRightColumn {
                get {
                    return this.columnScrollMarginRight;
                }
            }
            
            internal DataColumn ScrollMarginBottomColumn {
                get {
                    return this.columnScrollMarginBottom;
                }
            }
            
            internal DataColumn ScrollWidthColumn {
                get {
                    return this.columnScrollWidth;
                }
            }
            
            internal DataColumn ScrollHeightColumn {
                get {
                    return this.columnScrollHeight;
                }
            }
            
            internal DataColumn ViewLeftColumn {
                get {
                    return this.columnViewLeft;
                }
            }
            
            internal DataColumn ViewTopColumn {
                get {
                    return this.columnViewTop;
                }
            }
            
            internal DataColumn ViewWidthColumn {
                get {
                    return this.columnViewWidth;
                }
            }
            
            internal DataColumn ViewHeightColumn {
                get {
                    return this.columnViewHeight;
                }
            }
            
            public MapRow this[int index] {
                get {
                    return ((MapRow)(this.Rows[index]));
                }
            }
            
            public event MapRowChangeEventHandler MapRowChanged;
            
            public event MapRowChangeEventHandler MapRowChanging;
            
            public event MapRowChangeEventHandler MapRowDeleted;
            
            public event MapRowChangeEventHandler MapRowDeleting;
            
            public void AddMapRow(MapRow row) {
                this.Rows.Add(row);
            }
            
            public MapRow AddMapRow(string Name, short ScrollMarginLeft, short ScrollMarginTop, short ScrollMarginRight, short ScrollMarginBottom, int ScrollWidth, int ScrollHeight, short ViewLeft, short ViewTop, short ViewWidth, short ViewHeight) {
                MapRow rowMapRow = ((MapRow)(this.NewRow()));
                rowMapRow.ItemArray = new object[] {
                        Name,
                        ScrollMarginLeft,
                        ScrollMarginTop,
                        ScrollMarginRight,
                        ScrollMarginBottom,
                        ScrollWidth,
                        ScrollHeight,
                        ViewLeft,
                        ViewTop,
                        ViewWidth,
                        ViewHeight};
                this.Rows.Add(rowMapRow);
                return rowMapRow;
            }
            
            public MapRow FindByName(string Name) {
                return ((MapRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MapDataTable cln = ((MapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MapDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnScrollMarginLeft = this.Columns["ScrollMarginLeft"];
                this.columnScrollMarginTop = this.Columns["ScrollMarginTop"];
                this.columnScrollMarginRight = this.Columns["ScrollMarginRight"];
                this.columnScrollMarginBottom = this.Columns["ScrollMarginBottom"];
                this.columnScrollWidth = this.Columns["ScrollWidth"];
                this.columnScrollHeight = this.Columns["ScrollHeight"];
                this.columnViewLeft = this.Columns["ViewLeft"];
                this.columnViewTop = this.Columns["ViewTop"];
                this.columnViewWidth = this.Columns["ViewWidth"];
                this.columnViewHeight = this.Columns["ViewHeight"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnScrollMarginLeft = new DataColumn("ScrollMarginLeft", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnScrollMarginLeft);
                this.columnScrollMarginTop = new DataColumn("ScrollMarginTop", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnScrollMarginTop);
                this.columnScrollMarginRight = new DataColumn("ScrollMarginRight", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnScrollMarginRight);
                this.columnScrollMarginBottom = new DataColumn("ScrollMarginBottom", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnScrollMarginBottom);
                this.columnScrollWidth = new DataColumn("ScrollWidth", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnScrollWidth);
                this.columnScrollHeight = new DataColumn("ScrollHeight", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnScrollHeight);
                this.columnViewLeft = new DataColumn("ViewLeft", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnViewLeft);
                this.columnViewTop = new DataColumn("ViewTop", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnViewTop);
                this.columnViewWidth = new DataColumn("ViewWidth", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnViewWidth);
                this.columnViewHeight = new DataColumn("ViewHeight", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnViewHeight);
                this.Constraints.Add(new UniqueConstraint("MapKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnScrollMarginLeft.AllowDBNull = false;
                this.columnScrollMarginLeft.Namespace = "";
                this.columnScrollMarginTop.AllowDBNull = false;
                this.columnScrollMarginTop.Namespace = "";
                this.columnScrollMarginRight.AllowDBNull = false;
                this.columnScrollMarginRight.Namespace = "";
                this.columnScrollMarginBottom.AllowDBNull = false;
                this.columnScrollMarginBottom.Namespace = "";
                this.columnScrollWidth.Namespace = "";
                this.columnScrollWidth.Caption = "Scrollable pixel width of the map independent of its layers";
                this.columnScrollHeight.Namespace = "";
                this.columnScrollHeight.Caption = "Scrollable pixel height of the map independent of its layers";
                this.columnViewLeft.Namespace = "";
                this.columnViewTop.Namespace = "";
                this.columnViewWidth.Namespace = "";
                this.columnViewHeight.Namespace = "";
            }
            
            public MapRow NewMapRow() {
                return ((MapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MapRowChanged != null)) {
                    this.MapRowChanged(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MapRowChanging != null)) {
                    this.MapRowChanging(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MapRowDeleted != null)) {
                    this.MapRowDeleted(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MapRowDeleting != null)) {
                    this.MapRowDeleting(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMapRow(MapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MapRow : DataRow {
            
            private MapDataTable tableMap;
            
            internal MapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMap = ((MapDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableMap.NameColumn]));
                }
                set {
                    this[this.tableMap.NameColumn] = value;
                }
            }
            
            public short ScrollMarginLeft {
                get {
                    return ((short)(this[this.tableMap.ScrollMarginLeftColumn]));
                }
                set {
                    this[this.tableMap.ScrollMarginLeftColumn] = value;
                }
            }
            
            public short ScrollMarginTop {
                get {
                    return ((short)(this[this.tableMap.ScrollMarginTopColumn]));
                }
                set {
                    this[this.tableMap.ScrollMarginTopColumn] = value;
                }
            }
            
            public short ScrollMarginRight {
                get {
                    return ((short)(this[this.tableMap.ScrollMarginRightColumn]));
                }
                set {
                    this[this.tableMap.ScrollMarginRightColumn] = value;
                }
            }
            
            public short ScrollMarginBottom {
                get {
                    return ((short)(this[this.tableMap.ScrollMarginBottomColumn]));
                }
                set {
                    this[this.tableMap.ScrollMarginBottomColumn] = value;
                }
            }
            
            public int ScrollWidth {
                get {
                    if (this.IsScrollWidthNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableMap.ScrollWidthColumn]));
                    }
                }
                set {
                    this[this.tableMap.ScrollWidthColumn] = value;
                }
            }
            
            public int ScrollHeight {
                get {
                    if (this.IsScrollHeightNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableMap.ScrollHeightColumn]));
                    }
                }
                set {
                    this[this.tableMap.ScrollHeightColumn] = value;
                }
            }
            
            public short ViewLeft {
                get {
                    if (this.IsViewLeftNull()) {
                        return 0;
                    }
                    else {
                        return ((short)(this[this.tableMap.ViewLeftColumn]));
                    }
                }
                set {
                    this[this.tableMap.ViewLeftColumn] = value;
                }
            }
            
            public short ViewTop {
                get {
                    if (this.IsViewTopNull()) {
                        return 0;
                    }
                    else {
                        return ((short)(this[this.tableMap.ViewTopColumn]));
                    }
                }
                set {
                    this[this.tableMap.ViewTopColumn] = value;
                }
            }
            
            public short ViewWidth {
                get {
                    if (this.IsViewWidthNull()) {
                        return 0;
                    }
                    else {
                        return ((short)(this[this.tableMap.ViewWidthColumn]));
                    }
                }
                set {
                    this[this.tableMap.ViewWidthColumn] = value;
                }
            }
            
            public short ViewHeight {
                get {
                    if (this.IsViewHeightNull()) {
                        return 0;
                    }
                    else {
                        return ((short)(this[this.tableMap.ViewHeightColumn]));
                    }
                }
                set {
                    this[this.tableMap.ViewHeightColumn] = value;
                }
            }
            
            public bool IsScrollWidthNull() {
                return this.IsNull(this.tableMap.ScrollWidthColumn);
            }
            
            public void SetScrollWidthNull() {
                this[this.tableMap.ScrollWidthColumn] = System.Convert.DBNull;
            }
            
            public bool IsScrollHeightNull() {
                return this.IsNull(this.tableMap.ScrollHeightColumn);
            }
            
            public void SetScrollHeightNull() {
                this[this.tableMap.ScrollHeightColumn] = System.Convert.DBNull;
            }
            
            public bool IsViewLeftNull() {
                return this.IsNull(this.tableMap.ViewLeftColumn);
            }
            
            public void SetViewLeftNull() {
                this[this.tableMap.ViewLeftColumn] = System.Convert.DBNull;
            }
            
            public bool IsViewTopNull() {
                return this.IsNull(this.tableMap.ViewTopColumn);
            }
            
            public void SetViewTopNull() {
                this[this.tableMap.ViewTopColumn] = System.Convert.DBNull;
            }
            
            public bool IsViewWidthNull() {
                return this.IsNull(this.tableMap.ViewWidthColumn);
            }
            
            public void SetViewWidthNull() {
                this[this.tableMap.ViewWidthColumn] = System.Convert.DBNull;
            }
            
            public bool IsViewHeightNull() {
                return this.IsNull(this.tableMap.ViewHeightColumn);
            }
            
            public void SetViewHeightNull() {
                this[this.tableMap.ViewHeightColumn] = System.Convert.DBNull;
            }
            
            public LayerRow[] GetLayerRows() {
                return ((LayerRow[])(this.GetChildRows(this.Table.ChildRelations["MapLayer"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MapRowChangeEvent : EventArgs {
            
            private MapRow eventRow;
            
            private DataRowAction eventAction;
            
            public MapRowChangeEvent(MapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LayerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnWidth;
            
            private DataColumn columnHeight;
            
            private DataColumn columnTileset;
            
            private DataColumn columnBytesPerTile;
            
            private DataColumn columnMapName;
            
            private DataColumn columnOffsetX;
            
            private DataColumn columnOffsetY;
            
            private DataColumn columnScrollRateX;
            
            private DataColumn columnScrollRateY;
            
            private DataColumn columnZIndex;
            
            private DataColumn columnPriority;
            
            private DataColumn columnTiles;
            
            internal LayerDataTable() : 
                    base("Layer") {
                this.InitClass();
            }
            
            internal LayerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            internal DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            internal DataColumn TilesetColumn {
                get {
                    return this.columnTileset;
                }
            }
            
            internal DataColumn BytesPerTileColumn {
                get {
                    return this.columnBytesPerTile;
                }
            }
            
            internal DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            internal DataColumn OffsetXColumn {
                get {
                    return this.columnOffsetX;
                }
            }
            
            internal DataColumn OffsetYColumn {
                get {
                    return this.columnOffsetY;
                }
            }
            
            internal DataColumn ScrollRateXColumn {
                get {
                    return this.columnScrollRateX;
                }
            }
            
            internal DataColumn ScrollRateYColumn {
                get {
                    return this.columnScrollRateY;
                }
            }
            
            internal DataColumn ZIndexColumn {
                get {
                    return this.columnZIndex;
                }
            }
            
            internal DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            internal DataColumn TilesColumn {
                get {
                    return this.columnTiles;
                }
            }
            
            public LayerRow this[int index] {
                get {
                    return ((LayerRow)(this.Rows[index]));
                }
            }
            
            public event LayerRowChangeEventHandler LayerRowChanged;
            
            public event LayerRowChangeEventHandler LayerRowChanging;
            
            public event LayerRowChangeEventHandler LayerRowDeleted;
            
            public event LayerRowChangeEventHandler LayerRowDeleting;
            
            public void AddLayerRow(LayerRow row) {
                this.Rows.Add(row);
            }
            
            public LayerRow AddLayerRow(string Name, int Width, int Height, TilesetRow parentTilesetRowByTilesetLayer, System.Byte BytesPerTile, MapRow parentMapRowByMapLayer, int OffsetX, int OffsetY, System.Single ScrollRateX, System.Single ScrollRateY, int ZIndex, int Priority, System.Byte[] Tiles) {
                LayerRow rowLayerRow = ((LayerRow)(this.NewRow()));
                rowLayerRow.ItemArray = new object[] {
                        Name,
                        Width,
                        Height,
                        parentTilesetRowByTilesetLayer[0],
                        BytesPerTile,
                        parentMapRowByMapLayer[0],
                        OffsetX,
                        OffsetY,
                        ScrollRateX,
                        ScrollRateY,
                        ZIndex,
                        Priority,
                        Tiles};
                this.Rows.Add(rowLayerRow);
                return rowLayerRow;
            }
            
            public LayerRow FindByMapNameName(string MapName, string Name) {
                return ((LayerRow)(this.Rows.Find(new object[] {
                            MapName,
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LayerDataTable cln = ((LayerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LayerDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnWidth = this.Columns["Width"];
                this.columnHeight = this.Columns["Height"];
                this.columnTileset = this.Columns["Tileset"];
                this.columnBytesPerTile = this.Columns["BytesPerTile"];
                this.columnMapName = this.Columns["MapName"];
                this.columnOffsetX = this.Columns["OffsetX"];
                this.columnOffsetY = this.Columns["OffsetY"];
                this.columnScrollRateX = this.Columns["ScrollRateX"];
                this.columnScrollRateY = this.Columns["ScrollRateY"];
                this.columnZIndex = this.Columns["ZIndex"];
                this.columnPriority = this.Columns["Priority"];
                this.columnTiles = this.Columns["Tiles"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnWidth = new DataColumn("Width", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnWidth);
                this.columnHeight = new DataColumn("Height", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHeight);
                this.columnTileset = new DataColumn("Tileset", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTileset);
                this.columnBytesPerTile = new DataColumn("BytesPerTile", typeof(System.Byte), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBytesPerTile);
                this.columnMapName = new DataColumn("MapName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMapName);
                this.columnOffsetX = new DataColumn("OffsetX", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOffsetX);
                this.columnOffsetY = new DataColumn("OffsetY", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOffsetY);
                this.columnScrollRateX = new DataColumn("ScrollRateX", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnScrollRateX);
                this.columnScrollRateY = new DataColumn("ScrollRateY", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnScrollRateY);
                this.columnZIndex = new DataColumn("ZIndex", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnZIndex);
                this.columnPriority = new DataColumn("Priority", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPriority);
                this.columnTiles = new DataColumn("Tiles", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTiles);
                this.Constraints.Add(new UniqueConstraint("LayerKey", new DataColumn[] {
                                this.columnMapName,
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnWidth.AllowDBNull = false;
                this.columnWidth.Namespace = "";
                this.columnHeight.AllowDBNull = false;
                this.columnHeight.Namespace = "";
                this.columnTileset.Namespace = "";
                this.columnBytesPerTile.AllowDBNull = false;
                this.columnBytesPerTile.Namespace = "";
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnOffsetX.Namespace = "";
                this.columnOffsetX.DefaultValue = 0;
                this.columnOffsetY.Namespace = "";
                this.columnOffsetY.DefaultValue = 0;
                this.columnScrollRateX.Namespace = "";
                this.columnScrollRateX.DefaultValue = 1F;
                this.columnScrollRateY.Namespace = "";
                this.columnScrollRateY.DefaultValue = 1F;
                this.columnZIndex.Namespace = "";
                this.columnPriority.Namespace = "";
                this.columnPriority.DefaultValue = 0;
            }
            
            public LayerRow NewLayerRow() {
                return ((LayerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LayerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LayerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LayerRowChanged != null)) {
                    this.LayerRowChanged(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LayerRowChanging != null)) {
                    this.LayerRowChanging(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LayerRowDeleted != null)) {
                    this.LayerRowDeleted(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LayerRowDeleting != null)) {
                    this.LayerRowDeleting(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLayerRow(LayerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LayerRow : DataRow {
            
            private LayerDataTable tableLayer;
            
            internal LayerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLayer = ((LayerDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableLayer.NameColumn]));
                }
                set {
                    this[this.tableLayer.NameColumn] = value;
                }
            }
            
            public int Width {
                get {
                    return ((int)(this[this.tableLayer.WidthColumn]));
                }
                set {
                    this[this.tableLayer.WidthColumn] = value;
                }
            }
            
            public int Height {
                get {
                    return ((int)(this[this.tableLayer.HeightColumn]));
                }
                set {
                    this[this.tableLayer.HeightColumn] = value;
                }
            }
            
            public string Tileset {
                get {
                    try {
                        return ((string)(this[this.tableLayer.TilesetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLayer.TilesetColumn] = value;
                }
            }
            
            public System.Byte BytesPerTile {
                get {
                    return ((System.Byte)(this[this.tableLayer.BytesPerTileColumn]));
                }
                set {
                    this[this.tableLayer.BytesPerTileColumn] = value;
                }
            }
            
            public int OffsetX {
                get {
                    if (this.IsOffsetXNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableLayer.OffsetXColumn]));
                    }
                }
                set {
                    this[this.tableLayer.OffsetXColumn] = value;
                }
            }
            
            public int OffsetY {
                get {
                    if (this.IsOffsetYNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableLayer.OffsetYColumn]));
                    }
                }
                set {
                    this[this.tableLayer.OffsetYColumn] = value;
                }
            }
            
            public System.Single ScrollRateX {
                get {
                    if (this.IsScrollRateXNull()) {
                        return 1F;
                    }
                    else {
                        return ((System.Single)(this[this.tableLayer.ScrollRateXColumn]));
                    }
                }
                set {
                    this[this.tableLayer.ScrollRateXColumn] = value;
                }
            }
            
            public System.Single ScrollRateY {
                get {
                    if (this.IsScrollRateYNull()) {
                        return 1F;
                    }
                    else {
                        return ((System.Single)(this[this.tableLayer.ScrollRateYColumn]));
                    }
                }
                set {
                    this[this.tableLayer.ScrollRateYColumn] = value;
                }
            }
            
            public int ZIndex {
                get {
                    if (this.IsZIndexNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableLayer.ZIndexColumn]));
                    }
                }
                set {
                    this[this.tableLayer.ZIndexColumn] = value;
                }
            }
            
            public int Priority {
                get {
                    if (this.IsPriorityNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableLayer.PriorityColumn]));
                    }
                }
                set {
                    this[this.tableLayer.PriorityColumn] = value;
                }
            }
            
            public System.Byte[] Tiles {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableLayer.TilesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLayer.TilesColumn] = value;
                }
            }
            
            public MapRow MapRow {
                get {
                    return ((MapRow)(this.GetParentRow(this.Table.ParentRelations["MapLayer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MapLayer"]);
                }
            }
            
            public TilesetRow TilesetRow {
                get {
                    return ((TilesetRow)(this.GetParentRow(this.Table.ParentRelations["TilesetLayer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TilesetLayer"]);
                }
            }
            
            public bool IsTilesetNull() {
                return this.IsNull(this.tableLayer.TilesetColumn);
            }
            
            public void SetTilesetNull() {
                this[this.tableLayer.TilesetColumn] = System.Convert.DBNull;
            }
            
            public bool IsOffsetXNull() {
                return this.IsNull(this.tableLayer.OffsetXColumn);
            }
            
            public void SetOffsetXNull() {
                this[this.tableLayer.OffsetXColumn] = System.Convert.DBNull;
            }
            
            public bool IsOffsetYNull() {
                return this.IsNull(this.tableLayer.OffsetYColumn);
            }
            
            public void SetOffsetYNull() {
                this[this.tableLayer.OffsetYColumn] = System.Convert.DBNull;
            }
            
            public bool IsScrollRateXNull() {
                return this.IsNull(this.tableLayer.ScrollRateXColumn);
            }
            
            public void SetScrollRateXNull() {
                this[this.tableLayer.ScrollRateXColumn] = System.Convert.DBNull;
            }
            
            public bool IsScrollRateYNull() {
                return this.IsNull(this.tableLayer.ScrollRateYColumn);
            }
            
            public void SetScrollRateYNull() {
                this[this.tableLayer.ScrollRateYColumn] = System.Convert.DBNull;
            }
            
            public bool IsZIndexNull() {
                return this.IsNull(this.tableLayer.ZIndexColumn);
            }
            
            public void SetZIndexNull() {
                this[this.tableLayer.ZIndexColumn] = System.Convert.DBNull;
            }
            
            public bool IsPriorityNull() {
                return this.IsNull(this.tableLayer.PriorityColumn);
            }
            
            public void SetPriorityNull() {
                this[this.tableLayer.PriorityColumn] = System.Convert.DBNull;
            }
            
            public bool IsTilesNull() {
                return this.IsNull(this.tableLayer.TilesColumn);
            }
            
            public void SetTilesNull() {
                this[this.tableLayer.TilesColumn] = System.Convert.DBNull;
            }
            
            public SpriteRow[] GetSpriteRows() {
                return ((SpriteRow[])(this.GetChildRows(this.Table.ChildRelations["LayerSprite"])));
            }
            
            public SpritePlanRow[] GetSpritePlanRows() {
                return ((SpritePlanRow[])(this.GetChildRows(this.Table.ChildRelations["LayerSpritePlan"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LayerRowChangeEvent : EventArgs {
            
            private LayerRow eventRow;
            
            private DataRowAction eventAction;
            
            public LayerRowChangeEvent(LayerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LayerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLayerName;
            
            private DataColumn columnName;
            
            private DataColumn columnDefinitionName;
            
            private DataColumn columnStateName;
            
            private DataColumn columnCurrentFrame;
            
            private DataColumn columnX;
            
            private DataColumn columnY;
            
            private DataColumn columnDX;
            
            private DataColumn columnDY;
            
            private DataColumn columnMapName;
            
            private DataColumn columnPriority;
            
            private DataColumn columnActive;
            
            private DataColumn columnSolidity;
            
            internal SpriteDataTable() : 
                    base("Sprite") {
                this.InitClass();
            }
            
            internal SpriteDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            internal DataColumn StateNameColumn {
                get {
                    return this.columnStateName;
                }
            }
            
            internal DataColumn CurrentFrameColumn {
                get {
                    return this.columnCurrentFrame;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            internal DataColumn DXColumn {
                get {
                    return this.columnDX;
                }
            }
            
            internal DataColumn DYColumn {
                get {
                    return this.columnDY;
                }
            }
            
            internal DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            internal DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            internal DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            internal DataColumn SolidityColumn {
                get {
                    return this.columnSolidity;
                }
            }
            
            public SpriteRow this[int index] {
                get {
                    return ((SpriteRow)(this.Rows[index]));
                }
            }
            
            public event SpriteRowChangeEventHandler SpriteRowChanged;
            
            public event SpriteRowChangeEventHandler SpriteRowChanging;
            
            public event SpriteRowChangeEventHandler SpriteRowDeleted;
            
            public event SpriteRowChangeEventHandler SpriteRowDeleting;
            
            public void AddSpriteRow(SpriteRow row) {
                this.Rows.Add(row);
            }
            
            public SpriteRow AddSpriteRow(string LayerName, string Name, string DefinitionName, string StateName, short CurrentFrame, int X, int Y, System.Single DX, System.Single DY, string MapName, int Priority, bool Active, string Solidity) {
                SpriteRow rowSpriteRow = ((SpriteRow)(this.NewRow()));
                rowSpriteRow.ItemArray = new object[] {
                        LayerName,
                        Name,
                        DefinitionName,
                        StateName,
                        CurrentFrame,
                        X,
                        Y,
                        DX,
                        DY,
                        MapName,
                        Priority,
                        Active,
                        Solidity};
                this.Rows.Add(rowSpriteRow);
                return rowSpriteRow;
            }
            
            public SpriteRow FindByLayerNameNameMapName(string LayerName, string Name, string MapName) {
                return ((SpriteRow)(this.Rows.Find(new object[] {
                            LayerName,
                            Name,
                            MapName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SpriteDataTable cln = ((SpriteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SpriteDataTable();
            }
            
            internal void InitVars() {
                this.columnLayerName = this.Columns["LayerName"];
                this.columnName = this.Columns["Name"];
                this.columnDefinitionName = this.Columns["DefinitionName"];
                this.columnStateName = this.Columns["StateName"];
                this.columnCurrentFrame = this.Columns["CurrentFrame"];
                this.columnX = this.Columns["X"];
                this.columnY = this.Columns["Y"];
                this.columnDX = this.Columns["DX"];
                this.columnDY = this.Columns["DY"];
                this.columnMapName = this.Columns["MapName"];
                this.columnPriority = this.Columns["Priority"];
                this.columnActive = this.Columns["Active"];
                this.columnSolidity = this.Columns["Solidity"];
            }
            
            private void InitClass() {
                this.columnLayerName = new DataColumn("LayerName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnLayerName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnDefinitionName = new DataColumn("DefinitionName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDefinitionName);
                this.columnStateName = new DataColumn("StateName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStateName);
                this.columnCurrentFrame = new DataColumn("CurrentFrame", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrentFrame);
                this.columnX = new DataColumn("X", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnX);
                this.columnY = new DataColumn("Y", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnY);
                this.columnDX = new DataColumn("DX", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDX);
                this.columnDY = new DataColumn("DY", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDY);
                this.columnMapName = new DataColumn("MapName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMapName);
                this.columnPriority = new DataColumn("Priority", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPriority);
                this.columnActive = new DataColumn("Active", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnActive);
                this.columnSolidity = new DataColumn("Solidity", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSolidity);
                this.Constraints.Add(new UniqueConstraint("SpriteKey", new DataColumn[] {
                                this.columnLayerName,
                                this.columnName,
                                this.columnMapName}, true));
                this.Constraints.Add(new UniqueConstraint("SpriteKeyWithDefinition", new DataColumn[] {
                                this.columnDefinitionName,
                                this.columnLayerName,
                                this.columnName,
                                this.columnMapName}, false));
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
                this.columnStateName.Namespace = "";
                this.columnCurrentFrame.Namespace = "";
                this.columnX.Namespace = "";
                this.columnY.Namespace = "";
                this.columnDX.Namespace = "";
                this.columnDY.Namespace = "";
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnPriority.Namespace = "";
                this.columnActive.Namespace = "";
                this.columnActive.DefaultValue = true;
                this.columnSolidity.Namespace = "";
            }
            
            public SpriteRow NewSpriteRow() {
                return ((SpriteRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SpriteRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SpriteRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteRowChanged != null)) {
                    this.SpriteRowChanged(this, new SpriteRowChangeEvent(((SpriteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteRowChanging != null)) {
                    this.SpriteRowChanging(this, new SpriteRowChangeEvent(((SpriteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteRowDeleted != null)) {
                    this.SpriteRowDeleted(this, new SpriteRowChangeEvent(((SpriteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteRowDeleting != null)) {
                    this.SpriteRowDeleting(this, new SpriteRowChangeEvent(((SpriteRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSpriteRow(SpriteRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteRow : DataRow {
            
            private SpriteDataTable tableSprite;
            
            internal SpriteRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSprite = ((SpriteDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableSprite.NameColumn]));
                }
                set {
                    this[this.tableSprite.NameColumn] = value;
                }
            }
            
            public string DefinitionName {
                get {
                    return ((string)(this[this.tableSprite.DefinitionNameColumn]));
                }
                set {
                    this[this.tableSprite.DefinitionNameColumn] = value;
                }
            }
            
            public string StateName {
                get {
                    try {
                        return ((string)(this[this.tableSprite.StateNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.StateNameColumn] = value;
                }
            }
            
            public short CurrentFrame {
                get {
                    try {
                        return ((short)(this[this.tableSprite.CurrentFrameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.CurrentFrameColumn] = value;
                }
            }
            
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableSprite.XColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.XColumn] = value;
                }
            }
            
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableSprite.YColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.YColumn] = value;
                }
            }
            
            public System.Single DX {
                get {
                    try {
                        return ((System.Single)(this[this.tableSprite.DXColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.DXColumn] = value;
                }
            }
            
            public System.Single DY {
                get {
                    try {
                        return ((System.Single)(this[this.tableSprite.DYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.DYColumn] = value;
                }
            }
            
            public int Priority {
                get {
                    try {
                        return ((int)(this[this.tableSprite.PriorityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSprite.PriorityColumn] = value;
                }
            }
            
            public bool Active {
                get {
                    if (this.IsActiveNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSprite.ActiveColumn]));
                    }
                }
                set {
                    this[this.tableSprite.ActiveColumn] = value;
                }
            }
            
            public string Solidity {
                get {
                    if (this.IsSolidityNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSprite.SolidityColumn]));
                    }
                }
                set {
                    this[this.tableSprite.SolidityColumn] = value;
                }
            }
            
            public LayerRow LayerRowParent {
                get {
                    return ((LayerRow)(this.GetParentRow(this.Table.ParentRelations["LayerSprite"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LayerSprite"]);
                }
            }
            
            public SpriteStateRow SpriteStateRowParent {
                get {
                    return ((SpriteStateRow)(this.GetParentRow(this.Table.ParentRelations["SpriteDefinitionSprite"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteDefinitionSprite"]);
                }
            }
            
            public bool IsStateNameNull() {
                return this.IsNull(this.tableSprite.StateNameColumn);
            }
            
            public void SetStateNameNull() {
                this[this.tableSprite.StateNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentFrameNull() {
                return this.IsNull(this.tableSprite.CurrentFrameColumn);
            }
            
            public void SetCurrentFrameNull() {
                this[this.tableSprite.CurrentFrameColumn] = System.Convert.DBNull;
            }
            
            public bool IsXNull() {
                return this.IsNull(this.tableSprite.XColumn);
            }
            
            public void SetXNull() {
                this[this.tableSprite.XColumn] = System.Convert.DBNull;
            }
            
            public bool IsYNull() {
                return this.IsNull(this.tableSprite.YColumn);
            }
            
            public void SetYNull() {
                this[this.tableSprite.YColumn] = System.Convert.DBNull;
            }
            
            public bool IsDXNull() {
                return this.IsNull(this.tableSprite.DXColumn);
            }
            
            public void SetDXNull() {
                this[this.tableSprite.DXColumn] = System.Convert.DBNull;
            }
            
            public bool IsDYNull() {
                return this.IsNull(this.tableSprite.DYColumn);
            }
            
            public void SetDYNull() {
                this[this.tableSprite.DYColumn] = System.Convert.DBNull;
            }
            
            public bool IsPriorityNull() {
                return this.IsNull(this.tableSprite.PriorityColumn);
            }
            
            public void SetPriorityNull() {
                this[this.tableSprite.PriorityColumn] = System.Convert.DBNull;
            }
            
            public bool IsActiveNull() {
                return this.IsNull(this.tableSprite.ActiveColumn);
            }
            
            public void SetActiveNull() {
                this[this.tableSprite.ActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsSolidityNull() {
                return this.IsNull(this.tableSprite.SolidityColumn);
            }
            
            public void SetSolidityNull() {
                this[this.tableSprite.SolidityColumn] = System.Convert.DBNull;
            }
            
            public ParameterValueRow[] GetParameterValueRows() {
                return ((ParameterValueRow[])(this.GetChildRows(this.Table.ChildRelations["SpriteParameterValue"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteRowChangeEvent : EventArgs {
            
            private SpriteRow eventRow;
            
            private DataRowAction eventAction;
            
            public SpriteRowChangeEvent(SpriteRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SpriteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ParameterValueDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLayerName;
            
            private DataColumn columnSpriteName;
            
            private DataColumn columnParameterName;
            
            private DataColumn columnValue;
            
            private DataColumn columnDefinitionName;
            
            private DataColumn columnMapName;
            
            internal ParameterValueDataTable() : 
                    base("ParameterValue") {
                this.InitClass();
            }
            
            internal ParameterValueDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            internal DataColumn SpriteNameColumn {
                get {
                    return this.columnSpriteName;
                }
            }
            
            internal DataColumn ParameterNameColumn {
                get {
                    return this.columnParameterName;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            internal DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            public ParameterValueRow this[int index] {
                get {
                    return ((ParameterValueRow)(this.Rows[index]));
                }
            }
            
            public event ParameterValueRowChangeEventHandler ParameterValueRowChanged;
            
            public event ParameterValueRowChangeEventHandler ParameterValueRowChanging;
            
            public event ParameterValueRowChangeEventHandler ParameterValueRowDeleted;
            
            public event ParameterValueRowChangeEventHandler ParameterValueRowDeleting;
            
            public void AddParameterValueRow(ParameterValueRow row) {
                this.Rows.Add(row);
            }
            
            public ParameterValueRow AddParameterValueRow(string LayerName, string SpriteName, string ParameterName, int Value, string DefinitionName, string MapName) {
                ParameterValueRow rowParameterValueRow = ((ParameterValueRow)(this.NewRow()));
                rowParameterValueRow.ItemArray = new object[] {
                        LayerName,
                        SpriteName,
                        ParameterName,
                        Value,
                        DefinitionName,
                        MapName};
                this.Rows.Add(rowParameterValueRow);
                return rowParameterValueRow;
            }
            
            public ParameterValueRow FindByLayerNameSpriteNameParameterNameMapName(string LayerName, string SpriteName, string ParameterName, string MapName) {
                return ((ParameterValueRow)(this.Rows.Find(new object[] {
                            LayerName,
                            SpriteName,
                            ParameterName,
                            MapName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ParameterValueDataTable cln = ((ParameterValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ParameterValueDataTable();
            }
            
            internal void InitVars() {
                this.columnLayerName = this.Columns["LayerName"];
                this.columnSpriteName = this.Columns["SpriteName"];
                this.columnParameterName = this.Columns["ParameterName"];
                this.columnValue = this.Columns["Value"];
                this.columnDefinitionName = this.Columns["DefinitionName"];
                this.columnMapName = this.Columns["MapName"];
            }
            
            private void InitClass() {
                this.columnLayerName = new DataColumn("LayerName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnLayerName);
                this.columnSpriteName = new DataColumn("SpriteName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSpriteName);
                this.columnParameterName = new DataColumn("ParameterName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnParameterName);
                this.columnValue = new DataColumn("Value", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnValue);
                this.columnDefinitionName = new DataColumn("DefinitionName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDefinitionName);
                this.columnMapName = new DataColumn("MapName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMapName);
                this.Constraints.Add(new UniqueConstraint("ParameterValueKey", new DataColumn[] {
                                this.columnLayerName,
                                this.columnSpriteName,
                                this.columnParameterName,
                                this.columnMapName}, true));
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnSpriteName.AllowDBNull = false;
                this.columnSpriteName.Namespace = "";
                this.columnParameterName.AllowDBNull = false;
                this.columnParameterName.Namespace = "";
                this.columnValue.Namespace = "";
                this.columnDefinitionName.Namespace = "";
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
            }
            
            public ParameterValueRow NewParameterValueRow() {
                return ((ParameterValueRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ParameterValueRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ParameterValueRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParameterValueRowChanged != null)) {
                    this.ParameterValueRowChanged(this, new ParameterValueRowChangeEvent(((ParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParameterValueRowChanging != null)) {
                    this.ParameterValueRowChanging(this, new ParameterValueRowChangeEvent(((ParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParameterValueRowDeleted != null)) {
                    this.ParameterValueRowDeleted(this, new ParameterValueRowChangeEvent(((ParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParameterValueRowDeleting != null)) {
                    this.ParameterValueRowDeleting(this, new ParameterValueRowChangeEvent(((ParameterValueRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveParameterValueRow(ParameterValueRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ParameterValueRow : DataRow {
            
            private ParameterValueDataTable tableParameterValue;
            
            internal ParameterValueRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableParameterValue = ((ParameterValueDataTable)(this.Table));
            }
            
            public string ParameterName {
                get {
                    return ((string)(this[this.tableParameterValue.ParameterNameColumn]));
                }
                set {
                    this[this.tableParameterValue.ParameterNameColumn] = value;
                }
            }
            
            public int Value {
                get {
                    try {
                        return ((int)(this[this.tableParameterValue.ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParameterValue.ValueColumn] = value;
                }
            }
            
            public SpriteRow SpriteRowParent {
                get {
                    return ((SpriteRow)(this.GetParentRow(this.Table.ParentRelations["SpriteParameterValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteParameterValue"]);
                }
            }
            
            public SpriteParameterRow SpriteParameterRowParent {
                get {
                    return ((SpriteParameterRow)(this.GetParentRow(this.Table.ParentRelations["SpriteParameterParameterValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteParameterParameterValue"]);
                }
            }
            
            public bool IsValueNull() {
                return this.IsNull(this.tableParameterValue.ValueColumn);
            }
            
            public void SetValueNull() {
                this[this.tableParameterValue.ValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ParameterValueRowChangeEvent : EventArgs {
            
            private ParameterValueRow eventRow;
            
            private DataRowAction eventAction;
            
            public ParameterValueRowChangeEvent(ParameterValueRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ParameterValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpritePlanDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMapName;
            
            private DataColumn columnLayerName;
            
            private DataColumn columnName;
            
            private DataColumn columnPriority;
            
            internal SpritePlanDataTable() : 
                    base("SpritePlan") {
                this.InitClass();
            }
            
            internal SpritePlanDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            internal DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            public SpritePlanRow this[int index] {
                get {
                    return ((SpritePlanRow)(this.Rows[index]));
                }
            }
            
            public event SpritePlanRowChangeEventHandler SpritePlanRowChanged;
            
            public event SpritePlanRowChangeEventHandler SpritePlanRowChanging;
            
            public event SpritePlanRowChangeEventHandler SpritePlanRowDeleted;
            
            public event SpritePlanRowChangeEventHandler SpritePlanRowDeleting;
            
            public void AddSpritePlanRow(SpritePlanRow row) {
                this.Rows.Add(row);
            }
            
            public SpritePlanRow AddSpritePlanRow(string MapName, string LayerName, string Name, int Priority) {
                SpritePlanRow rowSpritePlanRow = ((SpritePlanRow)(this.NewRow()));
                rowSpritePlanRow.ItemArray = new object[] {
                        MapName,
                        LayerName,
                        Name,
                        Priority};
                this.Rows.Add(rowSpritePlanRow);
                return rowSpritePlanRow;
            }
            
            public SpritePlanRow FindByMapNameLayerNameName(string MapName, string LayerName, string Name) {
                return ((SpritePlanRow)(this.Rows.Find(new object[] {
                            MapName,
                            LayerName,
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SpritePlanDataTable cln = ((SpritePlanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SpritePlanDataTable();
            }
            
            internal void InitVars() {
                this.columnMapName = this.Columns["MapName"];
                this.columnLayerName = this.Columns["LayerName"];
                this.columnName = this.Columns["Name"];
                this.columnPriority = this.Columns["Priority"];
            }
            
            private void InitClass() {
                this.columnMapName = new DataColumn("MapName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMapName);
                this.columnLayerName = new DataColumn("LayerName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnLayerName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnPriority = new DataColumn("Priority", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPriority);
                this.Constraints.Add(new UniqueConstraint("SpritePlanKey", new DataColumn[] {
                                this.columnMapName,
                                this.columnLayerName,
                                this.columnName}, true));
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnPriority.Namespace = "";
            }
            
            public SpritePlanRow NewSpritePlanRow() {
                return ((SpritePlanRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SpritePlanRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SpritePlanRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpritePlanRowChanged != null)) {
                    this.SpritePlanRowChanged(this, new SpritePlanRowChangeEvent(((SpritePlanRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpritePlanRowChanging != null)) {
                    this.SpritePlanRowChanging(this, new SpritePlanRowChangeEvent(((SpritePlanRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpritePlanRowDeleted != null)) {
                    this.SpritePlanRowDeleted(this, new SpritePlanRowChangeEvent(((SpritePlanRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpritePlanRowDeleting != null)) {
                    this.SpritePlanRowDeleting(this, new SpritePlanRowChangeEvent(((SpritePlanRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSpritePlanRow(SpritePlanRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpritePlanRow : DataRow {
            
            private SpritePlanDataTable tableSpritePlan;
            
            internal SpritePlanRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpritePlan = ((SpritePlanDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableSpritePlan.NameColumn]));
                }
                set {
                    this[this.tableSpritePlan.NameColumn] = value;
                }
            }
            
            public int Priority {
                get {
                    try {
                        return ((int)(this[this.tableSpritePlan.PriorityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpritePlan.PriorityColumn] = value;
                }
            }
            
            public LayerRow LayerRowParent {
                get {
                    return ((LayerRow)(this.GetParentRow(this.Table.ParentRelations["LayerSpritePlan"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LayerSpritePlan"]);
                }
            }
            
            public bool IsPriorityNull() {
                return this.IsNull(this.tableSpritePlan.PriorityColumn);
            }
            
            public void SetPriorityNull() {
                this[this.tableSpritePlan.PriorityColumn] = System.Convert.DBNull;
            }
            
            public CoordinateRow[] GetCoordinateRows() {
                return ((CoordinateRow[])(this.GetChildRows(this.Table.ChildRelations["SpritePlanCoordinate"])));
            }
            
            public PlanRuleRow[] GetPlanRuleRows() {
                return ((PlanRuleRow[])(this.GetChildRows(this.Table.ChildRelations["SpritePlanPlanRule"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpritePlanRowChangeEvent : EventArgs {
            
            private SpritePlanRow eventRow;
            
            private DataRowAction eventAction;
            
            public SpritePlanRowChangeEvent(SpritePlanRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SpritePlanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CoordinateDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMapName;
            
            private DataColumn columnLayerName;
            
            private DataColumn columnPlanName;
            
            private DataColumn columnSequence;
            
            private DataColumn columnX;
            
            private DataColumn columnY;
            
            private DataColumn columnWeight;
            
            internal CoordinateDataTable() : 
                    base("Coordinate") {
                this.InitClass();
            }
            
            internal CoordinateDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            internal DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            internal DataColumn PlanNameColumn {
                get {
                    return this.columnPlanName;
                }
            }
            
            internal DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            internal DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            public CoordinateRow this[int index] {
                get {
                    return ((CoordinateRow)(this.Rows[index]));
                }
            }
            
            public event CoordinateRowChangeEventHandler CoordinateRowChanged;
            
            public event CoordinateRowChangeEventHandler CoordinateRowChanging;
            
            public event CoordinateRowChangeEventHandler CoordinateRowDeleted;
            
            public event CoordinateRowChangeEventHandler CoordinateRowDeleting;
            
            public void AddCoordinateRow(CoordinateRow row) {
                this.Rows.Add(row);
            }
            
            public CoordinateRow AddCoordinateRow(string MapName, string LayerName, string PlanName, short Sequence, int X, int Y, int Weight) {
                CoordinateRow rowCoordinateRow = ((CoordinateRow)(this.NewRow()));
                rowCoordinateRow.ItemArray = new object[] {
                        MapName,
                        LayerName,
                        PlanName,
                        Sequence,
                        X,
                        Y,
                        Weight};
                this.Rows.Add(rowCoordinateRow);
                return rowCoordinateRow;
            }
            
            public CoordinateRow FindByMapNameLayerNamePlanNameSequence(string MapName, string LayerName, string PlanName, short Sequence) {
                return ((CoordinateRow)(this.Rows.Find(new object[] {
                            MapName,
                            LayerName,
                            PlanName,
                            Sequence})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CoordinateDataTable cln = ((CoordinateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CoordinateDataTable();
            }
            
            internal void InitVars() {
                this.columnMapName = this.Columns["MapName"];
                this.columnLayerName = this.Columns["LayerName"];
                this.columnPlanName = this.Columns["PlanName"];
                this.columnSequence = this.Columns["Sequence"];
                this.columnX = this.Columns["X"];
                this.columnY = this.Columns["Y"];
                this.columnWeight = this.Columns["Weight"];
            }
            
            private void InitClass() {
                this.columnMapName = new DataColumn("MapName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMapName);
                this.columnLayerName = new DataColumn("LayerName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnLayerName);
                this.columnPlanName = new DataColumn("PlanName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPlanName);
                this.columnSequence = new DataColumn("Sequence", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSequence);
                this.columnX = new DataColumn("X", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnX);
                this.columnY = new DataColumn("Y", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnY);
                this.columnWeight = new DataColumn("Weight", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnWeight);
                this.Constraints.Add(new UniqueConstraint("CoordinateKey", new DataColumn[] {
                                this.columnMapName,
                                this.columnLayerName,
                                this.columnPlanName,
                                this.columnSequence}, true));
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnPlanName.AllowDBNull = false;
                this.columnPlanName.Namespace = "";
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
                this.columnX.Namespace = "";
                this.columnY.Namespace = "";
                this.columnWeight.Namespace = "";
            }
            
            public CoordinateRow NewCoordinateRow() {
                return ((CoordinateRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CoordinateRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CoordinateRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoordinateRowChanged != null)) {
                    this.CoordinateRowChanged(this, new CoordinateRowChangeEvent(((CoordinateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoordinateRowChanging != null)) {
                    this.CoordinateRowChanging(this, new CoordinateRowChangeEvent(((CoordinateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoordinateRowDeleted != null)) {
                    this.CoordinateRowDeleted(this, new CoordinateRowChangeEvent(((CoordinateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoordinateRowDeleting != null)) {
                    this.CoordinateRowDeleting(this, new CoordinateRowChangeEvent(((CoordinateRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCoordinateRow(CoordinateRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CoordinateRow : DataRow {
            
            private CoordinateDataTable tableCoordinate;
            
            internal CoordinateRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoordinate = ((CoordinateDataTable)(this.Table));
            }
            
            public short Sequence {
                get {
                    return ((short)(this[this.tableCoordinate.SequenceColumn]));
                }
                set {
                    this[this.tableCoordinate.SequenceColumn] = value;
                }
            }
            
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableCoordinate.XColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinate.XColumn] = value;
                }
            }
            
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableCoordinate.YColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinate.YColumn] = value;
                }
            }
            
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableCoordinate.WeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinate.WeightColumn] = value;
                }
            }
            
            public SpritePlanRow SpritePlanRowParent {
                get {
                    return ((SpritePlanRow)(this.GetParentRow(this.Table.ParentRelations["SpritePlanCoordinate"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpritePlanCoordinate"]);
                }
            }
            
            public bool IsXNull() {
                return this.IsNull(this.tableCoordinate.XColumn);
            }
            
            public void SetXNull() {
                this[this.tableCoordinate.XColumn] = System.Convert.DBNull;
            }
            
            public bool IsYNull() {
                return this.IsNull(this.tableCoordinate.YColumn);
            }
            
            public void SetYNull() {
                this[this.tableCoordinate.YColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeightNull() {
                return this.IsNull(this.tableCoordinate.WeightColumn);
            }
            
            public void SetWeightNull() {
                this[this.tableCoordinate.WeightColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CoordinateRowChangeEvent : EventArgs {
            
            private CoordinateRow eventRow;
            
            private DataRowAction eventAction;
            
            public CoordinateRowChangeEvent(CoordinateRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CoordinateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlanRuleDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMapName;
            
            private DataColumn columnLayerName;
            
            private DataColumn columnPlanName;
            
            private DataColumn columnName;
            
            private DataColumn columnSequence;
            
            private DataColumn columnType;
            
            private DataColumn columnFunction;
            
            private DataColumn columnParameter1;
            
            private DataColumn columnParameter2;
            
            private DataColumn columnParameter3;
            
            private DataColumn columnResultParameter;
            
            private DataColumn columnEndIf;
            
            internal PlanRuleDataTable() : 
                    base("PlanRule") {
                this.InitClass();
            }
            
            internal PlanRuleDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MapNameColumn {
                get {
                    return this.columnMapName;
                }
            }
            
            internal DataColumn LayerNameColumn {
                get {
                    return this.columnLayerName;
                }
            }
            
            internal DataColumn PlanNameColumn {
                get {
                    return this.columnPlanName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn FunctionColumn {
                get {
                    return this.columnFunction;
                }
            }
            
            internal DataColumn Parameter1Column {
                get {
                    return this.columnParameter1;
                }
            }
            
            internal DataColumn Parameter2Column {
                get {
                    return this.columnParameter2;
                }
            }
            
            internal DataColumn Parameter3Column {
                get {
                    return this.columnParameter3;
                }
            }
            
            internal DataColumn ResultParameterColumn {
                get {
                    return this.columnResultParameter;
                }
            }
            
            internal DataColumn EndIfColumn {
                get {
                    return this.columnEndIf;
                }
            }
            
            public PlanRuleRow this[int index] {
                get {
                    return ((PlanRuleRow)(this.Rows[index]));
                }
            }
            
            public event PlanRuleRowChangeEventHandler PlanRuleRowChanged;
            
            public event PlanRuleRowChangeEventHandler PlanRuleRowChanging;
            
            public event PlanRuleRowChangeEventHandler PlanRuleRowDeleted;
            
            public event PlanRuleRowChangeEventHandler PlanRuleRowDeleting;
            
            public void AddPlanRuleRow(PlanRuleRow row) {
                this.Rows.Add(row);
            }
            
            public PlanRuleRow AddPlanRuleRow(string MapName, string LayerName, string PlanName, string Name, int Sequence, string Type, string Function, string Parameter1, string Parameter2, string Parameter3, string ResultParameter, bool EndIf) {
                PlanRuleRow rowPlanRuleRow = ((PlanRuleRow)(this.NewRow()));
                rowPlanRuleRow.ItemArray = new object[] {
                        MapName,
                        LayerName,
                        PlanName,
                        Name,
                        Sequence,
                        Type,
                        Function,
                        Parameter1,
                        Parameter2,
                        Parameter3,
                        ResultParameter,
                        EndIf};
                this.Rows.Add(rowPlanRuleRow);
                return rowPlanRuleRow;
            }
            
            public PlanRuleRow FindByMapNameLayerNamePlanNameName(string MapName, string LayerName, string PlanName, string Name) {
                return ((PlanRuleRow)(this.Rows.Find(new object[] {
                            MapName,
                            LayerName,
                            PlanName,
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PlanRuleDataTable cln = ((PlanRuleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PlanRuleDataTable();
            }
            
            internal void InitVars() {
                this.columnMapName = this.Columns["MapName"];
                this.columnLayerName = this.Columns["LayerName"];
                this.columnPlanName = this.Columns["PlanName"];
                this.columnName = this.Columns["Name"];
                this.columnSequence = this.Columns["Sequence"];
                this.columnType = this.Columns["Type"];
                this.columnFunction = this.Columns["Function"];
                this.columnParameter1 = this.Columns["Parameter1"];
                this.columnParameter2 = this.Columns["Parameter2"];
                this.columnParameter3 = this.Columns["Parameter3"];
                this.columnResultParameter = this.Columns["ResultParameter"];
                this.columnEndIf = this.Columns["EndIf"];
            }
            
            private void InitClass() {
                this.columnMapName = new DataColumn("MapName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMapName);
                this.columnLayerName = new DataColumn("LayerName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnLayerName);
                this.columnPlanName = new DataColumn("PlanName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPlanName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnSequence = new DataColumn("Sequence", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSequence);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnType);
                this.columnFunction = new DataColumn("Function", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFunction);
                this.columnParameter1 = new DataColumn("Parameter1", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnParameter1);
                this.columnParameter2 = new DataColumn("Parameter2", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnParameter2);
                this.columnParameter3 = new DataColumn("Parameter3", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnParameter3);
                this.columnResultParameter = new DataColumn("ResultParameter", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnResultParameter);
                this.columnEndIf = new DataColumn("EndIf", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEndIf);
                this.Constraints.Add(new UniqueConstraint("PlanRuleKey", new DataColumn[] {
                                this.columnMapName,
                                this.columnLayerName,
                                this.columnPlanName,
                                this.columnName}, true));
                this.columnMapName.AllowDBNull = false;
                this.columnMapName.Namespace = "";
                this.columnLayerName.AllowDBNull = false;
                this.columnLayerName.Namespace = "";
                this.columnPlanName.AllowDBNull = false;
                this.columnPlanName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
                this.columnType.AllowDBNull = false;
                this.columnType.Namespace = "";
                this.columnFunction.AllowDBNull = false;
                this.columnFunction.Namespace = "";
                this.columnParameter1.Namespace = "";
                this.columnParameter2.Namespace = "";
                this.columnParameter3.Namespace = "";
                this.columnResultParameter.Namespace = "";
                this.columnEndIf.Namespace = "";
                this.columnEndIf.DefaultValue = false;
            }
            
            public PlanRuleRow NewPlanRuleRow() {
                return ((PlanRuleRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PlanRuleRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PlanRuleRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlanRuleRowChanged != null)) {
                    this.PlanRuleRowChanged(this, new PlanRuleRowChangeEvent(((PlanRuleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlanRuleRowChanging != null)) {
                    this.PlanRuleRowChanging(this, new PlanRuleRowChangeEvent(((PlanRuleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlanRuleRowDeleted != null)) {
                    this.PlanRuleRowDeleted(this, new PlanRuleRowChangeEvent(((PlanRuleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlanRuleRowDeleting != null)) {
                    this.PlanRuleRowDeleting(this, new PlanRuleRowChangeEvent(((PlanRuleRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePlanRuleRow(PlanRuleRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlanRuleRow : DataRow {
            
            private PlanRuleDataTable tablePlanRule;
            
            internal PlanRuleRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlanRule = ((PlanRuleDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tablePlanRule.NameColumn]));
                }
                set {
                    this[this.tablePlanRule.NameColumn] = value;
                }
            }
            
            public int Sequence {
                get {
                    return ((int)(this[this.tablePlanRule.SequenceColumn]));
                }
                set {
                    this[this.tablePlanRule.SequenceColumn] = value;
                }
            }
            
            public string Type {
                get {
                    return ((string)(this[this.tablePlanRule.TypeColumn]));
                }
                set {
                    this[this.tablePlanRule.TypeColumn] = value;
                }
            }
            
            public string Function {
                get {
                    return ((string)(this[this.tablePlanRule.FunctionColumn]));
                }
                set {
                    this[this.tablePlanRule.FunctionColumn] = value;
                }
            }
            
            public string Parameter1 {
                get {
                    try {
                        return ((string)(this[this.tablePlanRule.Parameter1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlanRule.Parameter1Column] = value;
                }
            }
            
            public string Parameter2 {
                get {
                    try {
                        return ((string)(this[this.tablePlanRule.Parameter2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlanRule.Parameter2Column] = value;
                }
            }
            
            public string Parameter3 {
                get {
                    try {
                        return ((string)(this[this.tablePlanRule.Parameter3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlanRule.Parameter3Column] = value;
                }
            }
            
            public string ResultParameter {
                get {
                    try {
                        return ((string)(this[this.tablePlanRule.ResultParameterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlanRule.ResultParameterColumn] = value;
                }
            }
            
            public bool EndIf {
                get {
                    if (this.IsEndIfNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tablePlanRule.EndIfColumn]));
                    }
                }
                set {
                    this[this.tablePlanRule.EndIfColumn] = value;
                }
            }
            
            public SpritePlanRow SpritePlanRowParent {
                get {
                    return ((SpritePlanRow)(this.GetParentRow(this.Table.ParentRelations["SpritePlanPlanRule"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpritePlanPlanRule"]);
                }
            }
            
            public bool IsParameter1Null() {
                return this.IsNull(this.tablePlanRule.Parameter1Column);
            }
            
            public void SetParameter1Null() {
                this[this.tablePlanRule.Parameter1Column] = System.Convert.DBNull;
            }
            
            public bool IsParameter2Null() {
                return this.IsNull(this.tablePlanRule.Parameter2Column);
            }
            
            public void SetParameter2Null() {
                this[this.tablePlanRule.Parameter2Column] = System.Convert.DBNull;
            }
            
            public bool IsParameter3Null() {
                return this.IsNull(this.tablePlanRule.Parameter3Column);
            }
            
            public void SetParameter3Null() {
                this[this.tablePlanRule.Parameter3Column] = System.Convert.DBNull;
            }
            
            public bool IsResultParameterNull() {
                return this.IsNull(this.tablePlanRule.ResultParameterColumn);
            }
            
            public void SetResultParameterNull() {
                this[this.tablePlanRule.ResultParameterColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndIfNull() {
                return this.IsNull(this.tablePlanRule.EndIfColumn);
            }
            
            public void SetEndIfNull() {
                this[this.tablePlanRule.EndIfColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlanRuleRowChangeEvent : EventArgs {
            
            private PlanRuleRow eventRow;
            
            private DataRowAction eventAction;
            
            public PlanRuleRowChangeEvent(PlanRuleRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PlanRuleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteDefinitionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            internal SpriteDefinitionDataTable() : 
                    base("SpriteDefinition") {
                this.InitClass();
            }
            
            internal SpriteDefinitionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public SpriteDefinitionRow this[int index] {
                get {
                    return ((SpriteDefinitionRow)(this.Rows[index]));
                }
            }
            
            public event SpriteDefinitionRowChangeEventHandler SpriteDefinitionRowChanged;
            
            public event SpriteDefinitionRowChangeEventHandler SpriteDefinitionRowChanging;
            
            public event SpriteDefinitionRowChangeEventHandler SpriteDefinitionRowDeleted;
            
            public event SpriteDefinitionRowChangeEventHandler SpriteDefinitionRowDeleting;
            
            public void AddSpriteDefinitionRow(SpriteDefinitionRow row) {
                this.Rows.Add(row);
            }
            
            public SpriteDefinitionRow AddSpriteDefinitionRow(string Name) {
                SpriteDefinitionRow rowSpriteDefinitionRow = ((SpriteDefinitionRow)(this.NewRow()));
                rowSpriteDefinitionRow.ItemArray = new object[] {
                        Name};
                this.Rows.Add(rowSpriteDefinitionRow);
                return rowSpriteDefinitionRow;
            }
            
            public SpriteDefinitionRow FindByName(string Name) {
                return ((SpriteDefinitionRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SpriteDefinitionDataTable cln = ((SpriteDefinitionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SpriteDefinitionDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("SpriteDefinitionKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
            }
            
            public SpriteDefinitionRow NewSpriteDefinitionRow() {
                return ((SpriteDefinitionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SpriteDefinitionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SpriteDefinitionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteDefinitionRowChanged != null)) {
                    this.SpriteDefinitionRowChanged(this, new SpriteDefinitionRowChangeEvent(((SpriteDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteDefinitionRowChanging != null)) {
                    this.SpriteDefinitionRowChanging(this, new SpriteDefinitionRowChangeEvent(((SpriteDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteDefinitionRowDeleted != null)) {
                    this.SpriteDefinitionRowDeleted(this, new SpriteDefinitionRowChangeEvent(((SpriteDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteDefinitionRowDeleting != null)) {
                    this.SpriteDefinitionRowDeleting(this, new SpriteDefinitionRowChangeEvent(((SpriteDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSpriteDefinitionRow(SpriteDefinitionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteDefinitionRow : DataRow {
            
            private SpriteDefinitionDataTable tableSpriteDefinition;
            
            internal SpriteDefinitionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteDefinition = ((SpriteDefinitionDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableSpriteDefinition.NameColumn]));
                }
                set {
                    this[this.tableSpriteDefinition.NameColumn] = value;
                }
            }
            
            public SpriteRuleRow[] GetSpriteRuleRows() {
                return ((SpriteRuleRow[])(this.GetChildRows(this.Table.ChildRelations["SpriteDefinitionSpriteRule"])));
            }
            
            public SpriteParameterRow[] GetSpriteParameterRows() {
                return ((SpriteParameterRow[])(this.GetChildRows(this.Table.ChildRelations["SpriteDefinitionSpriteParameter"])));
            }
            
            public SpriteStateRow[] GetSpriteStateRows() {
                return ((SpriteStateRow[])(this.GetChildRows(this.Table.ChildRelations["SpriteDefinitionState"])));
            }
            
            public SpriteCategorySpriteRow[] GetSpriteCategorySpriteRows() {
                return ((SpriteCategorySpriteRow[])(this.GetChildRows(this.Table.ChildRelations["SpriteDefinitionCategory"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteDefinitionRowChangeEvent : EventArgs {
            
            private SpriteDefinitionRow eventRow;
            
            private DataRowAction eventAction;
            
            public SpriteDefinitionRowChangeEvent(SpriteDefinitionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SpriteDefinitionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteRuleDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDefinitionName;
            
            private DataColumn columnName;
            
            private DataColumn columnSequence;
            
            private DataColumn columnType;
            
            private DataColumn columnFunction;
            
            private DataColumn columnParameter1;
            
            private DataColumn columnParameter2;
            
            private DataColumn columnParameter3;
            
            private DataColumn columnResultParameter;
            
            private DataColumn columnEndIf;
            
            internal SpriteRuleDataTable() : 
                    base("SpriteRule") {
                this.InitClass();
            }
            
            internal SpriteRuleDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn FunctionColumn {
                get {
                    return this.columnFunction;
                }
            }
            
            internal DataColumn Parameter1Column {
                get {
                    return this.columnParameter1;
                }
            }
            
            internal DataColumn Parameter2Column {
                get {
                    return this.columnParameter2;
                }
            }
            
            internal DataColumn Parameter3Column {
                get {
                    return this.columnParameter3;
                }
            }
            
            internal DataColumn ResultParameterColumn {
                get {
                    return this.columnResultParameter;
                }
            }
            
            internal DataColumn EndIfColumn {
                get {
                    return this.columnEndIf;
                }
            }
            
            public SpriteRuleRow this[int index] {
                get {
                    return ((SpriteRuleRow)(this.Rows[index]));
                }
            }
            
            public event SpriteRuleRowChangeEventHandler SpriteRuleRowChanged;
            
            public event SpriteRuleRowChangeEventHandler SpriteRuleRowChanging;
            
            public event SpriteRuleRowChangeEventHandler SpriteRuleRowDeleted;
            
            public event SpriteRuleRowChangeEventHandler SpriteRuleRowDeleting;
            
            public void AddSpriteRuleRow(SpriteRuleRow row) {
                this.Rows.Add(row);
            }
            
            public SpriteRuleRow AddSpriteRuleRow(SpriteDefinitionRow parentSpriteDefinitionRowBySpriteDefinitionSpriteRule, string Name, int Sequence, string Type, string Function, string Parameter1, string Parameter2, string Parameter3, string ResultParameter, bool EndIf) {
                SpriteRuleRow rowSpriteRuleRow = ((SpriteRuleRow)(this.NewRow()));
                rowSpriteRuleRow.ItemArray = new object[] {
                        parentSpriteDefinitionRowBySpriteDefinitionSpriteRule[0],
                        Name,
                        Sequence,
                        Type,
                        Function,
                        Parameter1,
                        Parameter2,
                        Parameter3,
                        ResultParameter,
                        EndIf};
                this.Rows.Add(rowSpriteRuleRow);
                return rowSpriteRuleRow;
            }
            
            public SpriteRuleRow FindByDefinitionNameName(string DefinitionName, string Name) {
                return ((SpriteRuleRow)(this.Rows.Find(new object[] {
                            DefinitionName,
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SpriteRuleDataTable cln = ((SpriteRuleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SpriteRuleDataTable();
            }
            
            internal void InitVars() {
                this.columnDefinitionName = this.Columns["DefinitionName"];
                this.columnName = this.Columns["Name"];
                this.columnSequence = this.Columns["Sequence"];
                this.columnType = this.Columns["Type"];
                this.columnFunction = this.Columns["Function"];
                this.columnParameter1 = this.Columns["Parameter1"];
                this.columnParameter2 = this.Columns["Parameter2"];
                this.columnParameter3 = this.Columns["Parameter3"];
                this.columnResultParameter = this.Columns["ResultParameter"];
                this.columnEndIf = this.Columns["EndIf"];
            }
            
            private void InitClass() {
                this.columnDefinitionName = new DataColumn("DefinitionName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDefinitionName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnSequence = new DataColumn("Sequence", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSequence);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnType);
                this.columnFunction = new DataColumn("Function", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFunction);
                this.columnParameter1 = new DataColumn("Parameter1", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnParameter1);
                this.columnParameter2 = new DataColumn("Parameter2", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnParameter2);
                this.columnParameter3 = new DataColumn("Parameter3", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnParameter3);
                this.columnResultParameter = new DataColumn("ResultParameter", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnResultParameter);
                this.columnEndIf = new DataColumn("EndIf", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEndIf);
                this.Constraints.Add(new UniqueConstraint("SpriteRuleKey", new DataColumn[] {
                                this.columnDefinitionName,
                                this.columnName}, true));
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
                this.columnType.AllowDBNull = false;
                this.columnType.Namespace = "";
                this.columnFunction.AllowDBNull = false;
                this.columnFunction.Namespace = "";
                this.columnParameter1.Namespace = "";
                this.columnParameter2.Namespace = "";
                this.columnParameter3.Namespace = "";
                this.columnResultParameter.Namespace = "";
                this.columnEndIf.Namespace = "";
                this.columnEndIf.DefaultValue = false;
            }
            
            public SpriteRuleRow NewSpriteRuleRow() {
                return ((SpriteRuleRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SpriteRuleRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SpriteRuleRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteRuleRowChanged != null)) {
                    this.SpriteRuleRowChanged(this, new SpriteRuleRowChangeEvent(((SpriteRuleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteRuleRowChanging != null)) {
                    this.SpriteRuleRowChanging(this, new SpriteRuleRowChangeEvent(((SpriteRuleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteRuleRowDeleted != null)) {
                    this.SpriteRuleRowDeleted(this, new SpriteRuleRowChangeEvent(((SpriteRuleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteRuleRowDeleting != null)) {
                    this.SpriteRuleRowDeleting(this, new SpriteRuleRowChangeEvent(((SpriteRuleRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSpriteRuleRow(SpriteRuleRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteRuleRow : DataRow {
            
            private SpriteRuleDataTable tableSpriteRule;
            
            internal SpriteRuleRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteRule = ((SpriteRuleDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableSpriteRule.NameColumn]));
                }
                set {
                    this[this.tableSpriteRule.NameColumn] = value;
                }
            }
            
            public int Sequence {
                get {
                    return ((int)(this[this.tableSpriteRule.SequenceColumn]));
                }
                set {
                    this[this.tableSpriteRule.SequenceColumn] = value;
                }
            }
            
            public string Type {
                get {
                    return ((string)(this[this.tableSpriteRule.TypeColumn]));
                }
                set {
                    this[this.tableSpriteRule.TypeColumn] = value;
                }
            }
            
            public string Function {
                get {
                    return ((string)(this[this.tableSpriteRule.FunctionColumn]));
                }
                set {
                    this[this.tableSpriteRule.FunctionColumn] = value;
                }
            }
            
            public string Parameter1 {
                get {
                    try {
                        return ((string)(this[this.tableSpriteRule.Parameter1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteRule.Parameter1Column] = value;
                }
            }
            
            public string Parameter2 {
                get {
                    try {
                        return ((string)(this[this.tableSpriteRule.Parameter2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteRule.Parameter2Column] = value;
                }
            }
            
            public string Parameter3 {
                get {
                    try {
                        return ((string)(this[this.tableSpriteRule.Parameter3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteRule.Parameter3Column] = value;
                }
            }
            
            public string ResultParameter {
                get {
                    try {
                        return ((string)(this[this.tableSpriteRule.ResultParameterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteRule.ResultParameterColumn] = value;
                }
            }
            
            public bool EndIf {
                get {
                    if (this.IsEndIfNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSpriteRule.EndIfColumn]));
                    }
                }
                set {
                    this[this.tableSpriteRule.EndIfColumn] = value;
                }
            }
            
            public SpriteDefinitionRow SpriteDefinitionRow {
                get {
                    return ((SpriteDefinitionRow)(this.GetParentRow(this.Table.ParentRelations["SpriteDefinitionSpriteRule"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteDefinitionSpriteRule"]);
                }
            }
            
            public bool IsParameter1Null() {
                return this.IsNull(this.tableSpriteRule.Parameter1Column);
            }
            
            public void SetParameter1Null() {
                this[this.tableSpriteRule.Parameter1Column] = System.Convert.DBNull;
            }
            
            public bool IsParameter2Null() {
                return this.IsNull(this.tableSpriteRule.Parameter2Column);
            }
            
            public void SetParameter2Null() {
                this[this.tableSpriteRule.Parameter2Column] = System.Convert.DBNull;
            }
            
            public bool IsParameter3Null() {
                return this.IsNull(this.tableSpriteRule.Parameter3Column);
            }
            
            public void SetParameter3Null() {
                this[this.tableSpriteRule.Parameter3Column] = System.Convert.DBNull;
            }
            
            public bool IsResultParameterNull() {
                return this.IsNull(this.tableSpriteRule.ResultParameterColumn);
            }
            
            public void SetResultParameterNull() {
                this[this.tableSpriteRule.ResultParameterColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndIfNull() {
                return this.IsNull(this.tableSpriteRule.EndIfColumn);
            }
            
            public void SetEndIfNull() {
                this[this.tableSpriteRule.EndIfColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteRuleRowChangeEvent : EventArgs {
            
            private SpriteRuleRow eventRow;
            
            private DataRowAction eventAction;
            
            public SpriteRuleRowChangeEvent(SpriteRuleRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SpriteRuleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteParameterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDefinitionName;
            
            private DataColumn columnName;
            
            internal SpriteParameterDataTable() : 
                    base("SpriteParameter") {
                this.InitClass();
            }
            
            internal SpriteParameterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public SpriteParameterRow this[int index] {
                get {
                    return ((SpriteParameterRow)(this.Rows[index]));
                }
            }
            
            public event SpriteParameterRowChangeEventHandler SpriteParameterRowChanged;
            
            public event SpriteParameterRowChangeEventHandler SpriteParameterRowChanging;
            
            public event SpriteParameterRowChangeEventHandler SpriteParameterRowDeleted;
            
            public event SpriteParameterRowChangeEventHandler SpriteParameterRowDeleting;
            
            public void AddSpriteParameterRow(SpriteParameterRow row) {
                this.Rows.Add(row);
            }
            
            public SpriteParameterRow AddSpriteParameterRow(SpriteDefinitionRow parentSpriteDefinitionRowBySpriteDefinitionSpriteParameter, string Name) {
                SpriteParameterRow rowSpriteParameterRow = ((SpriteParameterRow)(this.NewRow()));
                rowSpriteParameterRow.ItemArray = new object[] {
                        parentSpriteDefinitionRowBySpriteDefinitionSpriteParameter[0],
                        Name};
                this.Rows.Add(rowSpriteParameterRow);
                return rowSpriteParameterRow;
            }
            
            public SpriteParameterRow FindByDefinitionNameName(string DefinitionName, string Name) {
                return ((SpriteParameterRow)(this.Rows.Find(new object[] {
                            DefinitionName,
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SpriteParameterDataTable cln = ((SpriteParameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SpriteParameterDataTable();
            }
            
            internal void InitVars() {
                this.columnDefinitionName = this.Columns["DefinitionName"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnDefinitionName = new DataColumn("DefinitionName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDefinitionName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("SpriteParameterKey", new DataColumn[] {
                                this.columnDefinitionName,
                                this.columnName}, true));
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            public SpriteParameterRow NewSpriteParameterRow() {
                return ((SpriteParameterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SpriteParameterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SpriteParameterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteParameterRowChanged != null)) {
                    this.SpriteParameterRowChanged(this, new SpriteParameterRowChangeEvent(((SpriteParameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteParameterRowChanging != null)) {
                    this.SpriteParameterRowChanging(this, new SpriteParameterRowChangeEvent(((SpriteParameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteParameterRowDeleted != null)) {
                    this.SpriteParameterRowDeleted(this, new SpriteParameterRowChangeEvent(((SpriteParameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteParameterRowDeleting != null)) {
                    this.SpriteParameterRowDeleting(this, new SpriteParameterRowChangeEvent(((SpriteParameterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSpriteParameterRow(SpriteParameterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteParameterRow : DataRow {
            
            private SpriteParameterDataTable tableSpriteParameter;
            
            internal SpriteParameterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteParameter = ((SpriteParameterDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableSpriteParameter.NameColumn]));
                }
                set {
                    this[this.tableSpriteParameter.NameColumn] = value;
                }
            }
            
            public SpriteDefinitionRow SpriteDefinitionRow {
                get {
                    return ((SpriteDefinitionRow)(this.GetParentRow(this.Table.ParentRelations["SpriteDefinitionSpriteParameter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteDefinitionSpriteParameter"]);
                }
            }
            
            public ParameterValueRow[] GetParameterValueRows() {
                return ((ParameterValueRow[])(this.GetChildRows(this.Table.ChildRelations["SpriteParameterParameterValue"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteParameterRowChangeEvent : EventArgs {
            
            private SpriteParameterRow eventRow;
            
            private DataRowAction eventAction;
            
            public SpriteParameterRowChangeEvent(SpriteParameterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SpriteParameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteStateDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDefinitionName;
            
            private DataColumn columnName;
            
            private DataColumn columnFramesetName;
            
            private DataColumn columnSolidWidth;
            
            private DataColumn columnSolidHeight;
            
            private DataColumn columnSequence;
            
            internal SpriteStateDataTable() : 
                    base("SpriteState") {
                this.InitClass();
            }
            
            internal SpriteStateDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn FramesetNameColumn {
                get {
                    return this.columnFramesetName;
                }
            }
            
            internal DataColumn SolidWidthColumn {
                get {
                    return this.columnSolidWidth;
                }
            }
            
            internal DataColumn SolidHeightColumn {
                get {
                    return this.columnSolidHeight;
                }
            }
            
            internal DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            public SpriteStateRow this[int index] {
                get {
                    return ((SpriteStateRow)(this.Rows[index]));
                }
            }
            
            public event SpriteStateRowChangeEventHandler SpriteStateRowChanged;
            
            public event SpriteStateRowChangeEventHandler SpriteStateRowChanging;
            
            public event SpriteStateRowChangeEventHandler SpriteStateRowDeleted;
            
            public event SpriteStateRowChangeEventHandler SpriteStateRowDeleting;
            
            public void AddSpriteStateRow(SpriteStateRow row) {
                this.Rows.Add(row);
            }
            
            public SpriteStateRow AddSpriteStateRow(SpriteDefinitionRow parentSpriteDefinitionRowBySpriteDefinitionState, string Name, FramesetRow parentFramesetRowByFramesetSpriteState, short SolidWidth, short SolidHeight, short Sequence) {
                SpriteStateRow rowSpriteStateRow = ((SpriteStateRow)(this.NewRow()));
                rowSpriteStateRow.ItemArray = new object[] {
                        parentSpriteDefinitionRowBySpriteDefinitionState[0],
                        Name,
                        parentFramesetRowByFramesetSpriteState[0],
                        SolidWidth,
                        SolidHeight,
                        Sequence};
                this.Rows.Add(rowSpriteStateRow);
                return rowSpriteStateRow;
            }
            
            public SpriteStateRow FindByDefinitionNameName(string DefinitionName, string Name) {
                return ((SpriteStateRow)(this.Rows.Find(new object[] {
                            DefinitionName,
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SpriteStateDataTable cln = ((SpriteStateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SpriteStateDataTable();
            }
            
            internal void InitVars() {
                this.columnDefinitionName = this.Columns["DefinitionName"];
                this.columnName = this.Columns["Name"];
                this.columnFramesetName = this.Columns["FramesetName"];
                this.columnSolidWidth = this.Columns["SolidWidth"];
                this.columnSolidHeight = this.Columns["SolidHeight"];
                this.columnSequence = this.Columns["Sequence"];
            }
            
            private void InitClass() {
                this.columnDefinitionName = new DataColumn("DefinitionName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDefinitionName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnFramesetName = new DataColumn("FramesetName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFramesetName);
                this.columnSolidWidth = new DataColumn("SolidWidth", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSolidWidth);
                this.columnSolidHeight = new DataColumn("SolidHeight", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSolidHeight);
                this.columnSequence = new DataColumn("Sequence", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSequence);
                this.Constraints.Add(new UniqueConstraint("SpriteStateKey", new DataColumn[] {
                                this.columnDefinitionName,
                                this.columnName}, true));
                this.Constraints.Add(new UniqueConstraint("SpriteStateFramesetKey", new DataColumn[] {
                                this.columnDefinitionName,
                                this.columnName,
                                this.columnFramesetName}, false));
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnFramesetName.AllowDBNull = false;
                this.columnFramesetName.Namespace = "";
                this.columnSolidWidth.AllowDBNull = false;
                this.columnSolidWidth.Namespace = "";
                this.columnSolidHeight.AllowDBNull = false;
                this.columnSolidHeight.Namespace = "";
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
            }
            
            public SpriteStateRow NewSpriteStateRow() {
                return ((SpriteStateRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SpriteStateRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SpriteStateRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteStateRowChanged != null)) {
                    this.SpriteStateRowChanged(this, new SpriteStateRowChangeEvent(((SpriteStateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteStateRowChanging != null)) {
                    this.SpriteStateRowChanging(this, new SpriteStateRowChangeEvent(((SpriteStateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteStateRowDeleted != null)) {
                    this.SpriteStateRowDeleted(this, new SpriteStateRowChangeEvent(((SpriteStateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteStateRowDeleting != null)) {
                    this.SpriteStateRowDeleting(this, new SpriteStateRowChangeEvent(((SpriteStateRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSpriteStateRow(SpriteStateRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteStateRow : DataRow {
            
            private SpriteStateDataTable tableSpriteState;
            
            internal SpriteStateRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteState = ((SpriteStateDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableSpriteState.NameColumn]));
                }
                set {
                    this[this.tableSpriteState.NameColumn] = value;
                }
            }
            
            public string FramesetName {
                get {
                    return ((string)(this[this.tableSpriteState.FramesetNameColumn]));
                }
                set {
                    this[this.tableSpriteState.FramesetNameColumn] = value;
                }
            }
            
            public short SolidWidth {
                get {
                    return ((short)(this[this.tableSpriteState.SolidWidthColumn]));
                }
                set {
                    this[this.tableSpriteState.SolidWidthColumn] = value;
                }
            }
            
            public short SolidHeight {
                get {
                    return ((short)(this[this.tableSpriteState.SolidHeightColumn]));
                }
                set {
                    this[this.tableSpriteState.SolidHeightColumn] = value;
                }
            }
            
            public short Sequence {
                get {
                    return ((short)(this[this.tableSpriteState.SequenceColumn]));
                }
                set {
                    this[this.tableSpriteState.SequenceColumn] = value;
                }
            }
            
            public SpriteDefinitionRow SpriteDefinitionRow {
                get {
                    return ((SpriteDefinitionRow)(this.GetParentRow(this.Table.ParentRelations["SpriteDefinitionState"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteDefinitionState"]);
                }
            }
            
            public FramesetRow FramesetRow {
                get {
                    return ((FramesetRow)(this.GetParentRow(this.Table.ParentRelations["FramesetSpriteState"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FramesetSpriteState"]);
                }
            }
            
            public SpriteFrameRow[] GetSpriteFrameRows() {
                return ((SpriteFrameRow[])(this.GetChildRows(this.Table.ChildRelations["SpriteStateFrame"])));
            }
            
            public SpriteRow[] GetSpriteRows() {
                return ((SpriteRow[])(this.GetChildRows(this.Table.ChildRelations["SpriteDefinitionSprite"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteStateRowChangeEvent : EventArgs {
            
            private SpriteStateRow eventRow;
            
            private DataRowAction eventAction;
            
            public SpriteStateRowChangeEvent(SpriteStateRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SpriteStateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteFrameDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDefinitionName;
            
            private DataColumn columnStateName;
            
            private DataColumn columnSequence;
            
            private DataColumn columnFrameValue;
            
            private DataColumn columnDuration;
            
            private DataColumn columnMaskAlphaLevel;
            
            internal SpriteFrameDataTable() : 
                    base("SpriteFrame") {
                this.InitClass();
            }
            
            internal SpriteFrameDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            internal DataColumn StateNameColumn {
                get {
                    return this.columnStateName;
                }
            }
            
            internal DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            internal DataColumn FrameValueColumn {
                get {
                    return this.columnFrameValue;
                }
            }
            
            internal DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            internal DataColumn MaskAlphaLevelColumn {
                get {
                    return this.columnMaskAlphaLevel;
                }
            }
            
            public SpriteFrameRow this[int index] {
                get {
                    return ((SpriteFrameRow)(this.Rows[index]));
                }
            }
            
            public event SpriteFrameRowChangeEventHandler SpriteFrameRowChanged;
            
            public event SpriteFrameRowChangeEventHandler SpriteFrameRowChanging;
            
            public event SpriteFrameRowChangeEventHandler SpriteFrameRowDeleted;
            
            public event SpriteFrameRowChangeEventHandler SpriteFrameRowDeleting;
            
            public void AddSpriteFrameRow(SpriteFrameRow row) {
                this.Rows.Add(row);
            }
            
            public SpriteFrameRow AddSpriteFrameRow(string DefinitionName, string StateName, short Sequence, int FrameValue, short Duration, System.Byte MaskAlphaLevel) {
                SpriteFrameRow rowSpriteFrameRow = ((SpriteFrameRow)(this.NewRow()));
                rowSpriteFrameRow.ItemArray = new object[] {
                        DefinitionName,
                        StateName,
                        Sequence,
                        FrameValue,
                        Duration,
                        MaskAlphaLevel};
                this.Rows.Add(rowSpriteFrameRow);
                return rowSpriteFrameRow;
            }
            
            public SpriteFrameRow FindByDefinitionNameStateNameSequence(string DefinitionName, string StateName, short Sequence) {
                return ((SpriteFrameRow)(this.Rows.Find(new object[] {
                            DefinitionName,
                            StateName,
                            Sequence})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SpriteFrameDataTable cln = ((SpriteFrameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SpriteFrameDataTable();
            }
            
            internal void InitVars() {
                this.columnDefinitionName = this.Columns["DefinitionName"];
                this.columnStateName = this.Columns["StateName"];
                this.columnSequence = this.Columns["Sequence"];
                this.columnFrameValue = this.Columns["FrameValue"];
                this.columnDuration = this.Columns["Duration"];
                this.columnMaskAlphaLevel = this.Columns["MaskAlphaLevel"];
            }
            
            private void InitClass() {
                this.columnDefinitionName = new DataColumn("DefinitionName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDefinitionName);
                this.columnStateName = new DataColumn("StateName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnStateName);
                this.columnSequence = new DataColumn("Sequence", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSequence);
                this.columnFrameValue = new DataColumn("FrameValue", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFrameValue);
                this.columnDuration = new DataColumn("Duration", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDuration);
                this.columnMaskAlphaLevel = new DataColumn("MaskAlphaLevel", typeof(System.Byte), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMaskAlphaLevel);
                this.Constraints.Add(new UniqueConstraint("SpriteFrameKey", new DataColumn[] {
                                this.columnDefinitionName,
                                this.columnStateName,
                                this.columnSequence}, true));
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
                this.columnStateName.AllowDBNull = false;
                this.columnStateName.Namespace = "";
                this.columnSequence.AllowDBNull = false;
                this.columnSequence.Namespace = "";
                this.columnFrameValue.Namespace = "";
                this.columnDuration.Namespace = "";
                this.columnMaskAlphaLevel.Namespace = "";
                this.columnMaskAlphaLevel.DefaultValue = 0;
            }
            
            public SpriteFrameRow NewSpriteFrameRow() {
                return ((SpriteFrameRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SpriteFrameRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SpriteFrameRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteFrameRowChanged != null)) {
                    this.SpriteFrameRowChanged(this, new SpriteFrameRowChangeEvent(((SpriteFrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteFrameRowChanging != null)) {
                    this.SpriteFrameRowChanging(this, new SpriteFrameRowChangeEvent(((SpriteFrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteFrameRowDeleted != null)) {
                    this.SpriteFrameRowDeleted(this, new SpriteFrameRowChangeEvent(((SpriteFrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteFrameRowDeleting != null)) {
                    this.SpriteFrameRowDeleting(this, new SpriteFrameRowChangeEvent(((SpriteFrameRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSpriteFrameRow(SpriteFrameRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteFrameRow : DataRow {
            
            private SpriteFrameDataTable tableSpriteFrame;
            
            internal SpriteFrameRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteFrame = ((SpriteFrameDataTable)(this.Table));
            }
            
            public short Sequence {
                get {
                    return ((short)(this[this.tableSpriteFrame.SequenceColumn]));
                }
                set {
                    this[this.tableSpriteFrame.SequenceColumn] = value;
                }
            }
            
            public int FrameValue {
                get {
                    try {
                        return ((int)(this[this.tableSpriteFrame.FrameValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteFrame.FrameValueColumn] = value;
                }
            }
            
            public short Duration {
                get {
                    try {
                        return ((short)(this[this.tableSpriteFrame.DurationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteFrame.DurationColumn] = value;
                }
            }
            
            public System.Byte MaskAlphaLevel {
                get {
                    try {
                        return ((System.Byte)(this[this.tableSpriteFrame.MaskAlphaLevelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpriteFrame.MaskAlphaLevelColumn] = value;
                }
            }
            
            public SpriteStateRow SpriteStateRowParent {
                get {
                    return ((SpriteStateRow)(this.GetParentRow(this.Table.ParentRelations["SpriteStateFrame"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteStateFrame"]);
                }
            }
            
            public bool IsFrameValueNull() {
                return this.IsNull(this.tableSpriteFrame.FrameValueColumn);
            }
            
            public void SetFrameValueNull() {
                this[this.tableSpriteFrame.FrameValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsDurationNull() {
                return this.IsNull(this.tableSpriteFrame.DurationColumn);
            }
            
            public void SetDurationNull() {
                this[this.tableSpriteFrame.DurationColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaskAlphaLevelNull() {
                return this.IsNull(this.tableSpriteFrame.MaskAlphaLevelColumn);
            }
            
            public void SetMaskAlphaLevelNull() {
                this[this.tableSpriteFrame.MaskAlphaLevelColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteFrameRowChangeEvent : EventArgs {
            
            private SpriteFrameRow eventRow;
            
            private DataRowAction eventAction;
            
            public SpriteFrameRowChangeEvent(SpriteFrameRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SpriteFrameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteCategoryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            internal SpriteCategoryDataTable() : 
                    base("SpriteCategory") {
                this.InitClass();
            }
            
            internal SpriteCategoryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public SpriteCategoryRow this[int index] {
                get {
                    return ((SpriteCategoryRow)(this.Rows[index]));
                }
            }
            
            public event SpriteCategoryRowChangeEventHandler SpriteCategoryRowChanged;
            
            public event SpriteCategoryRowChangeEventHandler SpriteCategoryRowChanging;
            
            public event SpriteCategoryRowChangeEventHandler SpriteCategoryRowDeleted;
            
            public event SpriteCategoryRowChangeEventHandler SpriteCategoryRowDeleting;
            
            public void AddSpriteCategoryRow(SpriteCategoryRow row) {
                this.Rows.Add(row);
            }
            
            public SpriteCategoryRow AddSpriteCategoryRow(string Name) {
                SpriteCategoryRow rowSpriteCategoryRow = ((SpriteCategoryRow)(this.NewRow()));
                rowSpriteCategoryRow.ItemArray = new object[] {
                        Name};
                this.Rows.Add(rowSpriteCategoryRow);
                return rowSpriteCategoryRow;
            }
            
            public SpriteCategoryRow FindByName(string Name) {
                return ((SpriteCategoryRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SpriteCategoryDataTable cln = ((SpriteCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SpriteCategoryDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("SpriteCategoryKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
            }
            
            public SpriteCategoryRow NewSpriteCategoryRow() {
                return ((SpriteCategoryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SpriteCategoryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SpriteCategoryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteCategoryRowChanged != null)) {
                    this.SpriteCategoryRowChanged(this, new SpriteCategoryRowChangeEvent(((SpriteCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteCategoryRowChanging != null)) {
                    this.SpriteCategoryRowChanging(this, new SpriteCategoryRowChangeEvent(((SpriteCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteCategoryRowDeleted != null)) {
                    this.SpriteCategoryRowDeleted(this, new SpriteCategoryRowChangeEvent(((SpriteCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteCategoryRowDeleting != null)) {
                    this.SpriteCategoryRowDeleting(this, new SpriteCategoryRowChangeEvent(((SpriteCategoryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSpriteCategoryRow(SpriteCategoryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteCategoryRow : DataRow {
            
            private SpriteCategoryDataTable tableSpriteCategory;
            
            internal SpriteCategoryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteCategory = ((SpriteCategoryDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableSpriteCategory.NameColumn]));
                }
                set {
                    this[this.tableSpriteCategory.NameColumn] = value;
                }
            }
            
            public SpriteCategorySpriteRow[] GetSpriteCategorySpriteRows() {
                return ((SpriteCategorySpriteRow[])(this.GetChildRows(this.Table.ChildRelations["SpriteCategorySpriteCategorySprite"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteCategoryRowChangeEvent : EventArgs {
            
            private SpriteCategoryRow eventRow;
            
            private DataRowAction eventAction;
            
            public SpriteCategoryRowChangeEvent(SpriteCategoryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SpriteCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteCategorySpriteDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCategoryName;
            
            private DataColumn columnDefinitionName;
            
            internal SpriteCategorySpriteDataTable() : 
                    base("SpriteCategorySprite") {
                this.InitClass();
            }
            
            internal SpriteCategorySpriteDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            internal DataColumn DefinitionNameColumn {
                get {
                    return this.columnDefinitionName;
                }
            }
            
            public SpriteCategorySpriteRow this[int index] {
                get {
                    return ((SpriteCategorySpriteRow)(this.Rows[index]));
                }
            }
            
            public event SpriteCategorySpriteRowChangeEventHandler SpriteCategorySpriteRowChanged;
            
            public event SpriteCategorySpriteRowChangeEventHandler SpriteCategorySpriteRowChanging;
            
            public event SpriteCategorySpriteRowChangeEventHandler SpriteCategorySpriteRowDeleted;
            
            public event SpriteCategorySpriteRowChangeEventHandler SpriteCategorySpriteRowDeleting;
            
            public void AddSpriteCategorySpriteRow(SpriteCategorySpriteRow row) {
                this.Rows.Add(row);
            }
            
            public SpriteCategorySpriteRow AddSpriteCategorySpriteRow(SpriteCategoryRow parentSpriteCategoryRowBySpriteCategorySpriteCategorySprite, SpriteDefinitionRow parentSpriteDefinitionRowBySpriteDefinitionCategory) {
                SpriteCategorySpriteRow rowSpriteCategorySpriteRow = ((SpriteCategorySpriteRow)(this.NewRow()));
                rowSpriteCategorySpriteRow.ItemArray = new object[] {
                        parentSpriteCategoryRowBySpriteCategorySpriteCategorySprite[0],
                        parentSpriteDefinitionRowBySpriteDefinitionCategory[0]};
                this.Rows.Add(rowSpriteCategorySpriteRow);
                return rowSpriteCategorySpriteRow;
            }
            
            public SpriteCategorySpriteRow FindByCategoryNameDefinitionName(string CategoryName, string DefinitionName) {
                return ((SpriteCategorySpriteRow)(this.Rows.Find(new object[] {
                            CategoryName,
                            DefinitionName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SpriteCategorySpriteDataTable cln = ((SpriteCategorySpriteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SpriteCategorySpriteDataTable();
            }
            
            internal void InitVars() {
                this.columnCategoryName = this.Columns["CategoryName"];
                this.columnDefinitionName = this.Columns["DefinitionName"];
            }
            
            private void InitClass() {
                this.columnCategoryName = new DataColumn("CategoryName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCategoryName);
                this.columnDefinitionName = new DataColumn("DefinitionName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDefinitionName);
                this.Constraints.Add(new UniqueConstraint("SpriteCategorySpriteKey", new DataColumn[] {
                                this.columnCategoryName,
                                this.columnDefinitionName}, true));
                this.columnCategoryName.AllowDBNull = false;
                this.columnCategoryName.Namespace = "";
                this.columnDefinitionName.AllowDBNull = false;
                this.columnDefinitionName.Namespace = "";
            }
            
            public SpriteCategorySpriteRow NewSpriteCategorySpriteRow() {
                return ((SpriteCategorySpriteRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SpriteCategorySpriteRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SpriteCategorySpriteRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpriteCategorySpriteRowChanged != null)) {
                    this.SpriteCategorySpriteRowChanged(this, new SpriteCategorySpriteRowChangeEvent(((SpriteCategorySpriteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpriteCategorySpriteRowChanging != null)) {
                    this.SpriteCategorySpriteRowChanging(this, new SpriteCategorySpriteRowChangeEvent(((SpriteCategorySpriteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpriteCategorySpriteRowDeleted != null)) {
                    this.SpriteCategorySpriteRowDeleted(this, new SpriteCategorySpriteRowChangeEvent(((SpriteCategorySpriteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpriteCategorySpriteRowDeleting != null)) {
                    this.SpriteCategorySpriteRowDeleting(this, new SpriteCategorySpriteRowChangeEvent(((SpriteCategorySpriteRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSpriteCategorySpriteRow(SpriteCategorySpriteRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteCategorySpriteRow : DataRow {
            
            private SpriteCategorySpriteDataTable tableSpriteCategorySprite;
            
            internal SpriteCategorySpriteRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpriteCategorySprite = ((SpriteCategorySpriteDataTable)(this.Table));
            }
            
            public string DefinitionName {
                get {
                    return ((string)(this[this.tableSpriteCategorySprite.DefinitionNameColumn]));
                }
                set {
                    this[this.tableSpriteCategorySprite.DefinitionNameColumn] = value;
                }
            }
            
            public SpriteCategoryRow SpriteCategoryRow {
                get {
                    return ((SpriteCategoryRow)(this.GetParentRow(this.Table.ParentRelations["SpriteCategorySpriteCategorySprite"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteCategorySpriteCategorySprite"]);
                }
            }
            
            public SpriteDefinitionRow SpriteDefinitionRow {
                get {
                    return ((SpriteDefinitionRow)(this.GetParentRow(this.Table.ParentRelations["SpriteDefinitionCategory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SpriteDefinitionCategory"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpriteCategorySpriteRowChangeEvent : EventArgs {
            
            private SpriteCategorySpriteRow eventRow;
            
            private DataRowAction eventAction;
            
            public SpriteCategorySpriteRowChangeEvent(SpriteCategorySpriteRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SpriteCategorySpriteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolidityDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            internal SolidityDataTable() : 
                    base("Solidity") {
                this.InitClass();
            }
            
            internal SolidityDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public SolidityRow this[int index] {
                get {
                    return ((SolidityRow)(this.Rows[index]));
                }
            }
            
            public event SolidityRowChangeEventHandler SolidityRowChanged;
            
            public event SolidityRowChangeEventHandler SolidityRowChanging;
            
            public event SolidityRowChangeEventHandler SolidityRowDeleted;
            
            public event SolidityRowChangeEventHandler SolidityRowDeleting;
            
            public void AddSolidityRow(SolidityRow row) {
                this.Rows.Add(row);
            }
            
            public SolidityRow AddSolidityRow(string Name) {
                SolidityRow rowSolidityRow = ((SolidityRow)(this.NewRow()));
                rowSolidityRow.ItemArray = new object[] {
                        Name};
                this.Rows.Add(rowSolidityRow);
                return rowSolidityRow;
            }
            
            public SolidityRow FindByName(string Name) {
                return ((SolidityRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SolidityDataTable cln = ((SolidityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SolidityDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("SolidityKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
            }
            
            public SolidityRow NewSolidityRow() {
                return ((SolidityRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SolidityRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SolidityRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SolidityRowChanged != null)) {
                    this.SolidityRowChanged(this, new SolidityRowChangeEvent(((SolidityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SolidityRowChanging != null)) {
                    this.SolidityRowChanging(this, new SolidityRowChangeEvent(((SolidityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SolidityRowDeleted != null)) {
                    this.SolidityRowDeleted(this, new SolidityRowChangeEvent(((SolidityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SolidityRowDeleting != null)) {
                    this.SolidityRowDeleting(this, new SolidityRowChangeEvent(((SolidityRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSolidityRow(SolidityRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolidityRow : DataRow {
            
            private SolidityDataTable tableSolidity;
            
            internal SolidityRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSolidity = ((SolidityDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableSolidity.NameColumn]));
                }
                set {
                    this[this.tableSolidity.NameColumn] = value;
                }
            }
            
            public SolidityShapeRow[] GetSolidityShapeRows() {
                return ((SolidityShapeRow[])(this.GetChildRows(this.Table.ChildRelations["SoliditySolidityShape"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolidityRowChangeEvent : EventArgs {
            
            private SolidityRow eventRow;
            
            private DataRowAction eventAction;
            
            public SolidityRowChangeEvent(SolidityRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SolidityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolidityShapeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSolidityName;
            
            private DataColumn columnCategoryName;
            
            private DataColumn columnShapeName;
            
            internal SolidityShapeDataTable() : 
                    base("SolidityShape") {
                this.InitClass();
            }
            
            internal SolidityShapeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SolidityNameColumn {
                get {
                    return this.columnSolidityName;
                }
            }
            
            internal DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            internal DataColumn ShapeNameColumn {
                get {
                    return this.columnShapeName;
                }
            }
            
            public SolidityShapeRow this[int index] {
                get {
                    return ((SolidityShapeRow)(this.Rows[index]));
                }
            }
            
            public event SolidityShapeRowChangeEventHandler SolidityShapeRowChanged;
            
            public event SolidityShapeRowChangeEventHandler SolidityShapeRowChanging;
            
            public event SolidityShapeRowChangeEventHandler SolidityShapeRowDeleted;
            
            public event SolidityShapeRowChangeEventHandler SolidityShapeRowDeleting;
            
            public void AddSolidityShapeRow(SolidityShapeRow row) {
                this.Rows.Add(row);
            }
            
            public SolidityShapeRow AddSolidityShapeRow(SolidityRow parentSolidityRowBySoliditySolidityShape, TileCategoryRow parentTileCategoryRowByCategorySolidityShape, string ShapeName) {
                SolidityShapeRow rowSolidityShapeRow = ((SolidityShapeRow)(this.NewRow()));
                rowSolidityShapeRow.ItemArray = new object[] {
                        parentSolidityRowBySoliditySolidityShape[0],
                        parentTileCategoryRowByCategorySolidityShape[0],
                        ShapeName};
                this.Rows.Add(rowSolidityShapeRow);
                return rowSolidityShapeRow;
            }
            
            public SolidityShapeRow FindBySolidityNameCategoryName(string SolidityName, string CategoryName) {
                return ((SolidityShapeRow)(this.Rows.Find(new object[] {
                            SolidityName,
                            CategoryName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SolidityShapeDataTable cln = ((SolidityShapeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SolidityShapeDataTable();
            }
            
            internal void InitVars() {
                this.columnSolidityName = this.Columns["SolidityName"];
                this.columnCategoryName = this.Columns["CategoryName"];
                this.columnShapeName = this.Columns["ShapeName"];
            }
            
            private void InitClass() {
                this.columnSolidityName = new DataColumn("SolidityName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSolidityName);
                this.columnCategoryName = new DataColumn("CategoryName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCategoryName);
                this.columnShapeName = new DataColumn("ShapeName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnShapeName);
                this.Constraints.Add(new UniqueConstraint("SolidityShapeKey", new DataColumn[] {
                                this.columnSolidityName,
                                this.columnCategoryName}, true));
                this.columnSolidityName.AllowDBNull = false;
                this.columnSolidityName.Namespace = "";
                this.columnCategoryName.AllowDBNull = false;
                this.columnCategoryName.Namespace = "";
                this.columnShapeName.Namespace = "";
            }
            
            public SolidityShapeRow NewSolidityShapeRow() {
                return ((SolidityShapeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SolidityShapeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SolidityShapeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SolidityShapeRowChanged != null)) {
                    this.SolidityShapeRowChanged(this, new SolidityShapeRowChangeEvent(((SolidityShapeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SolidityShapeRowChanging != null)) {
                    this.SolidityShapeRowChanging(this, new SolidityShapeRowChangeEvent(((SolidityShapeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SolidityShapeRowDeleted != null)) {
                    this.SolidityShapeRowDeleted(this, new SolidityShapeRowChangeEvent(((SolidityShapeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SolidityShapeRowDeleting != null)) {
                    this.SolidityShapeRowDeleting(this, new SolidityShapeRowChangeEvent(((SolidityShapeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSolidityShapeRow(SolidityShapeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolidityShapeRow : DataRow {
            
            private SolidityShapeDataTable tableSolidityShape;
            
            internal SolidityShapeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSolidityShape = ((SolidityShapeDataTable)(this.Table));
            }
            
            public string CategoryName {
                get {
                    return ((string)(this[this.tableSolidityShape.CategoryNameColumn]));
                }
                set {
                    this[this.tableSolidityShape.CategoryNameColumn] = value;
                }
            }
            
            public string ShapeName {
                get {
                    try {
                        return ((string)(this[this.tableSolidityShape.ShapeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSolidityShape.ShapeNameColumn] = value;
                }
            }
            
            public SolidityRow SolidityRow {
                get {
                    return ((SolidityRow)(this.GetParentRow(this.Table.ParentRelations["SoliditySolidityShape"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SoliditySolidityShape"]);
                }
            }
            
            public TileCategoryRow TileCategoryRow {
                get {
                    return ((TileCategoryRow)(this.GetParentRow(this.Table.ParentRelations["CategorySolidityShape"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CategorySolidityShape"]);
                }
            }
            
            public bool IsShapeNameNull() {
                return this.IsNull(this.tableSolidityShape.ShapeNameColumn);
            }
            
            public void SetShapeNameNull() {
                this[this.tableSolidityShape.ShapeNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SolidityShapeRowChangeEvent : EventArgs {
            
            private SolidityShapeRow eventRow;
            
            private DataRowAction eventAction;
            
            public SolidityShapeRowChangeEvent(SolidityShapeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SolidityShapeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SourceCodeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnIsCustomObject;
            
            private DataColumn columnDependsOn;
            
            private DataColumn columnText;
            
            private DataColumn columnCustomObjectData;
            
            internal SourceCodeDataTable() : 
                    base("SourceCode") {
                this.InitClass();
            }
            
            internal SourceCodeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn IsCustomObjectColumn {
                get {
                    return this.columnIsCustomObject;
                }
            }
            
            internal DataColumn DependsOnColumn {
                get {
                    return this.columnDependsOn;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn CustomObjectDataColumn {
                get {
                    return this.columnCustomObjectData;
                }
            }
            
            public SourceCodeRow this[int index] {
                get {
                    return ((SourceCodeRow)(this.Rows[index]));
                }
            }
            
            public event SourceCodeRowChangeEventHandler SourceCodeRowChanged;
            
            public event SourceCodeRowChangeEventHandler SourceCodeRowChanging;
            
            public event SourceCodeRowChangeEventHandler SourceCodeRowDeleted;
            
            public event SourceCodeRowChangeEventHandler SourceCodeRowDeleting;
            
            public void AddSourceCodeRow(SourceCodeRow row) {
                this.Rows.Add(row);
            }
            
            public SourceCodeRow AddSourceCodeRow(string Name, bool IsCustomObject, string DependsOn, string Text, System.Byte[] CustomObjectData) {
                SourceCodeRow rowSourceCodeRow = ((SourceCodeRow)(this.NewRow()));
                rowSourceCodeRow.ItemArray = new object[] {
                        Name,
                        IsCustomObject,
                        DependsOn,
                        Text,
                        CustomObjectData};
                this.Rows.Add(rowSourceCodeRow);
                return rowSourceCodeRow;
            }
            
            public SourceCodeRow FindByName(string Name) {
                return ((SourceCodeRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SourceCodeDataTable cln = ((SourceCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SourceCodeDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnIsCustomObject = this.Columns["IsCustomObject"];
                this.columnDependsOn = this.Columns["DependsOn"];
                this.columnText = this.Columns["Text"];
                this.columnCustomObjectData = this.Columns["CustomObjectData"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnIsCustomObject = new DataColumn("IsCustomObject", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsCustomObject);
                this.columnDependsOn = new DataColumn("DependsOn", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDependsOn);
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnText);
                this.columnCustomObjectData = new DataColumn("CustomObjectData", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomObjectData);
                this.Constraints.Add(new UniqueConstraint("SourceCodeKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnIsCustomObject.Namespace = "";
                this.columnIsCustomObject.DefaultValue = false;
                this.columnDependsOn.Namespace = "";
            }
            
            public SourceCodeRow NewSourceCodeRow() {
                return ((SourceCodeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SourceCodeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SourceCodeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SourceCodeRowChanged != null)) {
                    this.SourceCodeRowChanged(this, new SourceCodeRowChangeEvent(((SourceCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SourceCodeRowChanging != null)) {
                    this.SourceCodeRowChanging(this, new SourceCodeRowChangeEvent(((SourceCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SourceCodeRowDeleted != null)) {
                    this.SourceCodeRowDeleted(this, new SourceCodeRowChangeEvent(((SourceCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SourceCodeRowDeleting != null)) {
                    this.SourceCodeRowDeleting(this, new SourceCodeRowChangeEvent(((SourceCodeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSourceCodeRow(SourceCodeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SourceCodeRow : DataRow {
            
            private SourceCodeDataTable tableSourceCode;
            
            internal SourceCodeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSourceCode = ((SourceCodeDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableSourceCode.NameColumn]));
                }
                set {
                    this[this.tableSourceCode.NameColumn] = value;
                }
            }
            
            public bool IsCustomObject {
                get {
                    if (this.IsIsCustomObjectNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSourceCode.IsCustomObjectColumn]));
                    }
                }
                set {
                    this[this.tableSourceCode.IsCustomObjectColumn] = value;
                }
            }
            
            public string DependsOn {
                get {
                    try {
                        return ((string)(this[this.tableSourceCode.DependsOnColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCode.DependsOnColumn] = value;
                }
            }
            
            public string Text {
                get {
                    try {
                        return ((string)(this[this.tableSourceCode.TextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCode.TextColumn] = value;
                }
            }
            
            public System.Byte[] CustomObjectData {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableSourceCode.CustomObjectDataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCode.CustomObjectDataColumn] = value;
                }
            }
            
            public bool IsIsCustomObjectNull() {
                return this.IsNull(this.tableSourceCode.IsCustomObjectColumn);
            }
            
            public void SetIsCustomObjectNull() {
                this[this.tableSourceCode.IsCustomObjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsDependsOnNull() {
                return this.IsNull(this.tableSourceCode.DependsOnColumn);
            }
            
            public void SetDependsOnNull() {
                this[this.tableSourceCode.DependsOnColumn] = System.Convert.DBNull;
            }
            
            public bool IsTextNull() {
                return this.IsNull(this.tableSourceCode.TextColumn);
            }
            
            public void SetTextNull() {
                this[this.tableSourceCode.TextColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomObjectDataNull() {
                return this.IsNull(this.tableSourceCode.CustomObjectDataColumn);
            }
            
            public void SetCustomObjectDataNull() {
                this[this.tableSourceCode.CustomObjectDataColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SourceCodeRowChangeEvent : EventArgs {
            
            private SourceCodeRow eventRow;
            
            private DataRowAction eventAction;
            
            public SourceCodeRowChangeEvent(SourceCodeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SourceCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDisplayMode;
            
            private DataColumn columnWindowed;
            
            private DataColumn columnTitleText;
            
            private DataColumn columnStartMap;
            
            private DataColumn columnOverlayMap;
            
            internal ProjectDataTable() : 
                    base("Project") {
                this.InitClass();
            }
            
            internal ProjectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DisplayModeColumn {
                get {
                    return this.columnDisplayMode;
                }
            }
            
            internal DataColumn WindowedColumn {
                get {
                    return this.columnWindowed;
                }
            }
            
            internal DataColumn TitleTextColumn {
                get {
                    return this.columnTitleText;
                }
            }
            
            internal DataColumn StartMapColumn {
                get {
                    return this.columnStartMap;
                }
            }
            
            internal DataColumn OverlayMapColumn {
                get {
                    return this.columnOverlayMap;
                }
            }
            
            public ProjectRow this[int index] {
                get {
                    return ((ProjectRow)(this.Rows[index]));
                }
            }
            
            public event ProjectRowChangeEventHandler ProjectRowChanged;
            
            public event ProjectRowChangeEventHandler ProjectRowChanging;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleted;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleting;
            
            public void AddProjectRow(ProjectRow row) {
                this.Rows.Add(row);
            }
            
            public ProjectRow AddProjectRow(string DisplayMode, bool Windowed, string TitleText, string StartMap, string OverlayMap) {
                ProjectRow rowProjectRow = ((ProjectRow)(this.NewRow()));
                rowProjectRow.ItemArray = new object[] {
                        DisplayMode,
                        Windowed,
                        TitleText,
                        StartMap,
                        OverlayMap};
                this.Rows.Add(rowProjectRow);
                return rowProjectRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProjectDataTable cln = ((ProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProjectDataTable();
            }
            
            internal void InitVars() {
                this.columnDisplayMode = this.Columns["DisplayMode"];
                this.columnWindowed = this.Columns["Windowed"];
                this.columnTitleText = this.Columns["TitleText"];
                this.columnStartMap = this.Columns["StartMap"];
                this.columnOverlayMap = this.Columns["OverlayMap"];
            }
            
            private void InitClass() {
                this.columnDisplayMode = new DataColumn("DisplayMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisplayMode);
                this.columnWindowed = new DataColumn("Windowed", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnWindowed);
                this.columnTitleText = new DataColumn("TitleText", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTitleText);
                this.columnStartMap = new DataColumn("StartMap", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStartMap);
                this.columnOverlayMap = new DataColumn("OverlayMap", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOverlayMap);
                this.columnDisplayMode.AllowDBNull = false;
                this.columnDisplayMode.Namespace = "";
                this.columnWindowed.AllowDBNull = false;
                this.columnWindowed.Namespace = "";
                this.columnTitleText.Namespace = "";
                this.columnStartMap.Namespace = "";
                this.columnOverlayMap.Namespace = "";
            }
            
            public ProjectRow NewProjectRow() {
                return ((ProjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProjectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectRowChanged != null)) {
                    this.ProjectRowChanged(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectRowChanging != null)) {
                    this.ProjectRowChanging(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectRowDeleted != null)) {
                    this.ProjectRowDeleted(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectRowDeleting != null)) {
                    this.ProjectRowDeleting(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProjectRow(ProjectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectRow : DataRow {
            
            private ProjectDataTable tableProject;
            
            internal ProjectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProject = ((ProjectDataTable)(this.Table));
            }
            
            public string DisplayMode {
                get {
                    return ((string)(this[this.tableProject.DisplayModeColumn]));
                }
                set {
                    this[this.tableProject.DisplayModeColumn] = value;
                }
            }
            
            public bool Windowed {
                get {
                    return ((bool)(this[this.tableProject.WindowedColumn]));
                }
                set {
                    this[this.tableProject.WindowedColumn] = value;
                }
            }
            
            public string TitleText {
                get {
                    try {
                        return ((string)(this[this.tableProject.TitleTextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.TitleTextColumn] = value;
                }
            }
            
            public string StartMap {
                get {
                    if (this.IsStartMapNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProject.StartMapColumn]));
                    }
                }
                set {
                    this[this.tableProject.StartMapColumn] = value;
                }
            }
            
            public string OverlayMap {
                get {
                    if (this.IsOverlayMapNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableProject.OverlayMapColumn]));
                    }
                }
                set {
                    this[this.tableProject.OverlayMapColumn] = value;
                }
            }
            
            public bool IsTitleTextNull() {
                return this.IsNull(this.tableProject.TitleTextColumn);
            }
            
            public void SetTitleTextNull() {
                this[this.tableProject.TitleTextColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartMapNull() {
                return this.IsNull(this.tableProject.StartMapColumn);
            }
            
            public void SetStartMapNull() {
                this[this.tableProject.StartMapColumn] = System.Convert.DBNull;
            }
            
            public bool IsOverlayMapNull() {
                return this.IsNull(this.tableProject.OverlayMapColumn);
            }
            
            public void SetOverlayMapNull() {
                this[this.tableProject.OverlayMapColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectRowChangeEvent : EventArgs {
            
            private ProjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProjectRowChangeEvent(ProjectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TileCategoryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            internal TileCategoryDataTable() : 
                    base("TileCategory") {
                this.InitClass();
            }
            
            internal TileCategoryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public TileCategoryRow this[int index] {
                get {
                    return ((TileCategoryRow)(this.Rows[index]));
                }
            }
            
            public event TileCategoryRowChangeEventHandler TileCategoryRowChanged;
            
            public event TileCategoryRowChangeEventHandler TileCategoryRowChanging;
            
            public event TileCategoryRowChangeEventHandler TileCategoryRowDeleted;
            
            public event TileCategoryRowChangeEventHandler TileCategoryRowDeleting;
            
            public void AddTileCategoryRow(TileCategoryRow row) {
                this.Rows.Add(row);
            }
            
            public TileCategoryRow AddTileCategoryRow(string Name) {
                TileCategoryRow rowTileCategoryRow = ((TileCategoryRow)(this.NewRow()));
                rowTileCategoryRow.ItemArray = new object[] {
                        Name};
                this.Rows.Add(rowTileCategoryRow);
                return rowTileCategoryRow;
            }
            
            public TileCategoryRow FindByName(string Name) {
                return ((TileCategoryRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TileCategoryDataTable cln = ((TileCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TileCategoryDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("CategoryKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
            }
            
            public TileCategoryRow NewTileCategoryRow() {
                return ((TileCategoryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TileCategoryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TileCategoryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TileCategoryRowChanged != null)) {
                    this.TileCategoryRowChanged(this, new TileCategoryRowChangeEvent(((TileCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TileCategoryRowChanging != null)) {
                    this.TileCategoryRowChanging(this, new TileCategoryRowChangeEvent(((TileCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TileCategoryRowDeleted != null)) {
                    this.TileCategoryRowDeleted(this, new TileCategoryRowChangeEvent(((TileCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TileCategoryRowDeleting != null)) {
                    this.TileCategoryRowDeleting(this, new TileCategoryRowChangeEvent(((TileCategoryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTileCategoryRow(TileCategoryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TileCategoryRow : DataRow {
            
            private TileCategoryDataTable tableTileCategory;
            
            internal TileCategoryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTileCategory = ((TileCategoryDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableTileCategory.NameColumn]));
                }
                set {
                    this[this.tableTileCategory.NameColumn] = value;
                }
            }
            
            public CategorizedTilesetRow[] GetCategorizedTilesetRows() {
                return ((CategorizedTilesetRow[])(this.GetChildRows(this.Table.ChildRelations["TileCategoryCategorizedTileset"])));
            }
            
            public SolidityShapeRow[] GetSolidityShapeRows() {
                return ((SolidityShapeRow[])(this.GetChildRows(this.Table.ChildRelations["CategorySolidityShape"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TileCategoryRowChangeEvent : EventArgs {
            
            private TileCategoryRow eventRow;
            
            private DataRowAction eventAction;
            
            public TileCategoryRowChangeEvent(TileCategoryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TileCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CategorizedTilesetDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTileset;
            
            private DataColumn columnName;
            
            internal CategorizedTilesetDataTable() : 
                    base("CategorizedTileset") {
                this.InitClass();
            }
            
            internal CategorizedTilesetDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TilesetColumn {
                get {
                    return this.columnTileset;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public CategorizedTilesetRow this[int index] {
                get {
                    return ((CategorizedTilesetRow)(this.Rows[index]));
                }
            }
            
            public event CategorizedTilesetRowChangeEventHandler CategorizedTilesetRowChanged;
            
            public event CategorizedTilesetRowChangeEventHandler CategorizedTilesetRowChanging;
            
            public event CategorizedTilesetRowChangeEventHandler CategorizedTilesetRowDeleted;
            
            public event CategorizedTilesetRowChangeEventHandler CategorizedTilesetRowDeleting;
            
            public void AddCategorizedTilesetRow(CategorizedTilesetRow row) {
                this.Rows.Add(row);
            }
            
            public CategorizedTilesetRow AddCategorizedTilesetRow(TilesetRow parentTilesetRowByTilesetCategory, TileCategoryRow parentTileCategoryRowByTileCategoryCategorizedTileset) {
                CategorizedTilesetRow rowCategorizedTilesetRow = ((CategorizedTilesetRow)(this.NewRow()));
                rowCategorizedTilesetRow.ItemArray = new object[] {
                        parentTilesetRowByTilesetCategory[0],
                        parentTileCategoryRowByTileCategoryCategorizedTileset[0]};
                this.Rows.Add(rowCategorizedTilesetRow);
                return rowCategorizedTilesetRow;
            }
            
            public CategorizedTilesetRow FindByTilesetName(string Tileset, string Name) {
                return ((CategorizedTilesetRow)(this.Rows.Find(new object[] {
                            Tileset,
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CategorizedTilesetDataTable cln = ((CategorizedTilesetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CategorizedTilesetDataTable();
            }
            
            internal void InitVars() {
                this.columnTileset = this.Columns["Tileset"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnTileset = new DataColumn("Tileset", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTileset);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("CategorizedTilesetKey", new DataColumn[] {
                                this.columnTileset,
                                this.columnName}, true));
                this.columnTileset.AllowDBNull = false;
                this.columnTileset.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            public CategorizedTilesetRow NewCategorizedTilesetRow() {
                return ((CategorizedTilesetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CategorizedTilesetRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CategorizedTilesetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategorizedTilesetRowChanged != null)) {
                    this.CategorizedTilesetRowChanged(this, new CategorizedTilesetRowChangeEvent(((CategorizedTilesetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategorizedTilesetRowChanging != null)) {
                    this.CategorizedTilesetRowChanging(this, new CategorizedTilesetRowChangeEvent(((CategorizedTilesetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategorizedTilesetRowDeleted != null)) {
                    this.CategorizedTilesetRowDeleted(this, new CategorizedTilesetRowChangeEvent(((CategorizedTilesetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategorizedTilesetRowDeleting != null)) {
                    this.CategorizedTilesetRowDeleting(this, new CategorizedTilesetRowChangeEvent(((CategorizedTilesetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCategorizedTilesetRow(CategorizedTilesetRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CategorizedTilesetRow : DataRow {
            
            private CategorizedTilesetDataTable tableCategorizedTileset;
            
            internal CategorizedTilesetRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategorizedTileset = ((CategorizedTilesetDataTable)(this.Table));
            }
            
            public string Tileset {
                get {
                    return ((string)(this[this.tableCategorizedTileset.TilesetColumn]));
                }
                set {
                    this[this.tableCategorizedTileset.TilesetColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableCategorizedTileset.NameColumn]));
                }
                set {
                    this[this.tableCategorizedTileset.NameColumn] = value;
                }
            }
            
            public TileCategoryRow TileCategoryRow {
                get {
                    return ((TileCategoryRow)(this.GetParentRow(this.Table.ParentRelations["TileCategoryCategorizedTileset"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TileCategoryCategorizedTileset"]);
                }
            }
            
            public TilesetRow TilesetRow {
                get {
                    return ((TilesetRow)(this.GetParentRow(this.Table.ParentRelations["TilesetCategory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TilesetCategory"]);
                }
            }
            
            public CategoryTileRow[] GetCategoryTileRows() {
                return ((CategoryTileRow[])(this.GetChildRows(this.Table.ChildRelations["CategoryCategoryTile"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CategorizedTilesetRowChangeEvent : EventArgs {
            
            private CategorizedTilesetRow eventRow;
            
            private DataRowAction eventAction;
            
            public CategorizedTilesetRowChangeEvent(CategorizedTilesetRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CategorizedTilesetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CategoryTileDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTileset;
            
            private DataColumn columnCategory;
            
            private DataColumn columnTileValue;
            
            internal CategoryTileDataTable() : 
                    base("CategoryTile") {
                this.InitClass();
            }
            
            internal CategoryTileDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TilesetColumn {
                get {
                    return this.columnTileset;
                }
            }
            
            internal DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            internal DataColumn TileValueColumn {
                get {
                    return this.columnTileValue;
                }
            }
            
            public CategoryTileRow this[int index] {
                get {
                    return ((CategoryTileRow)(this.Rows[index]));
                }
            }
            
            public event CategoryTileRowChangeEventHandler CategoryTileRowChanged;
            
            public event CategoryTileRowChangeEventHandler CategoryTileRowChanging;
            
            public event CategoryTileRowChangeEventHandler CategoryTileRowDeleted;
            
            public event CategoryTileRowChangeEventHandler CategoryTileRowDeleting;
            
            public void AddCategoryTileRow(CategoryTileRow row) {
                this.Rows.Add(row);
            }
            
            public CategoryTileRow AddCategoryTileRow(string Tileset, string Category, int TileValue) {
                CategoryTileRow rowCategoryTileRow = ((CategoryTileRow)(this.NewRow()));
                rowCategoryTileRow.ItemArray = new object[] {
                        Tileset,
                        Category,
                        TileValue};
                this.Rows.Add(rowCategoryTileRow);
                return rowCategoryTileRow;
            }
            
            public CategoryTileRow FindByTilesetCategoryTileValue(string Tileset, string Category, int TileValue) {
                return ((CategoryTileRow)(this.Rows.Find(new object[] {
                            Tileset,
                            Category,
                            TileValue})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CategoryTileDataTable cln = ((CategoryTileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CategoryTileDataTable();
            }
            
            internal void InitVars() {
                this.columnTileset = this.Columns["Tileset"];
                this.columnCategory = this.Columns["Category"];
                this.columnTileValue = this.Columns["TileValue"];
            }
            
            private void InitClass() {
                this.columnTileset = new DataColumn("Tileset", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTileset);
                this.columnCategory = new DataColumn("Category", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCategory);
                this.columnTileValue = new DataColumn("TileValue", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTileValue);
                this.Constraints.Add(new UniqueConstraint("CategoryTileKey", new DataColumn[] {
                                this.columnTileset,
                                this.columnCategory,
                                this.columnTileValue}, true));
                this.columnTileset.AllowDBNull = false;
                this.columnTileset.Namespace = "";
                this.columnCategory.AllowDBNull = false;
                this.columnCategory.Namespace = "";
                this.columnTileValue.AllowDBNull = false;
                this.columnTileValue.Namespace = "";
            }
            
            public CategoryTileRow NewCategoryTileRow() {
                return ((CategoryTileRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CategoryTileRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CategoryTileRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoryTileRowChanged != null)) {
                    this.CategoryTileRowChanged(this, new CategoryTileRowChangeEvent(((CategoryTileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoryTileRowChanging != null)) {
                    this.CategoryTileRowChanging(this, new CategoryTileRowChangeEvent(((CategoryTileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoryTileRowDeleted != null)) {
                    this.CategoryTileRowDeleted(this, new CategoryTileRowChangeEvent(((CategoryTileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoryTileRowDeleting != null)) {
                    this.CategoryTileRowDeleting(this, new CategoryTileRowChangeEvent(((CategoryTileRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCategoryTileRow(CategoryTileRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CategoryTileRow : DataRow {
            
            private CategoryTileDataTable tableCategoryTile;
            
            internal CategoryTileRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategoryTile = ((CategoryTileDataTable)(this.Table));
            }
            
            public int TileValue {
                get {
                    return ((int)(this[this.tableCategoryTile.TileValueColumn]));
                }
                set {
                    this[this.tableCategoryTile.TileValueColumn] = value;
                }
            }
            
            public CategorizedTilesetRow CategorizedTilesetRowParent {
                get {
                    return ((CategorizedTilesetRow)(this.GetParentRow(this.Table.ParentRelations["CategoryCategoryTile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CategoryCategoryTile"]);
                }
            }
            
            public CategoryFrameRow[] GetCategoryFrameRows() {
                return ((CategoryFrameRow[])(this.GetChildRows(this.Table.ChildRelations["CategoryTileCategoryFrame"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CategoryTileRowChangeEvent : EventArgs {
            
            private CategoryTileRow eventRow;
            
            private DataRowAction eventAction;
            
            public CategoryTileRowChangeEvent(CategoryTileRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CategoryTileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CategoryFrameDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTileset;
            
            private DataColumn columnCategory;
            
            private DataColumn columnTileValue;
            
            private DataColumn columnFrame;
            
            internal CategoryFrameDataTable() : 
                    base("CategoryFrame") {
                this.InitClass();
            }
            
            internal CategoryFrameDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TilesetColumn {
                get {
                    return this.columnTileset;
                }
            }
            
            internal DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            internal DataColumn TileValueColumn {
                get {
                    return this.columnTileValue;
                }
            }
            
            internal DataColumn FrameColumn {
                get {
                    return this.columnFrame;
                }
            }
            
            public CategoryFrameRow this[int index] {
                get {
                    return ((CategoryFrameRow)(this.Rows[index]));
                }
            }
            
            public event CategoryFrameRowChangeEventHandler CategoryFrameRowChanged;
            
            public event CategoryFrameRowChangeEventHandler CategoryFrameRowChanging;
            
            public event CategoryFrameRowChangeEventHandler CategoryFrameRowDeleted;
            
            public event CategoryFrameRowChangeEventHandler CategoryFrameRowDeleting;
            
            public void AddCategoryFrameRow(CategoryFrameRow row) {
                this.Rows.Add(row);
            }
            
            public CategoryFrameRow AddCategoryFrameRow(string Tileset, string Category, int TileValue, short Frame) {
                CategoryFrameRow rowCategoryFrameRow = ((CategoryFrameRow)(this.NewRow()));
                rowCategoryFrameRow.ItemArray = new object[] {
                        Tileset,
                        Category,
                        TileValue,
                        Frame};
                this.Rows.Add(rowCategoryFrameRow);
                return rowCategoryFrameRow;
            }
            
            public CategoryFrameRow FindByTilesetCategoryTileValueFrame(string Tileset, string Category, int TileValue, short Frame) {
                return ((CategoryFrameRow)(this.Rows.Find(new object[] {
                            Tileset,
                            Category,
                            TileValue,
                            Frame})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CategoryFrameDataTable cln = ((CategoryFrameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CategoryFrameDataTable();
            }
            
            internal void InitVars() {
                this.columnTileset = this.Columns["Tileset"];
                this.columnCategory = this.Columns["Category"];
                this.columnTileValue = this.Columns["TileValue"];
                this.columnFrame = this.Columns["Frame"];
            }
            
            private void InitClass() {
                this.columnTileset = new DataColumn("Tileset", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTileset);
                this.columnCategory = new DataColumn("Category", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCategory);
                this.columnTileValue = new DataColumn("TileValue", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTileValue);
                this.columnFrame = new DataColumn("Frame", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFrame);
                this.Constraints.Add(new UniqueConstraint("CategoryFrameKey", new DataColumn[] {
                                this.columnTileset,
                                this.columnCategory,
                                this.columnTileValue,
                                this.columnFrame}, true));
                this.columnTileset.AllowDBNull = false;
                this.columnTileset.Namespace = "";
                this.columnCategory.AllowDBNull = false;
                this.columnCategory.Namespace = "";
                this.columnTileValue.AllowDBNull = false;
                this.columnTileValue.Namespace = "";
                this.columnFrame.AllowDBNull = false;
                this.columnFrame.Namespace = "";
            }
            
            public CategoryFrameRow NewCategoryFrameRow() {
                return ((CategoryFrameRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CategoryFrameRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CategoryFrameRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoryFrameRowChanged != null)) {
                    this.CategoryFrameRowChanged(this, new CategoryFrameRowChangeEvent(((CategoryFrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoryFrameRowChanging != null)) {
                    this.CategoryFrameRowChanging(this, new CategoryFrameRowChangeEvent(((CategoryFrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoryFrameRowDeleted != null)) {
                    this.CategoryFrameRowDeleted(this, new CategoryFrameRowChangeEvent(((CategoryFrameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoryFrameRowDeleting != null)) {
                    this.CategoryFrameRowDeleting(this, new CategoryFrameRowChangeEvent(((CategoryFrameRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCategoryFrameRow(CategoryFrameRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CategoryFrameRow : DataRow {
            
            private CategoryFrameDataTable tableCategoryFrame;
            
            internal CategoryFrameRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategoryFrame = ((CategoryFrameDataTable)(this.Table));
            }
            
            public short Frame {
                get {
                    return ((short)(this[this.tableCategoryFrame.FrameColumn]));
                }
                set {
                    this[this.tableCategoryFrame.FrameColumn] = value;
                }
            }
            
            public CategoryTileRow CategoryTileRowParent {
                get {
                    return ((CategoryTileRow)(this.GetParentRow(this.Table.ParentRelations["CategoryTileCategoryFrame"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CategoryTileCategoryFrame"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CategoryFrameRowChangeEvent : EventArgs {
            
            private CategoryFrameRow eventRow;
            
            private DataRowAction eventAction;
            
            public CategoryFrameRowChangeEvent(CategoryFrameRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CategoryFrameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
