<?xml version="1.0" encoding="utf-8"?>
<topic id="d07a3ab3-7056-48e4-9700-1b54d8205acc" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>As of version 2.2, Scrolling Game Development Kit can export
      projects in HTML 5 format. HTML 5 introduces powerful new features to the
      web's common HTML format that allow high performance graphics and more to
      be represented in web pages on browsers across a variety of platforms.
      This makes HTML 5 a powerful tool for cross-platform development (and in
      the case of SGDK2 projects, game development in particular). This dialog,
      launched from the file menu, allows control over how the HTML 5 code is
      generated.</para>
      <para>The HTML 5 code generated by SGDK2 does not entirely support all
      SGDK2 features, but the majority of functionality is present, including
      all graphics, framesets, maps, layers, tiles (including animated tiles),
      counters, sprites, sprite definitions, tile categories, sprite categories,
      solidity, sprite states, and most rules and custom code.  There are a few
      rules not yet supported, and custom code does not support embedded data,
      so audio support is not straightforward. (See details <externalLink>
<linkText>online</linkText>
<linkUri>https://docs.google.com/spreadsheet/pub?hl=en_US&amp;hl=en_US&amp;key=0AuyO-2scTVuRdFBpTUZoM0NNRzhXVXdud1E5a3A4cFE&amp;output=html</linkUri>
<linkTarget>_blank</linkTarget>
</externalLink>.) SGDK2 also outputs HTML5 code to implicitly allow the mouse or
      touch screen to scroll around the maps if scrolling is not overridden
      by other rules.</para>
    </introduction>
    <section address="Filename">
      <title>File Name</title>
      <content>
        <para>This specifies the name of the HTML file that will be generated.
        Other files may be generated in the same directory as this file
        depending on options selected below.</para>
      </content>
    </section>
    <section address="DisplayArea">
      <title>Display Area</title>
      <content>
        <para>This option determines the behavior of the map display area
        (HTML 5 canvas).</para>
      </content>
      <sections>
          <section address="Fixed">
              <title>Fixed size defined in project settings</title>
              <content>
                  <para>Maps will be displayed in a fixed-size area (canvas) on
                  the page. The size is determined by
                  <link xlink:href="b2f49025-f318-4428-b580-4c0f21ad00e8"/>.
                  </para>
              </content>
          </section>
          <section address="Fill">
              <title>Fill browser window</title>
              <content>
                  <para>The display area (canvas) will automatically resize to
                  fill the window. This is useful when displaying the page on a
                  mobile device. However, it does not work well in conjunction
                  with the option to generate buttons to switch between maps.
                  </para>
              </content>
          </section>
      </sections>
    </section>
    <section address="OutputFiles">
      <title>Output files</title>
      <content>
        <para>This determines whether code is generated to a single file or
        multiple files.</para>
      </content>
      <sections>
          <section address="SingleFile">
          <title>Single HTML file</title>
          <content>
          <para>All data including graphics are embedded into a single HTML
          file. This is recommended when viewing the HTML file from a local
          file system because security restrictions apply and tend to interfere
          with some of the generated code's operation when the images are stored
          in separate files on a local file system. These restrictions do not
          apply to files served from a true web server.</para>
          </content>
          </section>
          <section address="MultiFile">
          <title>Separate HTML, PNG and JS files</title>
          <content>
          <para>The HTML is generated independently from the JavaScript (JS)
          and Graphic sheet image (PNG) files and referenced by the HTML file.
          This can make the resources more managable and (in the case of PNG
          files) more compact.</para>
          </content>
          </section>
      </sections>
    </section>
    <section address="MapButtons">
      <title>Generate buttons to switch between maps</title>
      <content>
        <para>If checked, a series of buttons is added below the map viewing
        area that allows the user to switch to all the maps defined in the
        project. This is not recommended in conjunction with the option to fill
        the browser window.</para>
      </content>
    </section>
    <section address="CamelCase">
      <title>Force rule function calls to camelCase</title>
      <content>
        <para>If checked, generated JavaScript code that calls Sprite rule
        functions and Plan rule functions will automatically force the first
        letter of the function name to lowercase. This allows you to use
        uppercase function names in C# and camel-case function names in HTML5,
        which is the convention in JavaScript coding. This affects only the
        code generated by sprite rules and plan rules. It does not affect the
        source code files in the project's source code folder. That means if
        you choose not to force camel case you must either switch all the C#
        source code functions to be camel case or change all the JavaScript
        source code functions to match the C# names.</para>
      </content>
    </section>
    <relatedTopics>
      <link xlink:href="b2f49025-f318-4428-b580-4c0f21ad00e8"/>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>