<?xml version="1.0" standalone="yes"?>
<ProjectDataset>
  <xs:schema id="ProjectDataset" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop">
    <xs:element name="ProjectDataset" msdata:IsDataSet="true" msprop:SchemaVersion="1">
      <xs:complexType>
        <xs:choice maxOccurs="unbounded">
          <xs:element name="GraphicSheet">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Image" type="xs:base64Binary" minOccurs="0" msdata:Ordinal="5" />
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Columns" type="xs:short" default="16" />
              <xs:attribute name="Rows" type="xs:short" default="8" />
              <xs:attribute name="CellWidth" msdata:Caption="Cell Width" type="xs:short" default="32" />
              <xs:attribute name="CellHeight" msdata:Caption="Cell Height" type="xs:short" default="32" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Frameset">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Frame" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="FrameValue" type="xs:int" use="required" />
                    <xs:attribute name="GraphicSheet" type="xs:string" use="required" />
                    <xs:attribute name="CellIndex" type="xs:short" use="required" />
                    <xs:attribute name="m11" type="xs:float" default="1" />
                    <xs:attribute name="m12" type="xs:float" default="0" />
                    <xs:attribute name="m21" type="xs:float" default="0" />
                    <xs:attribute name="m22" type="xs:float" default="1" />
                    <xs:attribute name="dx" type="xs:float" default="0" />
                    <xs:attribute name="dy" type="xs:float" default="0" />
                    <xs:attribute name="Name" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="color" type="xs:int" default="-1" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Tileset">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Tile" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="TileFrame" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:attribute name="Sequence" type="xs:short" use="required" />
                          <xs:attribute name="FrameValue" type="xs:int" />
                          <xs:attribute name="Duration" type="xs:short" />
                          <xs:attribute name="Name" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="TileValue" type="xs:int" msdata:AllowDBNull="false" use="prohibited" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="TileValue" type="xs:int" use="required" />
                    <xs:attribute name="Counter" type="xs:string" />
                    <xs:attribute name="Name" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Frameset" type="xs:string" />
              <xs:attribute name="TileWidth" type="xs:short" use="required" />
              <xs:attribute name="TileHeight" type="xs:short" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Counter">
            <xs:complexType>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Value" type="xs:int" />
              <xs:attribute name="Max" type="xs:int" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Map">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Layer" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="Tiles" type="xs:base64Binary" minOccurs="0" msdata:Ordinal="12" />
                      <xs:element name="Sprite" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="ParameterValue" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="SpriteName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="ParameterName" type="xs:string" use="required" />
                                <xs:attribute name="Value" type="xs:int" />
                                <xs:attribute name="DefinitionName" type="xs:string" use="prohibited" />
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Name" type="xs:string" use="required" />
                          <xs:attribute name="DefinitionName" type="xs:string" use="required" />
                          <xs:attribute name="StateName" type="xs:string" />
                          <xs:attribute name="CurrentFrame" type="xs:short" />
                          <xs:attribute name="X" type="xs:int" />
                          <xs:attribute name="Y" type="xs:int" />
                          <xs:attribute name="DX" type="xs:float" />
                          <xs:attribute name="DY" type="xs:float" />
                          <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Priority" type="xs:int" />
                          <xs:attribute name="Active" type="xs:boolean" default="true" />
                          <xs:attribute name="Solidity" type="xs:string" />
                          <xs:attribute name="Color" type="xs:int" default="-1" />
                        </xs:complexType>
                      </xs:element>
                      <xs:element name="SpritePlan" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="Coordinate" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="PlanName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Sequence" type="xs:short" use="required" />
                                <xs:attribute name="X" type="xs:int" />
                                <xs:attribute name="Y" type="xs:int" />
                                <xs:attribute name="Weight" type="xs:int" />
                              </xs:complexType>
                            </xs:element>
                            <xs:element name="PlanRule" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="PlanName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Name" type="xs:string" use="required" />
                                <xs:attribute name="Sequence" type="xs:int" use="required" />
                                <xs:attribute name="Type" type="xs:string" use="required" />
                                <xs:attribute name="Function" type="xs:string" use="required" />
                                <xs:attribute name="Parameter1" type="xs:string" />
                                <xs:attribute name="Parameter2" type="xs:string" />
                                <xs:attribute name="Parameter3" type="xs:string" />
                                <xs:attribute name="ResultParameter" type="xs:string" />
                                <xs:attribute name="EndIf" type="xs:boolean" default="false" />
                                <xs:attribute name="Suspended" type="xs:boolean" default="false" />
                              </xs:complexType>
                            </xs:element>
                            <xs:element name="PlanParameterValue" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="MapName" type="xs:string" use="required" />
                                <xs:attribute name="LayerName" type="xs:string" use="required" />
                                <xs:attribute name="PlanName" type="xs:string" use="required" />
                                <xs:attribute name="Name" type="xs:string" use="required" />
                                <xs:attribute name="Value" type="xs:string" />
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Name" type="xs:string" use="required" />
                          <xs:attribute name="Priority" type="xs:int" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="Name" type="xs:string" use="required" />
                    <xs:attribute name="Width" type="xs:int" use="required" />
                    <xs:attribute name="Height" type="xs:int" use="required" />
                    <xs:attribute name="Tileset" type="xs:string" />
                    <xs:attribute name="BytesPerTile" type="xs:unsignedByte" use="required" />
                    <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="OffsetX" type="xs:int" default="0" />
                    <xs:attribute name="OffsetY" type="xs:int" default="0" />
                    <xs:attribute name="ScrollRateX" type="xs:float" default="1" />
                    <xs:attribute name="ScrollRateY" type="xs:float" default="1" />
                    <xs:attribute name="ZIndex" type="xs:int" />
                    <xs:attribute name="Priority" type="xs:int" default="0" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="ScrollMarginLeft" type="xs:short" use="required" />
              <xs:attribute name="ScrollMarginTop" type="xs:short" use="required" />
              <xs:attribute name="ScrollMarginRight" type="xs:short" use="required" />
              <xs:attribute name="ScrollMarginBottom" type="xs:short" use="required" />
              <xs:attribute name="ScrollWidth" msdata:Caption="Scrollable pixel width of the map independent of its layers" type="xs:int" />
              <xs:attribute name="ScrollHeight" msdata:Caption="Scrollable pixel height of the map independent of its layers" type="xs:int" />
              <xs:attribute name="ViewLeft" type="xs:short" />
              <xs:attribute name="ViewTop" type="xs:short" />
              <xs:attribute name="ViewWidth" type="xs:short" />
              <xs:attribute name="ViewHeight" type="xs:short" />
            </xs:complexType>
          </xs:element>
          <xs:element name="SpriteDefinition">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="SpriteRule" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                    <xs:attribute name="Sequence" type="xs:int" use="required" />
                    <xs:attribute name="Type" type="xs:string" use="required" />
                    <xs:attribute name="Function" type="xs:string" use="required" />
                    <xs:attribute name="Parameter1" type="xs:string" />
                    <xs:attribute name="Parameter2" type="xs:string" />
                    <xs:attribute name="Parameter3" type="xs:string" />
                    <xs:attribute name="ResultParameter" type="xs:string" />
                    <xs:attribute name="EndIf" type="xs:boolean" default="false" />
                    <xs:attribute name="Suspended" type="xs:boolean" default="false" />
                  </xs:complexType>
                </xs:element>
                <xs:element name="SpriteParameter" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                  </xs:complexType>
                </xs:element>
                <xs:element name="SpriteState" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="SpriteFrame" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="StateName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Sequence" type="xs:short" use="required" />
                          <xs:attribute name="FrameValue" type="xs:int" />
                          <xs:attribute name="Duration" type="xs:short" />
                          <xs:attribute name="MaskAlphaLevel" type="xs:unsignedByte" default="0" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                    <xs:attribute name="FramesetName" type="xs:string" use="required" />
                    <xs:attribute name="SolidWidth" type="xs:short" use="required" />
                    <xs:attribute name="SolidHeight" type="xs:short" use="required" />
                    <xs:attribute name="Sequence" type="xs:short" use="required" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="SpriteCategory">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="SpriteCategorySprite" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="CategoryName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="DefinitionName" type="xs:string" use="required" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Solidity">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="SolidityShape" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="SolidityName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="CategoryName" type="xs:string" use="required" />
                    <xs:attribute name="ShapeName" type="xs:string" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="SourceCode">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Text" type="xs:string" minOccurs="0" msdata:Ordinal="3" />
                <xs:element name="CustomObjectData" type="xs:base64Binary" minOccurs="0" msdata:Ordinal="4" />
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="IsCustomObject" type="xs:boolean" default="false" />
              <xs:attribute name="DependsOn" type="xs:string" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Project">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Comments" type="xs:string" default="" msdata:Ordinal="8" />
              </xs:sequence>
              <xs:attribute name="DisplayMode" type="xs:string" use="required" />
              <xs:attribute name="Windowed" type="xs:boolean" use="required" />
              <xs:attribute name="TitleText" type="xs:string" />
              <xs:attribute name="StartMap" type="xs:string" />
              <xs:attribute name="OverlayMap" type="xs:string" />
              <xs:attribute name="MaxPlayers" type="xs:unsignedByte" default="1" />
              <xs:attribute name="MaxViews" type="xs:unsignedByte" default="1" />
              <xs:attribute name="Credits" type="xs:string" />
            </xs:complexType>
          </xs:element>
          <xs:element name="TileCategory">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="CategorizedTileset" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="CategoryTile" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="CategoryFrame" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="Tileset" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Category" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="TileValue" type="xs:int" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Frame" type="xs:short" use="required" />
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute name="Tileset" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Category" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="TileValue" type="xs:int" use="required" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="Tileset" type="xs:string" use="required" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:complexType>
      <xs:unique name="GraphicSheetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//GraphicSheet" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="FrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Frame" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@FrameValue" />
      </xs:unique>
      <xs:unique name="FramesetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Frameset" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="TileFrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//TileFrame" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@TileValue" />
        <xs:field xpath="@Sequence" />
      </xs:unique>
      <xs:unique name="TileKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Tile" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@TileValue" />
      </xs:unique>
      <xs:unique name="TilesetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Tileset" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="CounterKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Counter" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="ParameterValueKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//ParameterValue" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@SpriteName" />
        <xs:field xpath="@ParameterName" />
        <xs:field xpath="@MapName" />
      </xs:unique>
      <xs:unique name="SpriteKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@MapName" />
      </xs:unique>
      <xs:unique name="SpriteKeyWithDefinition">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@MapName" />
      </xs:unique>
      <xs:unique name="CoordinateKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Coordinate" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
        <xs:field xpath="@Sequence" />
      </xs:unique>
      <xs:unique name="PlanRuleKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//PlanRule" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="PlanParameterValueKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//PlanParameterValue" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpritePlanKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpritePlan" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="LayerKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Layer" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="MapKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Map" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteRuleKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteRule" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteParameterKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteParameter" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteFrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteFrame" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@StateName" />
        <xs:field xpath="@Sequence" />
      </xs:unique>
      <xs:unique name="SpriteStateKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteStateFramesetKey">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@FramesetName" />
      </xs:unique>
      <xs:unique name="SpriteDefinitionKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteDefinition" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteCategorySpriteKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteCategorySprite" />
        <xs:field xpath="@CategoryName" />
        <xs:field xpath="@DefinitionName" />
      </xs:unique>
      <xs:unique name="SpriteCategoryKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteCategory" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SolidityShapeKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SolidityShape" />
        <xs:field xpath="@SolidityName" />
        <xs:field xpath="@CategoryName" />
      </xs:unique>
      <xs:unique name="SolidityKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Solidity" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SourceCodeKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SourceCode" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="CategoryFrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//CategoryFrame" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
        <xs:field xpath="@TileValue" />
        <xs:field xpath="@Frame" />
      </xs:unique>
      <xs:unique name="CategoryTileKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//CategoryTile" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
        <xs:field xpath="@TileValue" />
      </xs:unique>
      <xs:unique name="CategorizedTilesetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//CategorizedTileset" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="CategoryKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//TileCategory" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:keyref name="TilesetCategory" refer="TilesetKey">
        <xs:selector xpath=".//CategorizedTileset" />
        <xs:field xpath="@Tileset" />
      </xs:keyref>
      <xs:keyref name="TileCategoryCategorizedTileset" refer="CategoryKey" msdata:IsNested="true">
        <xs:selector xpath=".//CategorizedTileset" />
        <xs:field xpath="@Name" />
      </xs:keyref>
      <xs:keyref name="CategoryCategoryTile" refer="CategorizedTilesetKey" msdata:IsNested="true">
        <xs:selector xpath=".//CategoryTile" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
      </xs:keyref>
      <xs:keyref name="CategoryTileCategoryFrame" refer="CategoryTileKey" msdata:IsNested="true">
        <xs:selector xpath=".//CategoryFrame" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
        <xs:field xpath="@TileValue" />
      </xs:keyref>
      <xs:keyref name="MapProject" refer="MapKey" msdata:ConstraintOnly="true" msdata:DeleteRule="SetNull">
        <xs:selector xpath=".//Project" />
        <xs:field xpath="@StartMap" />
      </xs:keyref>
      <xs:keyref name="CategorySolidityShape" refer="CategoryKey">
        <xs:selector xpath=".//SolidityShape" />
        <xs:field xpath="@CategoryName" />
      </xs:keyref>
      <xs:keyref name="SoliditySolidityShape" refer="SolidityKey" msdata:IsNested="true">
        <xs:selector xpath=".//SolidityShape" />
        <xs:field xpath="@SolidityName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionCategory" refer="SpriteDefinitionKey">
        <xs:selector xpath=".//SpriteCategorySprite" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="SpriteCategorySpriteCategorySprite" refer="SpriteCategoryKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteCategorySprite" />
        <xs:field xpath="@CategoryName" />
      </xs:keyref>
      <xs:keyref name="FramesetSpriteState" refer="FramesetKey">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@FramesetName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionState" refer="SpriteDefinitionKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="SpriteStateFrame" refer="SpriteStateKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteFrame" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@StateName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionSpriteParameter" refer="SpriteDefinitionKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteParameter" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionSpriteRule" refer="SpriteDefinitionKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteRule" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="TilesetLayer" refer="TilesetKey">
        <xs:selector xpath=".//Layer" />
        <xs:field xpath="@Tileset" />
      </xs:keyref>
      <xs:keyref name="MapLayer" refer="MapKey" msdata:IsNested="true">
        <xs:selector xpath=".//Layer" />
        <xs:field xpath="@MapName" />
      </xs:keyref>
      <xs:keyref name="LayerSpritePlan" refer="LayerKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpritePlan" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
      </xs:keyref>
      <xs:keyref name="SpritePlanPlanParameterValue" refer="SpritePlanKey" msdata:IsNested="true">
        <xs:selector xpath=".//PlanParameterValue" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
      </xs:keyref>
      <xs:keyref name="SpritePlanPlanRule" refer="SpritePlanKey" msdata:IsNested="true">
        <xs:selector xpath=".//PlanRule" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
      </xs:keyref>
      <xs:keyref name="SpritePlanCoordinate" refer="SpritePlanKey" msdata:IsNested="true">
        <xs:selector xpath=".//Coordinate" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionSprite" refer="SpriteStateKey">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@StateName" />
      </xs:keyref>
      <xs:keyref name="LayerSprite" refer="LayerKey" msdata:IsNested="true">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
      </xs:keyref>
      <xs:keyref name="SpriteParameterParameterValue" refer="SpriteParameterKey">
        <xs:selector xpath=".//ParameterValue" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@ParameterName" />
      </xs:keyref>
      <xs:keyref name="SpriteParameterValue" refer="SpriteKeyWithDefinition" msdata:IsNested="true">
        <xs:selector xpath=".//ParameterValue" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@SpriteName" />
        <xs:field xpath="@MapName" />
      </xs:keyref>
      <xs:keyref name="FramesetTileset" refer="FramesetKey">
        <xs:selector xpath=".//Tileset" />
        <xs:field xpath="@Frameset" />
      </xs:keyref>
      <xs:keyref name="CounterTile" refer="CounterKey" msdata:DeleteRule="SetNull">
        <xs:selector xpath=".//Tile" />
        <xs:field xpath="@Counter" />
      </xs:keyref>
      <xs:keyref name="TilesetTile" refer="TilesetKey" msdata:IsNested="true">
        <xs:selector xpath=".//Tile" />
        <xs:field xpath="@Name" />
      </xs:keyref>
      <xs:keyref name="TileTileFrame" refer="TileKey" msdata:IsNested="true">
        <xs:selector xpath=".//TileFrame" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@TileValue" />
      </xs:keyref>
      <xs:keyref name="GraphicSheetFrame" refer="GraphicSheetKey" msdata:ConstraintOnly="true" msdata:DeleteRule="None">
        <xs:selector xpath=".//Frame" />
        <xs:field xpath="@GraphicSheet" />
      </xs:keyref>
      <xs:keyref name="FramesetFrame" refer="FramesetKey" msdata:IsNested="true">
        <xs:selector xpath=".//Frame" />
        <xs:field xpath="@Name" />
      </xs:keyref>
    </xs:element>
  </xs:schema>
  <GraphicSheet Name="SHFL32x32" Columns="16" Rows="16" CellWidth="32" CellHeight="32">
    <Image>mage>
  </GraphicSheet>
  <GraphicSheet Name="SHFLSprites" Columns="6" Rows="12" CellWidth="32" CellHeight="32">
    <Image>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</Image>
  </GraphicSheet>
  <GraphicSheet Name="SHFLPlatform" Columns="1" Rows="1" CellWidth="64" CellHeight="16">
    <Image>iVBORw0KGgoAAAANSUhEUgAAAEAAAAAQCAYAAACm53kpAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAVxJREFUWEdjZMACFicz/EcXVtfRwqYULnbzyjWs8oNJn1nhNUa8njjVr/UfhHfWiPxfV8CGgkGB8nh3GV5Mrj50u0B8YuwjVR/Mf1gDAeT496d6wPjH1ZngQEDGMEfB1GCjh4o+UECgBALIoyDHI2NYaIHog23y4NQAihV0dUNZHzwQkGMfORXgCgRCqWAo6IOnApDnseVtfMkZX1kwVPSB/AAOBFAA3N2SgxXj8wwuPSDxoaIPHgBXV8b9x4ZBSR1XYYhLD0h8qOgjGABDyTPkBPpoAMDKAHzJGSQHKjDIyQqDXR9KTYAvEAa7R2BuJ8WdoAhFaQfcXmjzHx8Gle6wVIDcBAU1joaiPpQAAIUESOD8FF2cGBQA6G3vVTkM4NbhUNOH4XlYUoDF8NFOxf/YMCipgTyNjkGBgEsPSHww6cPpeeTOAXqBB+ODYhrkWWwYlx5YyhoM+rD1AgGgkH+wJHSNywAAAABJRU5ErkJggg==</Image>
  </GraphicSheet>
  <GraphicSheet Name="Lettering" Columns="13" Rows="16" CellWidth="32" CellHeight="32">
    <Image></Image>
  </GraphicSheet>
  <GraphicSheet Name="ViewSeparator" Columns="2" Rows="1" CellWidth="15" CellHeight="128">
    <Image>iVBORw0KGgoAAAANSUhEUgAAAB4AAACACAYAAAAcXNmRAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAANdJREFUaEPt1ssJhEAMANBsLY7F2Iy92IzF+KlldiN42VNYj/sGJEQDgTA+8opnp4/jGK21yDgMwxXvfN/3OI4jMp7necU7f9Y2Ihv3aZr6PM99WZa+rmvftq3nyZh5vs/vWZf1n6b5PDoaG7XL5Xf6GRGAAAQgAAFIeQLIRCYykVkG47sQIAABCEAAUp4AMpGJTGSWwbBzIROZyEQmMssTQCYykYnMMhi2TGQiE5nIRGZ5AshEJjKRWQbDlolMZCITmcgsTwCZyEQmMstg2DKRiUxk/jGZb/RK4SSKgv4mAAAAAElFTkSuQmCC</Image>
  </GraphicSheet>
  <GraphicSheet Name="Spectrum" Columns="3" Rows="3" CellWidth="25" CellHeight="25">
    <Image>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</Image>
  </GraphicSheet>
  <Frameset Name="SHFLTiles">
    <Frame FrameValue="1" GraphicSheet="SHFL32x32" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="2" GraphicSheet="SHFL32x32" CellIndex="2" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="3" GraphicSheet="SHFL32x32" CellIndex="3" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="4" GraphicSheet="SHFL32x32" CellIndex="4" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="5" GraphicSheet="SHFL32x32" CellIndex="5" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="15" GraphicSheet="SHFL32x32" CellIndex="33" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="16" GraphicSheet="SHFL32x32" CellIndex="34" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="17" GraphicSheet="SHFL32x32" CellIndex="35" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="18" GraphicSheet="SHFL32x32" CellIndex="36" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="19" GraphicSheet="SHFL32x32" CellIndex="37" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="29" GraphicSheet="SHFL32x32" CellIndex="65" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="30" GraphicSheet="SHFL32x32" CellIndex="66" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="31" GraphicSheet="SHFL32x32" CellIndex="67" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="32" GraphicSheet="SHFL32x32" CellIndex="68" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="33" GraphicSheet="SHFL32x32" CellIndex="69" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="6" GraphicSheet="SHFL32x32" CellIndex="21" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="20" GraphicSheet="SHFL32x32" CellIndex="53" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="34" GraphicSheet="SHFL32x32" CellIndex="85" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="8" GraphicSheet="SHFL32x32" CellIndex="18" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="9" GraphicSheet="SHFL32x32" CellIndex="19" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="10" GraphicSheet="SHFL32x32" CellIndex="20" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="21" GraphicSheet="SHFL32x32" CellIndex="49" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="22" GraphicSheet="SHFL32x32" CellIndex="50" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="23" GraphicSheet="SHFL32x32" CellIndex="51" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="24" GraphicSheet="SHFL32x32" CellIndex="52" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="35" GraphicSheet="SHFL32x32" CellIndex="81" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="36" GraphicSheet="SHFL32x32" CellIndex="82" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="37" GraphicSheet="SHFL32x32" CellIndex="83" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="38" GraphicSheet="SHFL32x32" CellIndex="84" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="11" GraphicSheet="SHFL32x32" CellIndex="6" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="12" GraphicSheet="SHFL32x32" CellIndex="7" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="13" GraphicSheet="SHFL32x32" CellIndex="22" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="14" GraphicSheet="SHFL32x32" CellIndex="23" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="25" GraphicSheet="SHFL32x32" CellIndex="38" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="26" GraphicSheet="SHFL32x32" CellIndex="39" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="27" GraphicSheet="SHFL32x32" CellIndex="54" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="28" GraphicSheet="SHFL32x32" CellIndex="55" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="39" GraphicSheet="SHFL32x32" CellIndex="70" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="40" GraphicSheet="SHFL32x32" CellIndex="71" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="41" GraphicSheet="SHFL32x32" CellIndex="86" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="42" GraphicSheet="SHFL32x32" CellIndex="87" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="43" GraphicSheet="SHFL32x32" CellIndex="8" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="44" GraphicSheet="SHFL32x32" CellIndex="9" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="45" GraphicSheet="SHFL32x32" CellIndex="10" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="46" GraphicSheet="SHFL32x32" CellIndex="24" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="47" GraphicSheet="SHFL32x32" CellIndex="25" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="48" GraphicSheet="SHFL32x32" CellIndex="26" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="49" GraphicSheet="SHFL32x32" CellIndex="40" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="50" GraphicSheet="SHFL32x32" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="51" GraphicSheet="SHFL32x32" CellIndex="42" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="52" GraphicSheet="SHFL32x32" CellIndex="14" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="53" GraphicSheet="SHFL32x32" CellIndex="15" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="54" GraphicSheet="SHFL32x32" CellIndex="16" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="58" GraphicSheet="SHFL32x32" CellIndex="48" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="60" GraphicSheet="SHFL32x32" CellIndex="64" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="61" GraphicSheet="SHFL32x32" CellIndex="56" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="62" GraphicSheet="SHFL32x32" CellIndex="57" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="63" GraphicSheet="SHFL32x32" CellIndex="58" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="64" GraphicSheet="SHFL32x32" CellIndex="59" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="66" GraphicSheet="SHFL32x32" CellIndex="60" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="67" GraphicSheet="SHFL32x32" CellIndex="61" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="65" GraphicSheet="SHFL32x32" CellIndex="75" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="68" GraphicSheet="SHFL32x32" CellIndex="76" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="69" GraphicSheet="SHFL32x32" CellIndex="77" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="70" GraphicSheet="SHFL32x32" CellIndex="78" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="75" GraphicSheet="SHFL32x32" CellIndex="79" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="91" GraphicSheet="SHFL32x32" CellIndex="80" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="71" GraphicSheet="SHFL32x32" CellIndex="94" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="76" GraphicSheet="SHFL32x32" CellIndex="95" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="92" GraphicSheet="SHFL32x32" CellIndex="96" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="93" GraphicSheet="SHFL32x32" CellIndex="103" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="94" GraphicSheet="SHFL32x32" CellIndex="104" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="95" GraphicSheet="SHFL32x32" CellIndex="105" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="80" GraphicSheet="SHFL32x32" CellIndex="109" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="72" GraphicSheet="SHFL32x32" CellIndex="110" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="77" GraphicSheet="SHFL32x32" CellIndex="111" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="97" GraphicSheet="SHFL32x32" CellIndex="112" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="99" GraphicSheet="SHFL32x32" CellIndex="113" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="100" GraphicSheet="SHFL32x32" CellIndex="114" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="101" GraphicSheet="SHFL32x32" CellIndex="115" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="96" GraphicSheet="SHFL32x32" CellIndex="128" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="98" GraphicSheet="SHFL32x32" CellIndex="129" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="102" GraphicSheet="SHFL32x32" CellIndex="130" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="103" GraphicSheet="SHFL32x32" CellIndex="131" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="81" GraphicSheet="SHFL32x32" CellIndex="125" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="73" GraphicSheet="SHFL32x32" CellIndex="126" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="78" GraphicSheet="SHFL32x32" CellIndex="127" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="57" GraphicSheet="SHFL32x32" CellIndex="147" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="109" GraphicSheet="SHFL32x32" CellIndex="119" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="110" GraphicSheet="SHFL32x32" CellIndex="120" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="111" GraphicSheet="SHFL32x32" CellIndex="121" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="106" GraphicSheet="SHFL32x32" CellIndex="132" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="107" GraphicSheet="SHFL32x32" CellIndex="133" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="108" GraphicSheet="SHFL32x32" CellIndex="134" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="112" GraphicSheet="SHFL32x32" CellIndex="135" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="113" GraphicSheet="SHFL32x32" CellIndex="136" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="114" GraphicSheet="SHFL32x32" CellIndex="137" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="82" GraphicSheet="SHFL32x32" CellIndex="141" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="74" GraphicSheet="SHFL32x32" CellIndex="142" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="79" GraphicSheet="SHFL32x32" CellIndex="143" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="84" GraphicSheet="SHFL32x32" CellIndex="144" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="85" GraphicSheet="SHFL32x32" CellIndex="145" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="86" GraphicSheet="SHFL32x32" CellIndex="146" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="104" GraphicSheet="SHFL32x32" CellIndex="148" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="105" GraphicSheet="SHFL32x32" CellIndex="149" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="174" GraphicSheet="SHFL32x32" CellIndex="150" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="115" GraphicSheet="SHFL32x32" CellIndex="151" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="116" GraphicSheet="SHFL32x32" CellIndex="152" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="117" GraphicSheet="SHFL32x32" CellIndex="153" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="83" GraphicSheet="SHFL32x32" CellIndex="157" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="126" GraphicSheet="SHFL32x32" CellIndex="158" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="128" GraphicSheet="SHFL32x32" CellIndex="159" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="88" GraphicSheet="SHFL32x32" CellIndex="160" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="90" GraphicSheet="SHFL32x32" CellIndex="161" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="89" GraphicSheet="SHFL32x32" CellIndex="162" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="87" GraphicSheet="SHFL32x32" CellIndex="163" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="121" GraphicSheet="SHFL32x32" CellIndex="164" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="122" GraphicSheet="SHFL32x32" CellIndex="165" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="123" GraphicSheet="SHFL32x32" CellIndex="166" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="124" GraphicSheet="SHFL32x32" CellIndex="167" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="125" GraphicSheet="SHFL32x32" CellIndex="168" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="118" GraphicSheet="SHFL32x32" CellIndex="169" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="119" GraphicSheet="SHFL32x32" CellIndex="170" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="120" GraphicSheet="SHFL32x32" CellIndex="171" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="129" GraphicSheet="SHFL32x32" CellIndex="172" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="130" GraphicSheet="SHFL32x32" CellIndex="173" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="131" GraphicSheet="SHFL32x32" CellIndex="174" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="132" GraphicSheet="SHFL32x32" CellIndex="175" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="133" GraphicSheet="SHFL32x32" CellIndex="176" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="134" GraphicSheet="SHFL32x32" CellIndex="177" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="135" GraphicSheet="SHFL32x32" CellIndex="178" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="144" GraphicSheet="SHFL32x32" CellIndex="179" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="152" GraphicSheet="SHFL32x32" CellIndex="180" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-587202561" />
    <Frame FrameValue="156" GraphicSheet="SHFL32x32" CellIndex="181" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-922746881" />
    <Frame FrameValue="161" GraphicSheet="SHFL32x32" CellIndex="182" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="162" GraphicSheet="SHFL32x32" CellIndex="183" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="163" GraphicSheet="SHFL32x32" CellIndex="184" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="164" GraphicSheet="SHFL32x32" CellIndex="185" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="175" GraphicSheet="SHFL32x32" CellIndex="186" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="176" GraphicSheet="SHFL32x32" CellIndex="187" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="177" GraphicSheet="SHFL32x32" CellIndex="188" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="178" GraphicSheet="SHFL32x32" CellIndex="189" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="140" GraphicSheet="SHFL32x32" CellIndex="192" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="141" GraphicSheet="SHFL32x32" CellIndex="193" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="142" GraphicSheet="SHFL32x32" CellIndex="194" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="143" GraphicSheet="SHFL32x32" CellIndex="195" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="160" GraphicSheet="SHFL32x32" CellIndex="196" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-922746881" />
    <Frame FrameValue="157" GraphicSheet="SHFL32x32" CellIndex="197" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-922746881" />
    <Frame FrameValue="166" GraphicSheet="SHFL32x32" CellIndex="198" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="167" GraphicSheet="SHFL32x32" CellIndex="199" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="168" GraphicSheet="SHFL32x32" CellIndex="200" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="169" GraphicSheet="SHFL32x32" CellIndex="201" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="170" GraphicSheet="SHFL32x32" CellIndex="202" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="171" GraphicSheet="SHFL32x32" CellIndex="203" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="172" GraphicSheet="SHFL32x32" CellIndex="204" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="173" GraphicSheet="SHFL32x32" CellIndex="205" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="136" GraphicSheet="SHFL32x32" CellIndex="208" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="137" GraphicSheet="SHFL32x32" CellIndex="209" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="138" GraphicSheet="SHFL32x32" CellIndex="210" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="139" GraphicSheet="SHFL32x32" CellIndex="211" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="154" GraphicSheet="SHFL32x32" CellIndex="212" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-922746881" />
    <Frame FrameValue="158" GraphicSheet="SHFL32x32" CellIndex="213" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-922746881" />
    <Frame FrameValue="179" GraphicSheet="SHFL32x32" CellIndex="214" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="180" GraphicSheet="SHFL32x32" CellIndex="215" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="181" GraphicSheet="SHFL32x32" CellIndex="216" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="182" GraphicSheet="SHFL32x32" CellIndex="217" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="183" GraphicSheet="SHFL32x32" CellIndex="218" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="184" GraphicSheet="SHFL32x32" CellIndex="219" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="187" GraphicSheet="SHFL32x32" CellIndex="220" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="188" GraphicSheet="SHFL32x32" CellIndex="221" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="145" GraphicSheet="SHFL32x32" CellIndex="224" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="146" GraphicSheet="SHFL32x32" CellIndex="225" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="147" GraphicSheet="SHFL32x32" CellIndex="226" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="148" GraphicSheet="SHFL32x32" CellIndex="227" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="155" GraphicSheet="SHFL32x32" CellIndex="228" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-922746881" />
    <Frame FrameValue="159" GraphicSheet="SHFL32x32" CellIndex="229" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-922746881" />
    <Frame FrameValue="153" GraphicSheet="SHFL32x32" CellIndex="230" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-922746881" />
    <Frame FrameValue="185" GraphicSheet="SHFL32x32" CellIndex="236" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="186" GraphicSheet="SHFL32x32" CellIndex="237" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="149" GraphicSheet="SHFL32x32" CellIndex="240" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="150" GraphicSheet="SHFL32x32" CellIndex="241" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="151" GraphicSheet="SHFL32x32" CellIndex="242" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="189" GraphicSheet="SHFL32x32" CellIndex="243" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="190" GraphicSheet="SHFL32x32" CellIndex="244" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="191" GraphicSheet="SHFL32x32" CellIndex="253" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="59" GraphicSheet="SHFL32x32" CellIndex="254" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="127" GraphicSheet="SHFL32x32" CellIndex="255" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="192" GraphicSheet="SHFL32x32" CellIndex="107" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="193" GraphicSheet="SHFL32x32" CellIndex="123" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="194" GraphicSheet="SHFL32x32" CellIndex="139" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="196" GraphicSheet="SHFL32x32" CellIndex="108" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="197" GraphicSheet="SHFL32x32" CellIndex="124" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="198" GraphicSheet="SHFL32x32" CellIndex="140" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="195" GraphicSheet="SHFL32x32" CellIndex="155" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="199" GraphicSheet="SHFL32x32" CellIndex="156" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="200" GraphicSheet="SHFL32x32" CellIndex="190" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="204" GraphicSheet="SHFL32x32" CellIndex="191" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="201" GraphicSheet="SHFL32x32" CellIndex="206" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="205" GraphicSheet="SHFL32x32" CellIndex="207" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="202" GraphicSheet="SHFL32x32" CellIndex="222" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="206" GraphicSheet="SHFL32x32" CellIndex="223" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="203" GraphicSheet="SHFL32x32" CellIndex="238" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="207" GraphicSheet="SHFL32x32" CellIndex="239" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="165" GraphicSheet="SHFL32x32" CellIndex="231" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="208" GraphicSheet="SHFL32x32" CellIndex="245" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="209" GraphicSheet="SHFL32x32" CellIndex="246" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="210" GraphicSheet="SHFL32x32" CellIndex="247" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="211" GraphicSheet="SHFL32x32" CellIndex="248" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="212" GraphicSheet="SHFL32x32" CellIndex="249" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="213" GraphicSheet="SHFL32x32" CellIndex="250" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="214" GraphicSheet="SHFL32x32" CellIndex="251" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="215" GraphicSheet="SHFL32x32" CellIndex="252" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="0" GraphicSheet="SHFL32x32" CellIndex="0" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="216" GraphicSheet="SHFL32x32" CellIndex="11" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="217" GraphicSheet="SHFL32x32" CellIndex="27" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="218" GraphicSheet="SHFL32x32" CellIndex="43" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="219" GraphicSheet="SHFL32x32" CellIndex="12" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="220" GraphicSheet="SHFL32x32" CellIndex="28" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="221" GraphicSheet="SHFL32x32" CellIndex="44" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="222" GraphicSheet="SHFL32x32" CellIndex="13" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="223" GraphicSheet="SHFL32x32" CellIndex="29" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="224" GraphicSheet="SHFL32x32" CellIndex="45" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="229" GraphicSheet="SHFL32x32" CellIndex="16" m11="0.9659" m12="-0.2588" m21="0.2588" m22="0.9659" dx="-3.5959" dy="4.6863" color="-1" />
    <Frame FrameValue="230" GraphicSheet="SHFL32x32" CellIndex="16" m11="0.9397" m12="-0.342" m21="0.342" m22="0.9397" dx="-4.5074" dy="6.4372" color="-1" />
    <Frame FrameValue="231" GraphicSheet="SHFL32x32" CellIndex="16" m11="0.9659" m12="0.2588" m21="-0.2588" m22="0.9659" dx="4.6863" dy="-3.5959" color="-1" />
    <Frame FrameValue="232" GraphicSheet="SHFL32x32" CellIndex="16" m11="0.9397" m12="0.342" m21="-0.342" m22="0.9397" dx="6.4372" dy="-4.5074" color="-1" />
    <Frame FrameValue="55" GraphicSheet="SHFL32x32" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="7" GraphicSheet="SHFL32x32" CellIndex="116" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="225" GraphicSheet="SHFL32x32" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="2" color="-1" />
    <Frame FrameValue="226" GraphicSheet="SHFL32x32" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="3" color="-1" />
    <Frame FrameValue="227" GraphicSheet="SHFL32x32" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="-2" color="-1" />
    <Frame FrameValue="228" GraphicSheet="SHFL32x32" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="-3" color="-1" />
    <Frame FrameValue="56" GraphicSheet="SHFL32x32" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="3" dy="0" color="-1" />
    <Frame FrameValue="233" GraphicSheet="SHFL32x32" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="2" dy="-2" color="-1" />
    <Frame FrameValue="234" GraphicSheet="SHFL32x32" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="0" dy="-3" color="-1" />
    <Frame FrameValue="235" GraphicSheet="SHFL32x32" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="-2" dy="-2" color="-1" />
    <Frame FrameValue="236" GraphicSheet="SHFL32x32" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="-3" dy="0" color="-1" />
    <Frame FrameValue="237" GraphicSheet="SHFL32x32" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="-2" dy="2" color="-1" />
    <Frame FrameValue="238" GraphicSheet="SHFL32x32" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="0" dy="3" color="-1" />
    <Frame FrameValue="239" GraphicSheet="SHFL32x32" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="2" dy="2" color="-1" />
  </Frameset>
  <Frameset Name="SpriteFrames">
    <Frame FrameValue="0" GraphicSheet="SHFLSprites" CellIndex="0" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="1" GraphicSheet="SHFLSprites" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="2" GraphicSheet="SHFLSprites" CellIndex="2" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="3" GraphicSheet="SHFLSprites" CellIndex="3" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="4" GraphicSheet="SHFLSprites" CellIndex="4" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="5" GraphicSheet="SHFLSprites" CellIndex="5" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="6" GraphicSheet="SHFLSprites" CellIndex="6" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="7" GraphicSheet="SHFLSprites" CellIndex="7" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="8" GraphicSheet="SHFLSprites" CellIndex="8" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="9" GraphicSheet="SHFLSprites" CellIndex="9" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="10" GraphicSheet="SHFLSprites" CellIndex="10" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="11" GraphicSheet="SHFLSprites" CellIndex="11" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="12" GraphicSheet="SHFLSprites" CellIndex="12" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="13" GraphicSheet="SHFLSprites" CellIndex="13" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="14" GraphicSheet="SHFLSprites" CellIndex="14" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="15" GraphicSheet="SHFLSprites" CellIndex="15" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="16" GraphicSheet="SHFLSprites" CellIndex="16" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="17" GraphicSheet="SHFLSprites" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="18" GraphicSheet="SHFLSprites" CellIndex="18" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="19" GraphicSheet="SHFLSprites" CellIndex="19" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="20" GraphicSheet="SHFLSprites" CellIndex="20" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="21" GraphicSheet="SHFLSprites" CellIndex="21" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="22" GraphicSheet="SHFLSprites" CellIndex="22" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="23" GraphicSheet="SHFLSprites" CellIndex="23" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="24" GraphicSheet="SHFLSprites" CellIndex="24" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="25" GraphicSheet="SHFLSprites" CellIndex="25" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="26" GraphicSheet="SHFLSprites" CellIndex="26" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="27" GraphicSheet="SHFLSprites" CellIndex="27" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="28" GraphicSheet="SHFLSprites" CellIndex="28" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="29" GraphicSheet="SHFLSprites" CellIndex="29" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="30" GraphicSheet="SHFLSprites" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="31" GraphicSheet="SHFLSprites" CellIndex="31" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="32" GraphicSheet="SHFLSprites" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="33" GraphicSheet="SHFLSprites" CellIndex="33" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="34" GraphicSheet="SHFLSprites" CellIndex="34" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="35" GraphicSheet="SHFLSprites" CellIndex="35" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="36" GraphicSheet="SHFLSprites" CellIndex="36" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="37" GraphicSheet="SHFLSprites" CellIndex="37" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="38" GraphicSheet="SHFLSprites" CellIndex="38" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="39" GraphicSheet="SHFLSprites" CellIndex="39" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="40" GraphicSheet="SHFLSprites" CellIndex="40" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="41" GraphicSheet="SHFLSprites" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="42" GraphicSheet="SHFLSprites" CellIndex="42" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="43" GraphicSheet="SHFLSprites" CellIndex="43" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="44" GraphicSheet="SHFLSprites" CellIndex="44" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="45" GraphicSheet="SHFLSprites" CellIndex="45" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="46" GraphicSheet="SHFLSprites" CellIndex="46" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="47" GraphicSheet="SHFLSprites" CellIndex="47" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="48" GraphicSheet="SHFLSprites" CellIndex="48" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="49" GraphicSheet="SHFLSprites" CellIndex="49" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="50" GraphicSheet="SHFLSprites" CellIndex="50" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="51" GraphicSheet="SHFLSprites" CellIndex="51" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="52" GraphicSheet="SHFLSprites" CellIndex="52" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="53" GraphicSheet="SHFLSprites" CellIndex="53" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="54" GraphicSheet="SHFLSprites" CellIndex="54" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="55" GraphicSheet="SHFLSprites" CellIndex="55" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="56" GraphicSheet="SHFLSprites" CellIndex="56" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="57" GraphicSheet="SHFLSprites" CellIndex="57" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="58" GraphicSheet="SHFLSprites" CellIndex="58" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="59" GraphicSheet="SHFLSprites" CellIndex="59" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="60" GraphicSheet="SHFLSprites" CellIndex="60" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="61" GraphicSheet="SHFLSprites" CellIndex="61" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="62" GraphicSheet="SHFLSprites" CellIndex="62" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="63" GraphicSheet="SHFLSprites" CellIndex="63" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="64" GraphicSheet="SHFLSprites" CellIndex="64" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="65" GraphicSheet="SHFLSprites" CellIndex="65" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
  </Frameset>
  <Frameset Name="PlatformFrame">
    <Frame FrameValue="0" GraphicSheet="SHFLPlatform" CellIndex="0" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
  </Frameset>
  <Frameset Name="LetterFrames">
    <Frame FrameValue="0" GraphicSheet="Lettering" CellIndex="0" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="1" GraphicSheet="Lettering" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="2" GraphicSheet="Lettering" CellIndex="2" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="3" GraphicSheet="Lettering" CellIndex="3" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="4" GraphicSheet="Lettering" CellIndex="4" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="5" GraphicSheet="Lettering" CellIndex="5" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="6" GraphicSheet="Lettering" CellIndex="6" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="7" GraphicSheet="Lettering" CellIndex="7" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="8" GraphicSheet="Lettering" CellIndex="8" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="9" GraphicSheet="Lettering" CellIndex="9" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="10" GraphicSheet="Lettering" CellIndex="10" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="11" GraphicSheet="Lettering" CellIndex="11" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="12" GraphicSheet="Lettering" CellIndex="12" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="13" GraphicSheet="Lettering" CellIndex="13" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="14" GraphicSheet="Lettering" CellIndex="14" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="15" GraphicSheet="Lettering" CellIndex="15" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="16" GraphicSheet="Lettering" CellIndex="16" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="17" GraphicSheet="Lettering" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="18" GraphicSheet="Lettering" CellIndex="18" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="19" GraphicSheet="Lettering" CellIndex="19" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="20" GraphicSheet="Lettering" CellIndex="20" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="21" GraphicSheet="Lettering" CellIndex="21" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="22" GraphicSheet="Lettering" CellIndex="22" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="23" GraphicSheet="Lettering" CellIndex="23" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="24" GraphicSheet="Lettering" CellIndex="24" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="25" GraphicSheet="Lettering" CellIndex="25" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="26" GraphicSheet="Lettering" CellIndex="26" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="27" GraphicSheet="Lettering" CellIndex="27" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="28" GraphicSheet="Lettering" CellIndex="28" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="29" GraphicSheet="Lettering" CellIndex="29" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="30" GraphicSheet="Lettering" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="31" GraphicSheet="Lettering" CellIndex="31" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="32" GraphicSheet="Lettering" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="33" GraphicSheet="Lettering" CellIndex="33" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="34" GraphicSheet="Lettering" CellIndex="34" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="35" GraphicSheet="Lettering" CellIndex="35" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="36" GraphicSheet="Lettering" CellIndex="36" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="37" GraphicSheet="Lettering" CellIndex="37" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="38" GraphicSheet="Lettering" CellIndex="38" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="39" GraphicSheet="Lettering" CellIndex="39" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="40" GraphicSheet="Lettering" CellIndex="40" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="41" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="42" GraphicSheet="Lettering" CellIndex="42" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="43" GraphicSheet="Lettering" CellIndex="43" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="44" GraphicSheet="Lettering" CellIndex="44" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="45" GraphicSheet="Lettering" CellIndex="45" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="46" GraphicSheet="Lettering" CellIndex="46" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="47" GraphicSheet="Lettering" CellIndex="47" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="48" GraphicSheet="Lettering" CellIndex="48" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="49" GraphicSheet="Lettering" CellIndex="51" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="50" GraphicSheet="Lettering" CellIndex="53" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="51" GraphicSheet="Lettering" CellIndex="54" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="52" GraphicSheet="Lettering" CellIndex="55" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="53" GraphicSheet="Lettering" CellIndex="56" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="54" GraphicSheet="Lettering" CellIndex="57" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="55" GraphicSheet="Lettering" CellIndex="58" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="56" GraphicSheet="Lettering" CellIndex="59" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="57" GraphicSheet="Lettering" CellIndex="60" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="58" GraphicSheet="Lettering" CellIndex="61" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="59" GraphicSheet="Lettering" CellIndex="62" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="60" GraphicSheet="Lettering" CellIndex="63" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="61" GraphicSheet="Lettering" CellIndex="64" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="62" GraphicSheet="Lettering" CellIndex="65" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="63" GraphicSheet="Lettering" CellIndex="66" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="64" GraphicSheet="Lettering" CellIndex="67" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="65" GraphicSheet="Lettering" CellIndex="68" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="66" GraphicSheet="Lettering" CellIndex="69" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="67" GraphicSheet="Lettering" CellIndex="70" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="68" GraphicSheet="Lettering" CellIndex="71" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="69" GraphicSheet="Lettering" CellIndex="72" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="70" GraphicSheet="Lettering" CellIndex="73" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="71" GraphicSheet="Lettering" CellIndex="74" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="72" GraphicSheet="Lettering" CellIndex="75" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="73" GraphicSheet="Lettering" CellIndex="76" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="74" GraphicSheet="Lettering" CellIndex="77" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="75" GraphicSheet="Lettering" CellIndex="78" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="76" GraphicSheet="Lettering" CellIndex="79" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="77" GraphicSheet="Lettering" CellIndex="80" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="78" GraphicSheet="Lettering" CellIndex="81" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="79" GraphicSheet="Lettering" CellIndex="82" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="80" GraphicSheet="Lettering" CellIndex="83" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="81" GraphicSheet="Lettering" CellIndex="84" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="82" GraphicSheet="Lettering" CellIndex="85" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="83" GraphicSheet="Lettering" CellIndex="86" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="84" GraphicSheet="Lettering" CellIndex="87" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="85" GraphicSheet="Lettering" CellIndex="88" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="86" GraphicSheet="Lettering" CellIndex="89" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="87" GraphicSheet="Lettering" CellIndex="90" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="88" GraphicSheet="Lettering" CellIndex="91" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="89" GraphicSheet="Lettering" CellIndex="92" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="90" GraphicSheet="Lettering" CellIndex="93" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="91" GraphicSheet="Lettering" CellIndex="94" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="92" GraphicSheet="Lettering" CellIndex="95" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="93" GraphicSheet="Lettering" CellIndex="96" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="94" GraphicSheet="Lettering" CellIndex="97" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="95" GraphicSheet="Lettering" CellIndex="98" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="96" GraphicSheet="Lettering" CellIndex="99" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="97" GraphicSheet="Lettering" CellIndex="100" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="98" GraphicSheet="Lettering" CellIndex="103" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="99" GraphicSheet="Lettering" CellIndex="105" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="100" GraphicSheet="Lettering" CellIndex="106" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="101" GraphicSheet="Lettering" CellIndex="107" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="102" GraphicSheet="Lettering" CellIndex="108" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="103" GraphicSheet="Lettering" CellIndex="109" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="104" GraphicSheet="Lettering" CellIndex="110" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="105" GraphicSheet="Lettering" CellIndex="111" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="106" GraphicSheet="Lettering" CellIndex="112" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="107" GraphicSheet="Lettering" CellIndex="113" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="108" GraphicSheet="Lettering" CellIndex="114" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="109" GraphicSheet="Lettering" CellIndex="115" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="110" GraphicSheet="Lettering" CellIndex="116" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="111" GraphicSheet="Lettering" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="112" GraphicSheet="Lettering" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="113" GraphicSheet="Lettering" CellIndex="119" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="114" GraphicSheet="Lettering" CellIndex="120" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="115" GraphicSheet="Lettering" CellIndex="121" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="116" GraphicSheet="Lettering" CellIndex="122" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="117" GraphicSheet="Lettering" CellIndex="123" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="118" GraphicSheet="Lettering" CellIndex="124" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="119" GraphicSheet="Lettering" CellIndex="125" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="120" GraphicSheet="Lettering" CellIndex="126" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="121" GraphicSheet="Lettering" CellIndex="127" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="122" GraphicSheet="Lettering" CellIndex="128" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="123" GraphicSheet="Lettering" CellIndex="129" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="124" GraphicSheet="Lettering" CellIndex="130" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="125" GraphicSheet="Lettering" CellIndex="131" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="126" GraphicSheet="Lettering" CellIndex="132" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="127" GraphicSheet="Lettering" CellIndex="133" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="128" GraphicSheet="Lettering" CellIndex="134" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="129" GraphicSheet="Lettering" CellIndex="135" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="130" GraphicSheet="Lettering" CellIndex="136" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="131" GraphicSheet="Lettering" CellIndex="137" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="132" GraphicSheet="Lettering" CellIndex="138" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="133" GraphicSheet="Lettering" CellIndex="139" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="134" GraphicSheet="Lettering" CellIndex="140" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="135" GraphicSheet="Lettering" CellIndex="141" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="136" GraphicSheet="Lettering" CellIndex="142" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="137" GraphicSheet="Lettering" CellIndex="143" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="138" GraphicSheet="Lettering" CellIndex="144" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="139" GraphicSheet="Lettering" CellIndex="145" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="140" GraphicSheet="Lettering" CellIndex="146" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="141" GraphicSheet="Lettering" CellIndex="147" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="142" GraphicSheet="Lettering" CellIndex="148" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="143" GraphicSheet="Lettering" CellIndex="149" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="144" GraphicSheet="Lettering" CellIndex="150" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="145" GraphicSheet="Lettering" CellIndex="151" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="146" GraphicSheet="Lettering" CellIndex="152" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="147" GraphicSheet="Lettering" CellIndex="155" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="148" GraphicSheet="Lettering" CellIndex="157" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="149" GraphicSheet="Lettering" CellIndex="158" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="150" GraphicSheet="Lettering" CellIndex="159" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="151" GraphicSheet="Lettering" CellIndex="160" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="152" GraphicSheet="Lettering" CellIndex="161" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="153" GraphicSheet="Lettering" CellIndex="162" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="154" GraphicSheet="Lettering" CellIndex="163" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="155" GraphicSheet="Lettering" CellIndex="164" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="156" GraphicSheet="Lettering" CellIndex="165" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="157" GraphicSheet="Lettering" CellIndex="166" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="158" GraphicSheet="Lettering" CellIndex="167" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="159" GraphicSheet="Lettering" CellIndex="168" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="160" GraphicSheet="Lettering" CellIndex="169" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="161" GraphicSheet="Lettering" CellIndex="170" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="162" GraphicSheet="Lettering" CellIndex="171" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="163" GraphicSheet="Lettering" CellIndex="172" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="164" GraphicSheet="Lettering" CellIndex="173" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="165" GraphicSheet="Lettering" CellIndex="174" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="166" GraphicSheet="Lettering" CellIndex="175" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="167" GraphicSheet="Lettering" CellIndex="176" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="168" GraphicSheet="Lettering" CellIndex="177" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="169" GraphicSheet="Lettering" CellIndex="178" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="170" GraphicSheet="Lettering" CellIndex="179" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="171" GraphicSheet="Lettering" CellIndex="180" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="172" GraphicSheet="Lettering" CellIndex="181" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="173" GraphicSheet="Lettering" CellIndex="182" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="174" GraphicSheet="Lettering" CellIndex="183" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="175" GraphicSheet="Lettering" CellIndex="184" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="176" GraphicSheet="Lettering" CellIndex="185" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="177" GraphicSheet="Lettering" CellIndex="186" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="178" GraphicSheet="Lettering" CellIndex="187" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="179" GraphicSheet="Lettering" CellIndex="188" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="180" GraphicSheet="Lettering" CellIndex="189" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="181" GraphicSheet="Lettering" CellIndex="190" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="182" GraphicSheet="Lettering" CellIndex="191" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="183" GraphicSheet="Lettering" CellIndex="192" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="184" GraphicSheet="Lettering" CellIndex="193" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="185" GraphicSheet="Lettering" CellIndex="194" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="186" GraphicSheet="Lettering" CellIndex="195" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="187" GraphicSheet="Lettering" CellIndex="196" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="188" GraphicSheet="Lettering" CellIndex="197" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="189" GraphicSheet="Lettering" CellIndex="198" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="190" GraphicSheet="Lettering" CellIndex="199" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="191" GraphicSheet="Lettering" CellIndex="200" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="192" GraphicSheet="Lettering" CellIndex="201" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="193" GraphicSheet="Lettering" CellIndex="202" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="194" GraphicSheet="Lettering" CellIndex="203" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="195" GraphicSheet="Lettering" CellIndex="204" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="196" GraphicSheet="Lettering" CellIndex="207" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="197" GraphicSheet="Lettering" CellIndex="49" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="198" GraphicSheet="Lettering" CellIndex="50" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
  </Frameset>
  <Frameset Name="ViewSplitterFrames">
    <Frame FrameValue="1" GraphicSheet="ViewSeparator" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="0" GraphicSheet="ViewSeparator" CellIndex="0" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
  </Frameset>
  <Frameset Name="Points">
    <Frame FrameValue="13" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="0" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="1" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-251658241" />
    <Frame FrameValue="2" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-587202561" />
    <Frame FrameValue="3" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-922746881" />
    <Frame FrameValue="4" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1258291201" />
    <Frame FrameValue="5" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1593835521" />
    <Frame FrameValue="6" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1929379841" />
    <Frame FrameValue="7" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="2030043135" />
    <Frame FrameValue="8" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="1694498815" />
    <Frame FrameValue="9" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="1358954495" />
    <Frame FrameValue="10" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="1023410175" />
    <Frame FrameValue="11" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="687865855" />
    <Frame FrameValue="12" GraphicSheet="SHFL32x32" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="352321535" />
    <Frame FrameValue="14" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-251658241" />
    <Frame FrameValue="15" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-587202561" />
    <Frame FrameValue="16" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-922746881" />
    <Frame FrameValue="17" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1258291201" />
    <Frame FrameValue="18" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1593835521" />
    <Frame FrameValue="19" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1929379841" />
    <Frame FrameValue="20" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="2030043135" />
    <Frame FrameValue="21" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="1694498815" />
    <Frame FrameValue="22" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="1358954495" />
    <Frame FrameValue="23" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="1023410175" />
    <Frame FrameValue="24" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="687865855" />
    <Frame FrameValue="25" GraphicSheet="SHFL32x32" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="352321535" />
  </Frameset>
  <Frameset Name="Spectrum">
    <Frame FrameValue="0" GraphicSheet="Spectrum" CellIndex="0" m11="0.8" m12="0" m21="0" m22="0.8" dx="2" dy="2" color="-2130706433" />
    <Frame FrameValue="1" GraphicSheet="Spectrum" CellIndex="0" m11="0.9" m12="0" m21="0" m22="0.9" dx="1" dy="1" color="-1593868160" />
    <Frame FrameValue="2" GraphicSheet="Spectrum" CellIndex="0" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1057013696" />
    <Frame FrameValue="3" GraphicSheet="Spectrum" CellIndex="0" m11="1.1" m12="0" m21="0" m22="1.1" dx="-1" dy="-1" color="-520151008" />
    <Frame FrameValue="4" GraphicSheet="Spectrum" CellIndex="0" m11="1.2" m12="0" m21="0" m22="1.2" dx="-2" dy="-2" color="-61424" />
    <Frame FrameValue="5" GraphicSheet="Spectrum" CellIndex="1" m11="0.8" m12="0" m21="0" m22="0.8" dx="2" dy="2" color="-2130706433" />
    <Frame FrameValue="6" GraphicSheet="Spectrum" CellIndex="1" m11="0.9" m12="0" m21="0" m22="0.9" dx="1" dy="1" color="-1593868160" />
    <Frame FrameValue="7" GraphicSheet="Spectrum" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1057013696" />
    <Frame FrameValue="8" GraphicSheet="Spectrum" CellIndex="1" m11="1.1" m12="0" m21="0" m22="1.1" dx="-1" dy="-1" color="-520151008" />
    <Frame FrameValue="9" GraphicSheet="Spectrum" CellIndex="1" m11="1.2" m12="0" m21="0" m22="1.2" dx="-2" dy="-2" color="-61424" />
    <Frame FrameValue="10" GraphicSheet="Spectrum" CellIndex="2" m11="0.8" m12="0" m21="0" m22="0.8" dx="2" dy="2" color="-2130706433" />
    <Frame FrameValue="11" GraphicSheet="Spectrum" CellIndex="2" m11="0.9" m12="0" m21="0" m22="0.9" dx="1" dy="1" color="-1593868160" />
    <Frame FrameValue="12" GraphicSheet="Spectrum" CellIndex="2" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1057013696" />
    <Frame FrameValue="13" GraphicSheet="Spectrum" CellIndex="2" m11="1.1" m12="0" m21="0" m22="1.1" dx="-1" dy="-1" color="-520151008" />
    <Frame FrameValue="14" GraphicSheet="Spectrum" CellIndex="2" m11="1.2" m12="0" m21="0" m22="1.2" dx="-2" dy="-2" color="-61424" />
  </Frameset>
  <Tileset Name="SHFLTileset" Frameset="SHFLTiles" TileWidth="32" TileHeight="32">
    <Tile TileValue="255" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="208" Duration="5" />
      <TileFrame Sequence="1" FrameValue="209" Duration="5" />
      <TileFrame Sequence="2" FrameValue="210" Duration="5" />
      <TileFrame Sequence="3" FrameValue="211" Duration="5" />
      <TileFrame Sequence="4" FrameValue="212" Duration="5" />
      <TileFrame Sequence="5" FrameValue="213" Duration="5" />
      <TileFrame Sequence="6" FrameValue="214" Duration="5" />
      <TileFrame Sequence="7" FrameValue="215" Duration="5" />
    </Tile>
    <Tile TileValue="254" Counter="FrameCounter">
      <TileFrame Sequence="1" FrameValue="200" Duration="10" />
      <TileFrame Sequence="2" FrameValue="201" Duration="10" />
      <TileFrame Sequence="3" FrameValue="202" Duration="10" />
      <TileFrame Sequence="4" FrameValue="203" Duration="10" />
      <TileFrame Sequence="5" FrameValue="204" Duration="10" />
      <TileFrame Sequence="6" FrameValue="205" Duration="10" />
      <TileFrame Sequence="7" FrameValue="206" Duration="10" />
      <TileFrame Sequence="0" FrameValue="152" Duration="50" />
      <TileFrame Sequence="8" FrameValue="207" Duration="10" />
    </Tile>
    <Tile TileValue="253" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="196" Duration="10" />
      <TileFrame Sequence="1" FrameValue="197" Duration="10" />
      <TileFrame Sequence="2" FrameValue="198" Duration="10" />
      <TileFrame Sequence="5" FrameValue="197" Duration="10" />
      <TileFrame Sequence="3" FrameValue="199" Duration="10" />
      <TileFrame Sequence="4" FrameValue="198" Duration="10" />
    </Tile>
    <Tile TileValue="252" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="193" Duration="1" />
      <TileFrame Sequence="1" FrameValue="194" Duration="1" />
    </Tile>
    <Tile TileValue="0" />
    <Tile TileValue="251" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="5" Duration="120" />
      <TileFrame Sequence="1" FrameValue="216" Duration="5" />
      <TileFrame Sequence="2" FrameValue="217" Duration="5" />
      <TileFrame Sequence="3" FrameValue="218" Duration="5" />
      <TileFrame Sequence="4" FrameValue="0" Duration="120" />
      <TileFrame Sequence="5" FrameValue="218" Duration="5" />
      <TileFrame Sequence="6" FrameValue="217" Duration="5" />
      <TileFrame Sequence="7" FrameValue="216" Duration="5" />
    </Tile>
    <Tile TileValue="250" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="19" Duration="60" />
      <TileFrame Sequence="1" FrameValue="222" Duration="5" />
      <TileFrame Sequence="2" FrameValue="223" Duration="5" />
      <TileFrame Sequence="3" FrameValue="224" Duration="5" />
      <TileFrame Sequence="4" FrameValue="0" Duration="120" />
      <TileFrame Sequence="8" FrameValue="19" Duration="60" />
      <TileFrame Sequence="5" FrameValue="224" Duration="5" />
      <TileFrame Sequence="6" FrameValue="223" Duration="5" />
      <TileFrame Sequence="7" FrameValue="222" Duration="5" />
    </Tile>
    <Tile TileValue="249" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="219" Duration="5" />
      <TileFrame Sequence="1" FrameValue="220" Duration="5" />
      <TileFrame Sequence="2" FrameValue="221" Duration="5" />
      <TileFrame Sequence="3" FrameValue="0" Duration="120" />
      <TileFrame Sequence="7" FrameValue="33" Duration="120" />
      <TileFrame Sequence="6" FrameValue="219" Duration="5" />
      <TileFrame Sequence="5" FrameValue="220" Duration="5" />
      <TileFrame Sequence="4" FrameValue="221" Duration="5" />
    </Tile>
    <Tile TileValue="55" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="55" Duration="4" />
      <TileFrame Sequence="1" FrameValue="225" Duration="4" />
      <TileFrame Sequence="2" FrameValue="226" Duration="4" />
      <TileFrame Sequence="3" FrameValue="225" Duration="4" />
      <TileFrame Sequence="4" FrameValue="55" Duration="4" />
      <TileFrame Sequence="5" FrameValue="227" Duration="4" />
      <TileFrame Sequence="6" FrameValue="228" Duration="4" />
      <TileFrame Sequence="7" FrameValue="227" Duration="4" />
    </Tile>
    <Tile TileValue="54" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="54" Duration="5" />
      <TileFrame Sequence="1" FrameValue="229" Duration="5" />
      <TileFrame Sequence="2" FrameValue="230" Duration="5" />
      <TileFrame Sequence="3" FrameValue="229" Duration="5" />
      <TileFrame Sequence="4" FrameValue="54" Duration="5" />
      <TileFrame Sequence="5" FrameValue="231" Duration="5" />
      <TileFrame Sequence="6" FrameValue="232" Duration="5" />
      <TileFrame Sequence="7" FrameValue="231" Duration="5" />
    </Tile>
    <Tile TileValue="56" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="56" Duration="5" />
      <TileFrame Sequence="1" FrameValue="233" Duration="5" />
      <TileFrame Sequence="2" FrameValue="234" Duration="5" />
      <TileFrame Sequence="3" FrameValue="235" Duration="5" />
      <TileFrame Sequence="4" FrameValue="236" Duration="5" />
      <TileFrame Sequence="5" FrameValue="237" Duration="5" />
      <TileFrame Sequence="6" FrameValue="238" Duration="5" />
      <TileFrame Sequence="7" FrameValue="239" Duration="5" />
    </Tile>
  </Tileset>
  <Tileset Name="LetterTiles" Frameset="LetterFrames" TileWidth="32" TileHeight="32">
    <Tile TileValue="0" />
    <Tile TileValue="1">
      <TileFrame Sequence="1" FrameValue="1" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="2">
      <TileFrame Sequence="1" FrameValue="2" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="3">
      <TileFrame Sequence="1" FrameValue="3" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="4">
      <TileFrame Sequence="1" FrameValue="4" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="5">
      <TileFrame Sequence="1" FrameValue="5" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="6">
      <TileFrame Sequence="1" FrameValue="6" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="7">
      <TileFrame Sequence="1" FrameValue="7" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="8">
      <TileFrame Sequence="1" FrameValue="8" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="9">
      <TileFrame Sequence="1" FrameValue="9" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="10">
      <TileFrame Sequence="1" FrameValue="10" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="11">
      <TileFrame Sequence="1" FrameValue="11" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="12">
      <TileFrame Sequence="1" FrameValue="12" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="13">
      <TileFrame Sequence="1" FrameValue="13" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="14">
      <TileFrame Sequence="1" FrameValue="14" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="15">
      <TileFrame Sequence="1" FrameValue="15" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="16">
      <TileFrame Sequence="1" FrameValue="16" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="17">
      <TileFrame Sequence="1" FrameValue="17" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="18">
      <TileFrame Sequence="1" FrameValue="18" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="19">
      <TileFrame Sequence="1" FrameValue="19" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="20">
      <TileFrame Sequence="1" FrameValue="20" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="21">
      <TileFrame Sequence="1" FrameValue="21" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="22">
      <TileFrame Sequence="1" FrameValue="22" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="23">
      <TileFrame Sequence="1" FrameValue="23" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="24">
      <TileFrame Sequence="1" FrameValue="24" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="25">
      <TileFrame Sequence="1" FrameValue="25" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="26">
      <TileFrame Sequence="1" FrameValue="26" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="27">
      <TileFrame Sequence="1" FrameValue="27" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="28">
      <TileFrame Sequence="1" FrameValue="28" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="29">
      <TileFrame Sequence="1" FrameValue="29" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="30">
      <TileFrame Sequence="1" FrameValue="30" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="31">
      <TileFrame Sequence="1" FrameValue="31" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="32">
      <TileFrame Sequence="1" FrameValue="32" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="33">
      <TileFrame Sequence="1" FrameValue="33" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="34">
      <TileFrame Sequence="1" FrameValue="34" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="35">
      <TileFrame Sequence="1" FrameValue="35" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="36">
      <TileFrame Sequence="1" FrameValue="36" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="37">
      <TileFrame Sequence="1" FrameValue="37" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="38">
      <TileFrame Sequence="1" FrameValue="38" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="39">
      <TileFrame Sequence="1" FrameValue="39" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="40">
      <TileFrame Sequence="1" FrameValue="40" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="41">
      <TileFrame Sequence="1" FrameValue="41" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="42">
      <TileFrame Sequence="1" FrameValue="42" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="43">
      <TileFrame Sequence="1" FrameValue="43" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="44">
      <TileFrame Sequence="1" FrameValue="44" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="45">
      <TileFrame Sequence="1" FrameValue="45" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="46">
      <TileFrame Sequence="1" FrameValue="46" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="47">
      <TileFrame Sequence="1" FrameValue="47" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="48">
      <TileFrame Sequence="1" FrameValue="48" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="49">
      <TileFrame Sequence="1" FrameValue="49" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="50">
      <TileFrame Sequence="1" FrameValue="50" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="51">
      <TileFrame Sequence="1" FrameValue="51" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="52">
      <TileFrame Sequence="1" FrameValue="52" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="53">
      <TileFrame Sequence="1" FrameValue="53" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="54">
      <TileFrame Sequence="1" FrameValue="54" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="55">
      <TileFrame Sequence="1" FrameValue="55" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="56">
      <TileFrame Sequence="1" FrameValue="56" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="57">
      <TileFrame Sequence="1" FrameValue="57" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="58">
      <TileFrame Sequence="1" FrameValue="58" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="59">
      <TileFrame Sequence="1" FrameValue="59" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="60">
      <TileFrame Sequence="1" FrameValue="60" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="61">
      <TileFrame Sequence="1" FrameValue="61" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="62">
      <TileFrame Sequence="1" FrameValue="62" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="63">
      <TileFrame Sequence="1" FrameValue="63" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="64">
      <TileFrame Sequence="1" FrameValue="64" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="65">
      <TileFrame Sequence="1" FrameValue="65" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="66">
      <TileFrame Sequence="1" FrameValue="66" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="67">
      <TileFrame Sequence="1" FrameValue="67" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="68">
      <TileFrame Sequence="1" FrameValue="68" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="69">
      <TileFrame Sequence="1" FrameValue="69" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="70">
      <TileFrame Sequence="1" FrameValue="70" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="71">
      <TileFrame Sequence="1" FrameValue="71" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="72">
      <TileFrame Sequence="1" FrameValue="72" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="73">
      <TileFrame Sequence="1" FrameValue="73" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="74">
      <TileFrame Sequence="1" FrameValue="74" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="75">
      <TileFrame Sequence="1" FrameValue="75" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="76">
      <TileFrame Sequence="1" FrameValue="76" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="77">
      <TileFrame Sequence="1" FrameValue="77" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="78">
      <TileFrame Sequence="1" FrameValue="78" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="79">
      <TileFrame Sequence="1" FrameValue="79" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="80">
      <TileFrame Sequence="1" FrameValue="80" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="81">
      <TileFrame Sequence="1" FrameValue="81" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="82">
      <TileFrame Sequence="1" FrameValue="82" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="83">
      <TileFrame Sequence="1" FrameValue="83" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="84">
      <TileFrame Sequence="1" FrameValue="84" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="85">
      <TileFrame Sequence="1" FrameValue="85" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="86">
      <TileFrame Sequence="1" FrameValue="86" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="87">
      <TileFrame Sequence="1" FrameValue="87" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="88">
      <TileFrame Sequence="1" FrameValue="88" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="89">
      <TileFrame Sequence="1" FrameValue="89" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="90">
      <TileFrame Sequence="1" FrameValue="90" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="91">
      <TileFrame Sequence="1" FrameValue="91" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="92">
      <TileFrame Sequence="1" FrameValue="92" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="93">
      <TileFrame Sequence="1" FrameValue="93" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="94">
      <TileFrame Sequence="1" FrameValue="94" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="95">
      <TileFrame Sequence="1" FrameValue="95" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="96">
      <TileFrame Sequence="1" FrameValue="96" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="97">
      <TileFrame Sequence="1" FrameValue="97" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="98">
      <TileFrame Sequence="1" FrameValue="98" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="99">
      <TileFrame Sequence="1" FrameValue="99" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="100">
      <TileFrame Sequence="1" FrameValue="100" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="101">
      <TileFrame Sequence="1" FrameValue="101" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="102">
      <TileFrame Sequence="1" FrameValue="102" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="103">
      <TileFrame Sequence="1" FrameValue="103" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="104">
      <TileFrame Sequence="1" FrameValue="104" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="105">
      <TileFrame Sequence="1" FrameValue="105" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="106">
      <TileFrame Sequence="1" FrameValue="106" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="107">
      <TileFrame Sequence="1" FrameValue="107" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="108">
      <TileFrame Sequence="1" FrameValue="108" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="109">
      <TileFrame Sequence="1" FrameValue="109" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="110">
      <TileFrame Sequence="1" FrameValue="110" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="111">
      <TileFrame Sequence="1" FrameValue="111" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="112">
      <TileFrame Sequence="1" FrameValue="112" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="113">
      <TileFrame Sequence="1" FrameValue="113" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="114">
      <TileFrame Sequence="1" FrameValue="114" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="115">
      <TileFrame Sequence="1" FrameValue="115" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="116">
      <TileFrame Sequence="1" FrameValue="116" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="117">
      <TileFrame Sequence="1" FrameValue="117" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="118">
      <TileFrame Sequence="1" FrameValue="118" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="119">
      <TileFrame Sequence="1" FrameValue="119" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="120">
      <TileFrame Sequence="1" FrameValue="120" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="121">
      <TileFrame Sequence="1" FrameValue="121" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="122">
      <TileFrame Sequence="1" FrameValue="122" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="123">
      <TileFrame Sequence="1" FrameValue="123" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="124">
      <TileFrame Sequence="1" FrameValue="124" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="125">
      <TileFrame Sequence="1" FrameValue="125" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="126">
      <TileFrame Sequence="1" FrameValue="126" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="127">
      <TileFrame Sequence="1" FrameValue="127" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="128">
      <TileFrame Sequence="1" FrameValue="128" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="129">
      <TileFrame Sequence="1" FrameValue="129" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="130">
      <TileFrame Sequence="1" FrameValue="130" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="131">
      <TileFrame Sequence="1" FrameValue="131" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="132">
      <TileFrame Sequence="1" FrameValue="132" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="133">
      <TileFrame Sequence="1" FrameValue="133" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="134">
      <TileFrame Sequence="1" FrameValue="134" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="135">
      <TileFrame Sequence="1" FrameValue="135" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="136">
      <TileFrame Sequence="1" FrameValue="136" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="137">
      <TileFrame Sequence="1" FrameValue="137" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="138">
      <TileFrame Sequence="1" FrameValue="138" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="139">
      <TileFrame Sequence="1" FrameValue="139" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="140">
      <TileFrame Sequence="1" FrameValue="140" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="141">
      <TileFrame Sequence="1" FrameValue="141" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="142">
      <TileFrame Sequence="1" FrameValue="142" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="143">
      <TileFrame Sequence="1" FrameValue="143" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="144">
      <TileFrame Sequence="1" FrameValue="144" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="145">
      <TileFrame Sequence="1" FrameValue="145" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="146">
      <TileFrame Sequence="1" FrameValue="146" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="147">
      <TileFrame Sequence="1" FrameValue="147" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="148">
      <TileFrame Sequence="1" FrameValue="148" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="149">
      <TileFrame Sequence="1" FrameValue="149" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="150">
      <TileFrame Sequence="1" FrameValue="150" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="151">
      <TileFrame Sequence="1" FrameValue="151" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="152">
      <TileFrame Sequence="1" FrameValue="152" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="153">
      <TileFrame Sequence="1" FrameValue="153" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="154">
      <TileFrame Sequence="1" FrameValue="154" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="155">
      <TileFrame Sequence="1" FrameValue="155" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="156">
      <TileFrame Sequence="1" FrameValue="156" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="157">
      <TileFrame Sequence="1" FrameValue="157" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="158">
      <TileFrame Sequence="1" FrameValue="158" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="159">
      <TileFrame Sequence="1" FrameValue="159" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="160">
      <TileFrame Sequence="1" FrameValue="160" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="161">
      <TileFrame Sequence="1" FrameValue="161" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="162">
      <TileFrame Sequence="1" FrameValue="162" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="163">
      <TileFrame Sequence="1" FrameValue="163" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="164">
      <TileFrame Sequence="1" FrameValue="164" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="165">
      <TileFrame Sequence="1" FrameValue="165" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="166">
      <TileFrame Sequence="1" FrameValue="166" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="167">
      <TileFrame Sequence="1" FrameValue="167" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="168">
      <TileFrame Sequence="1" FrameValue="168" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="169">
      <TileFrame Sequence="1" FrameValue="169" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="170">
      <TileFrame Sequence="1" FrameValue="170" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="171">
      <TileFrame Sequence="1" FrameValue="171" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="172">
      <TileFrame Sequence="1" FrameValue="172" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="173">
      <TileFrame Sequence="1" FrameValue="173" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="174">
      <TileFrame Sequence="1" FrameValue="174" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="175">
      <TileFrame Sequence="1" FrameValue="175" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="176">
      <TileFrame Sequence="1" FrameValue="176" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="177">
      <TileFrame Sequence="1" FrameValue="177" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="178">
      <TileFrame Sequence="1" FrameValue="178" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="179">
      <TileFrame Sequence="1" FrameValue="179" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="180">
      <TileFrame Sequence="1" FrameValue="180" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="181">
      <TileFrame Sequence="1" FrameValue="181" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="182">
      <TileFrame Sequence="1" FrameValue="182" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="183">
      <TileFrame Sequence="1" FrameValue="183" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="184">
      <TileFrame Sequence="1" FrameValue="184" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="185">
      <TileFrame Sequence="1" FrameValue="185" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="186">
      <TileFrame Sequence="1" FrameValue="186" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="187">
      <TileFrame Sequence="1" FrameValue="187" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="188">
      <TileFrame Sequence="1" FrameValue="188" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="189">
      <TileFrame Sequence="1" FrameValue="189" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="190">
      <TileFrame Sequence="1" FrameValue="190" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="191">
      <TileFrame Sequence="1" FrameValue="191" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="192">
      <TileFrame Sequence="1" FrameValue="192" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="193">
      <TileFrame Sequence="1" FrameValue="193" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="194">
      <TileFrame Sequence="1" FrameValue="194" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="195">
      <TileFrame Sequence="1" FrameValue="195" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="196">
      <TileFrame Sequence="1" FrameValue="196" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
    </Tile>
    <Tile TileValue="197" Counter="MenuPointerIndex">
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
      <TileFrame Sequence="1" FrameValue="95" Duration="1" />
      <TileFrame Sequence="2" FrameValue="197" Duration="4" />
    </Tile>
    <Tile TileValue="198" Counter="MenuPointerIndex">
      <TileFrame Sequence="0" FrameValue="197" Duration="0" />
      <TileFrame Sequence="1" FrameValue="96" Duration="1" />
      <TileFrame Sequence="2" FrameValue="197" Duration="4" />
    </Tile>
    <Tile TileValue="199" Counter="MenuPointerIndex">
      <TileFrame Sequence="1" FrameValue="197" Duration="0" />
      <TileFrame Sequence="2" FrameValue="95" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="1" />
      <TileFrame Sequence="3" FrameValue="197" Duration="3" />
    </Tile>
    <Tile TileValue="200" Counter="MenuPointerIndex">
      <TileFrame Sequence="1" FrameValue="197" Duration="0" />
      <TileFrame Sequence="2" FrameValue="96" Duration="1" />
      <TileFrame Sequence="3" FrameValue="197" Duration="3" />
      <TileFrame Sequence="0" FrameValue="197" Duration="1" />
    </Tile>
    <Tile TileValue="201" Counter="MenuPointerIndex">
      <TileFrame Sequence="1" FrameValue="197" Duration="0" />
      <TileFrame Sequence="2" FrameValue="95" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="2" />
      <TileFrame Sequence="3" FrameValue="197" Duration="2" />
    </Tile>
    <Tile TileValue="202" Counter="MenuPointerIndex">
      <TileFrame Sequence="1" FrameValue="197" Duration="0" />
      <TileFrame Sequence="2" FrameValue="96" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="2" />
      <TileFrame Sequence="3" FrameValue="197" Duration="2" />
    </Tile>
    <Tile TileValue="203" Counter="MenuPointerIndex">
      <TileFrame Sequence="1" FrameValue="197" Duration="0" />
      <TileFrame Sequence="2" FrameValue="95" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="3" />
      <TileFrame Sequence="3" FrameValue="197" Duration="1" />
    </Tile>
    <Tile TileValue="204" Counter="MenuPointerIndex">
      <TileFrame Sequence="1" FrameValue="197" Duration="0" />
      <TileFrame Sequence="2" FrameValue="96" Duration="1" />
      <TileFrame Sequence="3" FrameValue="197" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="3" />
    </Tile>
    <Tile TileValue="205" Counter="MenuPointerIndex">
      <TileFrame Sequence="1" FrameValue="197" Duration="0" />
      <TileFrame Sequence="2" FrameValue="95" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="4" />
    </Tile>
    <Tile TileValue="206" Counter="MenuPointerIndex">
      <TileFrame Sequence="1" FrameValue="197" Duration="0" />
      <TileFrame Sequence="2" FrameValue="96" Duration="1" />
      <TileFrame Sequence="0" FrameValue="197" Duration="4" />
    </Tile>
    <Tile TileValue="207">
      <TileFrame Sequence="0" FrameValue="197" Duration="1" />
    </Tile>
  </Tileset>
  <Tileset Name="ViewSplitterTiles" Frameset="ViewSplitterFrames" TileWidth="15" TileHeight="128">
    <Tile TileValue="1" Counter="Players">
      <TileFrame Sequence="1" FrameValue="1" Duration="1" />
      <TileFrame Sequence="0" FrameValue="0" Duration="2" />
    </Tile>
    <Tile TileValue="0" />
  </Tileset>
  <Tileset Name="Spectrum" Frameset="Spectrum" TileWidth="25" TileHeight="25">
    <Tile TileValue="0" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="0" Duration="5" />
      <TileFrame Sequence="1" FrameValue="5" Duration="5" />
      <TileFrame Sequence="2" FrameValue="10" Duration="5" />
    </Tile>
    <Tile TileValue="1" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="1" Duration="5" />
      <TileFrame Sequence="1" FrameValue="6" Duration="5" />
      <TileFrame Sequence="2" FrameValue="11" Duration="5" />
    </Tile>
    <Tile TileValue="2" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="2" Duration="5" />
      <TileFrame Sequence="1" FrameValue="7" Duration="5" />
      <TileFrame Sequence="2" FrameValue="12" Duration="5" />
    </Tile>
    <Tile TileValue="4" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="4" Duration="5" />
      <TileFrame Sequence="1" FrameValue="9" Duration="5" />
      <TileFrame Sequence="2" FrameValue="14" Duration="5" />
    </Tile>
    <Tile TileValue="3" Counter="FrameCounter">
      <TileFrame Sequence="0" FrameValue="3" Duration="5" />
      <TileFrame Sequence="1" FrameValue="8" Duration="5" />
      <TileFrame Sequence="2" FrameValue="13" Duration="5" />
    </Tile>
  </Tileset>
  <Counter Name="FrameCounter" Value="1" Max="1000000000" />
  <Counter Name="MenuPointerIndex" Value="0" Max="4" />
  <Counter Name="KeyRepeat" Value="0" Max="60" />
  <Counter Name="Players" Value="2" Max="2" />
  <Counter Name="Player 1 grapes" Value="0" Max="10" />
  <Counter Name="Player 2 grapes" Value="0" Max="10" />
  <Counter Name="Player 1 cherries" Value="0" Max="10" />
  <Counter Name="Player 2 cherries" Value="0" Max="10" />
  <Counter Name="Player 1 ice cream" Value="0" Max="10" />
  <Counter Name="Player 2 ice cream" Value="0" Max="10" />
  <Counter Name="Player 1 Score" Value="0" Max="10000000" />
  <Counter Name="Player 2 Score" Value="0" Max="10000000" />
  <Map Name="Menu" ScrollMarginLeft="32" ScrollMarginTop="32" ScrollMarginRight="32" ScrollMarginBottom="32" ScrollWidth="800" ScrollHeight="600">
    <Layer Name="Letters" Width="25" Height="19" Tileset="LetterTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="0" Priority="0">
      <Tiles>z8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8XFGhEjzwInHBgNJREezxMNGRHGxs/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Px8caESPPAyccGA0lER7PEw0ZEcjIz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/JyQ8bGiAVGiERzxMNGRHKys/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLHSEVIMzMz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pzw==</Tiles>
      <SpritePlan Name="Select Menu Items" Priority="1">
        <PlanRule Name="If down is pressed" Sequence="1" Type="If" Function="IsKeyPressed" Parameter1="Microsoft.DirectX.DirectInput.Key.DownArrow" EndIf="false" Suspended="false" />
        <PlanRule Name="If down key repeat check matches" Sequence="2" Type="If" Function="==" Parameter1="Counter.KeyRepeat.CurrentValue" Parameter2="0" EndIf="false" Suspended="false" />
        <PlanRule Name="If not on last menu item" Sequence="3" Type="If" Function="&lt;" Parameter1="Counter.MenuPointerIndex.CurrentValue" Parameter2="3" EndIf="false" Suspended="false" />
        <PlanRule Name="Go to next menu item" Sequence="4" Type="Do" Function="+" Parameter1="Counter.MenuPointerIndex.CurrentValue" Parameter2="1" ResultParameter="Counter.MenuPointerIndex.CurrentValue" EndIf="false" Suspended="false" />
        <PlanRule Name="Else if down key repeat time elapsed" Sequence="9" Type="ElseIf" Function="&gt;=" Parameter1="Counter.KeyRepeat.CurrentValue" Parameter2="15" EndIf="false" Suspended="false" />
        <PlanRule Name="Reset down key repeat" Sequence="10" Type="Do" Function="=" Parameter1="0" ResultParameter="Counter.KeyRepeat.CurrentValue" EndIf="false" Suspended="false" />
        <PlanRule Name="Else wait for down key repeat time to elapse" Sequence="11" Type="Else" Function="+" Parameter1="Counter.KeyRepeat.CurrentValue" Parameter2="1" ResultParameter="Counter.KeyRepeat.CurrentValue" EndIf="true" Suspended="false" />
        <PlanRule Name="Else if up is pressed" Sequence="13" Type="ElseIf" Function="IsKeyPressed" Parameter1="Microsoft.DirectX.DirectInput.Key.Up" EndIf="false" Suspended="false" />
        <PlanRule Name="If up key repeat check matches" Sequence="14" Type="If" Function="==" Parameter1="Counter.KeyRepeat.CurrentValue" Parameter2="0" EndIf="false" Suspended="false" />
        <PlanRule Name="If not on first menu item" Sequence="15" Type="If" Function="&gt;" Parameter1="Counter.MenuPointerIndex.CurrentValue" Parameter2="0" EndIf="false" Suspended="false" />
        <PlanRule Name="Go to previous menu item" Sequence="16" Type="Do" Function="-" Parameter1="Counter.MenuPointerIndex.CurrentValue" Parameter2="1" ResultParameter="Counter.MenuPointerIndex.CurrentValue" EndIf="false" Suspended="false" />
        <PlanRule Name="Else if up key repeat time elapsed" Sequence="21" Type="ElseIf" Function="&gt;" Parameter1="Counter.KeyRepeat.CurrentValue" Parameter2="15" EndIf="false" Suspended="false" />
        <PlanRule Name="Reset up key repeat" Sequence="22" Type="Do" Function="=" Parameter1="0" ResultParameter="Counter.KeyRepeat.CurrentValue" EndIf="false" Suspended="false" />
        <PlanRule Name="Else wait for up key repeat time to elapse" Sequence="23" Type="Else" Function="+" Parameter1="Counter.KeyRepeat.CurrentValue" Parameter2="1" ResultParameter="Counter.KeyRepeat.CurrentValue" EndIf="true" Suspended="false" />
        <PlanRule Name="Else if Return/Enter is pressed" Sequence="25" Type="ElseIf" Function="IsKeyPressed" Parameter1="Microsoft.DirectX.DirectInput.Key.Return" EndIf="true" Suspended="false" />
        <PlanRule Name="End down key repeat check" Sequence="12" Type="End" Function="End" EndIf="true" Suspended="false" />
        <PlanRule Name="Begin down key repeat" Sequence="8" Type="Do" Function="+" Parameter1="Counter.KeyRepeat.CurrentValue" Parameter2="1" ResultParameter="Counter.KeyRepeat.CurrentValue" EndIf="true" Suspended="false" />
        <PlanRule Name="End up key repeat" Sequence="24" Type="End" Function="End" EndIf="true" Suspended="false" />
        <PlanRule Name="Begin up key repeat" Sequence="20" Type="Do" Function="+" Parameter1="Counter.KeyRepeat.CurrentValue" Parameter2="1" ResultParameter="Counter.KeyRepeat.CurrentValue" EndIf="true" Suspended="false" />
        <PlanRule Name="Else reset key repeat" Sequence="41" Type="Else" Function="=" Parameter1="0" ResultParameter="Counter.KeyRepeat.CurrentValue" EndIf="false" Suspended="false" />
        <PlanRule Name="If 1 player game selected" Sequence="26" Type="If" Function="==" Parameter1="Counter.MenuPointerIndex.CurrentValue" Parameter2="0" EndIf="false" Suspended="false" />
        <PlanRule Name="Set 1 player" Sequence="27" Type="Do" Function="=" Parameter1="1" ResultParameter="Counter.Players.CurrentValue" EndIf="false" Suspended="false" />
        <PlanRule Name="Else if 2 player game selected" Sequence="31" Type="ElseIf" Function="==" Parameter1="Counter.MenuPointerIndex.CurrentValue" Parameter2="1" EndIf="false" Suspended="false" />
        <PlanRule Name="Set 2 players" Sequence="32" Type="Do" Function="=" Parameter1="2" ResultParameter="Counter.Players.CurrentValue" EndIf="false" Suspended="false" />
        <PlanRule Name="Else if continue selected" Sequence="36" Type="ElseIf" Function="==" Parameter1="Counter.MenuPointerIndex.CurrentValue" Parameter2="2" EndIf="false" Suspended="false" />
        <PlanRule Name="Return to game" Sequence="37" Type="Do" Function="ReturnToPreviousMap" Parameter1="true" EndIf="false" Suspended="false" />
        <PlanRule Name="Else quit" Sequence="38" Type="Else" Function="QuitGame" EndIf="true" Suspended="false" />
        <PlanRule Name="End 2 player" Sequence="39" Type="End" Function="End" EndIf="true" Suspended="false" />
        <PlanRule Name="End 1 player" Sequence="40" Type="End" Function="End" EndIf="true" Suspended="false" />
        <PlanRule Name="Go to level 1 with 1 player" Sequence="30" Type="Do" Function="SwitchToMap" Parameter1="typeof(Level_1_Map)" Parameter2="true" EndIf="false" Suspended="false" />
        <PlanRule Name="Go to level 1 with 2 players" Sequence="35" Type="Do" Function="SwitchToMap" Parameter1="typeof(Level_1_Map)" Parameter2="true" EndIf="false" Suspended="false" />
        <PlanRule Name="Clear for 1 player game" Sequence="28" Type="Do" Function="UnloadBackgroundMaps" EndIf="false" Suspended="false" />
        <PlanRule Name="Clear for 2 player game" Sequence="33" Type="Do" Function="UnloadBackgroundMaps" EndIf="false" Suspended="false" />
        <PlanRule Name="If went down to Continue Game" Sequence="5" Type="If" Function="==" Parameter1="Counter.MenuPointerIndex.CurrentValue" Parameter2="2" EndIf="false" Suspended="false" />
        <PlanRule Name="And down to Continue Game is disabled" Sequence="6" Type="And" Function="!CanReturnToPreviousMap" EndIf="false" Suspended="false" />
        <PlanRule Name="Skip down" Sequence="7" Type="Do" Function="=" Parameter1="3" ResultParameter="Counter.MenuPointerIndex.CurrentValue" EndIf="true" Suspended="false" />
        <PlanRule Name="If went up to Continue Game" Sequence="17" Type="If" Function="==" Parameter1="Counter.MenuPointerIndex.CurrentValue" Parameter2="2" ResultParameter="" EndIf="false" Suspended="false" />
        <PlanRule Name="And up to Continue Game is disabled" Sequence="18" Type="And" Function="!CanReturnToPreviousMap" EndIf="false" Suspended="false" />
        <PlanRule Name="Skip up" Sequence="19" Type="Do" Function="=" Parameter1="1" ResultParameter="Counter.MenuPointerIndex.CurrentValue" EndIf="true" Suspended="false" />
        <PlanRule Name="Reset counters for 1 player" Sequence="29" Type="Do" Function="LoadGame" Parameter1="0" Parameter2="true" EndIf="false" Suspended="false" />
        <PlanRule Name="Reset counters for 2 player" Sequence="34" Type="Do" Function="LoadGame" Parameter1="0" Parameter2="true" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Continue Game" Priority="1">
        <Coordinate Sequence="1" X="128" Y="288" Weight="0" />
        <Coordinate Sequence="2" X="544" Y="320" Weight="0" />
      </SpritePlan>
      <SpritePlan Name="Initial Save" Priority="1">
        <PlanRule Name="Include counters" Sequence="2" Type="Do" Function="IncludeInSaveUnit" Parameter1="SaveUnitInclusion.AllCounters" EndIf="false" Suspended="false" />
        <PlanRule Name="Exclude player count" Sequence="3" Type="Do" Function="ExcludeCounterFromSaveUnit" Parameter1="Counter.Players" EndIf="false" Suspended="false" />
        <PlanRule Name="Save counters" Sequence="4" Type="Do" Function="SaveGame" Parameter1="0" Parameter2="true" EndIf="false" Suspended="false" />
        <PlanRule Name="If initial counter values are not saved" Sequence="1" Type="If" Function="!SaveExists" Parameter1="0" Parameter2="true" EndIf="false" Suspended="false" />
      </SpritePlan>
    </Layer>
    <Layer Name="DisabledContinue" Width="20" Height="1" Tileset="LetterTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" Priority="0">
      <Tiles>oq6ts6ittKQApqCspAAAAAAAAAA=</Tiles>
      <SpritePlan Name="Initialize map" Priority="1">
        <Coordinate Sequence="1" X="0" Y="0" Weight="0" />
        <Coordinate Sequence="2" X="416" Y="32" Weight="0" />
        <PlanRule Name="If not initialized" Sequence="1" Type="If" Function="!IsMapFlagOn" Parameter1="0" EndIf="false" Suspended="false" />
        <PlanRule Name="If can't return" Sequence="4" Type="If" Function="!CanReturnToPreviousMap" EndIf="false" Suspended="false" />
        <PlanRule Name="Set Initialized" Sequence="2" Type="Do" Function="SetMapFlag" Parameter1="0" Parameter2="true" EndIf="false" Suspended="false" />
        <PlanRule Name="Disable Continue Game" Sequence="5" Type="Do" Function="CopyTo" Parameter1="m_ParentLayer.m_ParentMap.m_Letters.m_Continue_Game" Parameter2="RelativePosition.TopLeft" EndIf="false" Suspended="false" />
        <PlanRule Name="Turn off overlay" Sequence="3" Type="Do" Function="ClearOverlay" EndIf="false" Suspended="false" />
      </SpritePlan>
    </Layer>
  </Map>
  <Map Name="Level 1" ScrollMarginLeft="128" ScrollMarginTop="256" ScrollMarginRight="128" ScrollMarginBottom="256" ScrollWidth="2048" ScrollHeight="1024">
    <Layer Name="Background" Width="25" Height="19" Tileset="SHFLTileset" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0" ScrollRateY="0" ZIndex="0" Priority="0">
      <Tiles>mJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJqampqampqampqampqampqampqampqampqbm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubnJycnJycnJycnJycnJycnJycnJycnJycnJ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2enp6enp6enp6enp6enp6enp6enp6enp6en5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn6CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoA==</Tiles>
    </Layer>
    <Layer Name="Main" Width="64" Height="32" Tileset="SHFLTileset" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="2" Priority="0">
      <Tiles>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</Tiles>
      <Sprite Name="Player 1" DefinitionName="Player" StateName="Right" CurrentFrame="0" X="204" Y="960" DX="0" DY="0" Priority="1" Active="true" Solidity="Standard" Color="-1">
        <ParameterValue ParameterName="TempNum" Value="0" />
        <ParameterValue ParameterName="ViewNum" Value="0" />
      </Sprite>
      <Sprite Name="Player 2" DefinitionName="Player" StateName="Left" CurrentFrame="0" X="276" Y="960" DX="0" DY="0" Priority="2" Active="false" Solidity="Standard" Color="-16711681">
        <ParameterValue ParameterName="TempNum" Value="0" />
        <ParameterValue ParameterName="ViewNum" Value="1" />
      </Sprite>
      <Sprite Name="Points 1" DefinitionName="Points" StateName="HundredPoints" CurrentFrame="0" X="42" Y="571" DX="0" DY="0" Priority="1" Active="false" Solidity="" Color="-1" />
      <Sprite Name="Points 2" DefinitionName="Points" StateName="HundredPoints" CurrentFrame="0" X="52" Y="586" DX="0" DY="0" Priority="1" Active="false" Solidity="" Color="-1" />
      <Sprite Name="Points 3" DefinitionName="Points" StateName="HundredPoints" CurrentFrame="0" X="61" Y="603" DX="0" DY="0" Priority="1" Active="false" Solidity="" Color="-1" />
      <Sprite Name="Points 4" DefinitionName="Points" StateName="HundredPoints" CurrentFrame="0" X="71" Y="618" DX="0" DY="0" Priority="1" Active="false" Solidity="" Color="-1" />
      <Sprite Name="Points 5" DefinitionName="Points" StateName="HundredPoints" CurrentFrame="0" X="82" Y="634" DX="0" DY="0" Priority="1" Active="false" Solidity="" Color="-1" />
      <Sprite Name="Points 6" DefinitionName="Points" StateName="HundredPoints" CurrentFrame="0" X="94" Y="651" DX="0" DY="0" Priority="1" Active="false" Solidity="" Color="-1" />
      <Sprite Name="Points 7" DefinitionName="Points" StateName="HundredPoints" CurrentFrame="0" X="104" Y="668" DX="0" DY="0" Priority="1" Active="false" Solidity="" Color="-1" />
      <Sprite Name="Platform 1" DefinitionName="Platform" StateName="Main" CurrentFrame="0" X="307" Y="606" DX="0" DY="0" Priority="1" Active="true" Solidity="" Color="-1">
        <ParameterValue ParameterName="CoordIndex" Value="0" />
        <ParameterValue ParameterName="WaitCounter" Value="0" />
      </Sprite>
      <SpritePlan Name="ManagePlayers" Priority="1">
        <PlanRule Name="If 2 players" Sequence="3" Type="If" Function="&gt;=" Parameter1="Counter.Players.CurrentValue" Parameter2="2" EndIf="false" Suspended="false" />
        <PlanRule Name="Activate second player" Sequence="4" Type="Do" Function="ActivateSprite" Parameter1="m_ParentLayer.m_Player_2" EndIf="false" Suspended="false" />
        <PlanRule Name="Side by side view" Sequence="5" Type="Do" Function="SetViewLayout" Parameter1="ViewLayout.LeftRight" EndIf="false" Suspended="false" />
        <PlanRule Name="If map needs initialization" Sequence="1" Type="If" Function="!IsMapFlagOn" Parameter1="0" EndIf="false" Suspended="false" />
        <PlanRule Name="Turn on initialized flag" Sequence="2" Type="Do" Function="SetMapFlag" Parameter1="0" Parameter2="true" EndIf="false" Suspended="false" />
        <PlanRule Name="Activate 2 player overlay" Sequence="6" Type="Do" Function="SetOverlay" Parameter1="typeof(Overlay_for_2_players_Map)" EndIf="false" Suspended="false" />
        <PlanRule Name="Else activate 1 player overlay" Sequence="7" Type="Else" Function="SetOverlay" Parameter1="typeof(Overlay_for_1_player_Map)" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Player Inputs" Priority="1">
        <PlanRule Name="Read player 1 inputs" Sequence="1" Type="Do" Function="MapPlayerToInputs" Parameter1="1" Parameter2="m_ParentLayer.m_Player_1" EndIf="false" Suspended="false" />
        <PlanRule Name="Read player 2 inputs" Sequence="3" Type="Do" Function="MapPlayerToInputs" Parameter1="2" Parameter2="m_ParentLayer.m_Player_2" EndIf="true" Suspended="false" />
        <PlanRule Name="If player 2 is active" Sequence="2" Type="If" Function="&gt;=" Parameter1="Counter.Players.CurrentValue" Parameter2="2" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Platform 1 Path" Priority="1">
        <Coordinate Sequence="1" X="300" Y="600" Weight="30" />
        <Coordinate Sequence="2" X="600" Y="300" Weight="30" />
        <PlanRule Name="Push toward current coordinate" Sequence="2" Type="Do" Function="PushSpriteTowardCoordinate" Parameter1="m_ParentLayer.m_Platform_1" Parameter2="m_ParentLayer.m_Platform_1.CoordIndex" Parameter3="40" EndIf="false" Suspended="false" />
        <PlanRule Name="Check for next coordinate" Sequence="4" Type="Do" Function="CheckNextCoordinate" Parameter1="m_ParentLayer.m_Platform_1" Parameter2="m_ParentLayer.m_Platform_1.CoordIndex" Parameter3="ref m_ParentLayer.m_Platform_1.WaitCounter" ResultParameter="m_ParentLayer.m_Platform_1.CoordIndex" EndIf="false" Suspended="false" />
        <PlanRule Name="If sprite is not waiting" Sequence="1" Type="If" Function="==" Parameter1="m_ParentLayer.m_Platform_1.WaitCounter" Parameter2="0" EndIf="false" Suspended="false" />
        <PlanRule Name="Else stop moving" Sequence="3" Type="Else" Function="StopSprite" Parameter1="m_ParentLayer.m_Platform_1" EndIf="true" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Door Left" Priority="1">
        <Coordinate Sequence="1" X="1088" Y="832" Weight="0" />
        <Coordinate Sequence="2" X="1120" Y="864" Weight="0" />
        <PlanRule Name="And player 1 pressing up" Sequence="2" Type="And" Function="IsInputPressed" Parameter1="m_ParentLayer.m_Player_1" Parameter2="SpriteBase.InputBits.Up" Parameter3="true" EndIf="false" Suspended="false" />
        <PlanRule Name="And player 1 in front of door" Sequence="3" Type="And" Function="IsSpriteWithin" Parameter1="m_ParentLayer.m_Player_1" Parameter2="RelativePosition.CenterMiddle" EndIf="false" Suspended="false" />
        <PlanRule Name="Transport player 1 to right door" Sequence="5" Type="Do" Function="TransportToPlan" Parameter1="m_ParentLayer.m_Player_1" Parameter2="m_ParentLayer.m_Door_Right" Parameter3="RelativePosition.CenterMiddle" EndIf="true" Suspended="false" />
        <PlanRule Name="And player 2 pressing up" Sequence="7" Type="And" Function="IsInputPressed" Parameter1="m_ParentLayer.m_Player_2" Parameter2="SpriteBase.InputBits.Up" Parameter3="true" EndIf="false" Suspended="false" />
        <PlanRule Name="And player 2 in front of door" Sequence="8" Type="And" Function="IsSpriteWithin" Parameter1="m_ParentLayer.m_Player_2" Parameter2="RelativePosition.CenterMiddle" EndIf="false" Suspended="false" />
        <PlanRule Name="Transport player 2 to right door" Sequence="10" Type="Do" Function="TransportToPlan" Parameter1="m_ParentLayer.m_Player_2" Parameter2="m_ParentLayer.m_Door_Right" Parameter3="RelativePosition.CenterMiddle" EndIf="false" Suspended="false" />
        <PlanRule Name="If player 1 is active" Sequence="1" Type="If" Function="IsSpriteActive" Parameter1="m_ParentLayer.m_Player_1" EndIf="false" Suspended="false" />
        <PlanRule Name="If player 2 is active" Sequence="6" Type="If" Function="IsSpriteActive" Parameter1="m_ParentLayer.m_Player_2" EndIf="false" Suspended="false" />
        <PlanRule Name="Ensure up is now seen as an old keyprss for player 1" Sequence="4" Type="Do" Function="CopyInputsToOld" Parameter1="m_ParentLayer.m_Player_1" EndIf="false" Suspended="false" />
        <PlanRule Name="Ensure up is now seen as an old keyprss for player 2" Sequence="9" Type="Do" Function="CopyInputsToOld" Parameter1="m_ParentLayer.m_Player_2" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Door Right" Priority="1">
        <Coordinate Sequence="1" X="1248" Y="960" Weight="0" />
        <Coordinate Sequence="2" X="1280" Y="992" Weight="0" />
        <PlanRule Name="And player 1 pressing up" Sequence="2" Type="And" Function="IsInputPressed" Parameter1="m_ParentLayer.m_Player_1" Parameter2="SpriteBase.InputBits.Up" Parameter3="true" EndIf="false" Suspended="false" />
        <PlanRule Name="And player 1 in front of door" Sequence="3" Type="And" Function="IsSpriteWithin" Parameter1="m_ParentLayer.m_Player_1" Parameter2="RelativePosition.CenterMiddle" EndIf="false" Suspended="false" />
        <PlanRule Name="Transport player 1 to left door" Sequence="5" Type="Do" Function="TransportToPlan" Parameter1="m_ParentLayer.m_Player_1" Parameter2="m_ParentLayer.m_Door_Left" Parameter3="RelativePosition.CenterMiddle" EndIf="true" Suspended="false" />
        <PlanRule Name="And player 2 pressing up" Sequence="7" Type="And" Function="IsInputPressed" Parameter1="m_ParentLayer.m_Player_2" Parameter2="SpriteBase.InputBits.Up" Parameter3="true" EndIf="false" Suspended="false" />
        <PlanRule Name="And player 2 in front of door" Sequence="8" Type="And" Function="IsSpriteWithin" Parameter1="m_ParentLayer.m_Player_2" Parameter2="RelativePosition.CenterMiddle" EndIf="false" Suspended="false" />
        <PlanRule Name="Transport player 2 to left door" Sequence="10" Type="Do" Function="TransportToPlan" Parameter1="m_ParentLayer.m_Player_2" Parameter2="m_ParentLayer.m_Door_Left" Parameter3="RelativePosition.CenterMiddle" EndIf="true" Suspended="false" />
        <PlanRule Name="If player 1 is active" Sequence="1" Type="If" Function="IsSpriteActive" Parameter1="m_ParentLayer.m_Player_1" EndIf="false" Suspended="false" />
        <PlanRule Name="If player 2 is active" Sequence="6" Type="If" Function="IsSpriteActive" Parameter1="m_ParentLayer.m_Player_2" EndIf="false" Suspended="false" />
        <PlanRule Name="Ensure up is now seen as an old keyprss for player 1" Sequence="4" Type="Do" Function="CopyInputsToOld" Parameter1="m_ParentLayer.m_Player_1" EndIf="false" Suspended="false" />
        <PlanRule Name="Ensure up is now seen as an old keyprss for player 2" Sequence="9" Type="Do" Function="CopyInputsToOld" Parameter1="m_ParentLayer.m_Player_2" EndIf="false" Suspended="false" />
      </SpritePlan>
    </Layer>
    <Layer Name="Spectrum" Width="32" Height="24" Tileset="Spectrum" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0" ScrollRateY="0" ZIndex="0" Priority="0">
      <Tilesiles>
      <SpritePlan Name="Spectrum Handler" Priority="1">
        <PlanRule Name="Draw Spectrum" Sequence="1" Type="Do" Function="CustomObjects.DrawSpectrum.Draw" Parameter1="CustomObjects.Signal94.Value" Parameter2="ParentLayer" EndIf="false" Suspended="false" />
      </SpritePlan>
    </Layer>
  </Map>
  <Map Name="Overlay for 2 players" ScrollMarginLeft="32" ScrollMarginTop="32" ScrollMarginRight="32" ScrollMarginBottom="32" ScrollWidth="800" ScrollHeight="600">
    <Layer Name="ViewSplitter" Width="1" Height="5" Tileset="ViewSplitterTiles" BytesPerTile="1" OffsetX="393" OffsetY="0" ScrollRateX="0" ScrollRateY="0" ZIndex="0" Priority="0">
      <Tiles>AQEBAQE=</Tiles>
    </Layer>
    <Layer Name="Inventory" Width="25" Height="19" Tileset="SHFLTileset" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0" ScrollRateY="0" ZIndex="0" Priority="0">
      <Tilesiles>
      <SpritePlan Name="Player 1 Grapes" Priority="1">
        <Coordinate Sequence="1" X="32" Y="0" Weight="0" />
        <Coordinate Sequence="2" X="352" Y="32" Weight="0" />
        <PlanRule Name="Draw player 1 grape inventory" Sequence="1" Type="Do" Function="DrawCounterAsTile" Parameter1="55" Parameter2="Counter.Player_1_grapes" Parameter3="PlanBase.DrawStyle.RepeatRightToCounter" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Player 2 Grapes" Priority="1">
        <Coordinate Sequence="1" X="448" Y="0" Weight="0" />
        <Coordinate Sequence="2" X="768" Y="32" Weight="0" />
        <PlanRule Name="Draw player 2 grape inventory" Sequence="1" Type="Do" Function="DrawCounterAsTile" Parameter1="55" Parameter2="Counter.Player_2_grapes" Parameter3="PlanBase.DrawStyle.RepeatRightToCounter" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Player 1 Cherries" Priority="1">
        <Coordinate Sequence="1" X="32" Y="32" Weight="0" />
        <Coordinate Sequence="2" X="352" Y="64" Weight="0" />
        <PlanRule Name="Draw player 1 cherry inventory" Sequence="1" Type="Do" Function="DrawCounterAsTile" Parameter1="54" Parameter2="Counter.Player_1_cherries" Parameter3="PlanBase.DrawStyle.RepeatRightToCounter" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Player 1 Ice Creams" Priority="1">
        <Coordinate Sequence="1" X="32" Y="64" Weight="0" />
        <Coordinate Sequence="2" X="352" Y="96" Weight="0" />
        <PlanRule Name="Draw player 1 ice cream inventory" Sequence="1" Type="Do" Function="DrawCounterAsTile" Parameter1="56" Parameter2="Counter.Player_1_ice_cream" Parameter3="PlanBase.DrawStyle.RepeatRightToCounter" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Player 2 Cherries" Priority="1">
        <Coordinate Sequence="1" X="448" Y="32" Weight="0" />
        <Coordinate Sequence="2" X="768" Y="64" Weight="0" />
        <PlanRule Name="Draw player 2 cherry inventory" Sequence="1" Type="Do" Function="DrawCounterAsTile" Parameter1="54" Parameter2="Counter.Player_2_cherries" Parameter3="PlanBase.DrawStyle.RepeatRightToCounter" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Player 2 Ice Creams" Priority="1">
        <Coordinate Sequence="1" X="448" Y="64" Weight="0" />
        <Coordinate Sequence="2" X="768" Y="96" Weight="0" />
        <PlanRule Name="Draw player 2 ice cream inventory" Sequence="1" Type="Do" Function="DrawCounterAsTile" Parameter1="56" Parameter2="Counter.Player_2_ice_cream" Parameter3="PlanBase.DrawStyle.RepeatRightToCounter" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Animate" Priority="1">
        <PlanRule Name="Increment FrameCounter" Sequence="1" Type="Do" Function="+" Parameter1="Counter.FrameCounter.CurrentValue" Parameter2="1" ResultParameter="Counter.FrameCounter.CurrentValue" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Player 1 score" Priority="1">
        <Coordinate Sequence="1" X="32" Y="96" Weight="0" />
        <Coordinate Sequence="2" X="192" Y="128" Weight="0" />
        <PlanRule Name="Draw player 1 score" Sequence="1" Type="Do" Function="DrawCounterWithLabel" Parameter1="&quot;Score: &quot;" Parameter2="Counter.Player_1_Score" Parameter3="System.Drawing.KnownColor.White" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Player 2 score" Priority="1">
        <Coordinate Sequence="1" X="448" Y="96" Weight="0" />
        <Coordinate Sequence="2" X="608" Y="128" Weight="0" />
        <PlanRule Name="Draw player 2 score" Sequence="1" Type="Do" Function="DrawCounterWithLabel" Parameter1="&quot;Score: &quot;" Parameter2="Counter.Player_2_Score" Parameter3="System.Drawing.KnownColor.White" EndIf="false" Suspended="false" />
      </SpritePlan>
    </Layer>
  </Map>
  <Map Name="Overlay for 1 player" ScrollMarginLeft="32" ScrollMarginTop="32" ScrollMarginRight="32" ScrollMarginBottom="32">
    <Layer Name="Inventory" Width="25" Height="19" Tileset="SHFLTileset" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0" ScrollRateY="0" ZIndex="0" Priority="0">
      <Tilesiles>
      <SpritePlan Name="Grapes" Priority="1">
        <Coordinate Sequence="1" X="32" Y="0" Weight="0" />
        <Coordinate Sequence="2" X="352" Y="32" Weight="0" />
        <PlanRule Name="Draw grape inventory" Sequence="1" Type="Do" Function="DrawCounterAsTile" Parameter1="55" Parameter2="Counter.Player_1_grapes" Parameter3="PlanBase.DrawStyle.RepeatRightToCounter" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Cherries" Priority="1">
        <Coordinate Sequence="1" X="384" Y="0" Weight="0" />
        <Coordinate Sequence="2" X="704" Y="32" Weight="0" />
        <PlanRule Name="Draw cherries" Sequence="1" Type="Do" Function="DrawCounterAsTile" Parameter1="54" Parameter2="Counter.Player_1_cherries" Parameter3="PlanBase.DrawStyle.RepeatRightToCounter" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Ice cream" Priority="1">
        <Coordinate Sequence="1" X="32" Y="32" Weight="0" />
        <Coordinate Sequence="2" X="352" Y="64" Weight="0" />
        <PlanRule Name="Draw ice cream" Sequence="1" Type="Do" Function="DrawCounterAsTile" Parameter1="56" Parameter2="Counter.Player_1_ice_cream" Parameter3="PlanBase.DrawStyle.RepeatRightToCounter" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Score" Priority="1">
        <Coordinate Sequence="1" X="385" Y="45" Weight="0" />
        <Coordinate Sequence="2" X="602" Y="64" Weight="0" />
        <PlanRule Name="Draw score" Sequence="1" Type="Do" Function="DrawCounterWithLabel" Parameter1="&quot;Score: &quot;" Parameter2="Counter.Player_1_Score" Parameter3="System.Drawing.KnownColor.White" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Animate" Priority="1">
        <PlanRule Name="Increase FrameCounter" Sequence="1" Type="Do" Function="+" Parameter1="Counter.FrameCounter.CurrentValue" Parameter2="1" ResultParameter="Counter.FrameCounter.CurrentValue" EndIf="false" Suspended="false" />
      </SpritePlan>
    </Layer>
  </Map>
  <SpriteDefinition Name="Platform">
    <SpriteRule Name="Limit" Sequence="1" Type="Do" Function="LimitVelocity" Parameter1="5" EndIf="false" Suspended="false" />
    <SpriteRule Name="React" Sequence="2" Type="Do" Function="ReactToSolid" EndIf="false" Suspended="false" />
    <SpriteRule Name="Move" Sequence="3" Type="Do" Function="MoveByVelocity" EndIf="false" Suspended="false" />
    <SpriteParameter Name="CoordIndex" />
    <SpriteParameter Name="WaitCounter" />
    <SpriteState Name="Main" FramesetName="PlatformFrame" SolidWidth="64" SolidHeight="16" Sequence="1">
      <SpriteFrame Sequence="0" FrameValue="0" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
  </SpriteDefinition>
  <SpriteDefinition Name="Player">
    <SpriteRule Name="If climbing" Sequence="1" Type="If" Function="IsInState" Parameter1="(int)Sprites.Player.State.Climbing" Parameter2="(int)Sprites.Player.State.Climbing" EndIf="false" Suspended="false" />
    <SpriteRule Name="Check if player left ladder" Sequence="2" Type="If" Function="!IsOnTile" Parameter1="TileCategoryName.Ladder" Parameter2="RelativePosition.BottomCenter" EndIf="true" Suspended="false" />
    <SpriteRule Name="Leave ladder" Sequence="4" Type="Do" Function="SwitchToState" Parameter1="(int)Sprites.Player.State.Right" Parameter2="RelativePosition.CenterMiddle" EndIf="true" Suspended="false" />
    <SpriteRule Name="Ladder inertia" Sequence="5" Type="Do" Function="ReactToInertia" Parameter1="0" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Ladder accellerate" Sequence="6" Type="Do" Function="AccelerateByInputs" Parameter1="20" Parameter2="2" Parameter3="false" EndIf="false" Suspended="false" />
    <SpriteRule Name="Animate climbing" Sequence="7" Type="Do" Function="Animate" Parameter1="SpriteBase.SpriteAnimationType.ByVerticalVelocity" EndIf="false" Suspended="false" />
    <SpriteRule Name="Else (not climbing) if trying to climb up" Sequence="8" Type="ElseIf" Function="IsInputPressed" Parameter1="SpriteBase.InputBits.Up" Parameter2="true" EndIf="false" Suspended="false" />
    <SpriteRule Name="Start climbing" Sequence="11" Type="Do" Function="SwitchToState" Parameter1="(int)Sprites.Player.State.Climbing" Parameter2="RelativePosition.CenterMiddle" EndIf="false" Suspended="false" />
    <SpriteRule Name="Else (not trying to climb) if standing on solid" Sequence="13" Type="ElseIf" Function="Blocked" Parameter1="SpriteBase.Direction.Down" EndIf="false" Suspended="false" />
    <SpriteRule Name="Or riding on platform" Sequence="14" Type="Or" Function="IsRidingPlatform" EndIf="false" Suspended="false" />
    <SpriteRule Name="And pressing button 1" Sequence="15" Type="And" Function="IsInputPressed" Parameter1="SpriteBase.InputBits.Button1" Parameter2="false" EndIf="false" Suspended="false" />
    <SpriteRule Name="Stop riding" Sequence="16" Type="Do" Function="StopRiding" EndIf="false" Suspended="false" />
    <SpriteRule Name="* Example - play jump sound effect" Sequence="17" Type="Do" Function="CustomObjects.Sfx.PlaySound" Parameter1="CustomObjects.Drum.Value" EndIf="false" Suspended="true" />
    <SpriteRule Name="Jump" Sequence="18" Type="Do" Function="=" Parameter1="-10" ResultParameter="dy" EndIf="true" Suspended="false" />
    <SpriteRule Name="End if (trying to start climbing or jumping)" Sequence="19" Type="End" Function="End" EndIf="true" Suspended="false" />
    <SpriteRule Name="Accellerate" Sequence="20" Type="Do" Function="AccelerateByInputs" Parameter1="10" Parameter2="5" Parameter3="true" EndIf="false" Suspended="false" />
    <SpriteRule Name="Gravity" Sequence="21" Type="Do" Function="AlterYVelocity" Parameter1=".4" EndIf="false" Suspended="false" />
    <SpriteRule Name="Inertia" Sequence="22" Type="Do" Function="ReactToInertia" Parameter1="100" Parameter2="80" EndIf="false" Suspended="false" />
    <SpriteRule Name="Animate" Sequence="23" Type="Do" Function="Animate" Parameter1="SpriteBase.SpriteAnimationType.ByHorizontalVelocity" EndIf="false" Suspended="false" />
    <SpriteRule Name="If moving left" Sequence="24" Type="If" Function="IsMoving" Parameter1="SpriteBase.Direction.Left" EndIf="false" Suspended="false" />
    <SpriteRule Name="and facing right" Sequence="25" Type="And" Function="IsInState" Parameter1="(int)Sprites.Player.State.Right" Parameter2="(int)Sprites.Player.State.Right" EndIf="false" Suspended="false" />
    <SpriteRule Name="then face left" Sequence="26" Type="Do" Function="SwitchToState" Parameter1="(int)Sprites.Player.State.Left" Parameter2="RelativePosition.CenterMiddle" EndIf="true" Suspended="false" />
    <SpriteRule Name="If moving right" Sequence="27" Type="If" Function="IsMoving" Parameter1="SpriteBase.Direction.Right" EndIf="false" Suspended="false" />
    <SpriteRule Name="and facing left" Sequence="28" Type="And" Function="IsInState" Parameter1="(int)Sprites.Player.State.Left" Parameter2="(int)Sprites.Player.State.Left" EndIf="false" Suspended="false" />
    <SpriteRule Name="then face right" Sequence="29" Type="Do" Function="SwitchToState" Parameter1="(int)Sprites.Player.State.Right" Parameter2="RelativePosition.CenterMiddle" EndIf="true" Suspended="false" />
    <SpriteRule Name="If riding platform" Sequence="30" Type="If" Function="IsRidingPlatform" EndIf="false" Suspended="false" />
    <SpriteRule Name="React to platform" Sequence="31" Type="Do" Function="ReactToPlatform" EndIf="false" Suspended="false" />
    <SpriteRule Name="Else check if landing on platform" Sequence="32" Type="Else" Function="LandDownOnPlatform" Parameter1="ParentLayer.m_SpriteCategories.Platforms" EndIf="true" Suspended="false" />
    <SpriteRule Name="End climbing/jumping handling" Sequence="33" Type="End" Function="End" EndIf="true" Suspended="false" />
    <SpriteRule Name="React to solid" Sequence="34" Type="Do" Function="ReactToSolid" EndIf="false" Suspended="false" />
    <SpriteRule Name="Snap to ground" Sequence="36" Type="Do" Function="SnapToGround" Parameter1="2" EndIf="false" Suspended="false" />
    <SpriteRule Name="Move by velocity" Sequence="37" Type="Do" Function="MoveByVelocity" EndIf="false" Suspended="false" />
    <SpriteRule Name="Tile interactions..." Sequence="40" Type="If" Function="TouchTiles" Parameter1="TileCategoryName.Touchable" EndIf="false" Suspended="false" />
    <SpriteRule Name="If player 1" Sequence="41" Type="If" Function="==" Parameter1="ViewNum" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Scroll into view" Sequence="39" Type="Do" Function="ScrollSpriteIntoView" Parameter1="true" EndIf="false" Suspended="false" />
    <SpriteRule Name="Activate player's view" Sequence="38" Type="Do" Function="=" Parameter1="ViewNum" ResultParameter="CurrentView" EndIf="false" Suspended="false" />
    <SpriteRule Name="Player 1 take grapes" Sequence="42" Type="Do" Function="TileTake" Parameter1="55" Parameter2="Counter.Player_1_grapes" ResultParameter="TempNum" EndIf="false" Suspended="false" />
    <SpriteRule Name="Else player 2 take grapes" Sequence="57" Type="Else" Function="TileTake" Parameter1="55" Parameter2="Counter.Player_2_grapes" ResultParameter="TempNum" EndIf="false" Suspended="false" />
    <SpriteRule Name="Player 1 take cherries" Sequence="49" Type="Do" Function="TileTake" Parameter1="54" Parameter2="Counter.Player_1_cherries" ResultParameter="TempNum" EndIf="false" Suspended="false" />
    <SpriteRule Name="Player 1 take ice cream" Sequence="56" Type="Do" Function="TileTake" Parameter1="56" Parameter2="Counter.Player_1_ice_cream" EndIf="false" Suspended="false" />
    <SpriteRule Name="Player 2 take cherries" Sequence="64" Type="Do" Function="TileTake" Parameter1="54" Parameter2="Counter.Player_2_cherries" ResultParameter="TempNum" EndIf="false" Suspended="false" />
    <SpriteRule Name="Player 2 take ice cream" Sequence="71" Type="Do" Function="TileTake" Parameter1="56" Parameter2="Counter.Player_2_ice_cream" EndIf="true" Suspended="false" />
    <SpriteRule Name="Get player 1 grape points" Sequence="43" Type="If" Function="&gt;" Parameter1="TempNum" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Show player 1 grape points" Sequence="45" Type="Do" Function="TileActivateSprite" Parameter1="0" Parameter2="ParentLayer.m_SpriteCategories.Points" Parameter3="true" ResultParameter="TempNum" EndIf="false" Suspended="false" />
    <SpriteRule Name="Switch player 1 grape points to 1000" Sequence="47" Type="Do" Function="SetCategorySpriteState" Parameter1="ParentLayer.m_SpriteCategories.Points" Parameter2="TempNum" Parameter3="1" EndIf="true" Suspended="false" />
    <SpriteRule Name="Get player 1 cherry points" Sequence="50" Type="If" Function="&gt;" Parameter1="TempNum" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Show player 1 cherry points" Sequence="52" Type="Do" Function="TileActivateSprite" Parameter1="0" Parameter2="ParentLayer.m_SpriteCategories.Points" Parameter3="true" ResultParameter="TempNum" EndIf="false" Suspended="false" />
    <SpriteRule Name="Switch player 1 cherry points to 100" Sequence="54" Type="Do" Function="SetCategorySpriteState" Parameter1="ParentLayer.m_SpriteCategories.Points" Parameter2="TempNum" Parameter3="0" EndIf="true" Suspended="false" />
    <SpriteRule Name="If new player 1 grape points were shown" Sequence="46" Type="If" Function="&gt;=" Parameter1="TempNum" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Add grape points to player 1 score" Sequence="48" Type="Do" Function="+" Parameter1="Counter.Player_1_Score.CurrentValue" Parameter2="1000" ResultParameter="Counter.Player_1_Score.CurrentValue" EndIf="true" Suspended="false" />
    <SpriteRule Name="If new player 1 cherry points were shown" Sequence="53" Type="If" Function="&gt;=" Parameter1="TempNum" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Add cherry points to player 1 score" Sequence="55" Type="Do" Function="+" Parameter1="Counter.Player_1_Score.CurrentValue" Parameter2="100" ResultParameter="Counter.Player_1_Score.CurrentValue" EndIf="true" Suspended="false" />
    <SpriteRule Name="Get player 2 grape points" Sequence="58" Type="If" Function="&gt;" Parameter1="TempNum" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Show player 2 grape points" Sequence="60" Type="Do" Function="TileActivateSprite" Parameter1="0" Parameter2="ParentLayer.m_SpriteCategories.Points" Parameter3="true" ResultParameter="TempNum" EndIf="false" Suspended="false" />
    <SpriteRule Name="If new player 2 grape points were shown" Sequence="61" Type="If" Function="&gt;=" Parameter1="TempNum" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Switch player 2 grape points to 1000" Sequence="62" Type="Do" Function="SetCategorySpriteState" Parameter1="ParentLayer.m_SpriteCategories.Points" Parameter2="TempNum" Parameter3="1" EndIf="true" Suspended="false" />
    <SpriteRule Name="Add grape points to player 2 score" Sequence="63" Type="Do" Function="+" Parameter1="Counter.Player_2_Score.CurrentValue" Parameter2="1000" ResultParameter="Counter.Player_2_Score.CurrentValue" EndIf="true" Suspended="false" />
    <SpriteRule Name="Show player 2 cherry points" Sequence="67" Type="Do" Function="TileActivateSprite" Parameter1="0" Parameter2="ParentLayer.m_SpriteCategories.Points" Parameter3="true" ResultParameter="TempNum" EndIf="false" Suspended="false" />
    <SpriteRule Name="Get player 2 cherry points" Sequence="65" Type="If" Function="&gt;" Parameter1="TempNum" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="If new player 2 cherry points were shown" Sequence="68" Type="If" Function="&gt;=" Parameter1="TempNum" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Switch player 2 cherry points to 100" Sequence="69" Type="Do" Function="SetCategorySpriteState" Parameter1="ParentLayer.m_SpriteCategories.Points" Parameter2="TempNum" Parameter3="0" EndIf="true" Suspended="false" />
    <SpriteRule Name="Add cherry points to player 2 score" Sequence="70" Type="Do" Function="+" Parameter1="Counter.Player_2_Score.CurrentValue" Parameter2="100" ResultParameter="Counter.Player_2_Score.CurrentValue" EndIf="true" Suspended="false" />
    <SpriteRule Name="End tile interactions" Sequence="72" Type="End" Function="End" EndIf="true" Suspended="false" />
    <SpriteRule Name="If menu requested" Sequence="73" Type="If" Function="IsKeyPressed" Parameter1="Microsoft.DirectX.DirectInput.Key.Escape" EndIf="false" Suspended="false" />
    <SpriteRule Name="Go to menu" Sequence="76" Type="Do" Function="SwitchToMap" Parameter1="typeof(Menu_Map)" Parameter2="false" EndIf="true" Suspended="false" />
    <SpriteRule Name="Reset map's initialized flag" Sequence="75" Type="Do" Function="SetMapFlag" Parameter1="0" Parameter2="false" EndIf="false" Suspended="false" />
    <SpriteRule Name="React to springs" Sequence="35" Type="Do" Function="CustomObjects.TileSpecialization.ReactToSprings" Parameter1="this" EndIf="false" Suspended="false" />
    <SpriteRule Name="And player 1" Sequence="74" Type="And" Function="==" Parameter1="ViewNum" Parameter2="0" EndIf="false" Suspended="false" />
    <SpriteRule Name="Play player 1 grape sound" Sequence="44" Type="Do" Function="CustomObjects.FMODBase.PlaySound" Parameter1="CustomObjects.Chime.Value" Parameter2="CustomObjects.SoundReplay.Restart" EndIf="false" Suspended="false" />
    <SpriteRule Name="Play player 1 cherry sound" Sequence="51" Type="Do" Function="CustomObjects.FMODBase.PlaySound" Parameter1="CustomObjects.Chime.Value" Parameter2="CustomObjects.SoundReplay.Restart" EndIf="false" Suspended="false" />
    <SpriteRule Name="Play player 2 grape sound" Sequence="59" Type="Do" Function="CustomObjects.FMODBase.PlaySound" Parameter1="CustomObjects.Chime.Value" Parameter2="CustomObjects.SoundReplay.Restart" EndIf="false" Suspended="false" />
    <SpriteRule Name="Play player 2 cherry sound" Sequence="66" Type="Do" Function="CustomObjects.FMODBase.PlaySound" Parameter1="CustomObjects.Chime.Value" Parameter2="CustomObjects.SoundReplay.Restart" EndIf="false" Suspended="false" />
    <SpriteRule Name="Continue music" Sequence="77" Type="Do" Function="CustomObjects.FMODBase.PlaySound" Parameter1="CustomObjects.Signal94.Value" Parameter2="CustomObjects.SoundReplay.Continue" EndIf="false" Suspended="false" />
    <SpriteRule Name="Switch solidity to ladder" Sequence="12" Type="Do" Function="SetSolidity" Parameter1="Solidity.OnLadder" EndIf="false" Suspended="false" />
    <SpriteRule Name="Switch to non-ladder solidity" Sequence="3" Type="Do" Function="SetSolidity" Parameter1="Solidity.Standard" EndIf="false" Suspended="false" />
    <SpriteRule Name="And standing in front of ladder" Sequence="10" Type="And" Function="IsOnTile" Parameter1="TileCategoryName.Ladder" Parameter2="RelativePosition.BottomCenter" EndIf="false" Suspended="false" />
    <SpriteRule Name="Or trying to climb down" Sequence="9" Type="Or" Function="IsInputPressed" Parameter1="SpriteBase.InputBits.Down" Parameter2="true" EndIf="false" Suspended="false" />
    <SpriteParameter Name="TempNum" />
    <SpriteParameter Name="ViewNum" />
    <SpriteState Name="Right" FramesetName="SpriteFrames" SolidWidth="32" SolidHeight="32" Sequence="1">
      <SpriteFrame Sequence="0" FrameValue="0" Duration="10" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="1" FrameValue="1" Duration="10" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="2" FrameValue="3" Duration="10" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="3" FrameValue="4" Duration="10" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="4" FrameValue="2" Duration="10" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Left" FramesetName="SpriteFrames" SolidWidth="32" SolidHeight="32" Sequence="2">
      <SpriteFrame Sequence="0" FrameValue="10" Duration="10" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="1" FrameValue="9" Duration="10" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="2" FrameValue="7" Duration="10" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="3" FrameValue="6" Duration="10" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="4" FrameValue="8" Duration="10" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Climbing" FramesetName="SpriteFrames" SolidWidth="32" SolidHeight="32" Sequence="3">
      <SpriteFrame Sequence="0" FrameValue="12" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="1" FrameValue="13" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="2" FrameValue="14" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="3" FrameValue="15" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="4" FrameValue="16" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="5" FrameValue="15" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="6" FrameValue="14" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="7" FrameValue="13" Duration="5" MaskAlphaLevel="0" />
    </SpriteState>
  </SpriteDefinition>
  <SpriteDefinition Name="Points">
    <SpriteRule Name="Animate" Sequence="1" Type="Do" Function="+" Parameter1="frame" Parameter2="1" ResultParameter="frame" EndIf="false" Suspended="false" />
    <SpriteRule Name="If expired" Sequence="4" Type="If" Function="&gt;=" Parameter1="frame" Parameter2="135" EndIf="false" Suspended="false" />
    <SpriteRule Name="Deactivate" Sequence="5" Type="Do" Function="Deactivate" EndIf="false" Suspended="false" />
    <SpriteRule Name="Set velocity" Sequence="2" Type="Do" Function="=" Parameter1="-1" ResultParameter="dy" EndIf="false" Suspended="false" />
    <SpriteRule Name="Move" Sequence="3" Type="Do" Function="MoveByVelocity" EndIf="false" Suspended="false" />
    <SpriteState Name="HundredPoints" FramesetName="Points" SolidWidth="32" SolidHeight="32" Sequence="1">
      <SpriteFrame Sequence="0" FrameValue="0" Duration="30" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="1" FrameValue="1" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="2" FrameValue="2" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="3" FrameValue="3" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="4" FrameValue="4" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="5" FrameValue="5" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="6" FrameValue="6" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="7" FrameValue="7" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="8" FrameValue="8" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="9" FrameValue="9" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="10" FrameValue="10" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="11" FrameValue="11" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="12" FrameValue="12" Duration="50" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="ThousandPoints" FramesetName="Points" SolidWidth="32" SolidHeight="32" Sequence="2">
      <SpriteFrame Sequence="0" FrameValue="13" Duration="30" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="1" FrameValue="14" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="2" FrameValue="15" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="3" FrameValue="16" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="4" FrameValue="17" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="5" FrameValue="18" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="6" FrameValue="19" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="7" FrameValue="20" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="8" FrameValue="21" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="9" FrameValue="22" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="10" FrameValue="23" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="11" FrameValue="24" Duration="5" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="12" FrameValue="25" Duration="50" MaskAlphaLevel="0" />
    </SpriteState>
  </SpriteDefinition>
  <SpriteCategory Name="Platforms">
    <SpriteCategorySprite DefinitionName="Platform" />
  </SpriteCategory>
  <SpriteCategory Name="Points">
    <SpriteCategorySprite DefinitionName="Points" />
  </SpriteCategory>
  <Solidity Name="Standard">
    <SolidityShape CategoryName="Solid" ShapeName="SolidTileShape" />
    <SolidityShape CategoryName="TopSolid" ShapeName="TopSolidTileShape" />
    <SolidityShape CategoryName="Uphill" ShapeName="UphillTileShape" />
    <SolidityShape CategoryName="Downhill" ShapeName="DownhillTileShape" />
  </Solidity>
  <Solidity Name="OnLadder">
    <SolidityShape CategoryName="LadderSolid" ShapeName="SolidTileShape" />
    <SolidityShape CategoryName="Uphill" ShapeName="UphillTileShape" />
    <SolidityShape CategoryName="Downhill" ShapeName="DownhillTileShape" />
    <SolidityShape CategoryName="TopSolid" ShapeName="TopSolidTileShape" />
  </Solidity>
  <SourceCode Name="Controls.cs" IsCustomObject="false">
    <Text>using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

/// &lt;summary&gt;
/// Summary description for frmControls.
/// &lt;/summary&gt;
public class frmControls : System.Windows.Forms.Form
{
   #region Windows Form Designer Members
   private System.Windows.Forms.Label lblController;
   private System.Windows.Forms.ComboBox cboController;
   private System.Windows.Forms.RadioButton rdoController;
   private System.Windows.Forms.RadioButton rdoKeyboard;
   private System.Windows.Forms.TextBox txtButton4;
   private System.Windows.Forms.Label lblButton4;
   private System.Windows.Forms.TextBox txtButton3;
   private System.Windows.Forms.Label lblButton3;
   private System.Windows.Forms.TextBox txtButton2;
   private System.Windows.Forms.Label lblButton2;
   private System.Windows.Forms.TextBox txtButton1;
   private System.Windows.Forms.Label lblButton1;
   private System.Windows.Forms.TextBox txtDown;
   private System.Windows.Forms.Label lblDown;
   private System.Windows.Forms.TextBox txtRight;
   private System.Windows.Forms.Label lblRight;
   private System.Windows.Forms.TextBox txtLeft;
   private System.Windows.Forms.Label lblLeft;
   private System.Windows.Forms.TextBox txtUp;
   private System.Windows.Forms.Label lblUp;
   private System.Windows.Forms.ComboBox cboPlayer;
   private System.Windows.Forms.Label lblPlayer;

   /// &lt;summary&gt;
   /// Required designer variable.
   /// &lt;/summary&gt;
   private System.ComponentModel.Container components = null;
   #endregion
   
   public frmControls()
   {
      //
      // Required for Windows Form Designer support
      //
      InitializeComponent();

      if (Project.MaxPlayers &lt;= 1)
      {
         lblPlayer.Hide();
         cboPlayer.Hide();
         this.ClientSize = new System.Drawing.Size(298, 185);
      }

      for(int i = 0; i &lt; Project.GameWindow.ControllerCount; i++)
         cboController.Items.Add(Project.GameWindow.GetControllerName(i));
      rdoController.Enabled = (cboController.Items.Count &gt; 0);

      for (int i = 0; i&lt;Project.MaxPlayers; i++)
         cboPlayer.Items.Add("Player " + (i+1).ToString());
      cboPlayer.SelectedIndex = 0;
   }

   /// &lt;summary&gt;
   /// Clean up any resources being used.
   /// &lt;/summary&gt;
   protected override void Dispose( bool disposing )
   {
      if( disposing )
      {
         if(components != null)
         {
            components.Dispose();
         }
      }
      base.Dispose( disposing );
   }

   #region Windows Form Designer generated code
   private void InitializeComponent()
   {
      this.lblController = new System.Windows.Forms.Label();
      this.cboController = new System.Windows.Forms.ComboBox();
      this.rdoController = new System.Windows.Forms.RadioButton();
      this.rdoKeyboard = new System.Windows.Forms.RadioButton();
      this.txtButton4 = new System.Windows.Forms.TextBox();
      this.lblButton4 = new System.Windows.Forms.Label();
      this.txtButton3 = new System.Windows.Forms.TextBox();
      this.lblButton3 = new System.Windows.Forms.Label();
      this.txtButton2 = new System.Windows.Forms.TextBox();
      this.lblButton2 = new System.Windows.Forms.Label();
      this.txtButton1 = new System.Windows.Forms.TextBox();
      this.lblButton1 = new System.Windows.Forms.Label();
      this.txtDown = new System.Windows.Forms.TextBox();
      this.lblDown = new System.Windows.Forms.Label();
      this.txtRight = new System.Windows.Forms.TextBox();
      this.lblRight = new System.Windows.Forms.Label();
      this.txtLeft = new System.Windows.Forms.TextBox();
      this.lblLeft = new System.Windows.Forms.Label();
      this.txtUp = new System.Windows.Forms.TextBox();
      this.lblUp = new System.Windows.Forms.Label();
      this.cboPlayer = new System.Windows.Forms.ComboBox();
      this.lblPlayer = new System.Windows.Forms.Label();
      this.SuspendLayout();
      // 
      // lblController
      // 
      this.lblController.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblController.Enabled = false;
      this.lblController.Location = new System.Drawing.Point(24, 184);
      this.lblController.Name = "lblController";
      this.lblController.Size = new System.Drawing.Size(64, 16);
      this.lblController.TabIndex = 43;
      this.lblController.Text = "Controller:";
      // 
      // cboController
      // 
      this.cboController.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.cboController.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.cboController.Enabled = false;
      this.cboController.Location = new System.Drawing.Point(88, 184);
      this.cboController.Name = "cboController";
      this.cboController.Size = new System.Drawing.Size(200, 21);
      this.cboController.TabIndex = 42;
      this.cboController.SelectedIndexChanged += new System.EventHandler(this.cboController_SelectedIndexChanged);
      // 
      // rdoController
      // 
      this.rdoController.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.rdoController.Location = new System.Drawing.Point(8, 160);
      this.rdoController.Name = "rdoController";
      this.rdoController.Size = new System.Drawing.Size(272, 16);
      this.rdoController.TabIndex = 41;
      this.rdoController.Text = "Game Controller";
      this.rdoController.CheckedChanged += new System.EventHandler(this.InputType_Changed);
      // 
      // rdoKeyboard
      // 
      this.rdoKeyboard.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.rdoKeyboard.Location = new System.Drawing.Point(8, 40);
      this.rdoKeyboard.Name = "rdoKeyboard";
      this.rdoKeyboard.Size = new System.Drawing.Size(272, 16);
      this.rdoKeyboard.TabIndex = 40;
      this.rdoKeyboard.Text = "Keyboard";
      this.rdoKeyboard.CheckedChanged += new System.EventHandler(this.InputType_Changed);
      // 
      // txtButton4
      // 
      this.txtButton4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtButton4.Enabled = false;
      this.txtButton4.Location = new System.Drawing.Point(224, 128);
      this.txtButton4.Name = "txtButton4";
      this.txtButton4.ReadOnly = true;
      this.txtButton4.Size = new System.Drawing.Size(64, 20);
      this.txtButton4.TabIndex = 39;
      this.txtButton4.Text = "";
      this.txtButton4.KeyDown += new System.Windows.Forms.KeyEventHandler(this.KeyBox_KeyDown);
      // 
      // lblButton4
      // 
      this.lblButton4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblButton4.Enabled = false;
      this.lblButton4.Location = new System.Drawing.Point(160, 128);
      this.lblButton4.Name = "lblButton4";
      this.lblButton4.Size = new System.Drawing.Size(64, 20);
      this.lblButton4.TabIndex = 38;
      this.lblButton4.Text = "Button 4:";
      this.lblButton4.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtButton3
      // 
      this.txtButton3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtButton3.Enabled = false;
      this.txtButton3.Location = new System.Drawing.Point(224, 104);
      this.txtButton3.Name = "txtButton3";
      this.txtButton3.ReadOnly = true;
      this.txtButton3.Size = new System.Drawing.Size(64, 20);
      this.txtButton3.TabIndex = 37;
      this.txtButton3.Text = "";
      this.txtButton3.KeyDown += new System.Windows.Forms.KeyEventHandler(this.KeyBox_KeyDown);
      // 
      // lblButton3
      // 
      this.lblButton3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblButton3.Enabled = false;
      this.lblButton3.Location = new System.Drawing.Point(160, 104);
      this.lblButton3.Name = "lblButton3";
      this.lblButton3.Size = new System.Drawing.Size(64, 20);
      this.lblButton3.TabIndex = 36;
      this.lblButton3.Text = "Button 3:";
      this.lblButton3.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtButton2
      // 
      this.txtButton2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtButton2.Enabled = false;
      this.txtButton2.Location = new System.Drawing.Point(224, 80);
      this.txtButton2.Name = "txtButton2";
      this.txtButton2.ReadOnly = true;
      this.txtButton2.Size = new System.Drawing.Size(64, 20);
      this.txtButton2.TabIndex = 35;
      this.txtButton2.Text = "";
      this.txtButton2.KeyDown += new System.Windows.Forms.KeyEventHandler(this.KeyBox_KeyDown);
      // 
      // lblButton2
      // 
      this.lblButton2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblButton2.Enabled = false;
      this.lblButton2.Location = new System.Drawing.Point(160, 80);
      this.lblButton2.Name = "lblButton2";
      this.lblButton2.Size = new System.Drawing.Size(64, 20);
      this.lblButton2.TabIndex = 34;
      this.lblButton2.Text = "Button 2:";
      this.lblButton2.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtButton1
      // 
      this.txtButton1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtButton1.Enabled = false;
      this.txtButton1.Location = new System.Drawing.Point(224, 56);
      this.txtButton1.Name = "txtButton1";
      this.txtButton1.ReadOnly = true;
      this.txtButton1.Size = new System.Drawing.Size(64, 20);
      this.txtButton1.TabIndex = 33;
      this.txtButton1.Text = "";
      this.txtButton1.KeyDown += new System.Windows.Forms.KeyEventHandler(this.KeyBox_KeyDown);
      // 
      // lblButton1
      // 
      this.lblButton1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblButton1.Enabled = false;
      this.lblButton1.Location = new System.Drawing.Point(160, 56);
      this.lblButton1.Name = "lblButton1";
      this.lblButton1.Size = new System.Drawing.Size(64, 20);
      this.lblButton1.TabIndex = 32;
      this.lblButton1.Text = "Button 1:";
      this.lblButton1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtDown
      // 
      this.txtDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtDown.Enabled = false;
      this.txtDown.Location = new System.Drawing.Point(88, 128);
      this.txtDown.Name = "txtDown";
      this.txtDown.ReadOnly = true;
      this.txtDown.Size = new System.Drawing.Size(64, 20);
      this.txtDown.TabIndex = 31;
      this.txtDown.Text = "";
      this.txtDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.KeyBox_KeyDown);
      // 
      // lblDown
      // 
      this.lblDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblDown.Enabled = false;
      this.lblDown.Location = new System.Drawing.Point(24, 128);
      this.lblDown.Name = "lblDown";
      this.lblDown.Size = new System.Drawing.Size(64, 20);
      this.lblDown.TabIndex = 30;
      this.lblDown.Text = "Down:";
      this.lblDown.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtRight
      // 
      this.txtRight.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtRight.Enabled = false;
      this.txtRight.Location = new System.Drawing.Point(88, 104);
      this.txtRight.Name = "txtRight";
      this.txtRight.ReadOnly = true;
      this.txtRight.Size = new System.Drawing.Size(64, 20);
      this.txtRight.TabIndex = 29;
      this.txtRight.Text = "";
      this.txtRight.KeyDown += new System.Windows.Forms.KeyEventHandler(this.KeyBox_KeyDown);
      // 
      // lblRight
      // 
      this.lblRight.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblRight.Enabled = false;
      this.lblRight.Location = new System.Drawing.Point(24, 104);
      this.lblRight.Name = "lblRight";
      this.lblRight.Size = new System.Drawing.Size(64, 20);
      this.lblRight.TabIndex = 28;
      this.lblRight.Text = "Right:";
      this.lblRight.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtLeft
      // 
      this.txtLeft.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtLeft.Enabled = false;
      this.txtLeft.Location = new System.Drawing.Point(88, 80);
      this.txtLeft.Name = "txtLeft";
      this.txtLeft.ReadOnly = true;
      this.txtLeft.Size = new System.Drawing.Size(64, 20);
      this.txtLeft.TabIndex = 27;
      this.txtLeft.Text = "";
      this.txtLeft.KeyDown += new System.Windows.Forms.KeyEventHandler(this.KeyBox_KeyDown);
      // 
      // lblLeft
      // 
      this.lblLeft.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblLeft.Enabled = false;
      this.lblLeft.Location = new System.Drawing.Point(24, 80);
      this.lblLeft.Name = "lblLeft";
      this.lblLeft.Size = new System.Drawing.Size(64, 20);
      this.lblLeft.TabIndex = 26;
      this.lblLeft.Text = "Left:";
      this.lblLeft.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtUp
      // 
      this.txtUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtUp.Enabled = false;
      this.txtUp.Location = new System.Drawing.Point(88, 56);
      this.txtUp.Name = "txtUp";
      this.txtUp.ReadOnly = true;
      this.txtUp.Size = new System.Drawing.Size(64, 20);
      this.txtUp.TabIndex = 25;
      this.txtUp.Text = "";
      this.txtUp.KeyDown += new System.Windows.Forms.KeyEventHandler(this.KeyBox_KeyDown);
      // 
      // lblUp
      // 
      this.lblUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblUp.Enabled = false;
      this.lblUp.Location = new System.Drawing.Point(24, 56);
      this.lblUp.Name = "lblUp";
      this.lblUp.Size = new System.Drawing.Size(64, 20);
      this.lblUp.TabIndex = 24;
      this.lblUp.Text = "Up:";
      this.lblUp.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // cboPlayer
      // 
      this.cboPlayer.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.cboPlayer.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.cboPlayer.Location = new System.Drawing.Point(88, 8);
      this.cboPlayer.Name = "cboPlayer";
      this.cboPlayer.Size = new System.Drawing.Size(200, 21);
      this.cboPlayer.TabIndex = 23;
      this.cboPlayer.SelectedIndexChanged += new System.EventHandler(this.cboPlayer_SelectedIndexChanged);
      // 
      // lblPlayer
      // 
      this.lblPlayer.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblPlayer.Location = new System.Drawing.Point(8, 8);
      this.lblPlayer.Name = "lblPlayer";
      this.lblPlayer.Size = new System.Drawing.Size(80, 21);
      this.lblPlayer.TabIndex = 22;
      this.lblPlayer.Text = "Player:";
      this.lblPlayer.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // frmControls
      // 
      this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
      this.ClientSize = new System.Drawing.Size(298, 215);
      this.Controls.Add(this.lblController);
      this.Controls.Add(this.cboController);
      this.Controls.Add(this.rdoController);
      this.Controls.Add(this.rdoKeyboard);
      this.Controls.Add(this.txtButton4);
      this.Controls.Add(this.txtButton3);
      this.Controls.Add(this.txtButton2);
      this.Controls.Add(this.txtButton1);
      this.Controls.Add(this.txtDown);
      this.Controls.Add(this.txtRight);
      this.Controls.Add(this.txtLeft);
      this.Controls.Add(this.txtUp);
      this.Controls.Add(this.lblButton4);
      this.Controls.Add(this.lblButton3);
      this.Controls.Add(this.lblButton2);
      this.Controls.Add(this.lblButton1);
      this.Controls.Add(this.lblDown);
      this.Controls.Add(this.lblRight);
      this.Controls.Add(this.lblLeft);
      this.Controls.Add(this.lblUp);
      this.Controls.Add(this.cboPlayer);
      this.Controls.Add(this.lblPlayer);
      this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
      this.MaximizeBox = false;
      this.Name = "frmControls";
      this.Text = "Customize Controls";
      this.ResumeLayout(false);

   }
   #endregion

   private void InputType_Changed(object sender, System.EventArgs e)
   {
      if (((RadioButton)sender).Checked)
      {
         lblUp.Enabled = txtUp.Enabled =
            lblLeft.Enabled = txtLeft.Enabled =
            lblRight.Enabled = txtRight.Enabled =
            lblDown.Enabled = txtDown.Enabled =
            lblButton1.Enabled = txtButton1.Enabled = 
            lblButton2.Enabled = txtButton2.Enabled = 
            lblButton3.Enabled = txtButton3.Enabled = 
            lblButton4.Enabled = txtButton4.Enabled =
            sender == rdoKeyboard;

         lblController.Enabled = cboController.Enabled = 
            (sender != rdoKeyboard);

         if (sender == rdoKeyboard)
            Project.GameWindow.Players[SelectedPlayer] = new KeyboardPlayer(SelectedPlayer);
         else
            Project.GameWindow.Players[SelectedPlayer] = new ControllerPlayer(SelectedPlayer % cboController.Items.Count);

         LoadCurrentControls();
      }
   }

   private int SelectedPlayer
   {
      get
      {
         return cboPlayer.SelectedIndex;
      }
   }

   private void KeyBox_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
   {
      Microsoft.DirectX.DirectInput.Key[] pressed;
      do
      {
         pressed = Project.GameWindow.GetPressedKeys();
      } while(pressed.Length == 0);

      ((TextBox)sender).Text = System.Enum.Format(typeof(
         Microsoft.DirectX.DirectInput.Key), pressed[0], "g");

      KeyboardPlayer player = (KeyboardPlayer)Project.GameWindow.Players[SelectedPlayer];
      if (sender == txtUp)
         player.key_up = pressed[0];
      else if (sender == txtLeft)
         player.key_left = pressed[0];
      else if (sender == txtRight)
         player.key_right = pressed[0];
      else if (sender == txtDown)
         player.key_down = pressed[0];
      else if (sender == txtButton1)
         player.key_button1 = pressed[0];
      else if (sender == txtButton2)
         player.key_button2 = pressed[0];
      else if (sender == txtButton3)
         player.key_button3 = pressed[0];
      else if (sender == txtButton4)
         player.key_button4 = pressed[0];
   }

   private void cboController_SelectedIndexChanged(object sender, System.EventArgs e)
   {
      if (cboController.SelectedIndex &gt;= 0)
         ((ControllerPlayer)Project.GameWindow.Players[SelectedPlayer]).deviceNumber = cboController.SelectedIndex;
   }

   private void cboPlayer_SelectedIndexChanged(object sender, System.EventArgs e)
   {
      LoadCurrentControls();
   }

   private void LoadCurrentControls()
   {
      if (Project.GameWindow.Players[SelectedPlayer] is KeyboardPlayer)
      {
         KeyboardPlayer player = (KeyboardPlayer)Project.GameWindow.Players[SelectedPlayer];
         rdoKeyboard.Checked = true;
         txtUp.Text = System.Enum.Format(typeof(Microsoft.DirectX.DirectInput.Key), player.key_up, "g");
         txtLeft.Text = System.Enum.Format(typeof(Microsoft.DirectX.DirectInput.Key), player.key_left, "g");
         txtRight.Text = System.Enum.Format(typeof(Microsoft.DirectX.DirectInput.Key), player.key_right, "g");
         txtDown.Text = System.Enum.Format(typeof(Microsoft.DirectX.DirectInput.Key), player.key_down, "g");
         txtButton1.Text = System.Enum.Format(typeof(Microsoft.DirectX.DirectInput.Key), player.key_button1, "g");
         txtButton2.Text = System.Enum.Format(typeof(Microsoft.DirectX.DirectInput.Key), player.key_button2, "g");
         txtButton3.Text = System.Enum.Format(typeof(Microsoft.DirectX.DirectInput.Key), player.key_button3, "g");
         txtButton4.Text = System.Enum.Format(typeof(Microsoft.DirectX.DirectInput.Key), player.key_button4, "g");
      }
      else
      {
         rdoController.Checked = true;
         int devNum = ((ControllerPlayer)Project.GameWindow.Players[SelectedPlayer]).deviceNumber;
         if (cboController.Items.Count &gt; devNum)
            cboController.SelectedIndex = devNum;
         else
            cboController.SelectedIndex = -1;
      }
   }
}

</Text>
  </SourceCode>
  <SourceCode Name="Display.cs" IsCustomObject="false">
    <Text>using System;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;
using System.Windows.Forms;
using System.Collections;

public enum GameDisplayMode
{
   m320x240x16,
   m640x480x16,
   m800x600x16,
   m1024x768x16,
   m1280x1024x16,
   m320x240x24,
   m640x480x24,
   m800x600x24,
   m1024x768x24,
   m1280x1024x24
}

/// &lt;summary&gt;
/// Manages the display device on which real-time game graphics are drawn
/// &lt;/summary&gt;
[Serializable()]
public class Display : ScrollableControl, System.Runtime.Serialization.ISerializable
{
   #region Win32 API Constants
   public const int WS_EX_CLIENTEDGE = unchecked((int)0x00000200);
   public const int WS_BORDER = unchecked((int)0x00800000);
   #endregion

   #region Events
   public event EventHandler WindowedChanged;
   #endregion

   #region Embedded Classes
   private class CoverWindow : Form
   {
      public Display m_LinkedControl;

      public CoverWindow(Display LinkedControl)
      {
         m_LinkedControl = LinkedControl;
         FormBorderStyle = FormBorderStyle.None;
         System.Drawing.Size sz = Display.GetScreenSize(LinkedControl.GameDisplayMode);
         SetBounds(0,0,sz.Width,sz.Height);
         ShowInTaskbar = false;
         Show();
      }

      protected override void OnMouseMove(MouseEventArgs e)
      {
         m_LinkedControl.OnMouseMove(e);
      }
      protected override void OnKeyDown(KeyEventArgs e)
      {
         m_LinkedControl.OnKeyDown(e);
      }
   }

   public class TextureRef : IDisposable
   {
      private string m_Name;
      private Texture m_Texture = null;
      private Display m_Display;
      
      public TextureRef(Display Disp, string Name)
      {
         m_Display = Disp;
         m_Name = Name;
      }

      public string Name
      {
         get
         {
            return m_Name;
         }
      }

      public void Reset()
      {
         m_Texture = null;
      }

      public Texture Texture
      {
         get
         {
            if (m_Texture == null)
               m_Texture = m_Display.GetTexture(m_Name);
            return m_Texture;
         }
      }

      #region IDisposable Members
      public void Dispose()
      {
         if (m_Texture != null)
         {
            m_Texture.Dispose();
            m_Texture = null;
         }
      }
      #endregion
   }
   #endregion

   #region Fields
   private System.Collections.Specialized.HybridDictionary m_TextureRefs = null;
   private Device m_d3d = null;
   private PresentParameters m_pp;
   private GameDisplayMode m_GameDisplayMode;
   private BorderStyle m_BorderStyle;
   private CoverWindow m_CoverWindow = null;
   private Sprite m_Sprite = null;
   private Font m_Font = null;
   #endregion

   #region Initialization and clean-up
   public Display() : this(GameDisplayMode.m640x480x24, true)
   {
   }

   public Display(GameDisplayMode mode, bool windowed)
   {
      this.SetStyle(ControlStyles.ResizeRedraw, true);
      this.SetStyle(ControlStyles.AllPaintingInWmPaint, true);
      this.SetStyle(ControlStyles.UserPaint, true);
      this.SetStyle(ControlStyles.Opaque, true);

      m_pp = new PresentParameters();
      m_pp.Windowed = windowed;
      m_pp.SwapEffect = SwapEffect.Copy; // Allows ScissorTestEnable to work in full screen
      // Allow GetGraphics
      m_pp.PresentFlag = PresentFlag.LockableBackBuffer;
      MakeValidPresentParameters(mode, m_pp);
      if (!windowed)
      {
         m_CoverWindow = new CoverWindow(this);
         Recreate();
      }
      m_GameDisplayMode = mode;
   }

   protected override void Dispose(bool disposing)
   {
      if (disposing)
      {
         DisposeAllTextures();
         if (m_Sprite != null)
         {
            m_Sprite.Dispose();
            m_Sprite = null;
         }
         if (m_Font != null)
         {
            m_Font.Dispose();
            m_Font = null;
         }
         if (m_d3d != null)
         {
            m_d3d.Dispose();
            m_d3d = null;
         }
         if (m_CoverWindow != null)
         {
            m_CoverWindow.m_LinkedControl = null;
            m_CoverWindow.Close();
            m_CoverWindow.Dispose();
            m_CoverWindow = null;
         }
      }
      base.Dispose (disposing);
   }
   #endregion

   #region Overrides
   protected override void OnCreateControl()
   {
      m_pp.DeviceWindow = this;
      m_pp.SwapEffect = SwapEffect.Copy; // Allows ScissorTestEnable to work in full screen

      try
      {
         if (m_d3d == null)
         {
            Recreate();
         }
      }
      catch(Exception ex)
      {
         MessageBox.Show(this, "Error creating display device: " + ex.ToString(), "Error Creating Device", MessageBoxButtons.OK, MessageBoxIcon.Error);
      }

      base.OnCreateControl ();
   }

   protected override void OnKeyDown(KeyEventArgs e)
   {
      if ((e.KeyCode == Keys.Enter) &amp;&amp; e.Alt)
         Windowed = !Windowed;
      base.OnKeyDown (e);
   }

   protected override CreateParams CreateParams
   {
      get
      {
         CreateParams cp = base.CreateParams;
         cp.ExStyle &amp;= ~WS_EX_CLIENTEDGE;
         cp.Style &amp;= ~WS_BORDER;

         if (!m_pp.Windowed)
            return cp;

         switch (m_BorderStyle)
         {
            case BorderStyle.Fixed3D:
               cp.ExStyle |= WS_EX_CLIENTEDGE;
               break;
            case BorderStyle.FixedSingle:
               cp.Style |= WS_BORDER;
               break;
         }

         return cp;
      }
   }

   protected override void OnResize(EventArgs e)
   {
      if (this.Size.IsEmpty)
      {
         DisposeAllTextures();
         if (m_Sprite != null)
         {
            m_Sprite.Dispose();
            m_Sprite = null;
         }
         if (m_Font != null)
         {
            m_Font.Dispose();
            m_Font = null;
         }
         if (m_d3d != null)
         {
            m_d3d.Dispose();
            m_d3d = null;
         }
      }
      else if ((m_d3d == null) &amp;&amp; Created)
      {
         Recreate();
      }
      else if ((m_d3d != null) &amp;&amp; (m_pp != null) &amp;&amp; (m_pp.Windowed))
      {
         m_pp.BackBufferHeight = m_pp.BackBufferWidth = 0;
         if (m_Sprite != null)
         {
            m_Sprite.Dispose();
            m_Sprite = null;
         }
         if (m_Font != null)
         {
            m_Font.Dispose();
            m_Font = null;
         }
         m_d3d.Reset(m_pp);
      }
      base.OnResize (e);
   }

   protected override void OnPaint(PaintEventArgs e)
   {
      if ((m_d3d == null) || (m_d3d.Disposed))
         return;
      int coop;
      if (!m_d3d.CheckCooperativeLevel(out coop))
      {
         Microsoft.DirectX.Direct3D.ResultCode coopStatus = (Microsoft.DirectX.Direct3D.ResultCode)System.Enum.Parse(typeof(Microsoft.DirectX.Direct3D.ResultCode), coop.ToString());
         if (coopStatus == Microsoft.DirectX.Direct3D.ResultCode.DeviceNotReset)
            Recreate();
         else
            return;
      }
      base.OnPaint (e);
   }
   #endregion

   #region Private members
   private Texture GetTexture(string Name)
   {
      return Texture.FromBitmap(m_d3d,
         (System.Drawing.Bitmap)Project.Resources.GetObject(Name), 0, Pool.Managed);
   }

   #endregion

   #region Public members
   public BorderStyle BorderStyle
   {
      get
      {
         return m_BorderStyle;
      }
      set
      {
         m_BorderStyle = value;
         UpdateStyles();
      }
   }

   public TextureRef GetTextureRef(string Name)
   {
      if (m_TextureRefs == null)
         m_TextureRefs = new System.Collections.Specialized.HybridDictionary();

      if (m_TextureRefs.Contains(Name))
      {
         WeakReference wr = (WeakReference)m_TextureRefs[Name];
         if (wr.IsAlive)
            return (TextureRef)wr.Target;
      }

      TextureRef tex = new TextureRef(this, Name);
      m_TextureRefs[Name] = new WeakReference(tex);
      return tex;
   }

   public void DisposeAllTextures()
   {
      if (m_TextureRefs != null)
      {
         foreach (DictionaryEntry de in m_TextureRefs)
         {
            if (((WeakReference)de.Value).IsAlive)
               ((TextureRef)((WeakReference)de.Value).Target).Dispose();
         }
      }
   }

   public Device Device
   {
      get
      {
         return m_d3d;
      }
   }

   public bool Windowed
   {
      set
      {
         if ((DesignMode) &amp;&amp; (!value))
            throw new InvalidOperationException("Cannot use full screen in design mode");

         if (value != m_pp.Windowed)
         {
            DisposeAllTextures();
            if (m_Sprite != null)
            {
               m_Sprite.Dispose();
               m_Sprite = null;
            }
            if (m_Font != null)
            {
               m_Font.Dispose();
               m_Font = null;
            }
            if (m_d3d != null)
            {
               m_d3d.Dispose();
               m_d3d = null;
            }
         }
         else
            return;

         m_pp.Windowed = value;
         m_pp.SwapEffect = SwapEffect.Copy; // Allows ScissorTestEnable to work in full screen

         if (value)
         {
            m_pp.DeviceWindow = this;
            MakeValidPresentParameters(GameDisplayMode, m_pp);
            if (m_CoverWindow != null)
            {
               m_CoverWindow.m_LinkedControl = null;
               m_CoverWindow.Close();
               m_CoverWindow.Dispose();
               m_CoverWindow = null;
            }
            Recreate();
         }
         else
         {
            m_CoverWindow = new CoverWindow(this);
            m_pp.DeviceWindow = m_CoverWindow;
            MakeValidPresentParameters(GameDisplayMode, m_pp);
            Recreate();
         }
         if (WindowedChanged != null)
            WindowedChanged(this, null);
      }
      get
      {
         return m_pp.Windowed;
      }
   }

   /// &lt;summary&gt;
   /// Get the size of a display based on the specified mode
   /// &lt;/summary&gt;
   /// &lt;param name="mode"&gt;Game display mode used for the display&lt;/param&gt;
   /// &lt;returns&gt;Width and height in pixels&lt;/returns&gt;
   public static System.Drawing.Size GetScreenSize(GameDisplayMode mode)
   {
      switch(mode)
      {
         case GameDisplayMode.m320x240x16:
         case GameDisplayMode.m320x240x24:
            return new System.Drawing.Size(320,240);
         case GameDisplayMode.m640x480x16:
         case GameDisplayMode.m640x480x24:
            return new System.Drawing.Size(640,480);
         case GameDisplayMode.m800x600x16:
         case GameDisplayMode.m800x600x24:
            return new System.Drawing.Size(800,600);
         case GameDisplayMode.m1024x768x16:
         case GameDisplayMode.m1024x768x24:
            return new System.Drawing.Size(1024,768);
         case GameDisplayMode.m1280x1024x16:
         case GameDisplayMode.m1280x1024x24:
            return new System.Drawing.Size(1280,1024);
      }
      return new System.Drawing.Size(0,0);
   }

   /// &lt;summary&gt;
   /// Completes the presentation parameter structure by filling out a back buffer
   /// width, height, and format.
   /// &lt;/summary&gt;
   /// &lt;param name="mode"&gt;Game requested display mode&lt;/param&gt;
   /// &lt;param name="pp"&gt;Object to finish populating&lt;/param&gt;
   public static void MakeValidPresentParameters(GameDisplayMode mode, PresentParameters pp)
   {
      if (pp.Windowed)
      {
         pp.BackBufferFormat = Format.Unknown;
         pp.BackBufferWidth = pp.BackBufferHeight = 0;
         pp.FullScreenRefreshRateInHz = 0;

         if (!Manager.CheckDeviceType(Manager.Adapters.Default.Adapter, DeviceType.Hardware, Manager.Adapters.Default.CurrentDisplayMode.Format, pp.BackBufferFormat, pp.Windowed))
            throw new ApplicationException("No hardware support for windowed mode on default display adapter");
      }
      else
      {
         foreach(DisplayMode dm in Manager.Adapters.Default.SupportedDisplayModes)
         {
            System.Drawing.Size s = GetScreenSize(mode);
            if ((dm.Width != s.Width) || (dm.Height != s.Height))
               continue;

            switch (mode)
            {
               case GameDisplayMode.m320x240x16:
               case GameDisplayMode.m640x480x16:
               case GameDisplayMode.m800x600x16:
               case GameDisplayMode.m1024x768x16:
               case GameDisplayMode.m1280x1024x16:
               switch (dm.Format)
               {
                  case Format.A4R4G4B4:
                  case Format.A1R5G5B5:
                  case Format.R5G6B5:
                  case Format.X1R5G5B5:
                  case Format.X4R4G4B4:
                     // These are OK 16-bit formats. Break out of the switch and proceed
                     break;
                  default:
                     // Not a 16-bit format, continue to the next mode
                     continue;
               }
                  break;
               default:
               switch (dm.Format)
               {
                  case Format.A2B10G10R10:
                  case Format.A2R10G10B10:
                  case Format.A8B8G8R8:
                  case Format.A8R8G8B8:
                  case Format.R8G8B8:
                  case Format.X8B8G8R8:
                  case Format.X8R8G8B8:
                     // These are OK 32-bit formats. Break out of the switch and proceed
                     break;
                  default:
                     // Not a 32-bit format, continue to the next mode
                     continue;
               }
                  break;
            }

            if (Manager.CheckDeviceType(Manager.Adapters.Default.Adapter, DeviceType.Hardware, dm.Format, dm.Format, pp.Windowed))
            {
               // This can improve performance in some cases, but I have not
               // observed much difference in my testing.
               //m_pp.BackBufferCount = 2; 
               pp.BackBufferWidth = dm.Width;
               pp.BackBufferHeight = dm.Height;
               pp.BackBufferFormat = dm.Format;
               if (dm.RefreshRate &gt; pp.FullScreenRefreshRateInHz)
                  pp.FullScreenRefreshRateInHz = dm.RefreshRate;
            }
         }
         if (pp.FullScreenRefreshRateInHz == 0)
            throw new ApplicationException("Current display does not support mode " + mode.ToString() +".");
      }

      string errMsg = ValidateAdapter(Manager.Adapters.Default);
      if (errMsg != null)
         throw new ApplicationException("Default display adapter is inadequate: " + errMsg);
   }

   public GameDisplayMode GameDisplayMode
   {
      get
      {
         return m_GameDisplayMode;
      }
      set
      {
         m_GameDisplayMode = value;
         ClientSize = GetScreenSize(value);
         if (!m_pp.Windowed)
         {
            MakeValidPresentParameters(m_GameDisplayMode, m_pp);
            if (m_Sprite != null)
            {
               m_Sprite.Dispose();
               m_Sprite = null;
            }
            if (m_Font != null)
            {
               m_Font.Dispose();
               m_Font = null;
            }
            m_d3d.Reset(m_pp);
         }
      }
   }

   public void Recreate()
   {
      DisposeAllTextures();
      if (m_Sprite != null)
      {
         m_Sprite.Dispose();
         m_Sprite = null;
      }
      if (m_Font != null)
      {
         m_Font.Dispose();
         m_Font = null;
      }
      if (m_d3d != null)
         m_d3d.Dispose();
      if (Windowed || (m_CoverWindow == null))
         m_d3d = new Device(Manager.Adapters.Default.Adapter, DeviceType.Hardware, this, CreateFlags.SoftwareVertexProcessing, m_pp);
      else
         m_d3d = new Device(Manager.Adapters.Default.Adapter, DeviceType.Hardware, m_CoverWindow, CreateFlags.SoftwareVertexProcessing, m_pp);
      m_d3d.DeviceReset += new EventHandler(d3d_DeviceReset);
   }
   
   private static string ValidateAdapter(AdapterInformation adapter)
   {
      Caps caps = Manager.GetDeviceCaps(adapter.Adapter, DeviceType.Hardware);
      if (!caps.PrimitiveMiscCaps.SupportsBlendOperation)
         return "Inadequate hardware support for alpha blending";
      if (!caps.TextureCaps.SupportsAlpha)
         return "Hardware does not support textures with alpha";
      if (!caps.RasterCaps.SupportsScissorTest)
         return "No hardware support for clipping";
      if (!caps.TextureOperationCaps.SupportsModulate)
         return "No hardware support for color modulation";
      return null;
   }
   
   public Sprite Sprite
   {
      get
      {
         if ((m_Sprite == null) &amp;&amp; (m_d3d != null))
            m_Sprite = new Sprite(m_d3d);
         return m_Sprite;
      }
   }

   public Font D3DFont
   {
      get
      {
         if ((m_Font == null) &amp;&amp; (m_d3d != null))
         {
            m_Font = new Microsoft.DirectX.Direct3D.Font(m_d3d, Font);
         }
         return m_Font;
      }
   }
   #endregion

   #region Event Handlers
   private void d3d_DeviceReset(object sender, EventArgs e)
   {
      DisposeAllTextures();
   }
   #endregion

   #region ISerializable Members

   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      info.SetType(typeof(DisplayRef));
   }

   #endregion
}

[Serializable()]
public class DisplayRef : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
{

   private DisplayRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
   }

   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      throw new System.NotImplementedException("Unexpected serialization call");
   }

   #region IObjectReference Members
   public object GetRealObject(System.Runtime.Serialization.StreamingContext context)
   {
      return Project.GameWindow.GameDisplay;
   }
   #endregion
}</Text>
  </SourceCode>
  <SourceCode Name="GameForm.cs" IsCustomObject="false">
    <Text>using System;
using System.Drawing;
using System.Windows.Forms;

/// &lt;summary&gt;
/// Form that contains and managed the main display for the game.
/// &lt;/summary&gt;
public class GameForm : Form
{
   public Display GameDisplay = null;
   private Microsoft.DirectX.DirectInput.Device keyboard = null;
   private Microsoft.DirectX.DirectInput.KeyboardState m_keyboardState;
   private Microsoft.DirectX.DirectInput.Device[] controllers = null;
   private Microsoft.DirectX.DirectInput.JoystickState[] m_controllerState;
   private System.Collections.BitArray controllerEnabled;
   private System.Collections.BitArray controllerAcquired;
   public MapBase CurrentMap;
   public MapBase OverlayMap;
   public System.Collections.Hashtable LoadedMaps = new System.Collections.Hashtable();
   private int m_fps = 0;
   private int m_frameCount = 0;
   private DateTime m_frameStart;
   public System.IO.StringWriter debugText = new System.IO.StringWriter();
   private bool m_quit = false;

   #region Events
   public delegate void SimpleNotification();
   /// &lt;summary&gt;
   /// Event fires every frame even when the game is not advancing because it is minimized
   /// &lt;/summary&gt;
   public event SimpleNotification OnFrameStart;
   /// &lt;summary&gt;
   /// Event fires every frame that the game is advancing right before the scene is started
   /// &lt;/summary&gt;
   public event SimpleNotification OnBeforeBeginScene;
   /// &lt;summary&gt;
   /// Event fires every frame that the game is advancing while the scene is being
   /// generated, right before the overlay map is drawn.
   /// &lt;/summary&gt;
   public event SimpleNotification OnBeforeDrawOverlay;
   /// &lt;summary&gt;
   /// Event fires every frame that the game is advancing after the overlay map is drawn.
   /// &lt;/summary&gt;
   public event SimpleNotification OnAfterDrawOverlay;
   #endregion


   #region Windows Forms Components
   private System.Windows.Forms.MainMenu mnuGame;
   private System.Windows.Forms.MenuItem mnuFile;
   private System.Windows.Forms.MenuItem mnuFileExit;
   private System.Windows.Forms.MenuItem mnuTools;
   private System.Windows.Forms.MenuItem mnuToolsOptions;
   public IPlayer[] Players = new IPlayer[Project.MaxPlayers];
   private System.Windows.Forms.MenuItem mnuHelp;
   private System.Windows.Forms.MenuItem mnuHelpAbout;
   #endregion

   public GameForm(GameDisplayMode mode, bool windowed, string title, System.Type initMapType, System.Type overlayMapType)
   {
      InitializeComponent();
#if DEBUG
      MessageBox.Show("You are running in debug mode.  Unexpected runtime conditions may cause the game to halt, and if an error occurs you will have the opportunity to debug into it if you have a debugger installed and the project's source code handy", "Debug Mode Active");
#endif
      ClientSize = Display.GetScreenSize(mode);
      GameDisplay = new Display(mode, windowed);
      GameDisplay.BorderStyle = System.Windows.Forms.BorderStyle.None;
      GameDisplay.Location = new System.Drawing.Point(0, 0);
      GameDisplay.Name = "GameDisplay";
      GameDisplay.Size = Display.GetScreenSize(mode);
      Controls.Add(this.GameDisplay);
      Name = "GameForm";
      Text = title;
      KeyPreview = true;
      FormBorderStyle = FormBorderStyle.FixedSingle;
      CurrentMap = GetMap(initMapType);
      if (overlayMapType != null)
         OverlayMap = GetMap(overlayMapType);
      else
         OverlayMap = null;
      GameDisplay.WindowedChanged += new EventHandler(GameDisplay_WindowedChanged);
   }

   /// &lt;summary&gt;
   /// Clean up any resources being used.
   /// &lt;/summary&gt;
   protected override void Dispose( bool disposing )
   {
      if( disposing )
      {
         if (GameDisplay != null)
         {
            GameDisplay.Dispose();
            GameDisplay = null;
         }
      }
      base.Dispose( disposing );
   }

   public void Run()
   {
      int coopCode;

      System.Collections.ArrayList controllersBuilder = new System.Collections.ArrayList();
      foreach(Microsoft.DirectX.DirectInput.DeviceInstance dev in Microsoft.DirectX.DirectInput.Manager.Devices)
      {
         switch (dev.DeviceType)
         {
            case Microsoft.DirectX.DirectInput.DeviceType.Keyboard:
               if (keyboard == null)
               {
                  keyboard = new Microsoft.DirectX.DirectInput.Device(dev.InstanceGuid);
                  keyboard.SetCooperativeLevel(this, Microsoft.DirectX.DirectInput.CooperativeLevelFlags.Background |
                     Microsoft.DirectX.DirectInput.CooperativeLevelFlags.NonExclusive); 
                  keyboard.SetDataFormat(Microsoft.DirectX.DirectInput.DeviceDataFormat.Keyboard);
                  keyboard.Acquire();
               }
               break;
            case Microsoft.DirectX.DirectInput.DeviceType.Gamepad:
            case Microsoft.DirectX.DirectInput.DeviceType.Joystick:
            {
               Microsoft.DirectX.DirectInput.Device controller =
                  new Microsoft.DirectX.DirectInput.Device(dev.InstanceGuid);
               controller.SetCooperativeLevel(this, Microsoft.DirectX.DirectInput.CooperativeLevelFlags.Background |
                  Microsoft.DirectX.DirectInput.CooperativeLevelFlags.NonExclusive);
               controller.SetDataFormat(Microsoft.DirectX.DirectInput.DeviceDataFormat.Joystick);
               controllersBuilder.Add(controller);
               break;
            }
         }
      }
      if (controllersBuilder.Count &gt; 0)
      {
         controllers = (Microsoft.DirectX.DirectInput.Device[])controllersBuilder.ToArray(typeof(Microsoft.DirectX.DirectInput.Device));
         controllerEnabled = new System.Collections.BitArray(controllers.Length, false);
         controllerAcquired = new System.Collections.BitArray(controllers.Length, false);
         m_controllerState = new Microsoft.DirectX.DirectInput.JoystickState[controllers.Length];
      }
      else
      {
         controllers = null;
         controllerEnabled = controllerAcquired = null;
      }

      // Player 0 always uses keyboard by default
      Players[0] = new KeyboardPlayer(0);

      // Players 1 through (M-N) use keyboard while players (M-N+1) through M use controllers
      // where M is max player number and N is number of controllers.
      for (int playerIdx = 1; playerIdx&lt;Project.MaxPlayers; playerIdx++)
      {
         if ((controllers != null) &amp;&amp; (Project.MaxPlayers - playerIdx &lt;= controllers.Length))
            Players[playerIdx] = new ControllerPlayer(playerIdx - (Project.MaxPlayers - controllers.Length));
         else
            Players[playerIdx] = new KeyboardPlayer(playerIdx);
      }

      while(true)
      {
         if (OnFrameStart != null)
            OnFrameStart();
         if ((GameDisplay != null) &amp;&amp; (GameDisplay.Device == null))
         {
            // Display is minimized, wait until it is restored
            Application.DoEvents();
            System.Threading.Thread.Sleep(0);
            continue;
         }
         if ((GameDisplay == null) || GameDisplay.Device.Disposed || m_quit)
         {
            Close();
            return;
         }
         if (!GameDisplay.Device.CheckCooperativeLevel(out coopCode))
         {
            Microsoft.DirectX.Direct3D.ResultCode coop = (Microsoft.DirectX.Direct3D.ResultCode)System.Enum.Parse(typeof(Microsoft.DirectX.Direct3D.ResultCode), coopCode.ToString());
            if (coop == Microsoft.DirectX.Direct3D.ResultCode.DeviceNotReset)
               GameDisplay.Recreate();
            else
               System.Threading.Thread.Sleep(0);
         }
         else
         {
            if (OnBeforeBeginScene != null)
               OnBeforeBeginScene();
            GameDisplay.Device.BeginScene();
            GameDisplay.Sprite.Begin(Microsoft.DirectX.Direct3D.SpriteFlags.AlphaBlend);
            CurrentMap.DrawAllViews();
            if (keyboard != null)
               m_keyboardState = keyboard.GetCurrentKeyboardState();
            ReadControllers();
            CurrentMap.ExecuteRules();
            if (OnBeforeDrawOverlay != null)
               OnBeforeDrawOverlay();
            if (OverlayMap != null)
            {
               OverlayMap.DrawAllViews();
               OverlayMap.ExecuteRules();
            }
            OutputDebugInfo();
            if (OnAfterDrawOverlay != null)
               OnAfterDrawOverlay();
            GameDisplay.Sprite.End();
            GameDisplay.Device.EndScene();
            GameDisplay.Device.Present();
         }
         Application.DoEvents();
      }
   }

   [System.Diagnostics.Conditional("DEBUG")]
   public void OutputDebugInfo()
   {
      GameDisplay.Sprite.Transform = Microsoft.DirectX.Matrix.Identity;
      GameDisplay.Device.RenderState.ScissorTestEnable = false;
      GameDisplay.D3DFont.DrawText(GameDisplay.Sprite, debugText.ToString(), GameDisplay.DisplayRectangle, Microsoft.DirectX.Direct3D.DrawTextFormat.Left, Color.White);

      debugText.Close();
      debugText = new System.IO.StringWriter();
      debugText.WriteLine("fps=" + m_fps.ToString());
      m_frameCount++;
      if (DateTime.Now.Subtract(m_frameStart).TotalSeconds &gt;= 1f)
      {
         m_fps = m_frameCount;
         m_frameCount=0;
         m_frameStart = DateTime.Now;
      }
   }

   protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
   {
      GameDisplay.Dispose();
      GameDisplay = null;
      base.OnClosing(e);
   }

   public MapBase GetMap(System.Type mapType)
   {
      if (!LoadedMaps.ContainsKey(mapType))
      {
         MapBase result = (MapBase)mapType.GetConstructor(new System.Type[] {typeof(Display)}).Invoke(new object[] {GameDisplay});
         LoadedMaps[mapType] = result;
         return result;
      }
      else
         return (MapBase)(LoadedMaps[mapType]);
   }

   public void UnloadMap(System.Type mapType)
   {
      LoadedMaps.Remove(mapType);
   }

   public void UnloadBackgroundMaps()
   {
      System.Collections.ArrayList toRemove = new System.Collections.ArrayList();
      foreach(System.Collections.DictionaryEntry de in LoadedMaps)
      {
         if ((de.Value != CurrentMap) &amp;&amp; (de.Value != OverlayMap))
            toRemove.Add(de.Key);
      }
      foreach(System.Type removeKey in toRemove)
      {
         LoadedMaps.Remove(removeKey);
      }
   }

   private void InitializeComponent()
   {
      this.mnuGame = new System.Windows.Forms.MainMenu();
      this.mnuFile = new System.Windows.Forms.MenuItem();
      this.mnuFileExit = new System.Windows.Forms.MenuItem();
      this.mnuTools = new System.Windows.Forms.MenuItem();
      this.mnuToolsOptions = new System.Windows.Forms.MenuItem();
      this.mnuHelp = new System.Windows.Forms.MenuItem();
      this.mnuHelpAbout = new System.Windows.Forms.MenuItem();
      // 
      // mnuGame
      // 
      this.mnuGame.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
                                                                             this.mnuFile,
                                                                             this.mnuTools,
                                                                             this.mnuHelp});
      // 
      // mnuFile
      // 
      this.mnuFile.Index = 0;
      this.mnuFile.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
                                                                             this.mnuFileExit});
      this.mnuFile.Text = "&amp;File";
      // 
      // mnuFileExit
      // 
      this.mnuFileExit.Index = 0;
      this.mnuFileExit.Shortcut = System.Windows.Forms.Shortcut.AltF4;
      this.mnuFileExit.Text = "E&amp;xit";
      this.mnuFileExit.Click += new System.EventHandler(this.mnuFileExit_Click);
      // 
      // mnuTools
      // 
      this.mnuTools.Index = 1;
      this.mnuTools.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
                                                                              this.mnuToolsOptions});
      this.mnuTools.Text = "&amp;Tools";
      // 
      // mnuToolsOptions
      // 
      this.mnuToolsOptions.Index = 0;
      this.mnuToolsOptions.Text = "&amp;Options";
      this.mnuToolsOptions.Click += new System.EventHandler(this.mnuToolsOptions_Click);
      // 
      // mnuHelp
      // 
      this.mnuHelp.Index = 2;
      this.mnuHelp.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
                                                                               this.mnuHelpAbout});
      this.mnuHelp.Text = "&amp;Help";
      // 
      // mnuHelpAbout
      // 
      this.mnuHelpAbout.Index = 0;
      this.mnuHelpAbout.Text = "&amp;About...";
      this.mnuHelpAbout.Click += new System.EventHandler(this.mnuHelpAbout_Click);
      // 
      // GameForm
      // 
      this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
      this.ClientSize = new System.Drawing.Size(292, 273);
      this.Menu = this.mnuGame;
      this.Name = "GameForm";

   }

   public Microsoft.DirectX.DirectInput.KeyboardState KeyboardState
   {
      get
      {
         return m_keyboardState;
      }
   }

   public Microsoft.DirectX.DirectInput.Key[] GetPressedKeys()
   {
      return keyboard.GetPressedKeys();
   }

   public void ReadControllers()
   {
      if (controllerEnabled == null)
         return;

      foreach(IPlayer plr in Players)
      {
         if (plr is ControllerPlayer)
            controllerEnabled[((ControllerPlayer)plr).deviceNumber] = true;
      }

      for (int i=0; i&lt;controllerEnabled.Count; i++)
      {
         if (controllerEnabled[i])
         {
            if (!controllerAcquired[i])
            {
               controllers[i].Acquire();
               controllerAcquired[i] = true;
            }
            m_controllerState[i] = controllers[i].CurrentJoystickState;
         }
         else if (controllerAcquired[i])
         {
            controllers[i].Unacquire();
            controllerAcquired[i] = false;
         }
      }
   }

   public int ControllerCount
   {
      get
      {
         if (controllers == null)
            return 0;
         return controllers.Length;
      }
   }

   public string GetControllerName(int deviceNumber)
   {
      return controllers[deviceNumber].DeviceInformation.InstanceName;
   }

   public Microsoft.DirectX.DirectInput.JoystickState GetControllerState(int deviceNumber)
   {
      return m_controllerState[deviceNumber];
   }

   public System.Collections.BitArray ControllerEnabled
   {
      get
      {
         return controllerEnabled;
      }
   }

   private void GameDisplay_WindowedChanged(object sender, EventArgs e)
   {
      if (GameDisplay.Windowed)
         ClientSize = Display.GetScreenSize(GameDisplay.GameDisplayMode);
   }

   private void mnuFileExit_Click(object sender, System.EventArgs e)
   {
      Quit();
   }
   
   private void mnuToolsOptions_Click(object sender, System.EventArgs e)
   {
      frmControls frm = new frmControls();
      frm.ShowDialog();
   }

   private void mnuHelpAbout_Click(object sender, System.EventArgs e)
   {
      using (frmAbout frm = new frmAbout())
         frm.ShowDialog();
   }

   public void Quit()
   {
      m_quit = true;
   }

   /// &lt;summary&gt;
   /// This function is called by the SGDK2 generated code when a top-level
   /// exception occurs.
   /// &lt;/summary&gt;
   /// &lt;param name="ex"&gt;Refers to the exception that was received at the top level&lt;/param&gt;
   public static void HandleException(System.Exception ex)
   {
      MessageBox.Show("A fatal error occurred initializing or running the game:\r\n" + ex.ToString(), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}</Text>
  </SourceCode>
  <SourceCode Name="About.cs" IsCustomObject="false">
    <Text>using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

/// &lt;summary&gt;
/// Summary description for About.
/// &lt;/summary&gt;
public class frmAbout : System.Windows.Forms.Form
{
   private System.Windows.Forms.Button btnOK;
   private System.Windows.Forms.Label lblHeader;
   private System.Windows.Forms.Label lblSGDK2;
   private System.Windows.Forms.LinkLabel llbURL;
   private System.Windows.Forms.Label lblCredits;
   private System.Windows.Forms.TextBox txtCredits;
	/// &lt;summary&gt;
	/// Required designer variable.
	/// &lt;/summary&gt;
	private System.ComponentModel.Container components = null;

	public frmAbout()
	{
		//
		// Required for Windows Form Designer support
		//
		InitializeComponent();

      txtCredits.Text = Project.GameCredits;
	}

	/// &lt;summary&gt;
	/// Clean up any resources being used.
	/// &lt;/summary&gt;
	protected override void Dispose( bool disposing )
	{
		if( disposing )
		{
			if(components != null)
			{
				components.Dispose();
			}
		}
		base.Dispose( disposing );
	}

	#region Windows Form Designer generated code
	/// &lt;summary&gt;
	/// Required method for Designer support - do not modify
	/// the contents of this method with the code editor.
	/// &lt;/summary&gt;
	private void InitializeComponent()
	{
      this.btnOK = new System.Windows.Forms.Button();
      this.lblHeader = new System.Windows.Forms.Label();
      this.lblSGDK2 = new System.Windows.Forms.Label();
      this.llbURL = new System.Windows.Forms.LinkLabel();
      this.lblCredits = new System.Windows.Forms.Label();
      this.txtCredits = new System.Windows.Forms.TextBox();
      this.SuspendLayout();
      // 
      // btnOK
      // 
      this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
      this.btnOK.DialogResult = System.Windows.Forms.DialogResult.OK;
      this.btnOK.Location = new System.Drawing.Point(206, 168);
      this.btnOK.Name = "btnOK";
      this.btnOK.Size = new System.Drawing.Size(72, 24);
      this.btnOK.TabIndex = 0;
      this.btnOK.Text = "OK";
      // 
      // lblHeader
      // 
      this.lblHeader.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.lblHeader.Location = new System.Drawing.Point(8, 8);
      this.lblHeader.Name = "lblHeader";
      this.lblHeader.Size = new System.Drawing.Size(272, 16);
      this.lblHeader.TabIndex = 1;
      this.lblHeader.Text = "This game was created with:";
      // 
      // lblSGDK2
      // 
      this.lblSGDK2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.lblSGDK2.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.lblSGDK2.Location = new System.Drawing.Point(8, 24);
      this.lblSGDK2.Name = "lblSGDK2";
      this.lblSGDK2.Size = new System.Drawing.Size(272, 16);
      this.lblSGDK2.TabIndex = 2;
      this.lblSGDK2.Text = "Scrolling Game Development Kit 2";
      this.lblSGDK2.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // llbURL
      // 
      this.llbURL.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.llbURL.Location = new System.Drawing.Point(8, 40);
      this.llbURL.Name = "llbURL";
      this.llbURL.Size = new System.Drawing.Size(272, 16);
      this.llbURL.TabIndex = 3;
      this.llbURL.TabStop = true;
      this.llbURL.Text = "http://sgdk2.sf.net/";
      this.llbURL.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.Link_Clicked);
      // 
      // lblCredits
      // 
      this.lblCredits.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.lblCredits.Location = new System.Drawing.Point(8, 64);
      this.lblCredits.Name = "lblCredits";
      this.lblCredits.Size = new System.Drawing.Size(272, 16);
      this.lblCredits.TabIndex = 4;
      this.lblCredits.Text = "Game Credits:";
      // 
      // txtCredits
      // 
      this.txtCredits.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
         | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.txtCredits.Location = new System.Drawing.Point(8, 80);
      this.txtCredits.Multiline = true;
      this.txtCredits.Name = "txtCredits";
      this.txtCredits.ReadOnly = true;
      this.txtCredits.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
      this.txtCredits.Size = new System.Drawing.Size(270, 80);
      this.txtCredits.TabIndex = 5;
      this.txtCredits.Text = "";
      // 
      // frmAbout
      // 
      this.AcceptButton = this.btnOK;
      this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
      this.ClientSize = new System.Drawing.Size(290, 199);
      this.Controls.Add(this.txtCredits);
      this.Controls.Add(this.lblCredits);
      this.Controls.Add(this.llbURL);
      this.Controls.Add(this.lblSGDK2);
      this.Controls.Add(this.lblHeader);
      this.Controls.Add(this.btnOK);
      this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
      this.Name = "frmAbout";
      this.Text = "About ";
      this.ResumeLayout(false);

   }
	#endregion

   private void Link_Clicked(object sender, System.Windows.Forms.LinkLabelLinkClickedEventArgs e)
   {
      System.Diagnostics.Process.Start(((LinkLabel)sender).Text);
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="CollisionMask.cs" IsCustomObject="false">
    <Text>using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;

/// &lt;summary&gt;
/// Defines the shape of a sprite for the purpose of collision detection with other sprites
/// &lt;/summary&gt;
public class CollisionMask
{
   private int[,] m_Mask;
   private int m_Width;
   private int m_Height;
   private Point m_Origin;
   private static System.Collections.Hashtable m_RectangularMasks = new System.Collections.Hashtable(10);
	
   public CollisionMask(Rectangle localBounds, Frameset frameset, int[] subFrames, byte[] alphas)
   {
      m_Mask = GenerateMaskFromFrame(localBounds, frameset, subFrames, alphas);
      m_Width = localBounds.Width;
      m_Height = localBounds.Height;
      m_Origin = new Point(-localBounds.X, -localBounds.Y);
   }

   private CollisionMask(Size size)
   {
      m_Mask = new int[size.Height, (int)Math.Ceiling(size.Width / 32f)];
      for (int x = 0; x &lt; (int)(size.Width / 32); x++)
      {
         for (int y = 0; y &lt; size.Height; y++)
         {
            m_Mask[y,x] = unchecked((int)0xFFFFFFFF);
         }
      }
      if (size.Width % 32 &gt; 0)
      {
         int lastColMask = 0;
         lastColMask |= (-1) &lt;&lt; (32 - (size.Width % 32));
         int lastColIdx = (int)Math.Ceiling(size.Width / 32f)-1;
         for (int y = 0; y &lt; size.Height; y++)
         {
            m_Mask[y, lastColIdx] = lastColMask;
         }
      }
      m_Width = size.Width;
      m_Height = size.Height;
      m_Origin = new Point(0,0);
   }

   public static CollisionMask GetRectangularMask(Size size)
   {
      CollisionMask result = m_RectangularMasks[size] as CollisionMask;
      if (result != null)
         return result;
      m_RectangularMasks[size] = result = new CollisionMask(size);
      return result;
   }

   /// &lt;summary&gt;
   /// Determine if this mask is colliding with the specified target mask
   /// &lt;/summary&gt;
   /// &lt;param name="target"&gt;Mask to test against&lt;/param&gt;
   /// &lt;param name="offset"&gt;Offset from this mask's position to the target mask's position&lt;/param&gt;
   /// &lt;returns&gt;True if solid bits in the masks collide when positioned at the specified offset&lt;/returns&gt;
   public bool TestCollisionWith(CollisionMask target, int offsetX, int offsetY)
   {
      offsetX += m_Origin.X - target.m_Origin.X;
      offsetY += m_Origin.Y - target.m_Origin.Y;

      if ((offsetY &gt;= m_Height) || (offsetY &lt;= -target.m_Height) ||
         (offsetX &gt;= m_Width) || (offsetX &lt;= -target.m_Width))
         return false;

      int maxY;
      int myMinY, targetMinY;
      if (offsetY &gt; 0)
      {
         myMinY = offsetY;
         targetMinY = 0;
         if (target.m_Height &gt;= m_Height - offsetY)
            maxY = m_Height - offsetY;
         else
            maxY = target.m_Height;
      }
      else
      {
         myMinY = 0;
         targetMinY = -offsetY;
         if (m_Height &gt;= target.m_Height + offsetY)
            maxY = target.m_Height + offsetY;
         else
            maxY = m_Height;
      }

      int maxX;
      int myMinX, targetMinX;
      if (offsetX &gt; 0)
      {
         myMinX = offsetX;
         targetMinX = 0;
         if (target.m_Width &gt;= m_Width - offsetX)
            maxX = m_Width - offsetX;
         else
            maxX = target.m_Width;
      }
      else
      {
         myMinX = 0;
         targetMinX = -offsetX;
         if (m_Width &gt;= target.m_Width + offsetX)
            maxX = target.m_Width + offsetX;
         else
            maxX = m_Width;
      }

      for(int y=0; y &lt; maxY; y++)
      {
         for(int x=0; x &lt; maxX; x+=32)
         {
            int myColIdx = (int)((x+myMinX)/32);
            int myColOff = myMinX % 32;
            int targetColIdx = (int)((x+targetMinX)/32);
            int targetColOff = targetMinX % 32;
            int myMask = m_Mask[y+myMinY,myColIdx] &lt;&lt; myColOff;
            int targetMask = target.m_Mask[y+targetMinY,targetColIdx] &lt;&lt; targetColOff;
            if (myColOff != 0)
            {
               if (myColIdx + 1 &lt; m_Mask.GetUpperBound(1))
                  myMask |= (m_Mask[y+myMinY,myColIdx+1] &gt;&gt; (32-myColOff)) &amp;
                     ~(unchecked((int)0x80000000) &gt;&gt; (31-myColOff));
            }
            else if (targetColOff != 0)
            {
               if (targetColIdx + 1 &lt; target.m_Mask.GetUpperBound(1))
                  targetMask |= (target.m_Mask[y+targetMinY,targetColIdx+1] &gt;&gt; (32-targetColOff)) &amp;
                     ~(unchecked((int)0x80000000) &gt;&gt; (31-targetColOff));
            }
            if ((myMask &amp; targetMask) != 0)
               return true;
         }
      }
      return false;
   }

   private static int[,] GenerateMaskFromFrame(Rectangle rcBound, Frameset frameset, int[] subFrames, byte[] alphas)
   {
      BitmapData bmpData;
      int[] pixels;

      using (Bitmap bmpSingle = new Bitmap(rcBound.Width, rcBound.Height, PixelFormat.Format32bppArgb))
      {
         int maskColumns = (int)Math.Ceiling(bmpSingle.Width / 32f);
         int[,] arbt = new int[bmpSingle.Height, maskColumns];
         using (Graphics gfxSingle = Graphics.FromImage(bmpSingle))
         {
            gfxSingle.CompositingMode = CompositingMode.SourceCopy;
            gfxSingle.PixelOffsetMode = PixelOffsetMode.Half;

            for(int subFrameIdx = 0; subFrameIdx &lt; subFrames.Length; subFrameIdx++)
            {
               int subFrame = subFrames[subFrameIdx];
               gfxSingle.Clear(Color.Transparent);
               Frame SFrame = frameset[subFrame];
               using(Matrix mtx = new Matrix(SFrame.Transform.M11, SFrame.Transform.M12, SFrame.Transform.M21, SFrame.Transform.M22, SFrame.Transform.M41, SFrame.Transform.M42))
               {
                  gfxSingle.Transform = mtx;
                  Bitmap bmpGfxSheet = (Bitmap)Project.Resources.GetObject(SFrame.GraphicSheetTexture.Name);
                  gfxSingle.TranslateTransform(-rcBound.X, -rcBound.Y, MatrixOrder.Append);
                  gfxSingle.DrawImage(bmpGfxSheet, 0, 0, SFrame.SourceRect, GraphicsUnit.Pixel);
                  bmpData = bmpSingle.LockBits(new Rectangle(Point.Empty, rcBound.Size), ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
                  pixels = new int[bmpSingle.Height * Math.Abs(bmpData.Stride) / 4];
                  System.Runtime.InteropServices.Marshal.Copy(bmpData.Scan0, pixels, 0, bmpSingle.Height * Math.Abs(bmpData.Stride) / 4);
                  bmpSingle.UnlockBits(bmpData);
                  for (int rowIdx = 0; rowIdx &lt; bmpSingle.Height; rowIdx++)
                  {
                     for (int pixIdx = 0; pixIdx &lt; bmpSingle.Width; pixIdx++)
                     {
                        if (Color.FromArgb(pixels[rowIdx * bmpData.Stride / 4 + pixIdx]).A &gt; alphas[subFrameIdx])
                           arbt[rowIdx, pixIdx / 32] |= 1 &lt;&lt; (31 - (pixIdx % 32));
                     }
                  }
               }
            }
         }
         return arbt;
      }
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="Frame.cs" IsCustomObject="false">
    <Text>using System;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;
using System.Drawing;

public struct Frame
{
   public Display.TextureRef GraphicSheetTexture;
   public short CellIndex;
   public Matrix Transform;
   public int Color;
   public Rectangle SourceRect;

   public Frame(Display.TextureRef texture, short cell, float M11, float M12, float M21, float M22, float M41, float M42, Rectangle srcRect, int color)
   {
      GraphicSheetTexture = texture;
      CellIndex = cell;
      Transform = Matrix.Identity;
      Transform.M11 = M11;
      Transform.M12 = M12;
      Transform.M21 = M21;
      Transform.M22 = M22;
      Transform.M41 = M41;
      Transform.M42 = M42;
      Transform.M44 = 1;
      SourceRect = srcRect;
      this.Color = color;
   }

   public Frame(Display.TextureRef texture, short cell, float M11, float M12, float M21, float M22, float M41, float M42, Rectangle srcRect) :
      this(texture, cell, M11, M12, M21, M22, M41, M42, srcRect, -1)
   {
   }

   public Frame(Display.TextureRef texture, short cell, Rectangle srcRect, int color)
   {
      GraphicSheetTexture = texture;
      CellIndex = cell;
      Transform = Matrix.Identity;
      SourceRect = srcRect;
      this.Color = color;
   }

   public Frame(Display.TextureRef texture, short cell, Rectangle srcRect) :
      this(texture, cell, srcRect, -1)
   {
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="SpriteState.cs" IsCustomObject="false">
    <Text>using System;

/// &lt;summary&gt;
/// This specialization of TileFrame is used specifically for sprite frames
/// with collision masks (when alpha is non-zero).
/// &lt;/summary&gt;
public class SpriteFrame : TileFrame
{
   private CollisionMask m_Mask;

   public SpriteFrame(System.Drawing.Rectangle localBounds, Frameset frameset, int nAccumulatedDuration, int[] subFrames, byte[] alphas) : base(nAccumulatedDuration, subFrames)
   {
      m_Mask = new CollisionMask(localBounds, frameset, subFrames, alphas);
   }

   public SpriteFrame(System.Drawing.Rectangle localBounds, Frameset frameset, int nAccumulatedDuration, int frame, byte alpha) : base(nAccumulatedDuration, frame)
   {
      m_Mask = new CollisionMask(localBounds, frameset, new int[] {frame}, new byte[] {alpha});
   }

   public CollisionMask Mask
   {
      get
      {
         return m_Mask;
      }
   }
}

/// &lt;summary&gt;
/// Defines how a particular state within a sprite definition can animate.
/// &lt;/summary&gt;
public class SpriteState
{
   private readonly TileFrame[] m_frames;
   private short[] m_frameIndexMap;
   private Frameset m_Frameset;
   private int m_nSolidWidth;
   private int m_nSolidHeight;
   private System.Drawing.Rectangle m_LocalBounds;

   public SpriteState(int width, int height, Frameset frameset, System.Drawing.Rectangle localBounds, params TileFrame[] frames)
   {
      m_nSolidWidth = width;
      m_nSolidHeight = height;
      m_Frameset = frameset;
      m_LocalBounds = localBounds;
      m_frames = frames;
      m_frameIndexMap = new short[m_frames[m_frames.Length - 1].m_nAccumulatedDuration];
      short frameIndex = 0;
      for (int frameValue=0; frameValue&lt;m_frameIndexMap.Length; frameValue++)
      {
         if (m_frames[frameIndex].m_nAccumulatedDuration &lt;= frameValue)
            frameIndex++;
         m_frameIndexMap[frameValue] = frameIndex;
      }
   }

   public Frameset Frameset
   {
      get
      {
         return m_Frameset;
      }
   }

   public int[] GetFrame(int frameIndex)
   {
      return m_frames[m_frameIndexMap[frameIndex % m_frameIndexMap.Length]].subFrames;
   }

   public CollisionMask GetMask(int frameIndex)
   {
      SpriteFrame frame = m_frames[m_frameIndexMap[frameIndex % m_frameIndexMap.Length]] as SpriteFrame;
      if (frame == null)
         return null;
      return frame.Mask;
   }

   public int SolidWidth
   {
      get
      {
         return m_nSolidWidth;
      }
   }

   public int SolidHeight
   {
      get
      {
         return m_nSolidHeight;
      }
   }

   /// &lt;summary&gt;
   /// Returns a rectangle (relative to the origin of the sprite) that bounds
   /// all the graphics in this state.
   /// &lt;/summary&gt;
   public System.Drawing.Rectangle LocalBounds
   {
      get
      {
         return m_LocalBounds;
      }
   }
}</Text>
  </SourceCode>
  <SourceCode Name="MapBase.cs" IsCustomObject="false">
    <Text>using System;
using System.Drawing;

/// &lt;summary&gt;
/// Base class for all maps.
/// &lt;/summary&gt;
[Serializable()]
public abstract class MapBase
{
   protected Display m_Display;
   public Type m_CameFromMapType = null;
   private ViewLayout viewLayout = ViewLayout.Single;
   private static byte currentViewIndex = 0;
   public int MapFlags = 0;

   public MapBase(Display Disp)
   {
      m_Display = Disp;
   }

   protected abstract void Draw();

   public abstract void ExecuteRules();

   /// &lt;summary&gt;
   /// Scroll all layers to the specified coordinates after calculating relative scroll rates
   /// &lt;/summary&gt;
   /// &lt;param name="position"&gt;New coordinate. int.MinValue indicates no scrolling on this axis.&lt;/param&gt;
   public abstract void Scroll(Point position);

   public abstract short ScrollMarginLeft
   {
      get;
   }
   public abstract short ScrollMarginTop
   {
      get;
   }
   public abstract short ScrollMarginRight
   {
      get;
   }
   public abstract short ScrollMarginBottom
   {
      get;
   }

   public ViewLayout ViewLayout
   {
      get
      {
         return viewLayout;
      }
      set
      {
         if (value == ViewLayout.FourCorners)
            if (Project.MaxViews &lt; 4)
            {
               System.Diagnostics.Debug.Fail("Attempted to use 4-corner view with max views less than 4");
               return;
            }
         if ((value == ViewLayout.TopBottom) || (value == ViewLayout.LeftRight))
            if (Project.MaxViews &lt; 2)
            {
               System.Diagnostics.Debug.Fail("Attempted to use double view with max views less than 2");
               return;
            }
         viewLayout = value;
      }
   }

   public Rectangle GetView(int viewNumber)
   {
      Rectangle result = TotalView;
      switch (viewLayout)
      {
         case ViewLayout.Single:
            return result;
         case ViewLayout.TopBottom:
            result.Height /= 2;
         switch (viewNumber)
         {
            case 0:
               return result;
            default:
               result.Y += TotalView.Height / 2;
               return result;
         }
         case ViewLayout.LeftRight:
            result.Width /= 2;
         switch(viewNumber)
         {
            case 0:
               return result;
            default:
               result.X += TotalView.Width / 2;
               return result;
         }
         default:
            result.Width /= 2;
            result.Height /= 2;
         switch(viewNumber)
         {
            case 0:
               return result;
            case 1:
               result.X += TotalView.Width / 2;
               return result;
            case 2:
               result.Y += TotalView.Height / 2;
               return result;
            default:
               result.X += TotalView.Width / 2;
               result.Y += TotalView.Height / 2;
               return result;
         }
      }
   }

   /// &lt;summary&gt;
   /// Returns the rectangle for the currently active view within the map's total view area
   /// &lt;/summary&gt;
   public Rectangle CurrentView
   {
      get
      {
         return GetView(CurrentViewIndex);
      }
   }

   /// &lt;summary&gt;
   /// Which view is currently being processed (0 to Project.MaxViews - 1)
   /// &lt;/summary&gt;
   public byte CurrentViewIndex
   {
      get
      {
         return currentViewIndex;
      }
      set
      {
         if ((value &gt;= 0) &amp;&amp; (value &lt; Project.MaxViews))
            currentViewIndex = value;
         else
            System.Diagnostics.Debug.Fail("Bad CurrentViewIndex value ignored");
      }
   }

   /// &lt;summary&gt;
   /// Draws all the views according to the map's current ViewLayout
   /// &lt;/summary&gt;
   public void DrawAllViews()
   {
      switch(viewLayout)
      {
         case ViewLayout.Single:
            currentViewIndex = 0;
            Draw();
            break;
         case ViewLayout.TopBottom:
         case ViewLayout.LeftRight:
            for (currentViewIndex = 0; currentViewIndex &lt; 2; currentViewIndex++)
               Draw();
            currentViewIndex = 0;
            break;
         case ViewLayout.FourCorners:
            for (currentViewIndex = 0; currentViewIndex &lt; 4; currentViewIndex++)
               Draw();
            currentViewIndex = 0;
            break;
      }
   }

   /// &lt;summary&gt;
   /// Returns the entire view area for this map (including all sub-views if multiple views exist)
   /// &lt;/summary&gt;
   public virtual Rectangle TotalView
   {
      get
      {
         return m_Display.DisplayRectangle;
      }
      set
      {
         System.Diagnostics.Debug.Assert(System.Drawing.Rectangle.Intersect(m_Display.DisplayRectangle, value).Equals(value));
      }
   }

   public Display Display
   {
      get
      {
         return m_Display;
      }
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="Tile.cs" IsCustomObject="false">
    <Text>using System;

/// &lt;summary&gt;
/// Maps a tile index to frameset frames based on counter values etc
/// &lt;/summary&gt;
public abstract class TileBase
{
   protected TileCategoryMembershipBase m_membership;

   protected TileBase(TileCategoryMembershipBase membership)
   {
      m_membership = membership;
   }

   /// &lt;summary&gt;
   /// Returns an array of frameset frames to draw for a tile during a particular frame
   /// &lt;/summary&gt;
   public abstract int[] CurrentFrame
   {
      get;
   }

   public abstract bool IsMember(TileCategoryName cat);
}

/// &lt;summary&gt;
/// Represents an animated tile
/// &lt;/summary&gt;
public class AnimTile : TileBase
{
   private readonly TileFrame[] m_frames;
   private readonly Counter m_counter;
   private short[] m_frameIndexMap;

   /// &lt;summary&gt;
   /// Creates an animated tile definition
   /// &lt;/summary&gt;
   /// &lt;param name="frames"&gt;Array of frames sorted by chronological sequence&lt;/param&gt;
   /// &lt;param name="counter"&gt;Which counter affects this tile's animation&lt;/param&gt;
   public AnimTile(Counter counter, params TileFrame[] frames) : base(null)
   {
      if (frames.Length &lt;= 0)
         throw new System.ApplicationException("Use EmptyTile to create empty tiles");
      this.m_frames = frames;
      this.m_counter = counter;
      GenerateFrameIndexMap();
   }

   public AnimTile(Counter counter, TileCategoryMembershipBase membership, params TileFrame[] frames) : base(membership)
   {
      if (frames.Length &lt;= 0)
         throw new System.ApplicationException("Use EmptyTile to create empty tiles");
      this.m_frames = frames;
      this.m_counter = counter;
      GenerateFrameIndexMap();
   }

   private void GenerateFrameIndexMap()
   {
      m_frameIndexMap = new short[m_frames[m_frames.Length - 1].m_nAccumulatedDuration];
      short frameIndex = 0;
      for (int frameValue=0; frameValue&lt;m_frameIndexMap.Length; frameValue++)
      {
         if (m_frames[frameIndex].m_nAccumulatedDuration &lt;= frameValue)
            frameIndex++;
         m_frameIndexMap[frameValue] = frameIndex;
      }
   }

   public int FrameSequenceIndex
   {
      get
      {
         return m_frameIndexMap[m_counter.CurrentValue % m_frameIndexMap.Length];
      }
   }

   public int FrameSequenceLength
   {
      get
      {
         return m_frames.Length;
      }
   }

   public override int[] CurrentFrame
   {
      get
      {
         return m_frames[FrameSequenceIndex].subFrames;
      }
   }

   public override bool IsMember(TileCategoryName cat)
   {
      if (m_membership == null) return false;
      if (m_membership is TileCategoryFrameMembership)
         return ((TileCategoryFrameMembership)m_membership)[FrameSequenceIndex, cat];
      else
         return ((TileCategorySimpleMembership)m_membership)[cat];
   }
}

/// &lt;summary&gt;
/// Represents a non-animated composite or single-cell tile
/// &lt;/summary&gt;
public class SimpleTile : TileBase
{
   private readonly int[] frame;

   public SimpleTile(int frame) : base(null)
   {
      this.frame = new int[] {frame};
   }

   public SimpleTile(int[] frame) : base(null)
   {
      this.frame = frame;
   }

   public SimpleTile(int frame, TileCategoryMembershipBase membership) : base(membership)
   {
      this.frame = new int[] {frame};
   }

   public SimpleTile(int[] frame, TileCategoryMembershipBase membership) : base(membership)
   {
      this.frame = frame;
   }

   public override int[] CurrentFrame
   {
      get
      {
         return frame;
      }
   }

   public override bool IsMember(TileCategoryName cat)
   {
      if (m_membership == null) return false;
      return ((TileCategorySimpleMembership)m_membership)[cat];
   }
}

/// &lt;summary&gt;
/// Represents a tile that doesn't draw anything onto the layer
/// &lt;/summary&gt;
public class EmptyTile : TileBase
{
   public static readonly EmptyTile Value = new EmptyTile();
   private readonly int[] frame;

   private EmptyTile() : base(null)
   {
      frame = new int[] {};
   }

   public override int[] CurrentFrame
   {
      get
      {
         return frame;
      }
   }

   public override bool IsMember(TileCategoryName cat)
   {
      return false;
   }
}

public class TileFrame : IComparable
{
   /// &lt;summary&gt;
   /// Represents counter value, and is used to optimize frame searching
   /// &lt;/summary&gt;
   public readonly int m_nAccumulatedDuration;
   /// &lt;summary&gt;
   /// Composite tiles may have multiple frames drawn on top of each other
   /// &lt;/summary&gt;
   public readonly int[] subFrames;

   public TileFrame(int nAccumulatedDuration, int[] subFrames)
   {
      this.m_nAccumulatedDuration = nAccumulatedDuration;
      this.subFrames = subFrames;
   }

   public TileFrame(int nAccumulatedDuration, int frame)
   {
      this.m_nAccumulatedDuration= nAccumulatedDuration;
      this.subFrames = new int[] {frame};
   }

   #region IComparable Members

   public int CompareTo(object obj)
   {
      if (obj is TileFrame)
         return m_nAccumulatedDuration.CompareTo(((TileFrame)obj).m_nAccumulatedDuration);
      else
         return m_nAccumulatedDuration.CompareTo(obj);
   }
   #endregion
}</Text>
  </SourceCode>
  <SourceCode Name="LayerBase.cs" IsCustomObject="false">
    <Text>using System;
using System.Drawing;
using Microsoft.DirectX.Direct3D;
using Microsoft.DirectX;

/// &lt;summary&gt;
/// Summary description for LayerBase.
/// &lt;/summary&gt;
[Serializable()]
public abstract class LayerBase : System.Collections.IEnumerable
{
   #region Embedded Classes
   private class InjectedFrame : IComparable
   {
      public int x;
      public int y;
      /* The runtime implementation only uses priority to determine
       * whether the frame is behind the layer (-1), on the layer (0)
       * or in front of the layer(1).  The rest of the priority
       * handling is pre-processed by having sprites sorted in the
       * original arrays.
       */
      public int priority;
      public Frame frame;
      public int color;
      public InjectedFrame(int x, int y, int priority, Frame frame, int color)
      {
         this.x = x;
         this.y = y;
         this.frame = frame;
         this.priority = priority;
         if (color == -1)
            this.color = frame.Color;
         else if (frame.Color == -1)
            this.color = color;
         else
            this.color = Microsoft.DirectX.Direct3D.ColorOperator.Modulate(frame.Color, color);
      }
      #region IComparable Members

      public int CompareTo(object obj)
      {
         int result = y.CompareTo((obj as InjectedFrame).y);
         if (result != 0)
            return result;
         result = x.CompareTo((obj as InjectedFrame).x);
         if (result != 0)
            return result;
         return -1;
      }

      #endregion
   }
   #endregion

   #region Fields
   protected readonly Tileset m_Tileset;
   private Frameset m_Frameset;
   [NonSerialized()]
   private System.Collections.ArrayList m_InjectedFrames = null;
   
   private readonly int m_nLeftBuffer;
   private readonly int m_nTopBuffer;
   private readonly int m_nRightBuffer;
   private readonly int m_nBottomBuffer;
   private readonly int m_nColumns;
   private readonly int m_nRows;
   private System.Drawing.Point m_AbsolutePosition;
   protected SpriteCollection m_Sprites;
   private readonly System.Drawing.SizeF m_ScrollRate;
   private System.Drawing.Point[] m_CurrentPosition = new System.Drawing.Point[Project.MaxViews];
   private MapBase m_ParentMap;
   public LayerSpriteCategoriesBase m_SpriteCategories;
   #endregion

   protected LayerBase(Tileset Tileset, MapBase Parent, int nLeftBuffer, int nTopBuffer, int nRightBuffer, int nBottomBuffer,
      int nColumns, int nRows, System.Drawing.Point Position, System.Drawing.SizeF ScrollRate)
   {
      this.m_ParentMap = Parent;
      this.m_Tileset = Tileset;
      this.m_Frameset = Tileset.GetFrameset(Parent.Display);
      this.m_nLeftBuffer = nLeftBuffer;
      this.m_nTopBuffer = nTopBuffer;
      this.m_nRightBuffer = nRightBuffer;
      this.m_nBottomBuffer = nBottomBuffer;
      this.m_nColumns = nColumns;
      this.m_nRows = nRows;
      this.m_AbsolutePosition = Position;
      this.m_ScrollRate = ScrollRate;
      this.Move(new Point(0,0));
   }

   #region Abstract Members
   /// &lt;summary&gt;
   /// Retrieves the value of a tile at the specified tile coordinate
   /// &lt;/summary&gt;
   public abstract int this[int x, int y]
   {
      get;
      set;
   }
   public abstract int[] GetTileFrame(int x, int y);
   public abstract TileBase GetTile(int x, int y);
   public abstract void InjectSprites();
   #endregion

   #region IEnumerable Members
   public System.Collections.IEnumerator GetEnumerator()
   {
      return new ActiveSpriteEnumerator(m_Sprites);
   }
   #endregion

   #region Properties
   /// &lt;summary&gt;
   /// Get the number of columns of tiles in the layer
   /// &lt;/summary&gt;
   public int Columns
   {
      get
      {
         return m_nColumns;
      }
   }
   /// &lt;summary&gt;
   /// Get the number of rows of tiles in the layer
   /// &lt;/summary&gt;
   public int Rows
   {
      get
      {
         return m_nRows;
      }
   }

   /// &lt;summary&gt;
   /// Get or set the position of the layer within the map. 
   /// (Does not affect current position until &lt;see cref="Move"/&gt; is called)
   /// &lt;/summary&gt;
   public System.Drawing.Point AbsolutePosition
   {
      get
      {
         return m_AbsolutePosition;
      }
      set
      {
         m_AbsolutePosition = value;
      }
   }

   /// &lt;summary&gt;
   /// Gets the scroll rate that is applied to &lt;see cref="Move"/&gt; operations.
   /// &lt;/summary&gt;
   public System.Drawing.SizeF ScrollRate
   {
      get
      {
         return m_ScrollRate;
      }
   }

   /// &lt;summary&gt;
   /// Gets/Sets the current pixel position of the layer relative to the screen.
   /// (Setting this directly ignores &lt;see cref="ScrollRate"/&gt; and &lt;see cref="AbsolutePosition"/&gt;.)
   /// &lt;/summary&gt;
   public System.Drawing.Point CurrentPosition
   {
      get
      {
         return m_CurrentPosition[ParentMap.CurrentViewIndex];
      }
      set
      {
         m_CurrentPosition[ParentMap.CurrentViewIndex] = value;
      }
   }

   /// &lt;summary&gt;
   /// Returns the map that owns this layer
   /// &lt;/summary&gt;
   public MapBase ParentMap
   {
      get
      {
         return m_ParentMap;
      }
   }
   
   public Tileset Tileset
   {
      get
      {
         return m_Tileset;
      }
   }
   #endregion

   #region Public methods
   /// &lt;summary&gt;
   /// Move/Scroll the layer to a new position based on the current map position.
   /// The layer's current position is offset by its position on the map and scaled
   /// by the layer's scroll rate.
   /// &lt;/summary&gt;
   /// &lt;param name="MapPosition"&gt;Position of the map.  If one component is int.minValue,
   /// that axis is not affected&lt;/param&gt;
   /// &lt;remarks&gt;Map positions are usually negative because the map position indicates
   /// the position of the top-left corner of the map which is usually scrolled off
   /// the top-left corner of the screen to a negative position.&lt;/remarks&gt;
   public void Move(Point MapPosition)
   {
      if (MapPosition.X != int.MinValue)
         if (MapPosition.Y != int.MinValue)
            CurrentPosition = new Point(m_AbsolutePosition.X + (int)(MapPosition.X * m_ScrollRate.Width), m_AbsolutePosition.Y + (int)(MapPosition.Y * m_ScrollRate.Height));
         else
            CurrentPosition = new Point(m_AbsolutePosition.X + (int)(MapPosition.X * m_ScrollRate.Width), CurrentPosition.Y);
      else if (MapPosition.Y != int.MinValue)
         CurrentPosition = new Point(CurrentPosition.X, m_AbsolutePosition.Y + (int)(MapPosition.Y * m_ScrollRate.Height));
   }

   public void Draw()
   {
      int nTileWidth = m_Tileset.TileWidth;
      int nTileHeight = m_Tileset.TileHeight;

      int nStartCol = (-m_nLeftBuffer - CurrentPosition.X) / nTileWidth;
      if (nStartCol &lt; 0)
         nStartCol = 0;
      int nStartRow = (-m_nTopBuffer - CurrentPosition.Y) / nTileHeight;
      if (nStartRow &lt; 0)
         nStartRow = 0;

      Rectangle ViewRect = m_ParentMap.CurrentView;
      m_ParentMap.Display.Device.RenderState.ScissorTestEnable = true;
      m_ParentMap.Display.Device.ScissorRectangle = ViewRect;

      int EndCol = (ViewRect.Width - 1 + m_nRightBuffer - CurrentPosition.X) / nTileWidth;
      if (EndCol &gt;= Columns)
         EndCol = Columns - 1;
      int EndRow = (ViewRect.Height - 1 + m_nBottomBuffer - CurrentPosition.Y) / nTileHeight;
      if (EndRow &gt;= Rows)
         EndRow = Rows - 1;

      System.Collections.IEnumerator Injected = null;
      InjectedFrame CurFrame;
      if (m_InjectedFrames != null)
      {
         Injected = m_InjectedFrames.GetEnumerator();
         if (!Injected.MoveNext())
            Injected = null;
      }

      Sprite spr = m_ParentMap.Display.Sprite;

      for (int y = nStartRow; y &lt;= EndRow; y++)
      {
         if (Injected != null)
         {
            while ((((CurFrame = (InjectedFrame)Injected.Current).y &lt; y * nTileHeight)) &amp;&amp; (CurFrame.priority &lt;= 0) ||
                   (CurFrame.priority &lt; 0))
            {
               spr.Transform = Matrix.Multiply(CurFrame.frame.Transform, Matrix.Translation(
                  (float)CurFrame.x + CurrentPosition.X + ViewRect.X,
                  (float)CurFrame.y + CurrentPosition.Y + ViewRect.Y, 0));
               spr.Draw(CurFrame.frame.GraphicSheetTexture.Texture, CurFrame.frame.SourceRect,
                  Vector3.Empty, Vector3.Empty, CurFrame.color);
               if (!Injected.MoveNext())
               {
                  Injected = null;
                  break;
               }
            }
         }

         for (int x = nStartCol; x &lt;= EndCol; x++)
         {
            int[] SubFrames = GetTileFrame(x,y);
            for (int nFrame = 0; nFrame &lt; SubFrames.Length; nFrame++)
            {
               Frame f = m_Frameset[SubFrames[nFrame]];
               spr.Transform = Matrix.Multiply(f.Transform, Matrix.Translation(
                  x * nTileWidth + CurrentPosition.X + ViewRect.X,
                  y * nTileHeight + CurrentPosition.Y + ViewRect.Y, 0));
               spr.Draw(f.GraphicSheetTexture.Texture, f.SourceRect, Vector3.Empty, Vector3.Empty, f.Color);
            }
         }
      }

      while (Injected != null)
      {
         CurFrame = (InjectedFrame)Injected.Current;
         spr.Transform = Matrix.Multiply(CurFrame.frame.Transform, Matrix.Translation(
            (float)CurFrame.x + CurrentPosition.X + ViewRect.X,
            (float)CurFrame.y + CurrentPosition.Y + ViewRect.Y, 0));
         spr.Draw(CurFrame.frame.GraphicSheetTexture.Texture, CurFrame.frame.SourceRect,
            Vector3.Empty, Vector3.Empty, CurFrame.color);
         if (!Injected.MoveNext())
         {
            Injected = null;
            break;
         }
      }
   }

   public Rectangle VisibleArea
   {
      get
      {
         return new Rectangle(new System.Drawing.Point(-CurrentPosition.X, -CurrentPosition.Y), m_ParentMap.CurrentView.Size);
      }
   }

   public bool IsSpriteVisible(SpriteBase sprite)
   {
      return sprite.isActive &amp;&amp; sprite.GetBounds().IntersectsWith(VisibleArea);
   }

   public void InjectFrames(int x, int y, Frame[] frames)
   {
      InjectFrames(x, y, frames, -1);
   }

   public void InjectFrames(int x, int y, Frame[] frames, int color)
   {
      if (frames.Length &lt;= 0)
         return;

      InjectedFrame[] additions = new InjectedFrame[frames.Length];
      for (int idx=0; idx&lt;frames.Length; idx++)
         additions[idx] = new InjectedFrame(x, y, 0, frames[idx], color);

      int insIdx;
      if (m_InjectedFrames == null)
      {
         m_InjectedFrames = new System.Collections.ArrayList();
         insIdx = 0;
      }
      else
      {
         insIdx = m_InjectedFrames.BinarySearch(additions[0]);
         if (insIdx &lt; 0)
            insIdx = ~insIdx;
      }
      m_InjectedFrames.InsertRange(insIdx, additions);
   }

   public void AppendFrames(int x, int y, Frame[] frames, int color, int priority)
   {
      InjectedFrame[] additions = new InjectedFrame[frames.Length];
      for (int idx=0; idx&lt;frames.Length; idx++)
         additions[idx] = new InjectedFrame(x, y, priority, frames[idx], color);
      if (m_InjectedFrames == null)
      {
         m_InjectedFrames = new System.Collections.ArrayList(additions);
      }
      else
         m_InjectedFrames.AddRange(additions);
   }

   public void ClearInjections()
   {
      if (m_InjectedFrames != null)
         m_InjectedFrames.Clear();
   }

   public Point GetMousePosition()
   {
      Point dispPos;
      if (m_ParentMap.Display.Windowed)
         dispPos = m_ParentMap.Display.PointToClient(System.Windows.Forms.Control.MousePosition);
      else
         dispPos = System.Windows.Forms.Control.MousePosition;
      dispPos.Offset(-CurrentPosition.X, -CurrentPosition.Y);
      return dispPos;
   }

   public void ScrollSpriteIntoView(SpriteBase sprite, bool useScrollMargins)
   {
      Rectangle spriteBounds = sprite.GetBounds();
      int newX = int.MinValue;
      int newY = int.MinValue;
      int marginLeft;
      int marginTop;
      int marginRight;
      int marginBottom;
      if (useScrollMargins)
      {
         marginLeft = ParentMap.ScrollMarginLeft;
         marginTop = ParentMap.ScrollMarginTop;
         marginRight = ParentMap.ScrollMarginRight;
         marginBottom = ParentMap.ScrollMarginBottom;
      }
      else
      {
         marginLeft = 0;
         marginTop = 0;
         marginRight = 0;
         marginBottom = 0;
      }
      if (spriteBounds.Left + CurrentPosition.X &lt; marginLeft)
      {
         if (ScrollRate.Width &gt; 0)
            newX = (int)((-spriteBounds.Left + marginLeft - AbsolutePosition.X) / ScrollRate.Width);
         else
            CurrentPosition = new Point(-spriteBounds.Left + marginLeft, CurrentPosition.Y);
      }
      else if (spriteBounds.Right + CurrentPosition.X &gt; VisibleArea.Width - marginRight)
      {
         if (ScrollRate.Width &gt; 0)
            newX = (int)((-spriteBounds.Right + VisibleArea.Width - marginRight - AbsolutePosition.X) / ScrollRate.Width);
         else
            CurrentPosition = new Point(-spriteBounds.Right + VisibleArea.Width - marginRight, CurrentPosition.Y);
      }

      if (spriteBounds.Top + CurrentPosition.Y &lt; marginTop)
      {
         if (ScrollRate.Height &gt; 0)
            newY = (int)((-spriteBounds.Top + marginTop - AbsolutePosition.Y) / ScrollRate.Height);
         else
            CurrentPosition = new Point(CurrentPosition.X, -spriteBounds.Top + marginTop);
      }
      else if (spriteBounds.Bottom + CurrentPosition.Y &gt; VisibleArea.Height - marginBottom)
      {
         if (ScrollRate.Height &gt; 0)
            newY = (int)((-spriteBounds.Bottom + VisibleArea.Height - marginBottom - AbsolutePosition.Y) / ScrollRate.Height);
         else
            CurrentPosition = new Point(CurrentPosition.X, -spriteBounds.Bottom + VisibleArea.Height - marginBottom);
      }
      ParentMap.Scroll(new Point(newX, newY));
   }

   public void PushSpriteIntoView(SpriteBase sprite, bool stayInScrollMargins)
   {
      Rectangle spriteBounds = sprite.GetBounds();
      int marginLeft;
      int marginTop;
      int marginRight;
      int marginBottom;
      if (stayInScrollMargins)
      {
         marginLeft = ParentMap.ScrollMarginLeft;
         marginTop = ParentMap.ScrollMarginTop;
         marginRight = ParentMap.ScrollMarginRight;
         marginBottom = ParentMap.ScrollMarginBottom;
      }
      else
      {
         marginLeft = 0;
         marginTop = 0;
         marginRight = 0;
         marginBottom = 0;
      }

      if (spriteBounds.Left + CurrentPosition.X &lt; marginLeft)
      {
         if (double.IsNaN(sprite.LocalDX))
            sprite.dx = marginLeft - CurrentPosition.X - spriteBounds.Left;
         else
            sprite.LocalDX = marginLeft - CurrentPosition.X - spriteBounds.Left - sprite.RidingOn.dx;
      }
      else if (spriteBounds.Right + CurrentPosition.X &gt; VisibleArea.Width - marginRight)
      {
         if (double.IsNaN(sprite.LocalDX))
            sprite.dx = VisibleArea.Width - marginRight - CurrentPosition.X - spriteBounds.Right;
         else
            sprite.LocalDX = VisibleArea.Width - marginRight - CurrentPosition.X - spriteBounds.Right - sprite.RidingOn.dx;
      }

      if (spriteBounds.Top + CurrentPosition.Y &lt; marginTop)
      {
         if (double.IsNaN(sprite.LocalDY))
            sprite.dy = marginTop - spriteBounds.Top - CurrentPosition.Y;
         else
            sprite.LocalDY = marginTop - spriteBounds.Top - CurrentPosition.Y - sprite.RidingOn.dy;
      }
      else if (spriteBounds.Bottom + CurrentPosition.Y &gt; VisibleArea.Height - marginBottom)
      {
         if (double.IsNaN(sprite.LocalDY))
            sprite.dy = VisibleArea.Height - marginBottom - spriteBounds.Bottom - CurrentPosition.Y;
         else
            sprite.LocalDY = VisibleArea.Height - marginBottom - spriteBounds.Bottom - CurrentPosition.Y - sprite.RidingOn.dy;
      }
   }

   public int GetTopSolidPixel(Rectangle testArea, Solidity solid)
   {
      int topTile = (testArea.Top + m_Tileset.TileHeight) / m_Tileset.TileHeight - 1;
      int bottomTile = (int)((testArea.Top + testArea.Height - 1) / m_Tileset.TileHeight);
      int leftTile = (testArea.Left + m_Tileset.TileHeight) / m_Tileset.TileWidth - 1;
      int rightTile = (int)((testArea.Left + testArea.Width - 1) / m_Tileset.TileWidth);
      bool outOfBounds = false;
      if ((topTile &lt; 0) || (topTile &gt;= Rows) || (bottomTile &lt; 0) || (bottomTile &gt;= Rows)
         || (leftTile &lt; 0) || (leftTile &gt;= Columns) || (rightTile &lt; 0) || (rightTile &gt;= Columns))
         outOfBounds = true;
      short minTileTop = (short)(testArea.Top % m_Tileset.TileHeight);
      int tileLeft = leftTile * m_Tileset.TileWidth;
      for (int y = topTile; y &lt;= bottomTile; y++)
      {
         if (rightTile == leftTile)
         {
            short topMost;
            if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= Columns) || (y &lt; 0) || (y &gt;= Rows)))
               topMost = 0;
            else
               topMost = solid.GetCurrentTileShape(m_Tileset[this[leftTile,y]]).GetTopSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Left - tileLeft),
                  (short)(testArea.Left + testArea.Width - 1 - tileLeft));
            if ((topMost != short.MaxValue) &amp;&amp; ((y &gt; topTile) || (topMost &gt;= minTileTop)))
            {
               int result = topMost + y * m_Tileset.TileHeight;
               if (result &lt; testArea.Top + testArea.Height)
                  return result;
               else
                  return int.MinValue;
            }
         }
         else
         {
            short topMost;
            if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= Columns) || (y &lt; 0) || (y &gt;= Rows)))
               topMost = 0;
            else
               topMost = solid.GetCurrentTileShape(m_Tileset[this[leftTile,y]]).GetTopSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Left - tileLeft), (short)(m_Tileset.TileWidth - 1));
            if ((y == topTile) &amp;&amp; (topMost &lt; minTileTop))
               topMost = short.MaxValue;
            short top;
            for (int x = leftTile + 1; x &lt; rightTile; x++)
            {
               if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= Columns) || (y &lt; 0) || (y &gt;= Rows)))
                  top = 0;
               else
                  top = solid.GetCurrentTileShape(m_Tileset[this[x,y]]).GetTopSolidPixel(
                     m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)(m_Tileset.TileWidth - 1));
               if ((top &lt; topMost) &amp;&amp; ((y &gt; topTile) || (top &gt;= minTileTop)))
                  topMost = top;
            }
            if (outOfBounds &amp;&amp; ((rightTile &lt; 0) || (rightTile &gt;= Columns) || (y &lt; 0) || (y &gt;= Rows)))
               top = 0;
            else
               top = solid.GetCurrentTileShape(m_Tileset[this[rightTile,y]]).GetTopSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)((testArea.Left + testArea.Width - 1) % m_Tileset.TileWidth));
            if ((top &lt; topMost) &amp;&amp; ((y &gt; topTile) || (top &gt;= minTileTop)))
               topMost = top;
            if (topMost != short.MaxValue)
            {
               int result = topMost + y * m_Tileset.TileHeight;
               if (result &lt; testArea.Top + testArea.Height)
                  return result;
               else
                  return int.MinValue;
            }
         }
      }
      return int.MinValue;
   }

   public int GetBottomSolidPixel(Rectangle testArea, Solidity solid)
   {
      int topTile = (testArea.Top + m_Tileset.TileHeight) / m_Tileset.TileHeight - 1;
      int bottomTile = (int)((testArea.Top + testArea.Height - 1) / m_Tileset.TileHeight);
      int leftTile = (testArea.Left + m_Tileset.TileHeight) / m_Tileset.TileWidth - 1;
      int rightTile = (int)((testArea.Left + testArea.Width - 1) / m_Tileset.TileWidth);
      bool outOfBounds = false;
      if ((topTile &lt; 0) || (topTile &gt;= Rows) || (bottomTile &lt; 0) || (bottomTile &gt;= Rows)
         || (leftTile &lt; 0) || (leftTile &gt;= Columns) || (rightTile &lt; 0) || (rightTile &gt;= Columns))
         outOfBounds = true;
      short maxTileBottom = (short)((testArea.Top+testArea.Height-1) % m_Tileset.TileHeight);
      int tileLeft = leftTile * m_Tileset.TileWidth;
      for (int y = bottomTile; y &gt;= topTile; y--)
      {
         if (rightTile == leftTile)
         {
            short bottomMost;
            if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= Columns) || (y &lt; 0) || (y &gt;= Rows)))
               bottomMost = (short)(m_Tileset.TileHeight - 1);
            else
               bottomMost = solid.GetCurrentTileShape(m_Tileset[this[leftTile,y]]).GetBottomSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Left - tileLeft),
                  (short)(testArea.Left + testArea.Width - 1 - tileLeft));
            if ((bottomMost != short.MinValue) &amp;&amp; ((y &lt; bottomTile) || (bottomMost &lt;= maxTileBottom)))
            {
               int result = bottomMost + y * m_Tileset.TileHeight;
               if (result &gt;= testArea.Top)
                  return result;
               else
                  return int.MinValue;
            }
         }
         else
         {
            short bottomMost;
            if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= Columns) || (y &lt; 0) || (y &gt;= Rows)))
               bottomMost = (short)(m_Tileset.TileHeight - 1);
            else
               bottomMost = solid.GetCurrentTileShape(m_Tileset[this[leftTile,y]]).GetBottomSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Left - tileLeft), (short)(m_Tileset.TileWidth - 1));
            if ((y == bottomTile) &amp;&amp; (bottomMost &gt; maxTileBottom))
               bottomMost = short.MinValue;
            short bottom;
            for (int x = leftTile + 1; x &lt; rightTile; x++)
            {
               if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= Columns) || (y &lt; 0) || (y &gt;= Rows)))
                  bottom = (short)(m_Tileset.TileHeight - 1);
               else
                  bottom = solid.GetCurrentTileShape(m_Tileset[this[x,y]]).GetBottomSolidPixel(
                     m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)(m_Tileset.TileWidth - 1));
               if ((bottom &gt; bottomMost) &amp;&amp; ((y &lt; bottomTile) || (bottom &lt;= maxTileBottom)))
                  bottomMost = bottom;
            }
            if (outOfBounds &amp;&amp; ((rightTile &lt; 0) || (rightTile &gt;= Columns) || (y &lt; 0) || (y &gt;= Rows)))
               bottom = (short)(m_Tileset.TileHeight - 1);
            else
               bottom = solid.GetCurrentTileShape(m_Tileset[this[rightTile,y]]).GetBottomSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)((testArea.Left + testArea.Width - 1) % m_Tileset.TileWidth));
            if ((bottom &gt; bottomMost) &amp;&amp; ((y &lt; bottomTile) || (bottom &lt;= maxTileBottom)))
               bottomMost = bottom;
            if (bottomMost != short.MinValue)
            {
               int result = bottomMost + y * m_Tileset.TileHeight;
               if (result &gt;= testArea.Top)
                  return result;
               else
                  return int.MinValue;
            }
         }
      }
      return int.MinValue;
   }

   public int GetLeftSolidPixel(Rectangle testArea, Solidity solid)
   {
      int topTile = (testArea.Top + m_Tileset.TileHeight) / m_Tileset.TileHeight - 1;
      int bottomTile = (int)((testArea.Top + testArea.Height - 1) / m_Tileset.TileHeight);
      int leftTile = (testArea.Left + m_Tileset.TileHeight) / m_Tileset.TileWidth - 1;
      int rightTile = (int)((testArea.Left + testArea.Width - 1) / m_Tileset.TileWidth);
      bool outOfBounds = false;
      if ((topTile &lt; 0) || (topTile &gt;= Rows) || (bottomTile &lt; 0) || (bottomTile &gt;= Rows)
         || (leftTile &lt; 0) || (leftTile &gt;= Columns) || (rightTile &lt; 0) || (rightTile &gt;= Columns))
         outOfBounds = true;
      short minTileLeft = (short)(testArea.Left % m_Tileset.TileWidth);
      int tileTop = topTile * m_Tileset.TileHeight;
      for (int x = leftTile; x &lt;= rightTile; x++)
      {
         if (bottomTile == topTile)
         {
            short leftMost;
            if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= Rows) || (x &lt; 0) || (x &gt;= Columns)))
               leftMost = 0;
            else
               leftMost = solid.GetCurrentTileShape(m_Tileset[this[x,topTile]]).GetLeftSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Top - tileTop),
                  (short)(testArea.Top + testArea.Height - 1 - tileTop));
            if ((leftMost != short.MaxValue) &amp;&amp; ((x &gt; leftTile) || (leftMost &gt;= minTileLeft)))
            {
               int result = leftMost + x * m_Tileset.TileWidth;
               if (result &lt; testArea.Left + testArea.Width)
                  return result;
               else
                  return int.MinValue;
            }
         }
         else
         {
            short leftMost;
            if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= Rows) || (x &lt; 0) || (x &gt;= Columns)))
               leftMost = 0;
            else
               leftMost = solid.GetCurrentTileShape(m_Tileset[this[x, topTile]]).GetLeftSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Top - tileTop), (short)(m_Tileset.TileHeight - 1));
            if ((x == leftTile) &amp;&amp; (leftMost &lt; minTileLeft))
               leftMost = short.MaxValue;
            short left;
            for (int y = topTile + 1; y &lt; bottomTile; y++)
            {
               if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= Columns) || (y &lt; 0) || (y &gt;= Rows)))
                  left = 0;
               else
                  left = solid.GetCurrentTileShape(m_Tileset[this[x,y]]).GetLeftSolidPixel(
                     m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)(m_Tileset.TileHeight - 1));
               if ((left &lt; leftMost) &amp;&amp; ((x &gt; leftTile) || (left &gt;= minTileLeft)))
                  leftMost = left;
            }
            if (outOfBounds &amp;&amp; ((bottomTile &lt; 0) || (bottomTile &gt;= Rows) || (x &lt; 0) || (x &gt;= Columns)))
               left = 0;
            else
               left = solid.GetCurrentTileShape(m_Tileset[this[x, bottomTile]]).GetLeftSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)((testArea.Top + testArea.Height - 1) % m_Tileset.TileHeight));
            if ((left &lt; leftMost) &amp;&amp; ((x &gt; leftTile) || (left &gt;= minTileLeft)))
               leftMost = left;
            if (leftMost != short.MaxValue)
            {
               int result = leftMost + x * m_Tileset.TileWidth;
               if (result &lt; testArea.Left + testArea.Width)
                  return result;
               else
                  return int.MinValue;
            }
         }
      }
      return int.MinValue;
   }

   public int GetRightSolidPixel(Rectangle testArea, Solidity solid)
   {
      int topTile = (testArea.Top + m_Tileset.TileHeight) / m_Tileset.TileHeight - 1;
      int bottomTile = (int)((testArea.Top + testArea.Height - 1) / m_Tileset.TileHeight);
      int leftTile = (testArea.Left + m_Tileset.TileHeight) / m_Tileset.TileWidth - 1;
      int rightTile = (int)((testArea.Left + testArea.Width - 1) / m_Tileset.TileWidth);
      bool outOfBounds = false;
      if ((topTile &lt; 0) || (topTile &gt;= Rows) || (bottomTile &lt; 0) || (bottomTile &gt;= Rows)
         || (leftTile &lt; 0) || (leftTile &gt;= Columns) || (rightTile &lt; 0) || (rightTile &gt;= Columns))
         outOfBounds = true;
      short maxTileRight = (short)((testArea.Left+testArea.Width-1) % m_Tileset.TileWidth);
      int tileTop = topTile * m_Tileset.TileHeight;
      for (int x = rightTile; x &gt;= leftTile; x--)
      {
         if (bottomTile == topTile)
         {
            short rightMost;
            if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= Rows) || (x &lt; 0) || (x &gt;= Columns)))
               rightMost = (short)(m_Tileset.TileWidth - 1);
            else
               rightMost = solid.GetCurrentTileShape(m_Tileset[this[x,topTile]]).GetRightSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Top - tileTop),
                  (short)(testArea.Top + testArea.Height - 1 - tileTop));
            if ((rightMost != short.MinValue) &amp;&amp; ((x &lt; rightTile) || (rightMost &lt;= maxTileRight)))
            {
               int result = rightMost + x * m_Tileset.TileWidth;
               if (result &gt;= testArea.Left)
                  return result;
               else
                  return int.MinValue;
            }
         }
         else
         {
            short rightMost;
            if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= Rows) || (x &lt; 0) || (x &gt;= Columns)))
               rightMost = (short)(m_Tileset.TileWidth - 1);
            else
               rightMost = solid.GetCurrentTileShape(m_Tileset[this[x, topTile]]).GetRightSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Top - tileTop), (short)(m_Tileset.TileHeight - 1));
            if ((x == rightTile) &amp;&amp; (rightMost &gt; maxTileRight))
               rightMost = short.MinValue;
            short right;
            for (int y = topTile + 1; y &lt; bottomTile; y++)
            {
               if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= Columns) || (y &lt; 0) || (y &gt;= Rows)))
                  right = (short)(m_Tileset.TileWidth - 1);
               else
                  right = solid.GetCurrentTileShape(m_Tileset[this[x,y]]).GetRightSolidPixel(
                     m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)(m_Tileset.TileHeight - 1));
               if ((right &gt; rightMost) &amp;&amp; ((x &lt; rightTile) || (right &lt;= maxTileRight)))
                  rightMost = right;
            }
            if (outOfBounds &amp;&amp; ((bottomTile &lt; 0) || (bottomTile &gt;= Rows) || (x &lt; 0) || (x &gt;= Columns)))
               right = (short)(m_Tileset.TileWidth - 1);
            else
               right = solid.GetCurrentTileShape(m_Tileset[this[x, bottomTile]]).GetRightSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)((testArea.Top + testArea.Height - 1) % m_Tileset.TileHeight));
            if ((right &gt; rightMost) &amp;&amp; ((x &lt; rightTile) || (right &lt;= maxTileRight)))
               rightMost = right;
            if (rightMost != short.MinValue)
            {
               int result = rightMost + x * m_Tileset.TileWidth;
               if (result &gt;= testArea.Left)
                  return result;
               else
                  return int.MinValue;
            }
         }
      }
      return int.MinValue;
   }
   #endregion
}

[Serializable()]
public abstract class IntLayer : LayerBase
{
   public int[,] m_Tiles;

   public IntLayer(Tileset Tileset, MapBase Parent, int nLeftBuffer, int nTopBuffer, int nRightBuffer,
      int nBottomBuffer, int nColumns, int nRows, System.Drawing.Point Position,
      System.Drawing.SizeF ScrollRate, string Name) : 
      base(Tileset, Parent, nLeftBuffer, nTopBuffer, nRightBuffer,
      nBottomBuffer, nColumns, nRows, Position, ScrollRate)
   {
      System.Resources.ResourceManager resources = new System.Resources.ResourceManager(Parent.GetType());
      m_Tiles = (int[,])(resources.GetObject(Name));
   }

   public override int this[int x, int y]
   {
      get
      {
         return m_Tiles[x,y];
      }
      set
      {
         m_Tiles[x,y] = value;
      }
   }

   public override int[] GetTileFrame(int x, int y)
   {
      return m_Tileset[m_Tiles[x,y]].CurrentFrame;
   }

   public override TileBase GetTile(int x, int y)
   {
      return m_Tileset[m_Tiles[x,y]];
   }
}

[Serializable()]
public abstract class ShortLayer : LayerBase
{
   public short[,] m_Tiles;

   public ShortLayer(Tileset Tileset, MapBase Parent, int nLeftBuffer, int nTopBuffer, int nRightBuffer,
      int nBottomBuffer, int nColumns, int nRows, System.Drawing.Point Position,
      System.Drawing.SizeF ScrollRate, string Name) : 
      base(Tileset, Parent, nLeftBuffer, nTopBuffer, nRightBuffer,
      nBottomBuffer, nColumns, nRows, Position, ScrollRate)
   {
      System.Resources.ResourceManager resources = new System.Resources.ResourceManager(Parent.GetType());
      m_Tiles = (short[,])(resources.GetObject(Name));
   }

   public override int this[int x, int y]
   {
      get
      {
         return (int)(m_Tiles[x,y]);
      }
      set
      {
         m_Tiles[x,y] = (short)value;
      }
   }

   public override int[] GetTileFrame(int x, int y)
   {
      return m_Tileset[m_Tiles[x,y]].CurrentFrame;
   }

   public override TileBase GetTile(int x, int y)
   {
      return m_Tileset[m_Tiles[x,y]];
   }
}

[Serializable()]
public abstract class ByteLayer : LayerBase
{
   public byte[,] m_Tiles;

   public ByteLayer(Tileset Tileset, MapBase Parent, int nLeftBuffer, int nTopBuffer, int nRightBuffer,
      int nBottomBuffer, int nColumns, int nRows, System.Drawing.Point Position,
      System.Drawing.SizeF ScrollRate, string Name) : 
      base(Tileset, Parent, nLeftBuffer, nTopBuffer, nRightBuffer,
      nBottomBuffer, nColumns, nRows, Position, ScrollRate)
   {
      System.Resources.ResourceManager resources = new System.Resources.ResourceManager(Parent.GetType());
      m_Tiles = (byte[,])(resources.GetObject(Name));
   }

   public override int this[int x, int y]
   {
      get
      {
         return (int)(m_Tiles[x,y]);
      }
      set
      {
         m_Tiles[x,y] = (byte)value;
      }
   }

   public override int[] GetTileFrame(int x, int y)
   {
      return m_Tileset[m_Tiles[x,y]].CurrentFrame;
   }

   public override TileBase GetTile(int x, int y)
   {
      return m_Tileset[m_Tiles[x,y]];
   }
}</Text>
  </SourceCode>
  <SourceCode Name="TileCategoryMembership.cs" IsCustomObject="false">
    <Text>using System;

/// &lt;summary&gt;
/// Stores information about which categories a tile is in.
/// &lt;/summary&gt;
public abstract class TileCategoryMembershipBase
{
}

public class TileCategorySimpleMembership : TileCategoryMembershipBase
{
   private System.Collections.BitArray m_membership;

   public TileCategorySimpleMembership(params TileCategoryName[] membership)
   {
      m_membership = new System.Collections.BitArray((int)TileCategoryName.Count);
      foreach(TileCategoryName cat in membership)
         m_membership[(int)cat] = true;
   }

   public bool this[TileCategoryName category]
   {
      get
      {
         return m_membership[(int)category];
      }
   }
}

public class TileCategoryFrameMembership : TileCategoryMembershipBase
{
   private System.Collections.BitArray[] m_frames;
   public TileCategoryFrameMembership(int nFrameSequenceCount, params TileFrameMembership[] membership)
   {
      m_frames = new System.Collections.BitArray[nFrameSequenceCount];
      for (int i=0; i&lt;(int)nFrameSequenceCount; i++)
         m_frames[i] = new System.Collections.BitArray((int)TileCategoryName.Count);

      foreach(TileFrameMembership mbr in membership)
         for (int frameIdx = 0; frameIdx &lt; mbr.frames.Length; frameIdx++)
            m_frames[mbr.frames[frameIdx]][(int)mbr.category] = true;
   }

   public bool this[int nFrameSequenceIndex, TileCategoryName category]
   {
      get
      {
         return m_frames[nFrameSequenceIndex][(int)category];
      }
   }
}

public struct TileFrameMembership
{
   public TileCategoryName category;
   public int[] frames;

   public TileFrameMembership(TileCategoryName category, int[] frames)
   {
      this.frames = frames;
      this.category = category;
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="SpriteCollection.cs" IsCustomObject="false">
    <Text>using System;

/// &lt;summary&gt;
/// Categorizes / collects sprite instances
/// &lt;/summary&gt;
[Serializable()]
public class SpriteCollection : System.Collections.ReadOnlyCollectionBase
{
   public SpriteCollection(params SpriteBase[] sprites)
   {
      InnerList.AddRange(sprites);
   }

   public SpriteBase this[int index]
   {
      get
      {
         return (SpriteBase)InnerList[index];
      }
   }
}

public class ActiveSpriteEnumerator : System.Collections.IEnumerator
{
   private System.Collections.IEnumerator SpriteEnumerator;

   public ActiveSpriteEnumerator(SpriteCollection sprites)
   {
      SpriteEnumerator = sprites.GetEnumerator();
   }

   #region IEnumerator Members

   public void Reset()
   {
      SpriteEnumerator.Reset();
   }

   public object Current
   {
      get
      {
         return SpriteEnumerator.Current;
      }
   }

   public bool MoveNext()
   {
      bool result;
      while ((result = SpriteEnumerator.MoveNext()) &amp;&amp; (!((SpriteBase)Current).isActive))
         ;
      return result;
   }

   #endregion
}
</Text>
  </SourceCode>
  <SourceCode Name="GeneralRules.cs" IsCustomObject="false">
    <Text>using System;
using System.ComponentModel;
using System.Diagnostics;

/// &lt;summary&gt;
/// Implements rules common to sprites and plans
/// &lt;/summary&gt;
[Serializable()]
public abstract class GeneralRules
{
   private static SaveUnit saveUnit = null;
   private static System.Collections.Hashtable memorySaveSlots = new System.Collections.Hashtable();

   public abstract LayerBase ParentLayer
   {
      get;
   }

   [Description("Write a string to the debug output without moving to the next line"),
   System.Diagnostics.Conditional("DEBUG")]
   public void LogDebugLabel(string Label)
   {
      Project.GameWindow.debugText.Write(Label);
   }

   [Description("Write a number to the debug output and move to the next line"),
   System.Diagnostics.Conditional("DEBUG")]
   public void LogDebugValue(int DebugValue)
   {
      Project.GameWindow.debugText.WriteLine(DebugValue.ToString());
   }

   [Description("Sets a different map as the one to be drawn on the game display.  If UnloadCurrent is true, the current map will be unloaded first (which causes it to be recreated/reset when returning to it).")]
   public void SwitchToMap([Editor("MapType", "UITypeEditor")] Type MapType, bool UnloadCurrent)
   {
      System.Type source = Project.GameWindow.CurrentMap.GetType();
      if (UnloadCurrent)
         Project.GameWindow.UnloadMap(source);
      (Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(MapType)).m_CameFromMapType = source;
   }

   [Description("Return to the map that was active before the last SwitchToMap.  If UnloadCurrent is true, the current map will be unloaded first (which causes it to be recreated/reset when returning to it).")]
   public void ReturnToPreviousMap(bool UnloadCurrent)
   {
      System.Type source = Project.GameWindow.CurrentMap.m_CameFromMapType;
      if (source == null)
         return;
      if (UnloadCurrent)
         Project.GameWindow.UnloadMap(Project.GameWindow.CurrentMap.GetType());
      Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(source);
   }

   [Description("Determines if there is a previous map to return to.")]
   public bool CanReturnToPreviousMap()
   {
      return Project.GameWindow.CurrentMap.m_CameFromMapType != null;
   }

   [Description("Unloads the specified map, which will force it to be recreated/reset next time it is used.")]
   public void UnloadMap([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      Project.GameWindow.UnloadMap(MapType);
   }

   [Description("Includes a specified set of objects in the SaveUnit that will be saved with the next call to a Save function")]
   public void IncludeInSaveUnit(SaveUnitInclusion Include)
   {
      if (saveUnit == null)
         saveUnit = new SaveUnit();

      switch(Include)
      {
         case SaveUnitInclusion.AllMaps:
            saveUnit.Maps = Project.GameWindow.LoadedMaps;
            saveUnit.AllMaps = true;
            break;
         case SaveUnitInclusion.AllCounters:
         {
            saveUnit.Counters = new System.Collections.ArrayList();
            System.Reflection.PropertyInfo[] counterProps = typeof(Counter).GetProperties(
               System.Reflection.BindingFlags.Public |
               System.Reflection.BindingFlags.GetProperty |
               System.Reflection.BindingFlags.Static);
            foreach(System.Reflection.PropertyInfo counterProp in counterProps)
               saveUnit.Counters.Add(new CounterRef((Counter)counterProp.GetValue(null, null)));
         }
            break;
         case SaveUnitInclusion.WhichMapIsCurrent:
            saveUnit.CurrentMapType = Project.GameWindow.CurrentMap.GetType();
            break;
         case SaveUnitInclusion.PlayerOptions:
            saveUnit.PlayerOptions = Project.GameWindow.Players;
            break;
      }
   }

   [Description("Include the specified counter in the SaveUnit that will be saved with the next call to a Save function")]
   public void IncludeCounterInSaveUnit(Counter Counter)
   {
      if (saveUnit == null)
      {
         saveUnit = new SaveUnit();
      }
      if (saveUnit.Counters == null)
      {
         saveUnit.Counters = new System.Collections.ArrayList();
         saveUnit.Counters.Add(new CounterRef(Counter));
         return;
      }
      foreach(CounterRef cr in saveUnit.Counters)
      {
         if (cr.instance == Counter)
            return;
      }
      saveUnit.Counters.Add(Counter);
   }

   [Description("Exclude the specified counter from the SaveUnit that will be saved with the next call to a Save function")]
   public void ExcludeCounterFromSaveUnit(Counter Counter)
   {
      if ((saveUnit == null) || (saveUnit.Counters == null))
         return;
      for(int i = 0; i &lt; saveUnit.Counters.Count; i++)
      {
         if (((CounterRef)(saveUnit.Counters[i])).instance == Counter)
         {
            saveUnit.Counters.RemoveAt(i);
            return;
         }
      }      
   }

   [Description("Include the specified map in the SaveUnit that will be saved with the next call to a Save function.")]
   public void IncludeMapInSaveUnit([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      if (Project.GameWindow.LoadedMaps.ContainsKey(MapType))
      {
         if (saveUnit == null)
            saveUnit = new SaveUnit();
         if (saveUnit.Maps == null)
            saveUnit.Maps = new System.Collections.Hashtable();
         saveUnit.Maps[MapType] = Project.GameWindow.LoadedMaps[MapType];
      }
   }

   [Description("Remove the specified map in from the SaveUnit that will be saved with the next call to a Save function.")]
   public void ExcludeMapFromSaveUnit([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      if ((saveUnit == null) || (saveUnit.Maps == null))
         return;
      if (saveUnit.Maps.ContainsKey(MapType))
         saveUnit.Maps.Remove(MapType);
   }

   [Description("Save the current SaveUnit into the specified save slot, and reset SaveUnit. If InMemory is true, no file will be created, otherwise the game is saved to a file.")]
   public void SaveGame(int Slot, bool InMemory)
   {
      System.IO.Stream stm;
      if (InMemory)
         stm = new System.IO.MemoryStream();
      else
         stm = new System.IO.FileStream(System.IO.Path.Combine(
            System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"),
            System.IO.FileMode.Create, System.IO.FileAccess.Write);
      using(stm)
      {
         if (saveUnit == null)
         {
            IncludeInSaveUnit(SaveUnitInclusion.AllMaps);
            IncludeInSaveUnit(SaveUnitInclusion.AllCounters);
            IncludeInSaveUnit(SaveUnitInclusion.WhichMapIsCurrent);
            IncludeInSaveUnit(SaveUnitInclusion.PlayerOptions);
         }
         System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
         bf.Serialize(stm, saveUnit);
         if (InMemory)
            memorySaveSlots[Slot] = ((System.IO.MemoryStream)stm).ToArray();
         saveUnit = null;
      }
   }

   [Description("Restore the state of the objects contained in the specified save slot. If InMemory is true, the memory slot is used, otherwise the file associated with the slot is loaded.")]
   public void LoadGame(int Slot, bool InMemory)
   {
      System.IO.Stream stm;

      if (InMemory)
         stm = new System.IO.MemoryStream((byte[])memorySaveSlots[Slot], false);
      else
         stm = new System.IO.FileStream(System.IO.Path.Combine(
            System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"),
            System.IO.FileMode.Open, System.IO.FileAccess.Read);

      using(stm)
      {
         System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
         SaveUnit unit = (SaveUnit)bf.Deserialize(stm);
         if (unit.Maps != null)
         {
            if (unit.AllMaps)
               Project.GameWindow.LoadedMaps = unit.Maps;
            else
               foreach(System.Collections.DictionaryEntry de in unit.Maps)
                  Project.GameWindow.LoadedMaps[de.Key] = de.Value;
         }
         if (unit.CurrentMapType != null)
            Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(unit.CurrentMapType);
         else
            Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(Project.GameWindow.CurrentMap.GetType());
         if (unit.PlayerOptions != null)
            Project.GameWindow.Players = unit.PlayerOptions;
         // Counters auto-magically take care of themselves via CounterRef
      }
   }

   [Description("Determines if saved game data exists in the specified slot.  Checks for the existence of a file if InMemory is false.")]
   public bool SaveExists(int Slot, bool InMemory)
   {
      if (InMemory)
         return memorySaveSlots.ContainsKey(Slot);
      return System.IO.File.Exists(System.IO.Path.Combine(
         System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"));
   }

   [Description("Empties the specified save slot.  If InMemory is false, a file is deleted, otherwise a memory slot is cleared.")]
   public void DeleteSave(int Slot, bool InMemory)
   {
      if (InMemory)
         memorySaveSlots.Remove(Slot);
      else
         System.IO.File.Delete(System.IO.Path.Combine(
            System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"));
   }

   [Browsable(false)]
   public int CurrentView
   {
      get
      {
         return ParentLayer.ParentMap.CurrentViewIndex;
      }
      set
      {
         ParentLayer.ParentMap.CurrentViewIndex = (byte)value;
      }
   }

   [Description("Sets the layout of multiple views for the current map.")]
   public void SetViewLayout(ViewLayout Layout)
   {
      ParentLayer.ParentMap.ViewLayout = Layout;
   }

   [Description("Sets the current state of a sprite based on a category and index into the category.")]
   public void SetCategorySpriteState(SpriteCollection Category, int SpriteIndex, int State)
   {
      Debug.Assert(Category[SpriteIndex].isActive, "SetCategorySpriteState attempted to set the state of an inactive sprite.");
      Category[SpriteIndex].state = State;
   }

   [Description("Turn off the overlay map.  This disables all drawing and rules in the overlay map")]
   public void ClearOverlay()
   {
      Project.GameWindow.OverlayMap = null;
   }

   [Description("Set the overlay map.")]
   public void SetOverlay([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      Project.GameWindow.OverlayMap = Project.GameWindow.GetMap(MapType);
   }

   [Description("Turn on or off a flag associated with the current map.  FlagIndex must be a value from 0 through 30.")]
   public void SetMapFlag(int FlagIndex, bool Value)
   {
      if (Value)
         ParentLayer.ParentMap.MapFlags |= 1 &lt;&lt; FlagIndex;
      else
         ParentLayer.ParentMap.MapFlags &amp;= ~(1 &lt;&lt; FlagIndex);
   }

   [Description("Turn on or off a flag associated with the specified map.  FlagIndex must be a value from 0 through 30.")]
   public void SetTargetMapFlag([Editor("MapType", "UITypeEditor")] Type MapType, int FlagIndex, bool Value)
   {
      if (Value)
         Project.GameWindow.GetMap(MapType).MapFlags |= 1 &lt;&lt; FlagIndex;
      else
         Project.GameWindow.GetMap(MapType).MapFlags &amp;= ~(1 &lt;&lt; FlagIndex);
   }

   [Description("Determine if the specified map-specific flag on the current map is on.")]
   public bool IsMapFlagOn(int FlagIndex)
   {
      return ((ParentLayer.ParentMap.MapFlags &amp; (1&lt;&lt;FlagIndex)) != 0);
   }

   [Description("Unload all maps that aren't currently visible (as the current map or overlay map).")]
   public void UnloadBackgroundMaps()
   {
      Project.GameWindow.UnloadBackgroundMaps();
   }

   [Description("Quit the game by closing the main window.")]
   public void QuitGame()
   {
      Project.GameWindow.Quit();
   }

   [Description("Returns true if the specified key is currently pressed")]
   public bool IsKeyPressed(Microsoft.DirectX.DirectInput.Key key)
   {
      return Project.GameWindow.KeyboardState[key];
   }
}

public enum SaveUnitInclusion
{
   AllMaps,
   AllCounters,
   WhichMapIsCurrent,
   PlayerOptions
}

public enum ViewLayout
{
   Single,
   LeftRight,
   TopBottom,
   FourCorners
}

[Serializable()]
public class SaveUnit
{
   public SaveUnit()
   {
   }
   public bool AllMaps = false;
   public System.Collections.Hashtable Maps = null;
   public System.Type CurrentMapType = null;
   public System.Collections.ArrayList Counters = null;
   public IPlayer[] PlayerOptions = null;
}

[Serializable()]
public class CounterRef : System.Runtime.Serialization.ISerializable
{
   public string counterName;
   public Counter instance;

   public CounterRef(Counter counter)
   {
      instance = counter;
      System.Reflection.PropertyInfo[] counterProps = typeof(Counter).GetProperties(
         System.Reflection.BindingFlags.Public |
         System.Reflection.BindingFlags.GetProperty |
         System.Reflection.BindingFlags.Static);
      foreach(System.Reflection.PropertyInfo counterProp in counterProps)
      {
         Counter inst = (Counter)counterProp.GetValue(null, null);
         if (inst == counter)
         {
            counterName = counterProp.Name;
            break;
         }
      }
   }

   private CounterRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      counterName = info.GetString("CounterName");
      instance = (Counter)(typeof(Counter).GetProperty(counterName,
         System.Reflection.BindingFlags.Public |
         System.Reflection.BindingFlags.GetProperty |
         System.Reflection.BindingFlags.Static).GetValue(null, null));
      instance.CurrentValue = info.GetInt32("CounterValue");
   }

   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      info.AddValue("CounterName", counterName);
      info.AddValue("CounterValue", instance.CurrentValue);
   }
}

public enum RelativePosition
{
   TopLeft,
   TopCenter,
   TopRight,
   LeftMiddle,
   CenterMiddle,
   RightMiddle,
   BottomLeft,
   BottomCenter,
   BottomRight
}</Text>
  </SourceCode>
  <SourceCode Name="SpriteBase.cs" IsCustomObject="false">
    <Text>using System;
using System.ComponentModel;
using System.Diagnostics;

/// &lt;summary&gt;
/// Base class for all sprite definitions.
/// &lt;/summary&gt;
[Serializable()]
public abstract class SpriteBase : GeneralRules
{
   public double x;
   public double y;
   public double dx;
   public double dy;
   public double oldX;
   public double oldY;
   public int state;
   public int frame;
   public InputBits inputs;
   public InputBits oldinputs;
   public bool isActive;
   private LayerBase layer;
   private Solidity m_solidity;
   public int color;

   /// &lt;summary&gt;
   /// Horizontal velocity relative to the sprite's environment (like a platform)
   /// &lt;/summary&gt;
   public double LocalDX;
   /// &lt;summary&gt;
   /// Vertical velocity relative to the sprite's environment
   /// &lt;/summary&gt;
   public double LocalDY;

   [FlagsAttribute()]
   public enum InputBits
   {
      Up=1,
      Right=2,
      Down=4,
      Left=8,
      Button1=16,
      Button2=32,
      Button3=64,
      Button4=128
   }

   public enum Direction
   {
      Up,
      Right,
      Down,
      Left
   }

   public enum SpriteAnimationType
   {
      ByFrame,
      ByHorizontalVelocity,
      ByVerticalVelocity,
      ByVectorVelocity
   }

   public enum Axis
   {
      Horizontal,
      Vertical
   }

   public SpriteBase(LayerBase layer, double x, double y, double dx, double dy, int state, int frame, bool active, Solidity solidity, int color)
   {
      this.layer = layer;
      this.x = this.oldX = x;
      this.y = this.oldY = y;
      this.dx = dx;
      this.dy = dy;
      this.state = state;
      this.frame = frame;
      this.isActive = active;
      this.m_solidity = solidity;
      this.color = color;
      this.LocalDX = double.NaN;
      this.LocalDY = double.NaN;
   }

   #region Properties
   public int PixelX
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access PixelX on an inactive sprite");
         return (int)x;
      }
   }

   public int PixelY
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access PixelY on an inactive sprite");
         return (int)y;
      }
   }

   public int ProposedPixelX
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access ProposedPixelX on an inactive sprite");
         return (int)(x+dx);
      }
   }

   public int ProposedPixelY
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access ProposedPixelY on an inactive sprite");
         return (int)(y+dy);
      }
   }

   public int OldPixelX
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access OldPixelX on an inactive sprite");
         return (int)oldX;
      }
   }

   public int OldPixelY
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access OldPixelY on an inactive sprite");
         return (int)oldY;
      }
   }

   public SpriteState CurrentState
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access CurrentState on an inactive sprite");
         return this[state];
      }
   }

   public override LayerBase ParentLayer
   {
      get
      {
         return layer;
      }
   }
   #endregion

   #region Virtual members
   /// &lt;summary&gt;
   /// How many pixels wide is the area of this sprite that avoids overlapping
   /// solid areas of the map.  The width is measured from the origin and
   /// extends rightward.
   /// &lt;/summary&gt;
   public abstract int SolidWidth
   {
      [Description("Returns the width of the sprite's solid area")]
      get;
   }

   /// &lt;summary&gt;
   /// How many pixels high is the area of this sprite that avoids overlapping
   /// solid areas of the map.  The height is measured from the origin and
   /// extends downward.
   /// &lt;/summary&gt;
   public abstract int SolidHeight
   {
      [Description("Returns the height of the sprite's solid area")]
      get;
   }

   public abstract SpriteState this[int state]
   {
      get;
   }

   protected abstract void ExecuteRules();

   public abstract void ClearParameters();

   #endregion

   #region Public Methods
   public System.Drawing.Rectangle GetBounds()
   {
      Debug.Assert(this.isActive, "Attempted to execute GetBounds on an inactive sprite");
      System.Drawing.Rectangle result = CurrentState.LocalBounds;
      result.Offset(PixelX, PixelY);
      return result;
   }

   public Frame[] GetCurrentFramesetFrames()
   {
      Debug.Assert(this.isActive, "Attempted to execute GetCurrentFramesetFrames on an inactive sprite");
      SpriteState curstate = CurrentState;
      Frameset stateframes = curstate.Frameset;
      int[] subframes = curstate.GetFrame(frame);
      Frame[] result = new Frame[subframes.Length];
      for(int idx = 0; idx &lt; result.Length; idx++)
         result[idx] = stateframes[subframes[idx]];
      return result;
   }

   /// &lt;summary&gt;
   /// Execute the rules for this sprite if they have not already been executed this frame
   /// &lt;/summary&gt;
   public void ProcessRules()
   {
      if (!Processed)
         ExecuteRules();
      Processed = true;
   }

   #endregion

   #region Rider Feature
   /// &lt;summary&gt;
   /// Stores the platform sprite (the sprite that this sprite rides on).
   /// If not set, then the sprite is not riding anything.
   /// &lt;/summary&gt;
   public SpriteBase RidingOn;
   /// &lt;summary&gt;
   /// Determines if this sprite's definition's rules have been processed yet this frame
   /// &lt;/summary&gt;
   [NonSerialized()]
   public bool Processed;

   /// &lt;summary&gt;
   /// Adjust this sprite's velocity according to the motion of the platform it is riding
   /// &lt;/summary&gt;
   [Description("Moves this sprite according to the motion of the platform it is riding. Slipperiness is a value from 0 to 100 where 0 causes the sprite to immediately assume the velocity of the platform and 100 causes the sprite to retain its own velocity relative to the map.")]
   public void ReactToPlatform()
   {
      Debug.Assert(this.isActive, "Attempted to execute ReactToPlatform on an inactive sprite");
      if (RidingOn == null)
         return;

      // Don't try to process the platform's rules if it's already moved.
      // Even though this is already being checked in ProcessRules, circular
      // references (which shouldn't exist) would lead to deadlock.
      if (!RidingOn.Processed)
         // Ensure that the sprite that this sprite is riding moves first
         RidingOn.ProcessRules();

      if ((x+SolidWidth &lt; RidingOn.oldX) || (x &gt; RidingOn.oldX+RidingOn.SolidWidth) ||
         (y+SolidHeight &lt; RidingOn.oldY - 1) || (y+SolidHeight &gt;= RidingOn.oldY+SolidHeight))
      {
         StopRiding();
         return;
      }

      if (double.IsNaN(LocalDX))
         Debug.Fail("LocalDX is not a number");
      else
         dx = LocalDX + RidingOn.dx;
      dy = RidingOn.y - SolidHeight - y;
   }

   /// &lt;summary&gt;
   /// Determine if the sprite is riding another sprite
   /// &lt;/summary&gt;
   /// &lt;returns&gt;True if this sprite is currently riding on another sprite&lt;/returns&gt;
   [Description("Determine if the sprite is riding another sprite")]
   public bool IsRidingPlatform()
   {
      Debug.Assert(this.isActive, "Attempted to execute IsRidingPlatform on an inactive sprite");
      return RidingOn != null;
   }

   /// &lt;summary&gt;
   /// Stop riding the sprite that this sprite is currently riding, if any.
   /// &lt;/summary&gt;
   [Description("Stop riding the sprite that this sprite is currently riding, if any.")]
   public void StopRiding()
   {
      Debug.Assert(this.isActive, "Attempted to execute StopRiding on an inactive sprite");
      LocalDX = double.NaN;
      RidingOn = null;
   }

   /// &lt;summary&gt;
   /// Tests to see if this sprite is landing on a platform (from above).
   /// If it is, the sprite will begin riding the platform.
   /// This should be called after sprites are moved, but before
   /// they are drawn.
   /// &lt;/summary&gt;
   /// &lt;param name="PlatformList"&gt;List of platform sprites to check&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite landed on a platform, False if it is already riding a platform or doesn't need to&lt;/returns&gt;
   [Description("Tests to see if this sprite is landing on a platform (from above). If it is, the sprite will begin riding the platform.")]
   public bool LandDownOnPlatform(SpriteCollection PlatformList)
   {
      Debug.Assert(this.isActive, "Attempted to execute LandDownOnPlatform on an inactive sprite");
      if (RidingOn != null)
         return false;
      foreach(SpriteBase spr in PlatformList)
      {
         if (!spr.isActive)
            continue;
         if((oldY + SolidHeight &lt;= spr.oldY) &amp;&amp;
            (y + SolidHeight &gt; spr.y) &amp;&amp;
            (x + SolidWidth &gt; spr.x) &amp;&amp;
            (x &lt; spr.x + spr.SolidWidth))
         {
            RidingOn = spr;
            spr.ProcessRules();
            LocalDX = dx - spr.dx;
            dy = spr.y - SolidHeight - y;
            return true;
         }
      }
      return false;
   }
   #endregion

   #region Movement
   /// &lt;summary&gt;
   /// Increment or decrement horizontal velocity 
   /// &lt;/summary&gt;
   /// &lt;param name="delta"&gt;Amount by which to change velocity in pixels per frame per frame&lt;/param&gt;
   [Description("Increment or decrement horizontal velocity")]
   public void AlterXVelocity(double delta)
   {
      Debug.Assert(this.isActive, "Attempted to execute AlterXVelocity on an inactive sprite");
      dx += delta;
   }

   /// &lt;summary&gt;
   /// Increment or decrement vertical velocity 
   /// &lt;/summary&gt;
   /// &lt;param name="delta"&gt;Amount by which to change velocity in pixels per frame per frame&lt;/param&gt;
   [Description("Increment or decrement vertical velocity")]
   public void AlterYVelocity(double delta)
   {
      Debug.Assert(this.isActive, "Attempted to execute AlterYVelocity on an inactive sprite");
      dy += delta;
   }

   /// &lt;summary&gt;
   /// Move this sprite according to its current velocity
   /// &lt;/summary&gt;
   [Description("Move this sprite according to its current velocity")]
   public void MoveByVelocity()
   {
      Debug.Assert(this.isActive, "Attempted to execute MoveByVelocity on an inactive sprite");
      oldX = x;
      oldY = y;
      x += dx;
      y += dy;
   }

   [Description("Limit the velocity of the sprite to the specified maximum pixels per frame (affects only to local velocity when applicable)")]
   public void LimitVelocity(int Maximum)
   {
      Debug.Assert(this.isActive, "Attempted to execute LimitVelocity on an inactive sprite");
      double useDX, useDY;
      if (double.IsNaN(LocalDX))
         useDX = dx;
      else
         useDX = LocalDX;
      if (double.IsNaN(LocalDY))
         useDY = dy;
      else
         useDY = LocalDY;
      double dist = useDX * useDX + useDY * useDY;
      if (dist &gt; Maximum * Maximum)
      {
         dist = Math.Sqrt(dist);
         useDX = useDX * Maximum / dist;
         useDY = useDY * Maximum / dist;
         if (double.IsNaN(LocalDX))
            dx = useDX;
         else
            LocalDX = useDX;
         if (double.IsNaN(LocalDY))
            dy = useDY;
         else
            LocalDY = useDY;
      }
   }

   [Description("Reduces the sprites velocity to simulate friction.  RetainPercent is a number 0 to 100 indicating how much inertia is retained.")]
   public void ReactToInertia(int RetainPercentVertical, int RetainPercentHorizontal)
   {
      Debug.Assert(this.isActive, "Attempted to execute ReactToInertia on an inactive sprite");
      if (double.IsNaN(LocalDX))
      {
         if (Math.Abs(dx) &lt; .01)
            dx = 0;
         else
            dx *= RetainPercentHorizontal / 100.0f;
      }
      else
      {
         if (Math.Abs(LocalDX) &lt; .01)
            LocalDX = 0;
         else
            LocalDX *= RetainPercentHorizontal / 100.0f;
      }
      if (double.IsNaN(LocalDY))
      {
         if (Math.Abs(dy) &lt; .01)
            dy = 0;
         else
            dy *= RetainPercentVertical / 100.0f;
      }
      else
      {
         if (Math.Abs(LocalDY) &lt; .01)
            LocalDY = 0;
         else
            LocalDY *= RetainPercentVertical / 100.0f;
      }
   }

   [Description("Returns true if the sprite is moving in the specified direction")]
   public bool IsMoving(Direction Direction)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsMoving on an inactive sprite");
      double useDX, useDY;
      if (double.IsNaN(LocalDX))
         useDX = dx;
      else
         useDX = LocalDX;
      if (double.IsNaN(LocalDY))
         useDY = dy;
      else
         useDY = LocalDY;

      switch(Direction)
      {
         case Direction.Left:
            return useDX &lt; 0;
         case Direction.Right:
            return useDX &gt; 0;
         case Direction.Up:
            return useDY &lt; 0;
         case Direction.Down:
            return useDY &gt; 0;
      }
      return false;
   }

   [Description("Accelerate the sprite in a direction determined by its state, assuming the first state points rightward and the number of states rotate counterclockwise 360 degrees. Acceleration is in tenths of a pixel per frame per frame.")]
   public void PolarAccelerate(int Acceleration, [Editor("SpriteState", "UITypeEditor")] int FirstState, int StateCount)
   {
      Debug.Assert(this.isActive, "Attempted to execute PolarAccelerate on an inactive sprite");
      double angle = (state - FirstState) * Math.PI * 2 / (double)StateCount;
      double ddx = Math.Cos(angle) * Acceleration / 10.0d;
      double ddy = -Math.Sin(angle) * Acceleration / 10.0d;
      if (double.IsNaN(LocalDY))
         dy += ddy;
      else
         LocalDY += ddy;

      if (double.IsNaN(LocalDX))
         dx += ddx;
      else
         LocalDX += ddx;
   }
   
   [Description("Redirect this sprite's velocity to be 100% in the direction that it is facing, based on its state, where FirstState points rightward and the number of states rotate counterclockwise.")]
   public void RotateVelocity([Editor("SpriteState", "UITypeEditor")] int FirstState, int StateCount)
   {
      Debug.Assert(this.isActive, "Attepmted to execute RotateVelocity on an inactive sprite");
      Microsoft.DirectX.Vector2 oldVector;
      if (double.IsNaN(LocalDX))
         oldVector.X = (float)dx;
      else
         oldVector.X = (float)LocalDX;
      if (double.IsNaN(LocalDY))
         oldVector.Y = (float)dy;
      else
         oldVector.Y = (float)LocalDY;

      float angle = (float)((state - FirstState) * Math.PI * 2 / (float)StateCount);

      Microsoft.DirectX.Vector2 facingVector;
      facingVector.X = (float)Math.Cos(angle);
      facingVector.Y = -(float)Math.Sin(angle);
      facingVector.Multiply(Microsoft.DirectX.Vector2.Dot(oldVector, facingVector));

      if (double.IsNaN(LocalDX))
         dx = facingVector.X;
      else
         LocalDX = facingVector.X;

      if (double.IsNaN(LocalDY))
         dy = facingVector.Y;
      else
         LocalDY = facingVector.Y;
   }

   [Description("Scroll all layers on this sprite's layer's map so that the sprite is within visible area of the map.  If UseScrollMargins is true, scroll the sprite into the scroll margins of the map.")]
   public void ScrollSpriteIntoView(bool UseScrollMargins)
   {
      ParentLayer.ScrollSpriteIntoView(this, UseScrollMargins);
   }

   [Description("Alter this sprite's velocity so that it remains within the map's visible area or within the scroll margins, according to this sprite's layer's position within the map.")]
   public void PushSpriteIntoView(bool StayInScrollMargins)
   {
      ParentLayer.PushSpriteIntoView(this, StayInScrollMargins);
   }
   #endregion

   #region States and animation
   [Description("Advance the animation frame of this sprite according to its velocity or a constant rate")]
   public void Animate(SpriteAnimationType Correlation)
   {
      Debug.Assert(this.isActive, "Attempted to execute Animate on an inactive sprite");
      switch(Correlation)
      {
         case SpriteAnimationType.ByFrame:
            frame++;
            break;
         case SpriteAnimationType.ByHorizontalVelocity:
            if (double.IsNaN(LocalDX))
               frame += System.Math.Abs(ProposedPixelX - PixelX);
            else
               frame += System.Math.Abs((int)LocalDX);
            break;
         case SpriteAnimationType.ByVerticalVelocity:
            if (double.IsNaN(LocalDY))
               frame += System.Math.Abs(ProposedPixelY - PixelY);
            else
               frame += System.Math.Abs((int)LocalDY);
            break;
         case SpriteAnimationType.ByVectorVelocity:
         {
            int tmpDx = ProposedPixelX - PixelX;
            int tmpDy = ProposedPixelY - PixelY;
            frame += (int)(System.Math.Sqrt(tmpDx * tmpDx + tmpDy * tmpDy));
         }
            break;
      }
   }

   [Description("Return the state that a rotating sprite should use in order to point in the direction it is currently travelling, assuming that FirstState points rightward and each subsequent state is one step counter-clockwise")]
   public int GetPolarStateByVector([Editor("SpriteState", "UITypeEditor")] int FirstState, int StateCount)
   {
      double useDX, useDY;
      Debug.Assert(this.isActive, "Attempted to execute GetPolarStateByVector on an inactive sprite");
      if (double.IsNaN(LocalDX))
         useDX = dx;
      else
         useDX = LocalDX;
      if (double.IsNaN(LocalDY))
         useDY = dy;
      else
         useDY = LocalDY;
      return FirstState + ((StateCount + (int)Math.Round(System.Math.Atan2(-useDY,useDX) * StateCount / Math.PI / 2f)) % StateCount);
   }

   [Description("Switch the sprite to the the specified state, ensuring that the specified alignment point in the new state lines up with the same point in the current state.  Returns false if the state could not switch due to solidity.")]
   public bool SwitchToState([Editor("SpriteState", "UITypeEditor")] int State, RelativePosition Alignment)
   {
      Debug.Assert(this.isActive, "Attempted to execute SwitchToState on an inactive sprite");
      System.Drawing.Rectangle oldRect = new System.Drawing.Rectangle(PixelX, PixelY, SolidWidth, SolidHeight);
      int newWidth = this[State].SolidWidth;
      int newHeight = this[State].SolidHeight;
      double newX, newY;
      switch(Alignment)
      {
         case RelativePosition.TopCenter:
         case RelativePosition.CenterMiddle:
         case RelativePosition.BottomCenter:
            newX = x + (oldRect.Width - newWidth) / 2f;
            break;
         case RelativePosition.TopRight:
         case RelativePosition.RightMiddle:
         case RelativePosition.BottomRight:
            newX = x + oldRect.Width - newWidth;
            break;
         default:
            newX = x;
            break;
      }
      switch(Alignment)
      {
         case RelativePosition.LeftMiddle:
         case RelativePosition.CenterMiddle:
         case RelativePosition.RightMiddle:
            newY = y + (oldRect.Height - newHeight) / 2f;
            break;
         case RelativePosition.BottomLeft:
         case RelativePosition.BottomCenter:
         case RelativePosition.BottomRight:
            newY = y + oldRect.Height - newHeight;
            break;
         default:
            newY = y;
            break;
      }

      if (((int)Math.Ceiling(newY + newHeight) &gt; oldRect.Bottom) &amp;&amp; (layer.GetTopSolidPixel(new System.Drawing.Rectangle(
         (int)newX, oldRect.Bottom, newWidth, (int)Math.Ceiling(newY) + newHeight - oldRect.Bottom), m_solidity) != int.MinValue))
         return false;

      if (((int)newY &lt; oldRect.Top) &amp;&amp; (layer.GetBottomSolidPixel(new System.Drawing.Rectangle(
         (int)newX, (int)newY, newWidth, oldRect.Top - (int)newY), m_solidity) != int.MinValue))
         return false;

      if (((int)newX &lt; oldRect.Left) &amp;&amp; (layer.GetRightSolidPixel(new System.Drawing.Rectangle(
         (int)newX, (int)newY, oldRect.Left - (int)newX, newHeight), m_solidity) != int.MinValue))
         return false;

      if (((int)Math.Ceiling(newX + newWidth) &gt; oldRect.Right) &amp;&amp; (layer.GetLeftSolidPixel(new System.Drawing.Rectangle(
         oldRect.Right, (int)newY, (int)Math.Ceiling(newX) + newWidth - oldRect.Right, newHeight), m_solidity) != int.MinValue))
         return false;

      x = newX;
      y = newY;
      state = State;
      return true;
   }

   [Description("Determines if the sprite is in the specified range of states")]
   public bool IsInState([Editor("SpriteState", "UITypeEditor")] int FirstState, [Editor("SpriteState", "UITypeEditor")] int LastState)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsInState on an inactive sprite");
      return (state &lt;= FirstState) &amp;&amp; (state &gt;= LastState);
   }

   public int ModulateAlpha
   {
      get
      {
         return color &gt;&gt; 24;
      }
      set
      {
         color = color &amp; 0x00FFFFFF | (byte)(value%256) &lt;&lt; 24;
      }
   }

   public int ModulateRed
   {
      get
      {
         return (color &amp; 0x00FF0000) &gt;&gt; 16;
      }
      set
      {
         color = (int)(color &amp; 0xFF00FFFF) | (byte)(value%256) &lt;&lt; 16;
      }
   }

   public int ModulateGreen
   {
      get
      {
         return (color &amp; 0x0000FF00) &gt;&gt; 8;
      }
      set
      {
         color = (int)(color &amp; 0xFFFF00FF) | (byte)(value%256) &lt;&lt; 8;
      }
   }

   public int ModulateBlue
   {
      get
      {
         return color &amp; 0xFF;
      }
      set
      {
         color = (int)(color &amp; 0xFFFFFF00) | (byte)(value%256);
      }
   }
   #endregion

   #region Input Processing
   [Description("Determine if the specified input is being pressed for this sprite.  InitialOnly causes this to return true only if the input has just been pressed and was not pressed before.")]
   public bool IsInputPressed(InputBits Input, bool InitialOnly)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsInputPressed on an inactive sprite");
      return (0 != (inputs &amp; Input)) &amp;&amp; 
         (!InitialOnly || (0 == (oldinputs &amp; Input)));
   }

   [Description("Turns on or off the specified input on this sprite.")]
   public void SetInputState(InputBits Input, bool Press)
   {
      Debug.Assert(this.isActive, "Attempted to execute SetInputState on an inactive sprite");
      if (Press)
         inputs |= Input;
      else
         inputs &amp;= ~Input;
   }

   [Description("Turns off all current inputs on this sprite.")]
   public void ClearInputs()
   {
      Debug.Assert(this.isActive, "Attempted to execute ClearInputs on an inactive sprite");
      inputs = 0;
   }

   [Description("Associates the state of the specified keyboard key with the specified input on this sprite.")]
   public void MapKeyToInput(Microsoft.DirectX.DirectInput.Key key, InputBits Input)
   {
      Debug.Assert(this.isActive, "Attempted to execute MapKeyToInput on an inactive sprite");
      SetInputState(Input, Project.GameWindow.KeyboardState[key]);
   }

   [Description("Associate the state of the input device for the specified player (1-4) with the inputs on this sprite.")]
   public void MapPlayerToInputs(int PlayerNumber)
   {
      Debug.Assert(this.isActive, "Attempted to execute MapPlayerToInput on an inactive sprite");
      if (PlayerNumber &gt; Project.MaxPlayers)
      {
         Debug.Fail("Attempted to map inactive player input");
         return;
      }
      IPlayer player = Project.GameWindow.Players[PlayerNumber-1];
      inputs = 0;
      if (player.Up) inputs |= InputBits.Up;
      if (player.Left) inputs |= InputBits.Left;
      if (player.Right) inputs |= InputBits.Right;
      if (player.Down) inputs |= InputBits.Down;
      if (player.Button1) inputs |= InputBits.Button1;
      if (player.Button2) inputs |= InputBits.Button2;
      if (player.Button3) inputs |= InputBits.Button3;
      if (player.Button4) inputs |= InputBits.Button4;
   }

   [Description("Accelerate this sprite according to which directional inputs are on.  Acceleration is in tenths of a pixel per second squared.  Max is in pixels per second.")]
   public void AccelerateByInputs(int Acceleration, int Max, bool HorizontalOnly)
   {
      Debug.Assert(this.isActive, "Attempted to execute AccelerateByInputs on an inactive sprite");
      if (!HorizontalOnly)
      {
         if (double.IsNaN(LocalDY))
         {
            if (0 != (inputs &amp; InputBits.Up))
               dy -= ((double)Acceleration)/10.0d;
            if (dy &lt; -(double)Max)
               dy = -(double)Max;
            if (0 != (inputs &amp; InputBits.Down))
               dy += ((double)Acceleration)/10.0d;
            if (dy &gt; (double)Max)
               dy = (double)Max;
         }
         else
         {
            if (0 != (inputs &amp; InputBits.Up))
               LocalDY -= ((double)Acceleration)/10.0d;
            if (LocalDY &lt; -(double)Max)
               LocalDY = -(double)Max;
            if (0 != (inputs &amp; InputBits.Down))
               LocalDY += ((double)Acceleration)/10.0d;
            if (LocalDY &gt; (double)Max)
               LocalDY = (double)Max;
         }
      }
      if (double.IsNaN(LocalDX))
      {
         if (0 != (inputs &amp; InputBits.Left))
            dx -= ((double)Acceleration)/10.0d;
         if (dx &lt; -(double)Max)
            dx = -(double)Max;
         if (0 != (inputs &amp; InputBits.Right))
            dx += ((double)Acceleration)/10.0d;
         if (dx &gt; (double)Max)
            dx = (double)Max;
      }
      else
      {
         if (0 != (inputs &amp; InputBits.Left))
            LocalDX -= ((double)Acceleration)/10.0d;
         if (LocalDX &lt; -(double)Max)
            LocalDX = -(double)Max;
         if (0 != (inputs &amp; InputBits.Right))
            LocalDX += ((double)Acceleration)/10.0d;
         if (LocalDX &gt; (double)Max)
            LocalDX = (double)Max;
      }
   }
   #endregion

   #region Solidity
   [Description("Set the solidity rules to which the sprite is currently reacting.")]
   public void SetSolidity(Solidity Solidity)
   {
      m_solidity = Solidity;
   }

   [Description("Alter the sprite's velocity to react to solid areas on the map.  Returns true if sprite touches solid.")]
   public bool ReactToSolid()
   {
      Debug.Assert(this.isActive, "Attempted to execute ReactToSolid on an inactive sprite");
      bool hit = false;
      double dyOrig = dy;

      int ProposedPixelY2 = (int)Math.Ceiling(y+dy);
      int SolidPixelWidth = SolidWidth + (int)Math.Ceiling(x) - PixelX;
      if (dy &gt; 0)
      {
         int ground = layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX, PixelY+SolidHeight, SolidPixelWidth, ProposedPixelY2 - PixelY), m_solidity);
         if (ground != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ground - SolidHeight - y;
            hit = true;
         }
      } 
      else if (dy &lt; 0)
      {
         int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX, ProposedPixelY, SolidPixelWidth, PixelY - ProposedPixelY), m_solidity);
         if (ceiling != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ceiling + 1 - y;
            hit = true;
         }
      }

      if (dx &gt; 0)
      {
         int ProposedPixelX2 = (int)Math.Ceiling(x+dx);
         int PixelX2 = (int)Math.Ceiling(x);
         int rightwall = layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, ProposedPixelY, ProposedPixelX2 - PixelX2, SolidHeight), m_solidity);
         bool hitWall = false;
         if (rightwall != int.MinValue)
         {
            int maxSlopeProposedY = (int)(y + dy - dx);
            int slopedFloor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, maxSlopeProposedY + SolidHeight, ProposedPixelX2 - PixelX2, ProposedPixelY - maxSlopeProposedY), m_solidity);
            if (slopedFloor != int.MinValue)
            {
               int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(ProposedPixelX2, slopedFloor - SolidHeight, SolidWidth, ProposedPixelY + SolidHeight - slopedFloor), m_solidity);
               if (ceiling == int.MinValue)
               {
                  int rightwall2 = layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, slopedFloor - SolidHeight, ProposedPixelX2 - PixelX2, SolidHeight), m_solidity);
                  if (rightwall2 == int.MinValue)
                     // Do integer arithmetic before double otherwise strange rounding seems to happen
                     dy = dyOrig = slopedFloor - SolidHeight - 1 - y;
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            else
            {
               maxSlopeProposedY = (int)(y + dy + dx);
               int slopedCeiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, ProposedPixelY, ProposedPixelX2 - PixelX2, maxSlopeProposedY - ProposedPixelY), m_solidity);
               if (slopedCeiling != int.MinValue)
               {
                  slopedCeiling++;
                  int floor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX2, ProposedPixelY + SolidHeight, SolidWidth, slopedCeiling - ProposedPixelY), m_solidity);
                  if (floor == int.MinValue)
                  {
                     int rightwall2 = layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, slopedCeiling, ProposedPixelX2 - PixelX2, SolidHeight), m_solidity);
                     if (rightwall2 == int.MinValue)
                        dy = dyOrig = slopedCeiling - y;
                     else
                        hitWall = true;
                  }
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            if (hitWall)
            {
               // Do integer arithmetic before double otherwise strange rounding seems to happen
               dx = rightwall - SolidWidth - x;
            }
            hit = true;
         }
      }
      else if (dx &lt; 0)
      {
         int leftwall = layer.GetRightSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY, PixelX - ProposedPixelX, SolidHeight), m_solidity);
         bool hitWall = false;
         if (leftwall != int.MinValue)
         {
            int maxSlopeProposedY = (int)(y + dy + dx);
            int slopedFloor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, maxSlopeProposedY + SolidHeight, PixelX - ProposedPixelX, ProposedPixelY - maxSlopeProposedY), m_solidity);
            if (slopedFloor != int.MinValue)
            {
               int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, slopedFloor - SolidHeight, SolidWidth, ProposedPixelY + SolidHeight - slopedFloor), m_solidity);
               if (ceiling == int.MinValue)
               {
                  int leftwall2 = layer.GetRightSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, slopedFloor - SolidHeight, PixelX - ProposedPixelX, SolidHeight), m_solidity);
                  if (leftwall2 == int.MinValue)
                     // Do integer arithmetic before double otherwise strange rounding seems to happen
                     dy = dyOrig = slopedFloor - SolidHeight - 1 - y;
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            else
            {
               maxSlopeProposedY = (int)(y + dy - dx);
               int slopedCeiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY, PixelX - ProposedPixelX, maxSlopeProposedY - ProposedPixelY), m_solidity);
               if (slopedCeiling != int.MinValue)
               {
                  slopedCeiling++;
                  int floor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY + SolidHeight, SolidWidth, slopedCeiling - ProposedPixelY), m_solidity);
                  if (floor == int.MinValue)
                  {
                     int leftwall2 = layer.GetRightSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, slopedCeiling, PixelX - ProposedPixelX, SolidHeight), m_solidity);
                     if (leftwall2 == int.MinValue)
                        dy = dyOrig = slopedCeiling - y;
                     else
                        hitWall = true;
                  }
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            if (hitWall)
            {
               // Do integer arithmetic before double otherwise strange rounding seems to happen
               dx = leftwall + 1 - x;
            }
            hit = true;
         }
      }

      dy = dyOrig;

      int ProposedSolidPixelWidth = SolidWidth + (int)Math.Ceiling(x+dx) - ProposedPixelX;
      if (dy &gt; 0)
      {
         ProposedPixelY2 = (int)Math.Ceiling(y+dy);
         int ground = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, PixelY+SolidHeight, ProposedSolidPixelWidth, ProposedPixelY2 - PixelY), m_solidity);
         if (ground != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ground - SolidHeight - y;
            hit = true;
         }
      }
      else if (dy &lt; 0)
      {
         int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY, ProposedSolidPixelWidth, PixelY - ProposedPixelY), m_solidity);
         if (ceiling != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ceiling + 1 - y;
            hit = true;
         }
      }

      return hit;
   }

   [Description("If the sprite's proposed position is within &lt;Threshhold&gt; pixels of the ground, alter its velocity so it will touch the ground.  Returns true if snap occurred.")]
   public bool SnapToGround(int Threshhold)
   {
      Debug.Assert(this.isActive, "Attempted to execute SnapToGround on an inactive sprite");

      int ProposedSolidPixelWidth = SolidWidth + (int)Math.Ceiling(x+dx) - ProposedPixelX;
      int ground = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY+SolidHeight, ProposedSolidPixelWidth, Threshhold), m_solidity);
      if (ground != int.MinValue)
      {
         // Do integer arithmetic before double otherwise strange rounding seems to happen
         double newDy = ground - SolidHeight - y;
         if (newDy &gt; dy)
            dy = newDy;
         return true;
      }
      return false;
   }

   [Description("Determines if the sprite is blocked from moving in a particular direction by solidity on the layer.")]
   public bool Blocked(Direction Direction)
   {
      Debug.Assert(this.isActive, "Attempted to execute Blocked on an inactive sprite");

      int SolidPixelWidth;
      int SolidPixelHeight;
      switch(Direction)
      {
         case Direction.Up:
            SolidPixelWidth = SolidWidth + (int)Math.Ceiling(x) - PixelX;
            return layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX, PixelY-1, SolidPixelWidth, 1), m_solidity) != int.MinValue;
         case Direction.Right:
            SolidPixelHeight = SolidHeight + (int)Math.Ceiling(y) - PixelY;
            return layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX+SolidWidth, PixelY, 1, SolidPixelHeight), m_solidity) != int.MinValue;
         case Direction.Down:
            SolidPixelWidth = SolidWidth + (int)Math.Ceiling(x) - PixelX;
            return layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX, PixelY+SolidHeight, SolidPixelWidth, 1), m_solidity) != int.MinValue;
         case Direction.Left:
            SolidPixelHeight = SolidHeight + (int)Math.Ceiling(y) - PixelY;
            return layer.GetRightSolidPixel(new System.Drawing.Rectangle(PixelX - 1, PixelY, 1, SolidPixelHeight), m_solidity) != int.MinValue;
      }
      return false;
   }

   #endregion

   #region Tile Interaction
   class TouchedTile
   {
      public int x;
      public int y;
      public int tileValue;
      public bool initial;
      public bool processed;

      public TouchedTile(int x, int y, int tileValue, bool initial)
      {
         this.x = x;
         this.y = y;
         this.tileValue = tileValue;
         this.initial = initial;
         processed = false;
      }
   }

   // Do not allocate appreciable memory unless this sprite
   // participates in tile interaction.
   [NonSerialized()]
   System.Collections.ArrayList TouchedTiles = null;

   [Description("Collects information about tiles the sprite is currently touching.  Category should include all tiles that the sprite interacts with.  Must be called before performing any tile interaction.")]
   public bool TouchTiles(TileCategoryName Category)
   {
      Debug.Assert(this.isActive, "Attempted to execute TouchTiles on an inactive sprite");
      
      if (TouchedTiles != null)
         TouchedTiles.Clear();

      int tw = layer.Tileset.TileWidth;
      int th = layer.Tileset.TileHeight;
      int minYEdge = (PixelY / th);
      int maxY = (PixelY + SolidHeight) / th;
      if (maxY &gt;= layer.Rows)
         maxY = layer.Rows -1;
      int maxYEdge = (PixelY + SolidHeight - 1) / th;
      int minX = (PixelX - 1)/ tw;
      int minXEdge = PixelX / tw;
      int maxX = (PixelX + SolidHeight) / tw;
      if (maxX &gt;= layer.Columns)
         maxX = layer.Columns - 1;
      int maxXEdge = (PixelX + SolidHeight - 1) / tw;
      for (int yidx = (PixelY - 1) / th; yidx &lt;= maxY; yidx++)
      {
         bool isYEdge = !((yidx &gt;= minYEdge) &amp;&amp; (yidx &lt;= maxYEdge));
         for (int xidx = (isYEdge ? minXEdge : minX);
            xidx &lt;= (isYEdge ? maxXEdge : maxX);
            xidx++)
         {
            if (layer.GetTile(xidx, yidx).IsMember(Category))
            {
               bool wasTouching;

               if ((OldPixelX &lt;= xidx * tw + tw) &amp;&amp;
                  (OldPixelX + SolidWidth &gt;= xidx * tw) &amp;&amp;
                  (OldPixelY &lt;= yidx * th + th) &amp;&amp;
                  (OldPixelY + SolidHeight &gt;= yidx * th))
               {
                  bool edgeX = (OldPixelX+SolidWidth == xidx * tw) || 
                     (OldPixelX == xidx * tw + tw);
                  bool edgeY = (OldPixelY+SolidHeight == yidx * th) ||
                     (OldPixelY == yidx * th + th);
                  if (edgeX &amp;&amp; edgeY)
                     wasTouching = false;
                  else
                     wasTouching = true;
               }
               else
                  wasTouching = false;
               
               if (TouchedTiles == null)
                  TouchedTiles = new System.Collections.ArrayList(10);
               TouchedTiles.Add(new TouchedTile(xidx, yidx, layer[xidx, yidx], !wasTouching));
            }
         }
      }
      if (TouchedTiles == null)
         return false;
      return TouchedTiles.Count &gt; 0;
   }

   [Description("When the sprite is touching the specified tile, and the specified counter is not maxed, clear the tile value to 0 and increment the specified counter/parameter. Returns the number of tiles affected. (Must run TouchTiles first.)")]
   public int TileTake(int TileValue,  Counter Counter)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileTake on an inactive sprite");

      if (TouchedTiles == null)
         return 0 ;

      int result = 0;

      for (int i=0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = (TouchedTile)TouchedTiles[i];
         if ((tt.tileValue == TileValue) &amp;&amp; (!tt.processed))
         {
            if (Counter.CurrentValue &lt; Counter.MaxValue)
            {
               Counter.CurrentValue++;
               layer[tt.x, tt.y] = tt.tileValue = 0;
               tt.processed = true;
               result++;
            }
         }
      }
      return result;
   }

   [Description("When the sprite is touching the specified tile, and the specified counter is greater than 0, decrement the counter and clear the tile value to 0. Returns the number of tiles affected. (Must run TouchTiles first.)")]
   public int TileUseUp(int TileValue,  Counter Counter)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileUseUp on an inactive sprite");

      if (TouchedTiles == null)
         return 0;

      int result = 0;

      for (int i=0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = (TouchedTile)TouchedTiles[i];
         if ((tt.tileValue == TileValue) &amp;&amp; (!tt.processed))
         {
            if (Counter.CurrentValue &gt; 0)
            {
               Counter.CurrentValue--;
               layer[tt.x, tt.y] = tt.tileValue = 0;
               tt.processed = true;
               result++;
            }
         }
      }
      return result;
   }

   [Description("Return the index of the next unprocessed tile with the specified value from the list of tiles the sprite is touching. If InitialOnly is set, only return tiles that the sprite wasn't already touching. Return -1 if no tiles are being touched. (Must run TouchTiles first.)")]
   public int TileTouchingIndex(int TileValue, bool InitialOnly, bool MarkAsProcessed)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileTouchingIndex on an inactive sprite");

      if (TouchedTiles == null)
         return -1;

      for (int i=0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = (TouchedTile)TouchedTiles[i];
         if ((tt.tileValue == TileValue) &amp;&amp; (!tt.processed) &amp;&amp; (!InitialOnly || tt.initial))
         {
            tt.processed = MarkAsProcessed;
            return i;
         }
      }
      
      return -1;
   }

   [Description("Activate the next inactive sprite from a category at the coordinates of a tile being touched by the player.  Use TileTouchingIndex to acquire TouchingIndex.  Returns the index into the category of the sprite that was activated, or -1 if all sprites in the category were already active.")]
   public int TileActivateSprite(int TouchingIndex, SpriteCollection Category, bool ClearParameters)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileActivateSprite on an inactive sprite");

      for(int i=0; i&lt;Category.Count; i++)
      {
         if (!Category[i].isActive)
         {
            Category[i].isActive = true;
            TouchedTile tt = (TouchedTile)TouchedTiles[TouchingIndex];
            Category[i].x = tt.x * layer.Tileset.TileWidth;
            Category[i].y = tt.y * layer.Tileset.TileHeight;
            if (ClearParameters)
            {
               Category[i].frame = 0;
               Category[i].state = 0;
               Category[i].ClearParameters();
            }
            Category[i].ProcessRules();
            return i;
         }
      }
      return -1;
   }

   [Description("Change the specified tile that the sprite is touching to another tile. Return the number of tiles affected. (Must run TouchTiles first.)")]
   public int TileChange(int OldTileValue, int NewTileValue, bool InitialOnly)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileChange on an inactive sprite");

      if (TouchedTiles == null)
         return 0;

      int result = 0;

      for (int i=0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = (TouchedTile)TouchedTiles[i];
         if ((tt.tileValue == OldTileValue) &amp;&amp; (!tt.processed) &amp;&amp; (!InitialOnly || tt.initial))
         {
            tt.processed = true;
            layer[tt.x, tt.y] = tt.tileValue = NewTileValue;
            result++;
         }
      }
      return result;
   }

   public System.Drawing.Point GetRelativePosition(RelativePosition RelativePosition)
   {
      System.Drawing.Point rp = new System.Drawing.Point(PixelX, PixelY);

      switch (RelativePosition)
      {
         case RelativePosition.TopCenter:
            rp.X = (int)(PixelX + SolidWidth / 2);
            break;
         case RelativePosition.TopRight:
            rp.X = PixelX + SolidWidth - 1;
            break;
         case RelativePosition.LeftMiddle:
            rp.Y = PixelY + (int)(SolidHeight / 2);
            break;
         case RelativePosition.CenterMiddle:
            rp.X = PixelX + (int)(SolidWidth / 2);
            rp.Y = PixelY + (int)(SolidHeight / 2);
            break;
         case RelativePosition.RightMiddle:
            rp.X = PixelX + SolidWidth - 1;
            rp.Y = PixelY + (int)(SolidHeight / 2);
            break;
         case RelativePosition.BottomLeft:
            rp.Y = PixelY + SolidHeight -1;
            break;
         case RelativePosition.BottomCenter:
            rp.X = PixelX + (int)(SolidWidth / 2);
            rp.Y = PixelY + SolidHeight - 1;
            break;
         case RelativePosition.BottomRight:
            rp.X = PixelX + SolidWidth - 1;
            rp.Y = PixelY + SolidHeight - 1;
            break;
      }
      return rp;
   }

   [Description("Examines the tile on the layer at the sprite's current position and determines if it is a member of the specified category. The RelativePosition parameter determines which part of the sprite to use when identifying a location on the layer. (TouchTiles is not necessary for this function.)")]
   public bool IsOnTile(TileCategoryName Category, RelativePosition RelativePosition)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsOnTile on an inactive sprite");

      System.Drawing.Point rp = GetRelativePosition(RelativePosition);
      return layer.GetTile((int)(rp.X / layer.Tileset.TileWidth), (int)(rp.Y / layer.Tileset.TileHeight)).IsMember(Category);
   }
   #endregion

   #region Activation
   [Description("Deactivate this sprite.  It will no longer be drawn, and in debug mode, will display errors if rules try to execute on it.")]
   public void Deactivate()
   {
      isActive = false;
   }
   #endregion
}</Text>
  </SourceCode>
  <SourceCode Name="PlanBase.cs" IsCustomObject="false">
    <Text>using System;
using System.ComponentModel;
using System.Drawing;
using Microsoft.DirectX;

/// &lt;summary&gt;
/// Base class for "plans", which consist of map coordinates and rules
/// &lt;/summary&gt;
[Serializable()]
public abstract class PlanBase : GeneralRules, System.Collections.IEnumerable
{
   public static int SharedTemp1;
   [Description("How close must a sprite be to a coordinate in this plan before heading to the next (default=5)")]
   public int TargetDistance = 5;

	protected PlanBase()
	{
	}

   [Serializable()]
   public struct Coordinate
   {
      public int x;
      public int y;
      public int weight;
      public Coordinate(int x, int y, int weight)
      {
         this.x = x;
         this.y = y;
         this.weight = weight;
      }
      public static implicit operator Point(Coordinate value)
      {
         return new Point(value.x, value.y);
      }
   }

   public virtual Rectangle PlanRectangle
   {
      get
      {
         return Rectangle.Empty;
      }
   }


   #region Sprites
   [Description("Make the specified sprite active.")]
   public void ActivateSprite(SpriteBase Target)
   {
      Target.isActive = true;
   }

   [Description("Make the specified sprite inactive.")]
   public void DeactivateSprite(SpriteBase Target)
   {
      Target.isActive = false;
   }

   [Description("Set the position of the source sprite to match that of the target sprite.")]
   public void MatchSpritePosition(SpriteBase Source, SpriteBase Target)
   {
      Source.x = Target.x;
      Source.y = Target.y;
   }

   [Description("Returns true if the specified sprite is touching this plan's rectangle")]
   public bool IsSpriteTouching(SpriteBase sprite)
   {
      if (!sprite.isActive)
         return false;

      Rectangle spriteRect = new Rectangle(sprite.PixelX, sprite.PixelY, sprite.SolidWidth, sprite.SolidHeight);
      Rectangle targetRect = PlanRectangle;
      if (!spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,2)))
         return false;
      if (spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,0)) ||
            spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,0,2)))
         return true;
      else
         return false;
   }

   [Description("Returns true if the specified part of the specified sprite is within the plan's rectangle")]
   public bool IsSpriteWithin(SpriteBase sprite, RelativePosition RelativePosition)
   {
      System.Drawing.Point rp = sprite.GetRelativePosition(RelativePosition);
      Rectangle targetRect = PlanRectangle;
      return targetRect.Contains(rp);
   }

   [Description("Returns true if the specified sprite was touching this plan's rectangle in the previous frame")]
   public bool WasSpriteTouching(SpriteBase sprite)
   {
      Rectangle spriteRect = new Rectangle(sprite.OldPixelX, sprite.OldPixelY, sprite.SolidWidth, sprite.SolidHeight);
      Rectangle targetRect = PlanRectangle;
      if (!spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,2)))
         return false;
      if (spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,0)) ||
         spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,0,2)))
         return true;
      else
         return false;
   }


   [Description("Scroll all layers on this plan's layer's map so that the specified sprite is within the visible area of the map.  If UseScrollMargins is true, the layer will scroll the sprite into the scroll margins of the map.")]
   public void ScrollSpriteIntoView(SpriteBase Sprite, bool UseScrollMargins)
   {
      ParentLayer.ScrollSpriteIntoView(Sprite, UseScrollMargins);
   }

   [Description("Alter a sprite's velocity so that it remains within the map's visible area or within the scroll margins, according to this plan's layer's position within the map.")]
   public void PushSpriteIntoView(SpriteBase Sprite, bool StayInScrollMargins)
   {
      ParentLayer.PushSpriteIntoView(Sprite, StayInScrollMargins);
   }

   [Description("Alter the velocity of the specified sprite to go toward a coordinate associated with the current plan.  CoordinateIndex indicates the which coordinate in the plan to head toward, and Force is how hard to push the sprite in tenths of a pixel per frame per frame")]
   public void PushSpriteTowardCoordinate(SpriteBase Sprite, int CoordinateIndex, int Force)
   {
      PushSpriteTowardPoint(Sprite, this[CoordinateIndex], Force);
   }

   [Description("Alter the velocity of the specified sprite to go toward a specified location.  Force is how hard to push the sprite in tenths of a pixel per frame per frame")]
   public void PushSpriteTowardPoint(SpriteBase Sprite, Point Target, int Force)
   {
      double dx = Target.X - Sprite.PixelX;
      double dy = Target.Y - Sprite.PixelY;

      // Normalize target vector to magnitude of Force parameter
      double dist = Math.Sqrt(dx * dx + dy * dy);
      if (dist &gt; 0)
      {
         dx = dx * Force / dist / 10;
         dy = dy * Force / dist / 10;

         // Push sprite
         Sprite.dx += dx;
         Sprite.dy += dy;
      }
   }

   [Description("Determine whether the sprite is within the TargetDistance of the specified coordinate, and has waited for the number of frames determined by the coordinate's weight based on the specified WaitCounter after reaching it.  If so, return the next CoordinateIndex, otherwise return the current CoordinateIndex.")]
   public int CheckNextCoordinate(SpriteBase Sprite, int CoordinateIndex, ref int WaitCounter)
   {
      if (WaitCounter &gt; 0)
      {
         if (++WaitCounter &gt; this[CoordinateIndex].weight)
         {
            WaitCounter = 0;
            return (CoordinateIndex + 1) % Count;
         }
         else
            return CoordinateIndex;
      }
      int dx = this[CoordinateIndex].x - Sprite.PixelX;
      int dy = this[CoordinateIndex].y - Sprite.PixelY;
      if (Math.Sqrt(dx * dx + dy * dy) &lt; TargetDistance)
      {
         if (this[CoordinateIndex].weight &gt; 0)
            WaitCounter++;
         else
            return (CoordinateIndex + 1) % Count;
      }
      return CoordinateIndex;
   }

   [Description("Set the velocity of the specified sprite to zero")]
   public void StopSprite(SpriteBase Sprite)
   {
      Sprite.dx = Sprite.dy = 0;
   }

   [Description("Determine whether the specified sprite's collision mask is overlapping part of any sprite in the specified category. Return the index of the sprite within the category if a collision is occurring, otherwise return -1.")]
   public int TestCollisionMask(SpriteBase SourceSprite, SpriteCollection Targets)
   {
      if (!SourceSprite.isActive)
         return -1;
      CollisionMask sourceMask = SourceSprite.CurrentState.GetMask(SourceSprite.frame);
      if (sourceMask == null)
         sourceMask = CollisionMask.GetRectangularMask(new Size(SourceSprite.SolidWidth, SourceSprite.SolidHeight));
      for (int idx = 0; idx &lt; Targets.Count; idx++)
      {
         SpriteBase TargetSprite = Targets[idx];
         if (TargetSprite == SourceSprite)
            continue;
         if (TargetSprite.isActive)
         {
            CollisionMask targetMask = TargetSprite.CurrentState.GetMask(TargetSprite.frame);
            if (targetMask == null)
               targetMask = CollisionMask.GetRectangularMask(new Size(TargetSprite.SolidWidth, TargetSprite.SolidHeight));
            if (sourceMask.TestCollisionWith(targetMask, TargetSprite.PixelX - SourceSprite.PixelX, TargetSprite.PixelY - SourceSprite.PixelY))
               return idx;
         }         
      }
      return -1;
   }

   [Description("Determine whether the solidity rectangle of the specified sprite overlaps that of any sprite in the specified category. Return the index of the sprite within the category if a collision is occurring, otherwise return -1.")]
   public int TestCollisionRect(SpriteBase SourceSprite, SpriteCollection Targets)
   {
      if (!SourceSprite.isActive)
         return -1;
      for (int idx = 0; idx &lt; Targets.Count; idx++)
      {
         SpriteBase TargetSprite = Targets[idx];
         if (TargetSprite == SourceSprite)
            continue;
         int x1 = SourceSprite.PixelX;
         int w1 = SourceSprite.SolidWidth;
         int x2 = TargetSprite.PixelX;
         int w2 = TargetSprite.SolidWidth;
         int y1 = SourceSprite.PixelY;
         int h1 = SourceSprite.SolidHeight;
         int y2 = TargetSprite.PixelY;
         int h2 = TargetSprite.SolidHeight;

         if ((x1+w1 &gt; x2) &amp;&amp; (x2+w2 &gt; x1) &amp;&amp; (y1+h1 &gt; y2) &amp;&amp; (y2+h2 &gt; y1))
            return idx;
      }
      return -1;
   }

   [Description("Deactivate a sprite within a category given the sprite's index within the category")]
   public void DeactivateCategorySprite(SpriteCollection Category, int Index)
   {
      Category[Index].isActive = false;
   }

   [Description("Determines if the specified sprite instace is active.")]
   public bool IsSpriteActive(SpriteBase Sprite)
   {
      return Sprite.isActive;
   }

   [Description("Moves the specified sprite to the specified coordinate.")]
   public void TransportToPoint(SpriteBase sprite, Point target)
   {
      sprite.oldX = sprite.x;
      sprite.oldY = sprite.y;
      sprite.x = target.X;
      sprite.y = target.Y;
   }

   [Description("Moves the specified sprite to the specified plan's rectangle, aligned to the specified corner/edge.")]
   public void TransportToPlan(SpriteBase Sprite, PlanBase Plan, RelativePosition Alignment)
   {
      System.Diagnostics.Debug.Assert(!Plan.PlanRectangle.IsEmpty, "TransportToPlan was called on a plan that does not have a rectangle defined.");
      if (Plan.PlanRectangle.IsEmpty)
         return;
      switch(Alignment)
      {
         case RelativePosition.TopLeft:
         case RelativePosition.TopCenter:
         case RelativePosition.TopRight:
            Sprite.y = Plan.PlanRectangle.Y;
            break;
         case RelativePosition.LeftMiddle:
         case RelativePosition.CenterMiddle:
         case RelativePosition.RightMiddle:
            Sprite.y = Plan.PlanRectangle.Y + (int)((Plan.PlanRectangle.Height - Sprite.SolidHeight)/2);
            break;
         default:
            Sprite.y = Plan.PlanRectangle.Y + Plan.PlanRectangle.Height - Sprite.SolidHeight;
            break;
      }
      switch(Alignment)
      {
         case RelativePosition.TopLeft:
         case RelativePosition.LeftMiddle:
         case RelativePosition.BottomLeft:
            Sprite.x = Plan.PlanRectangle.X;
            break;
         case RelativePosition.TopCenter:
         case RelativePosition.CenterMiddle:
         case RelativePosition.BottomCenter:
            Sprite.x = Plan.PlanRectangle.X + (int)((Plan.PlanRectangle.Width - Sprite.SolidWidth)/2);
            break;
         default:
            Sprite.x = Plan.PlanRectangle.Y + Plan.PlanRectangle.Height - Sprite.SolidHeight;
            break;
      }
   }
   
   [Description("Associate the state of the input device for the specified player (1-4) with the inputs on the specified sprite.")]
   public void MapPlayerToInputs(int PlayerNumber, SpriteBase Target)
   {
      System.Diagnostics.Debug.Assert(Target.isActive, "Attempted to execute MapPlayerToInput on an inactive sprite");
      if (PlayerNumber &gt; Project.MaxPlayers)
      {
         System.Diagnostics.Debug.Fail("Attempted to map inactive player input");
         return;
      }
      Target.oldinputs = Target.inputs;
      IPlayer player = Project.GameWindow.Players[PlayerNumber-1];
      Target.inputs = 0;
      if (player.Up) Target.inputs |= SpriteBase.InputBits.Up;
      if (player.Left) Target.inputs |= SpriteBase.InputBits.Left;
      if (player.Right) Target.inputs |= SpriteBase.InputBits.Right;
      if (player.Down) Target.inputs |= SpriteBase.InputBits.Down;
      if (player.Button1) Target.inputs |= SpriteBase.InputBits.Button1;
      if (player.Button2) Target.inputs |= SpriteBase.InputBits.Button2;
      if (player.Button3) Target.inputs |= SpriteBase.InputBits.Button3;
      if (player.Button4) Target.inputs |= SpriteBase.InputBits.Button4;
   }

   #endregion

   protected virtual Coordinate[] Coordinates
   {
      get
      {
         return null;
      }
   }

   public Coordinate this[int index]
   {
      get
      {
         return Coordinates[index];
      }
   }

   public int Count
   {
      get
      {
         if (Coordinates == null)
            return 0;
         return Coordinates.Length;
      }
   }

   public virtual void ExecuteRules()
   {
      throw new NotImplementedException("Attempted to execute rules on plan " + this.GetType().Name + " without any rules");
   }

   public enum ColorChannel
   {
      Blue,
      Green,
      Red,
      Alpha
   }

   [Description("Modulate/scale the specified color channel of the specified sprite to the specified level (0-255)")]
   public void ModulateColor(SpriteBase Sprite, ColorChannel Channel, int Level)
   {
      switch(Channel)
      {
         case ColorChannel.Blue:
            Sprite.ModulateBlue = Level;
            break;
         case ColorChannel.Green:
            Sprite.ModulateGreen = Level;
            break;
         case ColorChannel.Red:
            Sprite.ModulateRed = Level;
            break;
         case ColorChannel.Alpha:
            Sprite.ModulateAlpha = Level;
            break;
      }
   }

   
   #region Inventory / Overlay
   public enum DrawStyle
   {
      ClipRightToCounter,
      StretchRightToCounter,
      RepeatRightToCounter,
      ClipTopToCounter,
      StretchTopToCounter,
      RepeatUpToCounter
   }

   [Description("Draw the specified tile from the layer's tileset in this plan's rectangle according to the specified counter value")]
   public void DrawCounterAsTile(int TileIndex, Counter counter, DrawStyle style)
   {
      System.Diagnostics.Debug.Assert(!PlanRectangle.IsEmpty, "DrawCounterAsTile was called on a plan that does not have a rectangle defined");
      if (PlanRectangle.IsEmpty)
         return;
      if (counter.CurrentValue == 0)
         return;
      MapBase map = ParentLayer.ParentMap;
      Display disp = map.Display;
      Tileset ts = ParentLayer.Tileset;
      Frameset fr = ts.GetFrameset(ParentLayer.ParentMap.Display);

      Rectangle CurrentView = ParentLayer.ParentMap.CurrentView;

      switch(style)
      {
         case DrawStyle.ClipRightToCounter:
            disp.Device.RenderState.ScissorTestEnable = true;
            disp.Device.ScissorRectangle = new Rectangle(
               PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
               PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y,
               PlanRectangle.Width * counter.CurrentValue / counter.MaxValue,
               PlanRectangle.Height);
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               disp.Sprite.Transform = Matrix.Multiply(Matrix.Multiply(
                  fr[frameIndex].Transform,
                  Matrix.Scaling(PlanRectangle.Width / (float)ts.TileWidth, 1, 1)),
                  Matrix.Translation(
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y,
                  0));
               disp.Sprite.Draw(fr[frameIndex].GraphicSheetTexture.Texture, fr[frameIndex].SourceRect,
                  Vector3.Empty, Vector3.Empty, -1);
            }
            break;
         case DrawStyle.StretchRightToCounter:
            disp.Device.RenderState.ScissorTestEnable = false;
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               disp.Sprite.Transform = Matrix.Multiply(Matrix.Multiply(
                  fr[frameIndex].Transform,
                  Matrix.Scaling(PlanRectangle.Width * counter.CurrentValue / (float)counter.MaxValue / (float)ts.TileWidth, 1, 1)),
                  Matrix.Translation(
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y,
                  0));
               disp.Sprite.Draw(fr[frameIndex].GraphicSheetTexture.Texture, fr[frameIndex].SourceRect,
                  Vector3.Empty, Vector3.Empty, -1);
            }
            break;
         case DrawStyle.RepeatRightToCounter:
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               int FillWidth = PlanRectangle.Width * counter.CurrentValue / counter.MaxValue;
               disp.Device.RenderState.ScissorTestEnable = false;
               disp.Device.ScissorRectangle = new Rectangle(
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y,
                  FillWidth, PlanRectangle.Height);
               for (int repeat=0; repeat &lt; (int)Math.Ceiling(FillWidth / (float)ts.TileWidth); repeat++)
               {
                  disp.Sprite.Transform = Matrix.Multiply(
                     fr[frameIndex].Transform,
                     Matrix.Translation(
                     PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X + repeat * ts.TileWidth,
                     PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y,
                     0));
                  disp.Sprite.Draw(fr[frameIndex].GraphicSheetTexture.Texture, fr[frameIndex].SourceRect,
                     Vector3.Empty, Vector3.Empty, -1);
               }
            }
            break;
         case DrawStyle.ClipTopToCounter:
         {
            disp.Device.RenderState.ScissorTestEnable = true;
            int FillHeight = PlanRectangle.Height * counter.CurrentValue / counter.MaxValue;
            disp.Device.ScissorRectangle = new Rectangle(
               PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
               PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y +
               PlanRectangle.Height - FillHeight, PlanRectangle.Width, FillHeight);
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               disp.Sprite.Transform = Matrix.Multiply(Matrix.Multiply(
                  fr[frameIndex].Transform,
                  Matrix.Scaling(1, PlanRectangle.Height / (float)ts.TileHeight, 1)),
                  Matrix.Translation(
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y,
                  0));
               disp.Sprite.Draw(fr[frameIndex].GraphicSheetTexture.Texture, fr[frameIndex].SourceRect,
                  Vector3.Empty, Vector3.Empty, -1);
            }
         }
            break;
         case DrawStyle.StretchTopToCounter:
         {
            disp.Device.RenderState.ScissorTestEnable = false;
            int FillHeight = PlanRectangle.Height * counter.CurrentValue / counter.MaxValue;
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               disp.Sprite.Transform = Matrix.Multiply(Matrix.Multiply(
                  fr[frameIndex].Transform,
                  Matrix.Scaling(1, FillHeight / (float)ts.TileHeight, 1)),
                  Matrix.Translation(
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y + PlanRectangle.Height - FillHeight,
                  0));
               disp.Sprite.Draw(fr[frameIndex].GraphicSheetTexture.Texture, fr[frameIndex].SourceRect,
                  Vector3.Empty, Vector3.Empty, -1);
            }
         }
            break;
         case DrawStyle.RepeatUpToCounter:
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               int FillHeight = PlanRectangle.Height * counter.CurrentValue / counter.MaxValue;
               disp.Device.RenderState.ScissorTestEnable = false;
               disp.Device.ScissorRectangle = new Rectangle(
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y +
                  PlanRectangle.Height - FillHeight, PlanRectangle.Width, FillHeight);
               for (int repeat=0; repeat &lt; (int)Math.Ceiling(FillHeight / (float)ts.TileHeight); repeat++)
               {
                  disp.Sprite.Transform = Matrix.Multiply(
                     fr[frameIndex].Transform,
                     Matrix.Translation(
                     PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                     PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y + PlanRectangle.Height - repeat * ts.TileHeight - ts.TileHeight,
                     0));
                  disp.Sprite.Draw(fr[frameIndex].GraphicSheetTexture.Texture, fr[frameIndex].SourceRect,
                     Vector3.Empty, Vector3.Empty, -1);
               }
            }
            break;
      }
      disp.Sprite.Flush();
   }

   [Description("Display a counter value as a number with a label in the current plan's rectangle")]
   public void DrawCounterWithLabel(string Label, Counter counter, System.Drawing.KnownColor color)
   {
      System.Diagnostics.Debug.Assert(!PlanRectangle.IsEmpty, "DrawCounterAsTile was called on a plan that does not have a rectangle defined");
      if (PlanRectangle.IsEmpty)
         return;
      
      Display disp = ParentLayer.ParentMap.Display;
      disp.Device.RenderState.ScissorTestEnable = false;
      disp.Sprite.Transform = Matrix.Identity;
      disp.D3DFont.DrawText(disp.Sprite, Label.ToString() + counter.CurrentValue.ToString(), PlanRectangle, Microsoft.DirectX.Direct3D.DrawTextFormat.Left, System.Drawing.Color.FromKnownColor(color));
      disp.Sprite.Flush();
   }
   #endregion

   [Description("Copy tiles from this plan's rectangle to another plan's rectangle.")]
   public void CopyTo(PlanBase Target, RelativePosition RelativePosition)
   {
      int src_left = (int)(PlanRectangle.X / ParentLayer.Tileset.TileWidth);
      int src_top = (int)(PlanRectangle.Y / ParentLayer.Tileset.TileHeight);
      int src_right = (int)((PlanRectangle.X + PlanRectangle.Width - 1) / ParentLayer.Tileset.TileWidth);
      int src_bottom = (int)((PlanRectangle.Y + PlanRectangle.Height - 1) / ParentLayer.Tileset.TileHeight);

      int dst_left = (int)(Target.PlanRectangle.X / Target.ParentLayer.Tileset.TileWidth);
      int dst_top = (int)(Target.PlanRectangle.Y / Target.ParentLayer.Tileset.TileHeight);
      int dst_right = (int)((Target.PlanRectangle.X + Target.PlanRectangle.Width - 1) / Target.ParentLayer.Tileset.TileWidth);
      int dst_bottom = (int)((Target.PlanRectangle.Y + Target.PlanRectangle.Height - 1) / Target.ParentLayer.Tileset.TileHeight);

      for (int y = src_top; y &lt;= src_bottom; y++)
      {
         int targety;
         switch(RelativePosition)
         {
            case RelativePosition.TopLeft:
            case RelativePosition.TopCenter:
            case RelativePosition.TopRight:
               targety = dst_top + y - src_top;
               break;
            case RelativePosition.LeftMiddle:
            case RelativePosition.CenterMiddle:
            case RelativePosition.RightMiddle:
               targety = y + (int)(dst_top + dst_bottom - src_top - src_bottom) / 2;
               break;
            default:
               targety = dst_bottom + y - src_bottom;
               break;
         }
         if (targety &lt; 0)
            continue;
         if (targety &gt;= Target.ParentLayer.Rows)
            break;
         for (int x = src_left; x &lt;= src_right; x++)
         {
            int targetx;
            switch(RelativePosition)
            {
               case RelativePosition.TopLeft:
               case RelativePosition.LeftMiddle:
               case RelativePosition.BottomLeft:
                  targetx = dst_left + x - src_left;
                  break;
               case RelativePosition.TopCenter:
               case RelativePosition.CenterMiddle:
               case RelativePosition.BottomCenter:
                  targetx = x + (int)(dst_left + dst_right - src_left - src_right) / 2;
                  break;
               default:
                  targetx = dst_right + x - src_right;
                  break;
            }
            if (targetx &lt; 0)
               continue;
            if (targetx &gt;= Target.ParentLayer.Columns)
               break;
            
            Target.ParentLayer[targetx,targety] = ParentLayer[x,y];
         }
      }
   }

   [Description("Determine if the specified sprite's specified input is pressed.  InitialOnly causes this to return true only if the input has just been pressed and was not pressed before.")]
   public bool IsInputPressed(SpriteBase Sprite, SpriteBase.InputBits Input, bool InitialOnly)
   {
      return Sprite.IsInputPressed(Input, InitialOnly);
   }

   [Description("Ensure that all the inputs currently being pressed on the specified sprite are henceforth processed as already pressed.")]
   public void CopyInputsToOld(SpriteBase Sprite)
   {
      Sprite.oldinputs = Sprite.inputs;
   }
   #region IEnumerable Members

   public System.Collections.IEnumerator GetEnumerator()
   {
      if (Coordinates == null)
         new System.Collections.ArrayList().GetEnumerator();
      return Coordinates.GetEnumerator();
   }

   #endregion
}</Text>
  </SourceCode>
  <SourceCode Name="Player.cs" IsCustomObject="false">
    <Text>using System;
using Microsoft.DirectX.DirectInput;

public interface IPlayer
{
   bool Up
   {
      get;
   }

   bool Left
   {
      get;
   }

   bool Right
   {
      get;
   }

   bool Down
   {
      get;
   }

   bool Button1
   {
      get;
   }

   bool Button2
   {
      get;
   }

   bool Button3
   {
      get;
   }

   bool Button4
   {
      get;
   }
}

/// &lt;summary&gt;
/// Represents interactions between the game and a player via the keyboard
/// &lt;/summary&gt;
[Serializable()]
public class KeyboardPlayer : IPlayer
{
   public Key key_left;
   public Key key_up;
   public Key key_right;
   public Key key_down;
   public Key key_button1;
   public Key key_button2;
   public Key key_button3;
   public Key key_button4;      

   private void InitializeKeys(Key up, Key left, Key right, Key down,
      Key button1, Key button2, Key button3, Key button4)
   {
      key_up = up;
      key_left = left;
      key_right = right;
      key_down = down;
      key_button1 = button1;
      key_button2 = button2;
      key_button3 = button3;
      key_button4 = button4;
   }

   public KeyboardPlayer(int defaultSet)
   {
      switch(defaultSet)
      {
         case 0:
            InitializeKeys(
               Microsoft.DirectX.DirectInput.Key.UpArrow,
               Microsoft.DirectX.DirectInput.Key.LeftArrow,
               Microsoft.DirectX.DirectInput.Key.RightArrow,
               Microsoft.DirectX.DirectInput.Key.DownArrow,
               Microsoft.DirectX.DirectInput.Key.RightControl,
               Microsoft.DirectX.DirectInput.Key.Space,
               Microsoft.DirectX.DirectInput.Key.Return,
               Microsoft.DirectX.DirectInput.Key.RightShift);
            break;
         case 1:
            InitializeKeys(
               Microsoft.DirectX.DirectInput.Key.W,
               Microsoft.DirectX.DirectInput.Key.A,
               Microsoft.DirectX.DirectInput.Key.D,
               Microsoft.DirectX.DirectInput.Key.S,
               Microsoft.DirectX.DirectInput.Key.LeftShift,
               Microsoft.DirectX.DirectInput.Key.LeftControl,
               Microsoft.DirectX.DirectInput.Key.Q,
               Microsoft.DirectX.DirectInput.Key.E);
            break;
         case 2:
            InitializeKeys(
               Microsoft.DirectX.DirectInput.Key.NumPad8,
               Microsoft.DirectX.DirectInput.Key.NumPad4,
               Microsoft.DirectX.DirectInput.Key.NumPad6,
               Microsoft.DirectX.DirectInput.Key.NumPad2,
               Microsoft.DirectX.DirectInput.Key.NumPad5,
               Microsoft.DirectX.DirectInput.Key.NumPad0,
               Microsoft.DirectX.DirectInput.Key.NumPadEnter,
               Microsoft.DirectX.DirectInput.Key.NumPad7);
            break;
         default:
            InitializeKeys(
               Microsoft.DirectX.DirectInput.Key.I,
               Microsoft.DirectX.DirectInput.Key.J,
               Microsoft.DirectX.DirectInput.Key.L,
               Microsoft.DirectX.DirectInput.Key.K,
               Microsoft.DirectX.DirectInput.Key.U,
               Microsoft.DirectX.DirectInput.Key.O,
               Microsoft.DirectX.DirectInput.Key.M,
               Microsoft.DirectX.DirectInput.Key.Comma);
            break;
      }
   }

   #region IPlayer Members

   public bool Up
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_up];
      }
   }

   public bool Left
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_left];
      }
   }

   public bool Right
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_right];
      }
   }

   public bool Down
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_down];
      }
   }

   public bool Button1
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_button1];
      }
   }

   public bool Button2
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_button2];
      }
   }

   public bool Button3
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_button3];
      }
   }

   public bool Button4
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_button4];
      }
   }

   #endregion
}

/// &lt;summary&gt;
/// Represents interactions between the game and a player via a joystick/gamepad
/// &lt;/summary&gt;
[Serializable()]
public class ControllerPlayer : IPlayer
{
   public int deviceNumber;

   public ControllerPlayer(int deviceNumber)
   {
      this.deviceNumber = deviceNumber;
   }

   #region IPlayer Members

   public bool Up
   {
      get
      {
         return Project.GameWindow.GetControllerState(deviceNumber).Y &lt; 0x4000;
      }
   }

   public bool Left
   {
      get
      {
         return Project.GameWindow.GetControllerState(deviceNumber).X &lt; 0x4000;
      }
   }

   public bool Right
   {
      get
      {
         return Project.GameWindow.GetControllerState(deviceNumber).X &gt; 0xC000;
      }
   }

   public bool Down
   {
      get
      {
         return Project.GameWindow.GetControllerState(deviceNumber).Y &gt; 0xC000;
      }
   }

   public bool Button1
   {
      get
      {
         return Project.GameWindow.GetControllerState(deviceNumber).GetButtons()[0] != 0;
      }
   }

   public bool Button2
   {
      get
      {
         return Project.GameWindow.GetControllerState(deviceNumber).GetButtons()[1] != 0;
      }
   }

   public bool Button3
   {
      get
      {
         return Project.GameWindow.GetControllerState(deviceNumber).GetButtons()[2] != 0;
      }
   }

   public bool Button4
   {
      get
      {
         return Project.GameWindow.GetControllerState(deviceNumber).GetButtons()[3] != 0;
      }
   }

   #endregion
}
</Text>
  </SourceCode>
  <SourceCode Name="TileShapes.cs" IsCustomObject="false">
    <Text>using System;

[Serializable()]
public struct SolidityMapping : System.Runtime.Serialization.ISerializable
{
   public TileCategoryName category;
   public TileShape shape;

   public SolidityMapping(TileCategoryName category, TileShape shape)
   {
      this.category = category;
      this.shape = shape;
   }

   private SolidityMapping(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      category = (TileCategoryName)info.GetInt32("TileCategoryName");
      shape = (TileShape)System.Type.GetType(info.GetString("TileShapeName"), true, false).GetProperty("Value",
         System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Static |
         System.Reflection.BindingFlags.Public).GetValue(null, null);
   }

   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      info.AddValue("TileCategoryName", (System.Int32)category);
      info.AddValue("TileShapeName", shape.GetType().Name);
   }
}

/// &lt;summary&gt;
/// Defines a particular shape that a tile can have at any/all sizes
/// &lt;/summary&gt;
public abstract class TileShape
{
   public TileShape()
   {
   }
   // Returns a value between 0 and height-1, inclusive, or short.MaxValue if there is no solid
   public abstract short GetTopSolidPixel(short width, short height, short min, short max);
   // Returns a value between 0 and height-1, inclusive, or short.MinValue if there is no solid
   public abstract short GetBottomSolidPixel(short width, short height, short min, short max);
   // Returns a value between 0 and width-1, inclusive, or short.MaxValue if there is no solid
   public abstract short GetLeftSolidPixel(short width, short height, short min, short max);
   // Returns a value between 0 and width-1, inclusive, or short.MinValue if there is no solid
   public abstract short GetRightSolidPixel(short width, short height, short min, short max);
}

public class EmptyTileShape : TileShape
{
   private static EmptyTileShape m_Value = new EmptyTileShape();

   public static EmptyTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public EmptyTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return short.MaxValue;
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return short.MinValue;
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return short.MaxValue;
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return short.MinValue;
   }
}

public class SolidTileShape : TileShape
{
   private static SolidTileShape m_Value = new SolidTileShape();

   public static SolidTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public SolidTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height-1);
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width-1);
   }
}

/*
   +--------+
   |       X|
   |      XX|
   |     XXX|
   |    XXXX|
   |   XXXXX|
   |  XXXXXX|
   | XXXXXXX|
   |XXXXXXXX|
   +--------+
*/
public class UphillTileShape : TileShape
{
   private static UphillTileShape m_Value = new UphillTileShape();

   public static UphillTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public UphillTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height * (width-max-1) / width);
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height-1);
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width * (height-max-1) / height);
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width-1);
   }
}

/*
   +--------+
   |X       |
   |XX      |
   |XXX     |
   |XXXX    |
   |XXXXX   |
   |XXXXXX  |
   |XXXXXXX |
   |XXXXXXXX|
   +--------+
*/
public class DownhillTileShape : TileShape
{
   private static DownhillTileShape m_Value = new DownhillTileShape();

   public static DownhillTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public DownhillTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)(min * height / width);
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height-1);
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width - (height - max - 1) * width / height - 1);
   }
}

/*
   +--------+
   |XXXXXXXX|
   |XXXXXXX |
   |XXXXXX  |
   |XXXXX   |
   |XXXX    |
   |XXX     |
   |XX      |
   |X       |
   +--------+
*/
public class UpCeilingTileShape : TileShape
{
   private static UpCeilingTileShape m_Value = new UpCeilingTileShape();

   public static UpCeilingTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public UpCeilingTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((width - min) * height - 1) / width);
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((height - min) * width - 1) / height);
   }
}

/*
   +--------+
   |XXXXXXXX|
   | XXXXXXX|
   |  XXXXXX|
   |   XXXXX|
   |    XXXX|
   |     XXX|
   |      XX|
   |       X|
   +--------+
*/
public class DownCeilingTileShape : TileShape
{
   private static DownCeilingTileShape m_Value = new DownCeilingTileShape();

   public static DownCeilingTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public DownCeilingTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height - (width - max - 1) * height / width - 1);
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return (short)(min * width / height);
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width - 1);
   }
}

/*
   +--------+
   |      XX|
   |    XXXX|
   |  XXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   +--------+
*/
public class UphillRightTileShape : TileShape
{
   private static UphillRightTileShape m_Value = new UphillRightTileShape();

   public static UphillRightTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public UphillRightTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height * (width - max - 1) / width / 2);
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height - 1);
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return (short)((max * 2 &gt;= height - 2) ? 0 : width * (height - max * 2 - 2) / height);
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width - 1);
   }
}

/*
   +--------+
   |        |
   |        |
   |        |
   |        |
   |      XX|
   |    XXXX|
   |  XXXXXX|
   |XXXXXXXX|
   +--------+
*/
public class UphillLeftTileShape : TileShape
{
   private static UphillLeftTileShape m_Value = new UphillLeftTileShape();

   public static UphillLeftTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public UphillLeftTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height * (width - max - 1) / width / 2 + height / 2);
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height - 1);
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((max + 1) * 2 &lt;= height)?short.MaxValue:width * (height - max - 1) * 2 / height);
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((max + 1) * 2 &lt;= height)?short.MinValue:width - 1);
   }
}

/*
   +--------+
   |XX      |
   |XXXX    |
   |XXXXXX  |
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   +--------+
*/
public class DownhillLeftTileShape : TileShape
{
   private static DownhillLeftTileShape m_Value = new DownhillLeftTileShape();

   public static DownhillLeftTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public DownhillLeftTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)(min * height / width / 2);
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height-1);
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((max + 1) * 2 &gt; height) ? width - 1 : width * 2 - (height - max - 1) * width * 2 / height - 1);
   }
}

/*
   +--------+
   |        |
   |        |
   |        |
   |        |
   |XX      |
   |XXXX    |
   |XXXXXX  |
   |XXXXXXXX|
   +--------+
*/
public class DownhillRightTileShape : TileShape
{
   private static DownhillRightTileShape m_Value = new DownhillRightTileShape();

   public static DownhillRightTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public DownhillRightTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)((height + min * height / width) / 2);
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height-1);
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((min + 1) * 2 &lt;= height) ? short.MaxValue : (short)0);
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((max + 1) * 2 &lt;= height) ? short.MinValue : width - (height - max - 1) * 2 * width / height - 1);
   }
}


/*
   +--------+
   |^^^^^^^^|
   |        |
   |        |
   |        |
   |        |
   |        |
   |        |
   |        |
   +--------+
   (Top is solid only from above)
*/
public class TopSolidTileShape : TileShape
{
   private static TopSolidTileShape m_Value = new TopSolidTileShape();

   public static TopSolidTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public TopSolidTileShape()
   {
   }

   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return short.MinValue;
   }

   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return short.MaxValue;
   }

   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return short.MinValue;
   }
}

</Text>
  </SourceCode>
  <SourceCode Name="TileSpecialization.cs" IsCustomObject="true" DependsOn="">
    <Text>using System.ComponentModel;

namespace CustomObjects
{
   public class TileSpecialization
   {
      private static System.Collections.Hashtable specialTiles = new System.Collections.Hashtable();

      private int col;
      private int row;
      private int state;
      private int originalTile;
      private LayerBase layer;

      private TileSpecialization(int col, int row, int originalTile, LayerBase layer)
      {
         this.col = col;
         this.row = row;
         this.originalTile = originalTile;
         this.layer = layer;
      }

      private static TileSpecialization SpecialTile(SpriteBase Player)
      {
         return specialTiles[Player] as TileSpecialization;
      }

      [Description("Causes a sprite to react to spring tiles")]
      public static void ReactToSprings(SpriteBase Player)
      {
         System.Drawing.Point rp = Player.GetRelativePosition(RelativePosition.BottomCenter);
         rp.Y++;
         int col = (int)(rp.X / Player.ParentLayer.Tileset.TileWidth);
         int row = (int)(rp.Y / Player.ParentLayer.Tileset.TileHeight);
         if ((Player.ParentLayer[col,row] == 100) &amp;&amp; (Player.dy &gt;= 0))
         {
            // Before specializing a new tile, reset any other tile that
            // was in the process of special handling.
            if (SpecialTile(Player) != null)
               SpecialTile(Player).Reset();
            specialTiles[Player] = new TileSpecialization(col, row, 100, Player.ParentLayer);
            Player.ParentLayer[col,row] = 101;
         }
         else if ((SpecialTile(Player) != null) &amp;&amp; (Player.ParentLayer[col,row] != 101))
         {
            // Player walked off compressed spring.
            // Reset it.
            SpecialTile(Player).Reset();
            specialTiles[Player] = null;
         }
         else if (SpecialTile(Player) != null)
         {
            rp = Player.GetRelativePosition(RelativePosition.CenterMiddle);
            col = (int)(rp.X / Player.ParentLayer.Tileset.TileWidth);
            row = (int)(rp.Y / Player.ParentLayer.Tileset.TileHeight);
            if (Player.ParentLayer[col,row] == 101)
            {
               Player.dy = -5;
               SpecialTile(Player).Reset();
               specialTiles[Player] = null;
            }
         }
         if (Player.IsInputPressed(SpriteBase.InputBits.Button1, true) &amp;&amp; (SpecialTile(Player) != null) &amp;&amp; (SpecialTile(Player).originalTile == 100))
         {
            Player.dy = -20;
            FMODBase.PlaySound(Boing.Value, SoundReplay.Restart);
            SpecialTile(Player).Reset();
            specialTiles[Player] = null;
         }
      }

      private void Reset()
      {
         layer[col,row] = originalTile;
      }
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="fmodex.dll" IsCustomObject="true">
    <Text>/*
   Because this is a binary file, this text only
   serves as a comment and will not be compiled.
*/
</Text>
  </SourceCode>
  <SourceCode Name="fmod.cs" IsCustomObject="true" DependsOn="fmodex.dll">
    <Text>/* The content of this "file" is taken from the fmod.cs and fmod_dsp.cs files */
/* Provided in the api directory tree of the FMOD package.  Only part of the  */
/* fmod_dsp.cs file has been included because pasting the whole file caused   */
/* mysterious problems with the RTF control.  - Ben Marty                     */

/* ========================================================================================== */
/* FMOD Ex - C# Wrapper . Copyright (c), Firelight Technologies Pty, Ltd. 2004-2006.          */
/*                                                                                            */
/*                                                                                            */
/* ========================================================================================== */

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace FMOD
{
    /*
        FMOD version number.  Check this against FMOD::System::getVersion / System_GetVersion
        0xaaaabbcc -&gt; aaaa = major version number.  bb = minor version number.  cc = development version number.
    */
    public class VERSION
    {
        public const int    number = 0x00040601;
        public const string dll    = "fmodex.dll";
    }

    /*
        FMOD types 
    */
    /*
    [STRUCTURE] 
    [
        [DESCRIPTION]   
        Structure describing a point in 3D space.

        [REMARKS]
        FMOD uses a left handed co-ordinate system by default.
        To use a right handed co-ordinate system specify FMOD_INIT_3D_RIGHTHANDED from FMOD_INITFLAGS in System::init.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        System::set3DListenerAttributes
        System::get3DListenerAttributes
        Channel::set3DAttributes
        Channel::get3DAttributes
        Geometry::addPolygon
        Geometry::setPolygonVertex
        Geometry::getPolygonVertex
        Geometry::setRotation
        Geometry::getRotation
        Geometry::setPosition
        Geometry::getPosition
        Geometry::setScale
        Geometry::getScale
        FMOD_INITFLAGS
    ]
    */
    public struct VECTOR
    {
        public float x;        /* X co-ordinate in 3D space. */
        public float y;        /* Y co-ordinate in 3D space. */
        public float z;        /* Z co-ordinate in 3D space. */
    }

    /*
    [ENUM]
    [
        [DESCRIPTION]   
        error codes.  Returned from every function.

        [REMARKS]

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
    ]
    */
    public enum RESULT
    {
        OK,                        /* No errors. */
        ERR_ALREADYLOCKED,         /* Tried to call lock a second time before unlock was called. */
        ERR_BADCOMMAND,            /* Tried to call a function on a data type that does not allow this type of functionality (ie calling Sound::lock on a streaming sound). */
        ERR_CDDA_DRIVERS,          /* Neither NTSCSI nor ASPI could be initialised. */
        ERR_CDDA_INIT,             /* An error occurred while initialising the CDDA subsystem. */
        ERR_CDDA_INVALID_DEVICE,   /* Couldn't find the specified device. */
        ERR_CDDA_NOAUDIO,          /* No audio tracks on the specified disc. */
        ERR_CDDA_NODEVICES,        /* No CD/DVD devices were found. */ 
        ERR_CDDA_NODISC,           /* No disc present in the specified drive. */
        ERR_CDDA_READ,             /* A CDDA read error occurred. */
        ERR_CHANNEL_ALLOC,         /* Error trying to allocate a channel. */
        ERR_CHANNEL_STOLEN,        /* The specified channel has been reused to play another sound. */
        ERR_COM,                   /* A Win32 COM related error occured. COM failed to initialize or a QueryInterface failed meaning a Windows codec or driver was not installed properly. */
        ERR_DMA,                   /* DMA Failure.  See debug output for more information. */
        ERR_DSP_CONNECTION,        /* DSP connection error.  Connection possibly caused a cyclic dependancy. */
        ERR_DSP_FORMAT,            /* DSP Format error.  A DSP unit may have attempted to connect to this network with the wrong format. */
        ERR_DSP_NOTFOUND,          /* DSP connection error.  Couldn't find the DSP unit specified. */
        ERR_DSP_RUNNING,           /* DSP error.  Cannot perform this operation while the network is in the middle of running.  This will most likely happen if a connection or disconnection is attempted in a DSP callback. */
        ERR_DSP_TOOMANYCONNECTIONS,/* DSP connection error.  The unit being connected to or disconnected should only have 1 input or output. */
        ERR_FILE_BAD,              /* Error loading file. */
        ERR_FILE_COULDNOTSEEK,     /* Couldn't perform seek operation.  This is a limitation of the medium (ie netstreams) or the file format. */
        ERR_FILE_EOF,              /* End of file unexpectedly reached while trying to read essential data (truncated data?). */
        ERR_FILE_NOTFOUND,         /* File not found. */
        ERR_FILE_UNWANTED,         /* Unwanted file access occured. */
        ERR_FORMAT,                /* Unsupported file or audio format. */
        ERR_HTTP,                  /* A HTTP error occurred. This is a catch-all for HTTP errors not listed elsewhere. */
        ERR_HTTP_ACCESS,           /* The specified resource requires authentication or is forbidden. */
        ERR_HTTP_PROXY_AUTH,       /* Proxy authentication is required to access the specified resource. */
        ERR_HTTP_SERVER_ERROR,     /* A HTTP server error occurred. */
        ERR_HTTP_TIMEOUT,          /* The HTTP request timed out. */
        ERR_INITIALIZATION,        /* FMOD was not initialized correctly to support this function. */
        ERR_INITIALIZED,           /* Cannot call this command after System::init. */
        ERR_INTERNAL,              /* An error occured that wasnt supposed to.  Contact support. */
        ERR_INVALID_ADDRESS,       /* On Xbox 360, this memory address passed to FMOD must be physical, (ie allocated with XPhysicalAlloc.) */
        ERR_INVALID_FLOAT,         /* Value passed in was a NaN, Inf or denormalized float. */
        ERR_INVALID_HANDLE,        /* An invalid object handle was used. */
        ERR_INVALID_PARAM,         /* An invalid parameter was passed to this function. */
        ERR_INVALID_SPEAKER,       /* An invalid speaker was passed to this function based on the current speaker mode. */
        ERR_INVALID_VECTOR,        /* The vectors passed in are not unit length, or perpendicular. */
        ERR_IRX,                   /* PS2 only.  fmodex.irx failed to initialize.  This is most likely because you forgot to load it. */
        ERR_MEMORY,                /* Not enough memory or resources. */
        ERR_MEMORY_IOP,            /* PS2 only.  Not enough memory or resources on PlayStation 2 IOP ram. */
        ERR_MEMORY_SRAM,           /* Not enough memory or resources on console sound ram. */
        ERR_MEMORY_CANTPOINT,      /* Can't use FMOD_OPENMEMORY_POINT on non PCM source data, or non mp3/xma/adpcm data if FMOD_CREATECOMPRESSEDSAMPLE was used. */
        ERR_NEEDS2D,               /* Tried to call a command on a 3d sound when the command was meant for 2d sound. */
        ERR_NEEDS3D,               /* Tried to call a command on a 2d sound when the command was meant for 3d sound. */
        ERR_NEEDSHARDWARE,         /* Tried to use a feature that requires hardware support.  (ie trying to play a VAG compressed sound in software on PS2). */
        ERR_NEEDSSOFTWARE,         /* Tried to use a feature that requires the software engine.  Software engine has either been turned off, or command was executed on a hardware channel which does not support this feature. */
        ERR_NET_CONNECT,           /* Couldn't connect to the specified host. */
        ERR_NET_SOCKET_ERROR,      /* A socket error occurred.  This is a catch-all for socket-related errors not listed elsewhere. */
        ERR_NET_URL,               /* The specified URL couldn't be resolved. */
        ERR_NOTREADY,              /* Operation could not be performed because specified sound is not ready. */
        ERR_OUTPUT_ALLOCATED,      /* Error initializing output device, but more specifically, the output device is already in use and cannot be reused. */
        ERR_OUTPUT_CREATEBUFFER,   /* Error creating hardware sound buffer. */
        ERR_OUTPUT_DRIVERCALL,     /* A call to a standard soundcard driver failed, which could possibly mean a bug in the driver or resources were missing or exhausted. */
        ERR_OUTPUT_FORMAT,         /* Soundcard does not support the minimum features needed for this soundsystem (16bit stereo output). */
        ERR_OUTPUT_INIT,           /* Error initializing output device. */
        ERR_OUTPUT_NOHARDWARE,     /* FMOD_HARDWARE was specified but the sound card does not have the resources nescessary to play it. */
        ERR_OUTPUT_NOSOFTWARE,     /* Attempted to create a software sound but no software channels were specified in System::init. */
        ERR_PAN,                   /* Panning only works with mono or stereo sound sources. */
        ERR_PLUGIN,                /* An unspecified error has been returned from a 3rd party plugin. */
        ERR_PLUGIN_MISSING,        /* A requested output, dsp unit type or codec was not available. */
        ERR_PLUGIN_RESOURCE,       /* A resource that the plugin requires cannot be found. (ie the DLS file for MIDI playback) */
        ERR_RECORD,                /* An error occured trying to initialize the recording device. */
        ERR_REVERB_INSTANCE,       /* Specified Instance in FMOD_REVERB_PROPERTIES couldn't be set. Most likely because another application has locked the EAX4 FX slot. */
        ERR_SUBSOUNDS,             /* The error occured because the sound referenced contains subsounds.  (ie you cannot play the parent sound as a static sample, only its subsounds.) */
        ERR_SUBSOUND_ALLOCATED,    /* This subsound is already being used by another sound, you cannot have more than one parent to a sound.  Null out the other parent's entry first. */
        ERR_TAGNOTFOUND,           /* The specified tag could not be found or there are no tags. */
        ERR_TOOMANYCHANNELS,       /* The sound created exceeds the allowable input channel count.  This can be increased using the maxinputchannels parameter in System::setSoftwareFormat. */
        ERR_UNIMPLEMENTED,         /* Something in FMOD hasn't been implemented when it should be! contact support! */
        ERR_UNINITIALIZED,         /* This command failed because System::init or System::setDriver was not called. */
        ERR_UNSUPPORTED,           /* A command issued was not supported by this object.  Possibly a plugin without certain callbacks specified. */
        ERR_UPDATE,                /* An error caused by System::update occured. */
        ERR_VERSION,               /* The version number of this file format is not supported. */
        
        ERR_EVENT_FAILED,          /* An Event failed to be retrieved, most likely due to 'just fail' being specified as the max playbacks behaviour. */
        ERR_EVENT_INTERNAL,        /* An error occured that wasn't supposed to.  See debug log for reason. */
        ERR_EVENT_NAMECONFLICT,    /* A category with the same name already exists. */
        ERR_EVENT_NOTFOUND,        /* The requested event, event group, event category or event property could not be found. */
    }



    /*
    [ENUM]
    [
        [DESCRIPTION]   
        These output types are used with System::setOutput/System::getOutput, to choose which output method to use.
  
        [REMARKS]
        To drive the output synchronously, and to disable FMOD's timing thread, use the FMOD_INIT_NONREALTIME flag.
        
        To pass information to the driver when initializing fmod use the extradriverdata parameter for the following reasons.
        &lt;li&gt;FMOD_OUTPUTTYPE_WAVWRITER - extradriverdata is a pointer to a char * filename that the wav writer will output to.
        &lt;li&gt;FMOD_OUTPUTTYPE_WAVWRITER_NRT - extradriverdata is a pointer to a char * filename that the wav writer will output to.
        &lt;li&gt;FMOD_OUTPUTTYPE_DSOUND - extradriverdata is a pointer to a HWND so that FMOD can set the focus on the audio for a particular window.
        &lt;li&gt;FMOD_OUTPUTTYPE_GC - extradriverdata is a pointer to a FMOD_ARAMBLOCK_INFO struct. This can be found in fmodgc.h.
        Currently these are the only FMOD drivers that take extra information.  Other unknown plugins may have different requirements.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        System::setOutput
        System::getOutput
        System::setSoftwareFormat
        System::getSoftwareFormat
        System::init
    ]
    */
    public enum OUTPUTTYPE
    {
        AUTODETECT,    /* Picks the best output mode for the platform.  This is the default. */

        UNKNOWN,       /* All         - 3rd party plugin, unknown.  This is for use with System::getOutput only. */
        NOSOUND,       /* All         - All calls in this mode succeed but make no sound. */
        WAVWRITER,     /* All         - All         - Writes output to fmodout.wav by default.  Use System::setSoftwareFormat to set the filename. */
        NOSOUND_NRT,   /* All         - Non-realtime version of FMOD_OUTPUTTYPE_NOSOUND.  User can drive mixer with System::update at whatever rate they want. */
        WAVWRITER_NRT, /* All         - Non-realtime version of FMOD_OUTPUTTYPE_WAVWRITER.  User can drive mixer with System::update at whatever rate they want. */

        DSOUND,        /* Win32/Win64 - DirectSound output.  Use this to get hardware accelerated 3d audio and EAX Reverb support. (Default on Windows) */
        WINMM,         /* Win32/Win64 - Windows Multimedia output. */
        ASIO,          /* Win32       - Low latency ASIO driver. */
        OSS,           /* Linux       - Open Sound System output. */
        ALSA,          /* Linux       - Advanced Linux Sound Architecture output. */
        ESD,           /* Linux       - Enlightment Sound Daemon output. */
        SOUNDMANAGER,  /* Mac         - Macintosh SoundManager output. */
        COREAUDIO,     /* Mac         - Macintosh CoreAudio output */
        XBOX,          /* Xbox        - Native hardware output. */
        PS2,           /* PS2         - Native hardware output. */
        GC,            /* GameCube    - Native hardware output. */
        XBOX360,       /* Xbox 360    - Native hardware output. */
        PSP,           /* PSP         - Native hardware output. */
        OPENAL,        /* Win32/Win64 - OpenAL 1.1 output. Use this for lower CPU overhead than FMOD_OUTPUTTYPE_DSOUND, and also Vista H/W support with Creative Labs cards. */

        MAX            /* Maximum number of output types supported. */
    }


    /*
    [ENUM] 
    [
        [DESCRIPTION]   

        [REMARKS]

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
    ]
    */
    public enum CAPS
    {
        NONE                   = 0x00000000,    /* Device has no special capabilities. */
        HARDWARE               = 0x00000001,    /* Device supports hardware mixing. */
        HARDWARE_EMULATED      = 0x00000002,    /* Device supports FMOD_HARDWARE but it will be mixed on the CPU by the kernel (not FMOD's software mixer). */
        OUTPUT_MULTICHANNEL    = 0x00000004,    /* Device can do multichannel output, ie greater than 2 channels. */
        OUTPUT_FORMAT_PCM8     = 0x00000008,    /* Device can output to 8bit integer PCM. */
        OUTPUT_FORMAT_PCM16    = 0x00000010,    /* Device can output to 16bit integer PCM. */
        OUTPUT_FORMAT_PCM24    = 0x00000020,    /* Device can output to 24bit integer PCM. */
        OUTPUT_FORMAT_PCM32    = 0x00000040,    /* Device can output to 32bit integer PCM. */
        OUTPUT_FORMAT_PCMFLOAT = 0x00000080,    /* Device can output to 32bit floating point PCM. */
        REVERB_EAX2            = 0x00000100,    /* Device supports EAX2 reverb. */
        REVERB_EAX3            = 0x00000200,    /* Device supports EAX3 reverb. */
        REVERB_EAX4            = 0x00000400,    /* Device supports EAX4 reverb  */
        REVERB_I3DL2           = 0x00000800,    /* Device supports I3DL2 reverb. */
        REVERB_LIMITED         = 0x00001000     /* Device supports some form of limited hardware reverb, maybe parameterless and only selectable by environment. */
    }

    /*
    [DEFINE] 
    [
        [NAME]
        FMOD_DEBUGLEVEL

        [DESCRIPTION]   
        Bit fields to use with FMOD::Debug_SetLevel / FMOD::Debug_GetLevel to control the level of tty debug output with logging versions of FMOD (fmodL).

        [REMARKS]

        [PLATFORMS]
        Win32, Win64, Linux, Linux64, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable, PlayStation 3, Wii

        [SEE_ALSO]
        Debug_SetLevel 
        Debug_GetLevel
    ]
    */
    public enum DEBUGLEVEL
    {
        LEVEL_NONE           = 0x00000000,
        LEVEL_LOG            = 0x00000001,
        LEVEL_ERROR          = 0x00000002,
        LEVEL_WARNING        = 0x00000004,
        LEVEL_HINT           = 0x00000008,
        LEVEL_ALL            = 0x000000FF,   
        TYPE_MEMORY          = 0x00000100,
        TYPE_THREAD          = 0x00000200,
        TYPE_FILE            = 0x00000400,
        TYPE_NET             = 0x00000800,
        TYPE_EVENT           = 0x00001000,
        TYPE_ALL             = 0x0000FFFF,                     
        DISPLAY_TIMESTAMPS   = 0x01000000,
        DISPLAY_LINENUMBERS  = 0x02000000,
        DISPLAY_COMPRESS     = 0x04000000,
        DISPLAY_ALL          = 0x0F000000,   
        ALL                  = unchecked((int)0xffffffff)
    }


    /*
    [DEFINE] 
    [
        [NAME]
        FMOD_MEMORY_TYPE

        [DESCRIPTION]   
        Bit fields for memory allocation type being passed into FMOD memory callbacks.

        [REMARKS]

        [PLATFORMS]
        Win32, Win64, Linux, Linux64, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable, PlayStation 3, Wii

        [SEE_ALSO]
        FMOD_MEMORY_ALLOCCALLBACK
        FMOD_MEMORY_REALLOCCALLBACK
        FMOD_MEMORY_FREECALLBACK
        Memory_Initialize
    
    ]
    */
    public enum MEMORY_TYPE
    {
        NORMAL           = 0x00000000,       /* Standard memory. */
        XBOX360_PHYSICAL = 0x00100000        /* Requires XPhysicalAlloc / XPhysicalFree. */
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        These are speaker types defined for use with the System::setSpeakerMode or System::getSpeakerMode command.

        [REMARKS]
        These are important notes on speaker modes in regards to sounds created with FMOD_SOFTWARE.&lt;br&gt;
        Note below the phrase 'sound channels' is used.  These are the subchannels inside a sound, they are not related and 
        have nothing to do with the FMOD class "Channel".&lt;br&gt;
        For example a mono sound has 1 sound channel, a stereo sound has 2 sound channels, and an AC3 or 6 channel wav file have 6 "sound channels".&lt;br&gt;
        &lt;br&gt;
        FMOD_SPEAKERMODE_RAW&lt;br&gt;
        ---------------------&lt;br&gt;
        This mode is for output devices that are not specifically mono/stereo/quad/surround/5.1 or 7.1, but are multichannel.&lt;br&gt;
        Sound channels map to speakers sequentially, so a mono sound maps to output speaker 0, stereo sound maps to output speaker 0 &amp; 1.&lt;br&gt;
        The user assumes knowledge of the speaker order.  FMOD_SPEAKER enumerations may not apply, so raw channel indicies should be used.&lt;br&gt;
        Multichannel sounds map input channels to output channels 1:1. &lt;br&gt;
        Channel::setPan and Channel::setSpeakerMix do not work.&lt;br&gt;
        Speaker levels must be manually set with Channel::setSpeakerLevels.&lt;br&gt;
        &lt;br&gt;
        FMOD_SPEAKERMODE_MONO&lt;br&gt;
        ---------------------&lt;br&gt;
        This mode is for a 1 speaker arrangement.&lt;br&gt;
        Panning does not work in this speaker mode.&lt;br&gt;
        Mono, stereo and multichannel sounds have each sound channel played on the one speaker unity.&lt;br&gt;
        Mix behaviour for multichannel sounds can be set with Channel::setSpeakerLevels.&lt;br&gt;
        Channel::setSpeakerMix does not work.&lt;br&gt;
        &lt;br&gt;
        FMOD_SPEAKERMODE_STEREO&lt;br&gt;
        -----------------------&lt;br&gt;
        This mode is for 2 speaker arrangements that have a left and right speaker.&lt;br&gt;
        &lt;li&gt;Mono sounds default to an even distribution between left and right.  They can be panned with Channel::setPan.&lt;br&gt;
        &lt;li&gt;Stereo sounds default to the middle, or full left in the left speaker and full right in the right speaker.  
        &lt;li&gt;They can be cross faded with Channel::setPan.&lt;br&gt;
        &lt;li&gt;Multichannel sounds have each sound channel played on each speaker at unity.&lt;br&gt;
        &lt;li&gt;Mix behaviour for multichannel sounds can be set with Channel::setSpeakerLevels.&lt;br&gt;
        &lt;li&gt;Channel::setSpeakerMix works but only front left and right parameters are used, the rest are ignored.&lt;br&gt;
        &lt;br&gt;
        FMOD_SPEAKERMODE_QUAD&lt;br&gt;
        ------------------------&lt;br&gt;
        This mode is for 4 speaker arrangements that have a front left, front right, rear left and a rear right speaker.&lt;br&gt;
        &lt;li&gt;Mono sounds default to an even distribution between front left and front right.  They can be panned with Channel::setPan.&lt;br&gt;
        &lt;li&gt;Stereo sounds default to the left sound channel played on the front left, and the right sound channel played on the front right.&lt;br&gt;
        &lt;li&gt;They can be cross faded with Channel::setPan.&lt;br&gt;
        &lt;li&gt;Multichannel sounds default to all of their sound channels being played on each speaker in order of input.&lt;br&gt;
        &lt;li&gt;Mix behaviour for multichannel sounds can be set with Channel::setSpeakerLevels.&lt;br&gt;
        &lt;li&gt;Channel::setSpeakerMix works but side left, side right, center and lfe are ignored.&lt;br&gt;
        &lt;br&gt;
        FMOD_SPEAKERMODE_SURROUND&lt;br&gt;
        ------------------------&lt;br&gt;
        This mode is for 4 speaker arrangements that have a front left, front right, front center and a rear center.&lt;br&gt;
        &lt;li&gt;Mono sounds default to the center speaker.  They can be panned with Channel::setPan.&lt;br&gt;
        &lt;li&gt;Stereo sounds default to the left sound channel played on the front left, and the right sound channel played on the front right.  
        &lt;li&gt;They can be cross faded with Channel::setPan.&lt;br&gt;
        &lt;li&gt;Multichannel sounds default to all of their sound channels being played on each speaker in order of input.&lt;br&gt;
        &lt;li&gt;Mix behaviour for multichannel sounds can be set with Channel::setSpeakerLevels.&lt;br&gt;
        &lt;li&gt;Channel::setSpeakerMix works but side left, side right and lfe are ignored, and rear left / rear right are averaged into the rear speaker.&lt;br&gt;
        &lt;br&gt;
        FMOD_SPEAKERMODE_5POINT1&lt;br&gt;
        ------------------------&lt;br&gt;
        This mode is for 5.1 speaker arrangements that have a left/right/center/rear left/rear right and a subwoofer speaker.&lt;br&gt;
        &lt;li&gt;Mono sounds default to the center speaker.  They can be panned with Channel::setPan.&lt;br&gt;
        &lt;li&gt;Stereo sounds default to the left sound channel played on the front left, and the right sound channel played on the front right.  
        &lt;li&gt;They can be cross faded with Channel::setPan.&lt;br&gt;
        &lt;li&gt;Multichannel sounds default to all of their sound channels being played on each speaker in order of input.  
        &lt;li&gt;Mix behaviour for multichannel sounds can be set with Channel::setSpeakerLevels.&lt;br&gt;
        &lt;li&gt;Channel::setSpeakerMix works but side left / side right are ignored.&lt;br&gt;
        &lt;br&gt;
        FMOD_SPEAKERMODE_7POINT1&lt;br&gt;
        ------------------------&lt;br&gt;
        This mode is for 7.1 speaker arrangements that have a left/right/center/rear left/rear right/side left/side right 
        and a subwoofer speaker.&lt;br&gt;
        &lt;li&gt;Mono sounds default to the center speaker.  They can be panned with Channel::setPan.&lt;br&gt;
        &lt;li&gt;Stereo sounds default to the left sound channel played on the front left, and the right sound channel played on the front right.  
        &lt;li&gt;They can be cross faded with Channel::setPan.&lt;br&gt;
        &lt;li&gt;Multichannel sounds default to all of their sound channels being played on each speaker in order of input.  
        &lt;li&gt;Mix behaviour for multichannel sounds can be set with Channel::setSpeakerLevels.&lt;br&gt;
        &lt;li&gt;Channel::setSpeakerMix works and every parameter is used to set the balance of a sound in any speaker.&lt;br&gt;
        &lt;br&gt;
        FMOD_SPEAKERMODE_PROLOGIC&lt;br&gt;
        ------------------------------------------------------&lt;br&gt;
        This mode is for mono, stereo, 5.1 and 7.1 speaker arrangements, as it is backwards and forwards compatible with stereo, 
        but to get a surround effect a Dolby Prologic or Prologic 2 hardware decoder / amplifier is needed.&lt;br&gt;
        Pan behaviour is the same as FMOD_SPEAKERMODE_5POINT1.&lt;br&gt;
        &lt;br&gt;
        If this function is called the numoutputchannels setting in System::setSoftwareFormat is overwritten.&lt;br&gt;
        &lt;br&gt;
        For 3D sounds, panning is determined at runtime by the 3D subsystem based on the speaker mode to determine which speaker the 
        sound should be placed in.&lt;br&gt;

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        System::setSpeakerMode
        System::getSpeakerMode
        System::getDriverCaps
        Channel::setSpeakerLevels
    ]
    */
    public enum SPEAKERMODE
    {
        RAW,              /* There is no specific speakermode.  Sound channels are mapped in order of input to output.  See remarks for more information. */
        MONO,             /* The speakers are monaural. */
        STEREO,           /* The speakers are stereo (DEFAULT). */
        QUAD,             /* 4 speaker setup.  This includes front left, front right, rear left, rear right.  */
        SURROUND,         /* 4 speaker setup.  This includes front left, front right, center, rear center (rear left/rear right are averaged). */
        _5POINT1,         /* 5.1 speaker setup.  This includes front left, front right, center, rear left, rear right and a subwoofer. */
        _7POINT1,         /* 7.1 speaker setup.  This includes front left, front right, center, rear left, rear right, side left, side right and a subwoofer. */
        PROLOGIC,         /* Stereo output, but data is encoded in a way that is picked up by a Prologic/Prologic2 decoder and split into a 5.1 speaker setup. */

        FMOD_SPEAKERMODE_MAX,              /* Maximum number of speaker modes supported. */
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        These are speaker types defined for use with the Channel::setSpeakerLevels command.
        It can also be used for speaker placement in the System::setSpeakerPosition command.

        [REMARKS]
        If you are using FMOD_SPEAKERMODE_RAW and speaker assignments are meaningless, just cast a raw integer value to this type.&lt;br&gt;
        For example (FMOD_SPEAKER)7 would use the 7th speaker (also the same as FMOD_SPEAKER_SIDE_RIGHT).&lt;br&gt;
        Values higher than this can be used if an output system has more than 8 speaker types / output channels.  15 is the current maximum.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        FMOD_SPEAKERMODE
        Channel::setSpeakerLevels
        Channel::getSpeakerLevels
        System::setSpeakerPosition
        System::getSpeakerPosition
    ]
    */
    public enum SPEAKER
    {
        FRONT_LEFT,
        FRONT_RIGHT,
        FRONT_CENTER,
        LOW_FREQUENCY,
        BACK_LEFT,
        BACK_RIGHT,
        SIDE_LEFT,
        SIDE_RIGHT,
    
        MAX,                          /* Maximum number of speaker types supported. */
        MONO        = FRONT_LEFT,     /* For use with FMOD_SPEAKERMODE_MONO and Channel::SetSpeakerLevels.  Mapped to same value as FMOD_SPEAKER_FRONT_LEFT. */
        BACK_CENTER = LOW_FREQUENCY,  /* For use with FMOD_SPEAKERMODE_SURROUND and Channel::SetSpeakerLevels only.  Mapped to same value as FMOD_SPEAKER_LOW_FREQUENCY. */
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        These are plugin types defined for use with the System::getNumPlugins / System_GetNumPlugins, 
        System::getPluginInfo / System_GetPluginInfo and System::unloadPlugin / System_UnloadPlugin functions.

        [REMARKS]

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        System::getNumPlugins
        System::getPluginInfo
        System::unloadPlugin
    ]
    */
    public enum PLUGINTYPE
    {
        OUTPUT,     /* The plugin type is an output module.  FMOD mixed audio will play through one of these devices */
        CODEC,      /* The plugin type is a file format codec.  FMOD will use these codecs to load file formats for playback. */
        DSP         /* The plugin type is a DSP unit.  FMOD will use these plugins as part of its DSP network to apply effects to output or generate sound in realtime. */
    }


    /*
    [ENUM] 
    [
        [DESCRIPTION]   
        Initialization flags.  Use them with System::init in the flags parameter to change various behaviour.  

        [REMARKS]

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        System::init
    ]
    */
    public enum INITFLAG
    {
        NORMAL                  = 0x00000000,   /* All platforms - Initialize normally */
        STREAM_FROM_UPDATE      = 0x00000001,   /* All platforms - No stream thread is created internally.  Streams are driven from System::update.  Mainly used with non-realtime outputs. */
        _3D_RIGHTHANDED         = 0x00000002,   /* All platforms - FMOD will treat +X as left, +Y as up and +Z as forwards. */
        DISABLESOFTWARE         = 0x00000004,   /* All platforms - Disable software mixer to save memory.  Anything created with FMOD_SOFTWARE will fail and DSP will not work. */
        DSOUND_HRTFNONE         = 0x00000200,   /* Win32 only - for DirectSound output - FMOD_HARDWARE | FMOD_3D buffers use simple stereo panning/doppler/attenuation when 3D hardware acceleration is not present. */
        DSOUND_HRTFLIGHT        = 0x00000400,   /* Win32 only - for DirectSound output - FMOD_HARDWARE | FMOD_3D buffers use a slightly higher quality algorithm when 3D hardware acceleration is not present. */
        DSOUND_HRTFFULL         = 0x00000800,   /* Win32 only - for DirectSound output - FMOD_HARDWARE | FMOD_3D buffers use full quality 3D playback when 3d hardware acceleration is not present. */
        PS2_DISABLECORE0REVERB  = 0x00010000,   /* PS2 only - Disable reverb on CORE 0 to regain SRAM. */
        PS2_DISABLECORE1REVERB  = 0x00020000,   /* PS2 only - Disable reverb on CORE 1 to regain SRAM. */
        XBOX_REMOVEHEADROOM     = 0x00100000,   /* XBox only - By default DirectSound attenuates all sound by 6db to avoid clipping/distortion.  CAUTION.  If you use this flag you are responsible for the final mix to make sure clipping / distortion doesn't happen. */
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        These definitions describe the type of song being played.

        [REMARKS]

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        Sound::getFormat
    ]
    */
    public enum SOUND_TYPE
    {
        UNKNOWN,         /* 3rd party / unknown plugin format. */
        AAC,             /* AAC.  Currently unsupported. */
        AIFF,            /* AIFF. */
        ASF,             /* Microsoft Advanced Systems Format (ie WMA/ASF/WMV). */
        AT3,             /* Sony ATRAC 3 format */
        CDDA,            /* Digital CD audio. */
        DLS,             /* Sound font / downloadable sound bank. */
        FLAC,            /* FLAC lossless codec. */
        FSB,             /* FMOD Sample Bank. */
        GCADPCM,         /* GameCube ADPCM */
        IT,              /* Impulse Tracker. */
        MIDI,            /* MIDI. */
        MOD,             /* Protracker / Fasttracker MOD. */
        MPEG,            /* MP2/MP3 MPEG. */
        OGGVORBIS,       /* Ogg vorbis. */
        PLAYLIST,        /* Information only from ASX/PLS/M3U/WAX playlists */
        RAW,             /* Raw PCM data. */
        S3M,             /* ScreamTracker 3. */
        SF2,             /* Sound font 2 format. */
        USER,            /* User created sound. */
        WAV,             /* Microsoft WAV. */
        XM,              /* FastTracker 2 XM. */
        XMA,             /* Xbox360 XMA */
        VAG              /* PlayStation 2 / PlayStation Portable adpcm VAG format. */
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        These definitions describe the native format of the hardware or software buffer that will be used.

        [REMARKS]
        This is the format the native hardware or software buffer will be or is created in.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        System::createSoundEx
        Sound::getFormat
    ]
    */
    public enum SOUND_FORMAT
    {
        NONE,     /* Unitialized / unknown */
        PCM8,     /* 8bit integer PCM data */
        PCM16,    /* 16bit integer PCM data  */
        PCM24,    /* 24bit integer PCM data  */
        PCM32,    /* 32bit integer PCM data  */
        PCMFLOAT, /* 32bit floating point PCM data  */
        GCADPCM,  /* Compressed GameCube DSP data */
        IMAADPCM, /* Compressed XBox ADPCM data */
		VAG,      /* Compressed PlayStation 2 ADPCM data */
		XMA,      /* Compressed Xbox360 data. */
		MPEG,     /* Compressed MPEG layer 2 or 3 data. */
		MAX       /* Maximum number of sound formats supported. */ 
    }


	/*
	[DEFINE]
	[
		[NAME] 
		FMOD_MODE

		[DESCRIPTION]   
		Sound description bitfields, bitwise OR them together for loading and describing sounds.

		[REMARKS]
		By default a sound will open as a static sound that is decompressed fully into memory.&lt;br&gt;
		To have a sound stream instead, use FMOD_CREATESTREAM.&lt;br&gt;
		Some opening modes (ie FMOD_OPENUSER, FMOD_OPENMEMORY, FMOD_OPENRAW) will need extra information.&lt;br&gt;
		This can be provided using the FMOD_CREATESOUNDEXINFO structure.

		[PLATFORMS]
		Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

		[SEE_ALSO]
		System::createSound
		System::createStream
		Sound::setMode
		Sound::getMode
		Channel::setMode
		Channel::getMode
		Sound::set3DCustomRolloff
        Channel::set3DCustomRolloff
	]
	*/
	public enum MODE
    {
        DEFAULT                = 0x00000000,  /* FMOD_DEFAULT is a default sound type.  Equivalent to all the defaults listed below.  FMOD_LOOP_OFF, FMOD_2D, FMOD_HARDWARE. */
        LOOP_OFF               = 0x00000001,  /* For non looping sounds. (default).  Overrides FMOD_LOOP_NORMAL / FMOD_LOOP_BIDI. */
        LOOP_NORMAL            = 0x00000002,  /* For forward looping sounds. */
        LOOP_BIDI              = 0x00000004,  /* For bidirectional looping sounds. (only works on software mixed static sounds). */
        _2D                    = 0x00000008,  /* Ignores any 3d processing. (default). */
        _3D                    = 0x00000010,  /* Makes the sound positionable in 3D.  Overrides FMOD_2D. */
        HARDWARE               = 0x00000020,  /* Attempts to make sounds use hardware acceleration. (default). */
        SOFTWARE               = 0x00000040,  /* Makes sound reside in software.  Overrides FMOD_HARDWARE.  Use this for FFT, DSP, 2D multi speaker support and other software related features. */
        CREATESTREAM           = 0x00000080,  /* Decompress at runtime, streaming from the source provided (standard stream).  Overrides FMOD_CREATESAMPLE. */
        CREATESAMPLE           = 0x00000100,  /* Decompress at loadtime, decompressing or decoding whole file into memory as the target sample format. (standard sample). */
        CREATECOMPRESSEDSAMPLE = 0x00000200,  /* Load MP2, MP3, IMAADPCM or XMA into memory and leave it compressed.  During playback the FMOD software mixer will decode it in realtime as a 'compressed sample'.  Can only be used in combination with FMOD_SOFTWARE. */
        OPENUSER               = 0x00000400,  /* Opens a user created static sample or stream. Use FMOD_CREATESOUNDEXINFO to specify format and/or read callbacks.  If a user created 'sample' is created with no read callback, the sample will be empty.  Use FMOD_Sound_Lock and FMOD_Sound_Unlock to place sound data into the sound if this is the case. */
        OPENMEMORY             = 0x00000800,  /* "name_or_data" will be interpreted as a pointer to memory instead of filename for creating sounds. */
        OPENRAW                = 0x00001000,  /* Will ignore file format and treat as raw pcm.  User may need to declare if data is FMOD_SIGNED or FMOD_UNSIGNED */
        OPENONLY               = 0x00002000,  /* Just open the file, dont prebuffer or read.  Good for fast opens for info, or when sound::readData is to be used. */
        ACCURATETIME           = 0x00004000,  /* For FMOD_CreateSound - for accurate FMOD_Sound_GetLength / FMOD_Channel_SetPosition on VBR MP3, AAC and MOD/S3M/XM/IT/MIDI files.  Scans file first, so takes longer to open. FMOD_OPENONLY does not affect this. */
        MPEGSEARCH             = 0x00008000,  /* For corrupted / bad MP3 files.  This will search all the way through the file until it hits a valid MPEG header.  Normally only searches for 4k. */
        NONBLOCKING            = 0x00010000,  /* For opening sounds asyncronously, return value from open function must be polled for when it is ready. */
        UNIQUE                 = 0x00020000,  /* Unique sound, can only be played one at a time */
        _3D_HEADRELATIVE       = 0x00040000,  /* Make the sound's position, velocity and orientation relative to the listener. */
        _3D_WORLDRELATIVE      = 0x00080000,  /* Make the sound's position, velocity and orientation absolute (relative to the world). (DEFAULT) */
        _3D_LOGROLLOFF         = 0x00100000,  /* This sound will follow the standard logarithmic rolloff model where mindistance = full volume, maxdistance = where sound stops attenuating, and rolloff is fixed according to the global rolloff factor.  (default) */
        _3D_LINEARROLLOFF      = 0x00200000,  /* This sound will follow a linear rolloff model where mindistance = full volume, maxdistance = silence.  */
        _3D_CUSTOMROLLOFF      = 0x04000000,  /* This sound will follow a rolloff model defined by Sound::set3DCustomRolloff / Channel::set3DCustomRolloff.  */
		CDDA_FORCEASPI         = 0x00400000,  /* For CDDA sounds only - use ASPI instead of NTSCSI to access the specified CD/DVD device. */
        CDDA_JITTERCORRECT     = 0x00800000,  /* For CDDA sounds only - perform jitter correction. Jitter correction helps produce a more accurate CDDA stream at the cost of more CPU time. */
        UNICODE                = 0x01000000,  /* Filename is double-byte unicode. */
        IGNORETAGS             = 0x02000000,  /* Skips id3v2/asf/etc tag checks when opening a sound, to reduce seek/read overhead when opening files (helps with CD performance). */
        LOWMEM                 = 0x08000000,  /* Removes some features from samples to give a lower memory overhead, like Sound::getName. */
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        These values describe what state a sound is in after NONBLOCKING has been used to open it.

        [REMARKS]    

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        Sound::getOpenState
        MODE
    ]
    */
    public enum OPENSTATE
    {
        READY = 0,       /* Opened and ready to play */
        LOADING,         /* Initial load in progress */
        ERROR,           /* Failed to open - file not found, out of memory etc.  See return value of Sound::getOpenState for what happened. */
        CONNECTING,      /* Connecting to remote host (internet sounds only) */
        BUFFERING        /* Buffering data */
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        These callback types are used with Channel::setCallback.

        [REMARKS]
        Each callback has commanddata parameters passed int unique to the type of callback.
        See reference to FMOD_CHANNEL_CALLBACK to determine what they might mean for each type of callback.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        Channel::setCallback
        FMOD_CHANNEL_CALLBACK
    ]
    */
    public enum CHANNEL_CALLBACKTYPE
    {
        END,                  /* Called when a sound ends. */
        VIRTUALVOICE,         /* Called when a voice is swapped out or swapped in. */
        SYNCPOINT,            /* Called when a syncpoint is encountered.  Can be from wav file markers. */

        MAX
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        List of windowing methods used in spectrum analysis to reduce leakage / transient signals intefering with the analysis.
        This is a problem with analysis of continuous signals that only have a small portion of the signal sample (the fft window size).
        Windowing the signal with a curve or triangle tapers the sides of the fft window to help alleviate this problem.

        [REMARKS]
        Cyclic signals such as a sine wave that repeat their cycle in a multiple of the window size do not need windowing.
        I.e. If the sine wave repeats every 1024, 512, 256 etc samples and the FMOD fft window is 1024, then the signal would not need windowing.
        Not windowing is the same as FMOD_DSP_FFT_WINDOW_RECT, which is the default.
        If the cycle of the signal (ie the sine wave) is not a multiple of the window size, it will cause frequency abnormalities, so a different windowing method is needed.
        &lt;exclude&gt;
        
        FMOD_DSP_FFT_WINDOW_RECT.
        &lt;img src = "rectangle.gif"&gt;&lt;/img&gt;
        
        FMOD_DSP_FFT_WINDOW_TRIANGLE.
        &lt;img src = "triangle.gif"&gt;&lt;/img&gt;
        
        FMOD_DSP_FFT_WINDOW_HAMMING.
        &lt;img src = "hamming.gif"&gt;&lt;/img&gt;
        
        FMOD_DSP_FFT_WINDOW_HANNING.
        &lt;img src = "hanning.gif"&gt;&lt;/img&gt;
        
        FMOD_DSP_FFT_WINDOW_BLACKMAN.
        &lt;img src = "blackman.gif"&gt;&lt;/img&gt;
        
        FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS.
        &lt;img src = "blackmanharris.gif"&gt;&lt;/img&gt;
        &lt;/exclude&gt;

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        System::getSpectrum
        Channel::getSpectrum
    ]
    */
    public enum DSP_FFT_WINDOW
    {
        RECT,           /* w[n] = 1.0                                                                                            */
        TRIANGLE,       /* w[n] = TRI(2n/N)                                                                                      */
        HAMMING,        /* w[n] = 0.54 - (0.46 * COS(n/N) )                                                                      */
        HANNING,        /* w[n] = 0.5 *  (1.0  - COS(n/N) )                                                                      */
        BLACKMAN,       /* w[n] = 0.42 - (0.5  * COS(n/N) ) + (0.08 * COS(2.0 * n/N) )                                           */
        BLACKMANHARRIS, /* w[n] = 0.35875 - (0.48829 * COS(1.0 * n/N)) + (0.14128 * COS(2.0 * n/N)) - (0.01168 * COS(3.0 * n/N)) */

        MAX
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        List of interpolation types that the FMOD Ex software mixer supports.  

        [REMARKS]
        The default resampler type is FMOD_DSP_RESAMPLER_LINEAR.&lt;br&gt;
        Use System::setSoftwareFormat to tell FMOD the resampling quality you require for FMOD_SOFTWARE based sounds.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        System::setSoftwareFormat
        System::getSoftwareFormat
    ]
    */
    public enum DSP_RESAMPLER
    {
        NOINTERP,        /* No interpolation.  High frequency aliasing hiss will be audible depending on the sample rate of the sound. */
        LINEAR,          /* Linear interpolation (default method).  Fast and good quality, causes very slight lowpass effect on low frequency sounds. */
        CUBIC,           /* Cubic interoplation.  Slower than linear interpolation but better quality. */
        SPLINE,          /* 5 point spline interoplation.  Slowest resampling method but best quality. */

        MAX,             /* Maximum number of resample methods supported. */
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        List of tag types that could be stored within a sound.  These include id3 tags, metadata from netstreams and vorbis/asf data.

        [REMARKS]

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        Sound::getTag
    ]
    */
    public enum TAGTYPE
    {
        UNKNOWN = 0,
        ID3V1,
        ID3V2,
        VORBISCOMMENT,
        SHOUTCAST,
        ICECAST,
        ASF,
        MIDI,
        PLAYLIST,
        FMOD,
        USER
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        List of data types that can be returned by Sound::getTag

        [REMARKS]

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        Sound::getTag
    ]
    */
    public enum TAGDATATYPE
    {
        BINARY = 0,
        INT,
        FLOAT,
        STRING,
        STRING_UTF16,
        STRING_UTF16BE,
        STRING_UTF8,
        CDTOC
    }


    /*
    [STRUCTURE] 
    [
        [DESCRIPTION]   
        Structure describing a piece of tag data.

        [REMARKS]
        Members marked with [in] mean the user sets the value before passing it to the function.
        Members marked with [out] mean FMOD sets the value to be used after the function exits.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        Sound::getTag
        TAGTYPE
        TAGDATATYPE
    ]
    */
    public struct TAG
    {
        public TAGTYPE           type;         /* [out] The type of this tag. */
        public TAGDATATYPE       datatype;     /* [out] The type of data that this tag contains */
        public string            name;         /* [out] The name of this tag i.e. "TITLE", "ARTIST" etc. */
        public IntPtr            data;         /* [out] Pointer to the tag data - its format is determined by the datatype member */
        public uint              datalen;      /* [out] Length of the data contained in this tag */
        public bool              updated;      /* [out] True if this tag has been updated since last being accessed with Sound::getTag */
    }


    /*
    [STRUCTURE] 
    [
        [DESCRIPTION]   
        Structure describing a CD/DVD table of contents

        [REMARKS]
        Members marked with [in] mean the user sets the value before passing it to the function.
        Members marked with [out] mean FMOD sets the value to be used after the function exits.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        Sound::getTag
    ]
    */
    public struct CDTOC
    {
        public int numtracks;                  /* [out] The number of tracks on the CD */
        [MarshalAs(UnmanagedType.ByValArray,SizeConst=100)]
        public int[] min;                   /* [out] The start offset of each track in minutes */
        [MarshalAs(UnmanagedType.ByValArray,SizeConst=100)]
        public int[] sec;                   /* [out] The start offset of each track in seconds */
        [MarshalAs(UnmanagedType.ByValArray,SizeConst=100)]
        public int[] frame;                 /* [out] The start offset of each track in frames */
    }


    /*
    [ENUM]
    [
        [DESCRIPTION]   
        List of time types that can be returned by Sound::getLength and used with Channel::setPosition or Channel::getPosition.

        [REMARKS]

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]      
        Sound::getLength
        Channel::setPosition
        Channel::getPosition
    ]
    */
    public enum TIMEUNIT
    {
        MS                = 0x00000001,  /* Milliseconds. */
        PCM               = 0x00000002,  /* PCM Samples, related to milliseconds * samplerate / 1000. */
        PCMBYTES          = 0x00000004,  /* Bytes, related to PCM samples * channels * datawidth (ie 16bit = 2 bytes). */
        RAWBYTES          = 0x00000008,  /* Raw file bytes of (compressed) sound data (does not include headers).  Only used by Sound::getLength and Channel::getPosition. */
        MODORDER          = 0x00000100,  /* MOD/S3M/XM/IT.  Order in a sequenced module format.  Use Sound::getFormat to determine the format. */
        MODROW            = 0x00000200,  /* MOD/S3M/XM/IT.  Current row in a sequenced module format.  Sound::getLength will return the number if rows in the currently playing or seeked to pattern. */
        MODPATTERN        = 0x00000400,  /* MOD/S3M/XM/IT.  Current pattern in a sequenced module format.  Sound::getLength will return the number of patterns in the song and Channel::getPosition will return the currently playing pattern. */
        SENTENCE_MS       = 0x00010000,  /* Currently playing subsound in a sentence time in milliseconds. */
        SENTENCE_PCM      = 0x00020000,  /* Currently playing subsound in a sentence time in PCM Samples, related to milliseconds * samplerate / 1000. */
        SENTENCE_PCMBYTES = 0x00040000,  /* Currently playing subsound in a sentence time in bytes, related to PCM samples * channels * datawidth (ie 16bit = 2 bytes). */
        SENTENCE          = 0x00080000,  /* Currently playing sentence index according to the channel. */
        SENTENCE_SUBSOUND = 0x00100000,  /* Currently playing subsound index in a sentence. */
        BUFFERED          = 0x10000000,  /* Time value as seen by buffered stream.  This is always ahead of audible time, and is only used for processing. */
    }

    public delegate RESULT SOUND_NONBLOCKCALLBACK (IntPtr soundraw, RESULT result);
    public delegate RESULT SOUND_PCMREADCALLBACK  (IntPtr soundraw, IntPtr data, uint datalen);
    public delegate RESULT SOUND_PCMSETPOSCALLBACK(IntPtr soundraw, int subsound, uint position, TIMEUNIT postype);

    public delegate RESULT FMOD_FILE_OPENCALLBACK  (StringBuilder name, int unicode, ref uint filesize, ref IntPtr handle, ref IntPtr userdata);
    public delegate RESULT FMOD_FILE_CLOSECALLBACK (IntPtr handle, IntPtr userdata);
    public delegate RESULT FMOD_FILE_READCALLBACK  (IntPtr handle, IntPtr buffer, uint sizebytes, ref uint bytesread, IntPtr userdata);
    public delegate RESULT FMOD_FILE_SEEKCALLBACK  (IntPtr handle, uint pos, IntPtr userdata);

    /*
    [STRUCTURE] 
    [
        [DESCRIPTION]
        Use this structure with System::createSound when more control is needed over loading.
        The possible reasons to use this with System::createSound are:
        &lt;li&gt;Loading a file from memory.
        &lt;li&gt;Loading a file from within another larger (possibly wad/pak) file, by giving the loader an offset and length.
        &lt;li&gt;To create a user created / non file based sound.
        &lt;li&gt;To specify a starting subsound to seek to within a multi-sample sounds (ie FSB/DLS/SF2) when created as a stream.
        &lt;li&gt;To specify which subsounds to load for multi-sample sounds (ie FSB/DLS/SF2) so that memory is saved and only a subset is actually loaded/read from disk.
        &lt;li&gt;To specify 'piggyback' read and seek callbacks for capture of sound data as fmod reads and decodes it.  Useful for ripping decoded PCM data from sounds as they are loaded / played.
        &lt;li&gt;To specify a MIDI DLS/SF2 sample set file to load when opening a MIDI file.
        See below on what members to fill for each of the above types of sound you want to create.

        [REMARKS]
        This structure is optional!  Specify 0 or NULL in System::createSound if you don't need it!
        
        Members marked with [in] mean the user sets the value before passing it to the function.
        Members marked with [out] mean FMOD sets the value to be used after the function exits.
        
        &lt;u&gt;Loading a file from memory.&lt;/u&gt;
        &lt;li&gt;Create the sound using the FMOD_OPENMEMORY flag.
        &lt;li&gt;Mandantory.  Specify 'length' for the size of the memory block in bytes.
        &lt;li&gt;Other flags are optional.
        
        
        &lt;u&gt;Loading a file from within another larger (possibly wad/pak) file, by giving the loader an offset and length.&lt;/u&gt;
        &lt;li&gt;Mandantory.  Specify 'fileoffset' and 'length'.
        &lt;li&gt;Other flags are optional.
        
        
        &lt;u&gt;To create a user created / non file based sound.&lt;/u&gt;
        &lt;li&gt;Create the sound using the FMOD_OPENUSER flag.
        &lt;li&gt;Mandantory.  Specify 'defaultfrequency, 'numchannels' and 'format'.
        &lt;li&gt;Other flags are optional.
        
        
        &lt;u&gt;To specify a starting subsound to seek to and flush with, within a multi-sample stream (ie FSB/DLS/SF2).&lt;/u&gt;
        
        &lt;li&gt;Mandantory.  Specify 'initialsubsound'.
        
        
        &lt;u&gt;To specify which subsounds to load for multi-sample sounds (ie FSB/DLS/SF2) so that memory is saved and only a subset is actually loaded/read from disk.&lt;/u&gt;
        
        &lt;li&gt;Mandantory.  Specify 'inclusionlist' and 'inclusionlistnum'.
        
        
        &lt;u&gt;To specify 'piggyback' read and seek callbacks for capture of sound data as fmod reads and decodes it.  Useful for ripping decoded PCM data from sounds as they are loaded / played.&lt;/u&gt;
        
        &lt;li&gt;Mandantory.  Specify 'pcmreadcallback' and 'pcmseekcallback'.
        
        
        &lt;u&gt;To specify a MIDI DLS/SF2 sample set file to load when opening a MIDI file.&lt;/u&gt;
        
        &lt;li&gt;Mandantory.  Specify 'dlsname'.
        
        
        Setting the 'decodebuffersize' is for cpu intensive codecs that may be causing stuttering, not file intensive codecs (ie those from CD or netstreams) which are normally altered with System::setStreamBufferSize.  As an example of cpu intensive codecs, an mp3 file will take more cpu to decode than a PCM wav file.
        If you have a stuttering effect, then it is using more cpu than the decode buffer playback rate can keep up with.  Increasing the decode buffersize will most likely solve this problem.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        System::createSound
        System::setStreamBufferSize
        FMOD_MODE
    ]
    */
    public struct CREATESOUNDEXINFO
    {
        public int                         cbsize;                 /* [in] Size of this structure.  This is used so the structure can be expanded in the future and still work on older versions of FMOD Ex. */
        public uint                        length;                 /* [in] Optional. Specify 0 to ignore. Size in bytes of file to load, or sound to create (in this case only if FMOD_OPENUSER is used).  Required if loading from memory.  If 0 is specified, then it will use the size of the file (unless loading from memory then an error will be returned). */
        public uint                        fileoffset;             /* [in] Optional. Specify 0 to ignore. Offset from start of the file to start loading from.  This is useful for loading files from inside big data files. */
        public int                         numchannels;            /* [in] Optional. Specify 0 to ignore. Number of channels in a sound specified only if OPENUSER is used. */
        public int                         defaultfrequency;       /* [in] Optional. Specify 0 to ignore. Default frequency of sound in a sound specified only if OPENUSER is used.  Other formats use the frequency determined by the file format. */
        public SOUND_FORMAT                format;                 /* [in] Optional. Specify 0 or SOUND_FORMAT_NONE to ignore. Format of the sound specified only if OPENUSER is used.  Other formats use the format determined by the file format.   */
        public uint                        decodebuffersize;       /* [in] Optional. Specify 0 to ignore. For streams.  This determines the size of the double buffer (in PCM samples) that a stream uses.  Use this for user created streams if you want to determine the size of the callback buffer passed to you.  Specify 0 to use FMOD's default size which is currently equivalent to 400ms of the sound format created/loaded. */
        public int                         initialsubsound;        /* [in] Optional. Specify 0 to ignore. In a multi-sample file format such as .FSB/.DLS/.SF2, specify the initial subsound to seek to, only if CREATESTREAM is used. */
        public int                         numsubsounds;           /* [in] Optional. Specify 0 to ignore or have no subsounds.  In a user created multi-sample sound, specify the number of subsounds within the sound that are accessable with Sound::getSubSound / SoundGetSubSound. */
        public IntPtr                      inclusionlist;          /* [in] Optional. Specify 0 to ignore. In a multi-sample format such as .FSB/.DLS/.SF2 it may be desirable to specify only a subset of sounds to be loaded out of the whole file.  This is an array of subsound indicies to load into memory when created. */
        public int                         inclusionlistnum;       /* [in] Optional. Specify 0 to ignore. This is the number of integers contained within the */
        public SOUND_PCMREADCALLBACK       pcmreadcallback;        /* [in] Optional. Specify 0 to ignore. Callback to 'piggyback' on FMOD's read functions and accept or even write PCM data while FMOD is opening the sound.  Used for user sounds created with OPENUSER or for capturing decoded data as FMOD reads it. */
        public SOUND_PCMSETPOSCALLBACK     pcmsetposcallback;      /* [in] Optional. Specify 0 to ignore. Callback for when the user calls a seeking function such as Channel::setPosition within a multi-sample sound, and for when it is opened.*/
        public SOUND_NONBLOCKCALLBACK      nonblockcallback;       /* [in] Optional. Specify 0 to ignore. Callback for successful completion, or error while loading a sound that used the FMOD_NONBLOCKING flag.*/
        public string                      dlsname;                /* [in] Optional. Specify 0 to ignore. Filename for a DLS or SF2 sample set when loading a MIDI file.   If not specified, on windows it will attempt to open /windows/system32/drivers/gm.dls, otherwise the MIDI will fail to open.  */
        public string                      encryptionkey;          /* [in] Optional. Specify 0 to ignore. Key for encrypted FSB file.  Without this key an encrypted FSB file will not load. */
        public int                         maxpolyphony;           /* [in] Optional. Specify 0 to ingore. For sequenced formats with dynamic channel allocation such as .MID and .IT, this specifies the maximum voice count allowed while playing.  .IT defaults to 64.  .MID defaults to 32. */
        public IntPtr                      userdata;               /* [in] Optional. Specify 0 to ignore. This is user data to be attached to the sound during creation.  Access via Sound::getUserData. */
        public SOUND_TYPE                  suggestedsoundtype;     /* [in] Optional. Specify 0 or FMOD_SOUND_TYPE_UNKNOWN to ignore.  Instead of scanning all codec types, use this to speed up loading by making it jump straight to this codec. */
        public FMOD_FILE_OPENCALLBACK      useropen;               /* [in] Optional. Specify 0 to ignore. Callback for opening this file. */
        public FMOD_FILE_CLOSECALLBACK     userclose;              /* [in] Optional. Specify 0 to ignore. Callback for closing this file. */
        public FMOD_FILE_READCALLBACK      userread;               /* [in] Optional. Specify 0 to ignore. Callback for reading from this file. */
        public FMOD_FILE_SEEKCALLBACK      userseek;               /* [in] Optional. Specify 0 to ignore. Callback for seeking within this file. */
    }


    /*
    [STRUCTURE] 
    [
        [DESCRIPTION]
        Structure defining a reverb environment.
        
        For more indepth descriptions of the reverb properties under win32, please see the EAX2 and EAX3
        documentation at http://developer.creative.com/ under the 'downloads' section.
        If they do not have the EAX3 documentation, then most information can be attained from
        the EAX2 documentation, as EAX3 only adds some more parameters and functionality on top of 
        EAX2.

        [REMARKS]
        Note the default reverb properties are the same as the FMOD_PRESET_GENERIC preset.
        Note that integer values that typically range from -10,000 to 1000 are represented in 
        decibels, and are of a logarithmic scale, not linear, wheras float values are always linear.
        PORTABILITY: Each member has the platform it supports in braces ie (win32/xbox).  
        Some reverb parameters are only supported in win32 and some only on xbox. If all parameters are set then
        the reverb should product a similar effect on either platform.
        Win32/Win64 - This is only supported with FMOD_OUTPUTTYPE_DSOUND and EAX compatible sound cards. 
        Macintosh - Currently unsupported. 
        Linux - Currently unsupported. 
        XBox - Only a subset of parameters are supported.  
        PlayStation 2 - Only the Environment and Flags paramenters are supported. 
        GameCube - Only a subset of parameters are supported. 
        
        The numerical values listed below are the maximum, minimum and default values for each variable respectively.
        
        Members marked with [in] mean the user sets the value before passing it to the function.
        Members marked with [out] mean FMOD sets the value to be used after the function exits.

        [PLATFORMS]
        Win32, Win64, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        System::setReverbProperties
        System::getReverbProperties
        REVERB_PRESETS
        REVERB_FLAGS
    ]
    */
    public class REVERB_PROPERTIES
    {                                   /*          MIN     MAX    DEFAULT   DESCRIPTION */
        public int   Instance;          /* [in]     0     , 2     , 0      , EAX4 only. Environment Instance. 3 seperate reverbs simultaneously are possible. This specifies which one to set. (win32 only) */
        public uint  Environment;       /* [in/out] 0     , 25    , 0      , sets all listener properties (win32/ps2) */
        public float EnvSize;           /* [in/out] 1.0   , 100.0 , 7.5    , environment size in meters (win32 only) */
        public float EnvDiffusion;      /* [in/out] 0.0   , 1.0   , 1.0    , environment diffusion (win32/xbox) */
        public int   Room;              /* [in/out] -10000, 0     , -1000  , room effect level (at mid frequencies) (win32/xbox) */
        public int   RoomHF;            /* [in/out] -10000, 0     , -100   , relative room effect level at high frequencies (win32/xbox) */
        public int   RoomLF;            /* [in/out] -10000, 0     , 0      , relative room effect level at low frequencies (win32 only) */
        public float DecayTime;         /* [in/out] 0.1   , 20.0  , 1.49   , reverberation decay time at mid frequencies (win32/xbox) */
        public float DecayHFRatio;      /* [in/out] 0.1   , 2.0   , 0.83   , high-frequency to mid-frequency decay time ratio (win32/xbox) */
        public float DecayLFRatio;      /* [in/out] 0.1   , 2.0   , 1.0    , low-frequency to mid-frequency decay time ratio (win32 only) */
        public int   Reflections;       /* [in/out] -10000, 1000  , -2602  , early reflections level relative to room effect (win32/xbox) */
        public float ReflectionsDelay;  /* [in/out] 0.0   , 0.3   , 0.007  , initial reflection delay time (win32/xbox) */
        [MarshalAs(UnmanagedType.ByValArray,SizeConst=3)]
        public float[] ReflectionsPan;  /* [in/out]       ,       , [0,0,0], early reflections panning vector (win32 only) */
        public int   Reverb;            /* [in/out] -10000, 2000  , 200    , late reverberation level relative to room effect (win32/xbox) */
        public float ReverbDelay;       /* [in/out] 0.0   , 0.1   , 0.011  , late reverberation delay time relative to initial reflection (win32/xbox) */
        [MarshalAs(UnmanagedType.ByValArray,SizeConst=3)]
        public float[] ReverbPan;       /* [in/out]       ,       , [0,0,0], late reverberation panning vector (win32 only) */
        public float EchoTime;          /* [in/out] .075  , 0.25  , 0.25   , echo time (win32 only) */
        public float EchoDepth;         /* [in/out] 0.0   , 1.0   , 0.0    , echo depth (win32 only) */
        public float ModulationTime;    /* [in/out] 0.04  , 4.0   , 0.25   , modulation time (win32 only) */
        public float ModulationDepth;   /* [in/out] 0.0   , 1.0   , 0.0    , modulation depth (win32 only) */
        public float AirAbsorptionHF;   /* [in/out] -100  , 0.0   , -5.0   , change in level per meter at high frequencies (win32 only) */
        public float HFReference;       /* [in/out] 1000.0, 20000 , 5000.0 , reference high frequency (hz) (win32/xbox) */
        public float LFReference;       /* [in/out] 20.0  , 1000.0, 250.0  , reference low frequency (hz) (win32 only) */
		public float RoomRolloffFactor; /* [in/out] 0.0   , 10.0  , 0.0    , like rolloffscale in System::set3DSettings but for reverb room size effect (win32/Xbox) */
        public float Diffusion;         /* [in/out] 0.0   , 100.0 , 100.0  , Value that controls the echo density in the late reverberation decay. (xbox only) */
        public float Density;           /* [in/out] 0.0   , 100.0 , 100.0  , Value that controls the modal density in the late reverberation decay (xbox only) */
        public uint  Flags;             /* [in/out] REVERB_FLAGS - modifies the behavior of above properties (win32/ps2) */

        #region wrapperinternal
        public REVERB_PROPERTIES(int instance, uint environment, float envSize, float envDiffusion, int room, int roomHF, int roomLF,
                          float decayTime, float decayHFRatio, float decayLFRatio, int reflections, float reflectionsDelay,
                          float reflectionsPanx, float reflectionsPany, float reflectionsPanz, int reverb, float reverbDelay,
                          float reverbPanx, float reverbPany, float reverbPanz, float echoTime, float echoDepth, float modulationTime,
                          float modulationDepth, float airAbsorptionHF, float hfReference, float lfReference, float roomRolloffFactor,
                          float diffusion, float density, uint flags)
        {
            ReflectionsPan      = new float[3];
            ReverbPan           = new float[3];

            Instance            = instance;
            Environment         = environment;
            EnvSize             = envSize;
            EnvDiffusion        = envDiffusion;
            Room                = room;
            RoomHF              = roomHF;
            RoomLF              = roomLF;
            DecayTime           = decayTime;
            DecayHFRatio        = decayHFRatio;
            DecayLFRatio        = decayLFRatio;
            Reflections         = reflections;
            ReflectionsDelay    = reflectionsDelay;
            ReflectionsPan[0]   = reflectionsPanx;
            ReflectionsPan[1]   = reflectionsPany;
            ReflectionsPan[2]   = reflectionsPanz;
            Reverb              = reverb;
            ReverbDelay          = reverbDelay;
            ReverbPan[0]        = reverbPanx;
            ReverbPan[1]        = reverbPany;
            ReverbPan[2]        = reverbPanz;
            EchoTime            = echoTime;
            EchoDepth           = echoDepth;
            ModulationTime      = modulationTime;
            ModulationDepth     = modulationDepth;
            AirAbsorptionHF     = airAbsorptionHF;
            HFReference         = hfReference;
            LFReference         = lfReference;
            RoomRolloffFactor   = roomRolloffFactor;
            Diffusion           = diffusion;
            Density             = density;
            Flags               = flags;
        }
        #endregion
    }


    /*
    [DEFINE] 
    [
        [NAME] 
        REVERB_FLAGS

        [DESCRIPTION]
        Values for the Flags member of the REVERB_PROPERTIES structure.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        REVERB_PROPERTIES
    ]
    */
    public class REVERB_FLAGS
    {
        public const uint DECAYTIMESCALE        = 0x00000001;   /* 'EnvSize' affects reverberation decay time */
        public const uint REFLECTIONSSCALE      = 0x00000002;   /* 'EnvSize' affects reflection level */
        public const uint REFLECTIONSDELAYSCALE = 0x00000004;   /* 'EnvSize' affects initial reflection delay time */
        public const uint REVERBSCALE           = 0x00000008;   /* 'EnvSize' affects reflections level */
        public const uint REVERBDELAYSCALE      = 0x00000010;   /* 'EnvSize' affects late reverberation delay time */
        public const uint DECAYHFLIMIT          = 0x00000020;   /* AirAbsorptionHF affects DecayHFRatio */
        public const uint ECHOTIMESCALE         = 0x00000040;   /* 'EnvSize' affects echo time */
        public const uint MODULATIONTIMESCALE   = 0x00000080;   /* 'EnvSize' affects modulation time */
        public const uint DEFAULT               = (DECAYTIMESCALE | 
            REFLECTIONSSCALE | 
            REFLECTIONSDELAYSCALE | 
            REVERBSCALE | 
            REVERBDELAYSCALE | 
            DECAYHFLIMIT);
    }


    /*
    [DEFINE] 
    [
    [NAME] 
    FMOD_REVERB_PRESETS

    [DESCRIPTION]   
    A set of predefined environment PARAMETERS, created by Creative Labs
    These are used to initialize an FMOD_REVERB_PROPERTIES structure statically.
    ie 
    FMOD_REVERB_PROPERTIES prop = FMOD_PRESET_GENERIC;

    [PLATFORMS]
    Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

    [SEE_ALSO]
    System::setReverbProperties
    ]
    */
    class PRESET
    {
        /*                                                                           Instance  Env   Size    Diffus  Room   RoomHF  RmLF DecTm   DecHF  DecLF   Refl  RefDel  RefPan           Revb  RevDel  ReverbPan       EchoTm  EchDp  ModTm  ModDp  AirAbs  HFRef    LFRef  RRlOff Diffus  Densty  FLAGS */
        public REVERB_PROPERTIES OFF()                 { return new REVERB_PROPERTIES(0,       0,    7.5f,   1.00f, -10000, -10000, 0,   1.00f,  1.00f, 1.0f,  -2602, 0.007f, 0.0f,0.0f,0.0f,   200, 0.011f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,   0.0f,   0.0f, 0x3f );}
        public REVERB_PROPERTIES GENERIC()             { return new REVERB_PROPERTIES(0,       0,    7.5f,   1.00f, -1000,  -100,   0,   1.49f,  0.83f, 1.0f,  -2602, 0.007f, 0.0f,0.0f,0.0f,   200, 0.011f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES PADDEDCELL()          { return new REVERB_PROPERTIES(0,       1,    1.4f,   1.00f, -1000,  -6000,  0,   0.17f,  0.10f, 1.0f,  -1204, 0.001f, 0.0f,0.0f,0.0f,   207, 0.002f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES ROOM()                { return new REVERB_PROPERTIES(0,       2,    1.9f,   1.00f, -1000,  -454,   0,   0.40f,  0.83f, 1.0f,  -1646, 0.002f, 0.0f,0.0f,0.0f,    53, 0.003f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES BATHROOM()            { return new REVERB_PROPERTIES(0,       3,    1.4f,   1.00f, -1000,  -1200,  0,   1.49f,  0.54f, 1.0f,   -370, 0.007f, 0.0f,0.0f,0.0f,  1030, 0.011f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f,  60.0f, 0x3f );}
        public REVERB_PROPERTIES LIVINGROOM()          { return new REVERB_PROPERTIES(0,       4,    2.5f,   1.00f, -1000,  -6000,  0,   0.50f,  0.10f, 1.0f,  -1376, 0.003f, 0.0f,0.0f,0.0f, -1104, 0.004f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES STONEROOM()           { return new REVERB_PROPERTIES(0,       5,    11.6f,  1.00f, -1000,  -300,   0,   2.31f,  0.64f, 1.0f,   -711, 0.012f, 0.0f,0.0f,0.0f,    83, 0.017f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES AUDITORIUM()          { return new REVERB_PROPERTIES(0,       6,    21.6f,  1.00f, -1000,  -476,   0,   4.32f,  0.59f, 1.0f,   -789, 0.020f, 0.0f,0.0f,0.0f,  -289, 0.030f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES CONCERTHALL()         { return new REVERB_PROPERTIES(0,       7,    19.6f,  1.00f, -1000,  -500,   0,   3.92f,  0.70f, 1.0f,  -1230, 0.020f, 0.0f,0.0f,0.0f,    -2, 0.029f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES CAVE()                { return new REVERB_PROPERTIES(0,       8,    14.6f,  1.00f, -1000,  0,      0,   2.91f,  1.30f, 1.0f,   -602, 0.015f, 0.0f,0.0f,0.0f,  -302, 0.022f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x1f );}
        public REVERB_PROPERTIES ARENA()               { return new REVERB_PROPERTIES(0,       9,    36.2f,  1.00f, -1000,  -698,   0,   7.24f,  0.33f, 1.0f,  -1166, 0.020f, 0.0f,0.0f,0.0f,    16, 0.030f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES HANGAR()              { return new REVERB_PROPERTIES(0,       10,   50.3f,  1.00f, -1000,  -1000,  0,   10.05f, 0.23f, 1.0f,   -602, 0.020f, 0.0f,0.0f,0.0f,   198, 0.030f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES CARPETTEDHALLWAY()    { return new REVERB_PROPERTIES(0,       11,   1.9f,   1.00f, -1000,  -4000,  0,   0.30f,  0.10f, 1.0f,  -1831, 0.002f, 0.0f,0.0f,0.0f, -1630, 0.030f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES HALLWAY()             { return new REVERB_PROPERTIES(0,       12,   1.8f,   1.00f, -1000,  -300,   0,   1.49f,  0.59f, 1.0f,  -1219, 0.007f, 0.0f,0.0f,0.0f,   441, 0.011f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES STONECORRIDOR()       { return new REVERB_PROPERTIES(0,       13,   13.5f,  1.00f, -1000,  -237,   0,   2.70f,  0.79f, 1.0f,  -1214, 0.013f, 0.0f,0.0f,0.0f,   395, 0.020f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES ALLEY()               { return new REVERB_PROPERTIES(0,       14,   7.5f,   0.30f, -1000,  -270,   0,   1.49f,  0.86f, 1.0f,  -1204, 0.007f, 0.0f,0.0f,0.0f,    -4, 0.011f, 0.0f,0.0f,0.0f, 0.125f, 0.95f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES FOREST()              { return new REVERB_PROPERTIES(0,       15,   38.0f,  0.30f, -1000,  -3300,  0,   1.49f,  0.54f, 1.0f,  -2560, 0.162f, 0.0f,0.0f,0.0f,  -229, 0.088f, 0.0f,0.0f,0.0f, 0.125f, 1.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,  79.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES CITY()                { return new REVERB_PROPERTIES(0,       16,   7.5f,   0.50f, -1000,  -800,   0,   1.49f,  0.67f, 1.0f,  -2273, 0.007f, 0.0f,0.0f,0.0f, -1691, 0.011f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,  50.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES MOUNTAINS()           { return new REVERB_PROPERTIES(0,       17,   100.0f, 0.27f, -1000,  -2500,  0,   1.49f,  0.21f, 1.0f,  -2780, 0.300f, 0.0f,0.0f,0.0f, -1434, 0.100f, 0.0f,0.0f,0.0f, 0.250f, 1.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,  27.0f, 100.0f, 0x1f );}
        public REVERB_PROPERTIES QUARRY()              { return new REVERB_PROPERTIES(0,       18,   17.5f,  1.00f, -1000,  -1000,  0,   1.49f,  0.83f, 1.0f, -10000, 0.061f, 0.0f,0.0f,0.0f,   500, 0.025f, 0.0f,0.0f,0.0f, 0.125f, 0.70f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES PLAIN()               { return new REVERB_PROPERTIES(0,       19,   42.5f,  0.21f, -1000,  -2000,  0,   1.49f,  0.50f, 1.0f,  -2466, 0.179f, 0.0f,0.0f,0.0f, -1926, 0.100f, 0.0f,0.0f,0.0f, 0.250f, 1.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,  21.0f, 100.0f, 0x3f );}
        public REVERB_PROPERTIES PARKINGLOT()          { return new REVERB_PROPERTIES(0,       20,   8.3f,   1.00f, -1000,  0,      0,   1.65f,  1.50f, 1.0f,  -1363, 0.008f, 0.0f,0.0f,0.0f, -1153, 0.012f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x1f );}
        public REVERB_PROPERTIES SEWERPIPE()           { return new REVERB_PROPERTIES(0,       21,   1.7f,   0.80f, -1000,  -1000,  0,   2.81f,  0.14f, 1.0f,    429, 0.014f, 0.0f,0.0f,0.0f,  1023, 0.021f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,  80.0f,  60.0f, 0x3f );}
        public REVERB_PROPERTIES UNDERWATER()          { return new REVERB_PROPERTIES(0,       22,   1.8f,   1.00f, -1000,  -4000,  0,   1.49f,  0.10f, 1.0f,   -449, 0.007f, 0.0f,0.0f,0.0f,  1700, 0.011f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 1.18f, 0.348f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f );}

        /* Non I3DL2 presets */

        public REVERB_PROPERTIES DRUGGED()             { return new REVERB_PROPERTIES(0,       23,   1.9f,   0.50f, -1000,  0,      0,   8.39f,  1.39f, 1.0f,  -115,  0.002f, 0.0f,0.0f,0.0f,   985, 0.030f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 0.25f, 1.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x1f );}
        public REVERB_PROPERTIES DIZZY()               { return new REVERB_PROPERTIES(0,       24,   1.8f,   0.60f, -1000,  -400,   0,   17.23f, 0.56f, 1.0f,  -1713, 0.020f, 0.0f,0.0f,0.0f,  -613, 0.030f, 0.0f,0.0f,0.0f, 0.250f, 1.00f, 0.81f, 0.310f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x1f );}
        public REVERB_PROPERTIES PSYCHOTIC()           { return new REVERB_PROPERTIES(0,       25,   1.0f,   0.50f, -1000,  -151,   0,   7.56f,  0.91f, 1.0f,  -626,  0.020f, 0.0f,0.0f,0.0f,   774, 0.030f, 0.0f,0.0f,0.0f, 0.250f, 0.00f, 4.00f, 1.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x1f );}

        /* PlayStation 2 Only presets */

        public REVERB_PROPERTIES PS2_ROOM()            { return new REVERB_PROPERTIES(0,       1,    0,	    0,         0,  0,      0,   0.0f,   0.0f,  0.0f,     0,  0.000f,  0.0f,0.0f,0.0f ,     0, 0.000f,  0.0f,0.0f,0.0f , 0.000f, 0.00f, 0.00f, 0.000f,  0.0f, 0000.0f,   0.0f, 0.0f,   0.0f,   0.0f, 0x31f );}
        public REVERB_PROPERTIES PS2_STUDIO_A()        { return new REVERB_PROPERTIES(0,       2,    0,	    0,         0,  0,      0,   0.0f,   0.0f,  0.0f,     0,  0.000f,  0.0f,0.0f,0.0f ,     0, 0.000f,  0.0f,0.0f,0.0f , 0.000f, 0.00f, 0.00f, 0.000f,  0.0f, 0000.0f,   0.0f, 0.0f,   0.0f,   0.0f, 0x31f );}
        public REVERB_PROPERTIES PS2_STUDIO_B()        { return new REVERB_PROPERTIES(0,       3,    0,	    0,         0,  0,      0,   0.0f,   0.0f,  0.0f,     0,  0.000f,  0.0f,0.0f,0.0f ,     0, 0.000f,  0.0f,0.0f,0.0f , 0.000f, 0.00f, 0.00f, 0.000f,  0.0f, 0000.0f,   0.0f, 0.0f,   0.0f,   0.0f, 0x31f );}
        public REVERB_PROPERTIES PS2_STUDIO_C()        { return new REVERB_PROPERTIES(0,       4,    0,	    0,         0,  0,      0,   0.0f,   0.0f,  0.0f,     0,  0.000f,  0.0f,0.0f,0.0f ,     0, 0.000f,  0.0f,0.0f,0.0f , 0.000f, 0.00f, 0.00f, 0.000f,  0.0f, 0000.0f,   0.0f, 0.0f,   0.0f,   0.0f, 0x31f );}
        public REVERB_PROPERTIES PS2_HALL()            { return new REVERB_PROPERTIES(0,       5,    0,	    0,         0,  0,      0,   0.0f,   0.0f,  0.0f,     0,  0.000f,  0.0f,0.0f,0.0f ,     0, 0.000f,  0.0f,0.0f,0.0f , 0.000f, 0.00f, 0.00f, 0.000f,  0.0f, 0000.0f,   0.0f, 0.0f,   0.0f,   0.0f, 0x31f );}
        public REVERB_PROPERTIES PS2_SPACE()           { return new REVERB_PROPERTIES(0,       6,    0,	    0,         0,  0,      0,   0.0f,   0.0f,  0.0f,     0,  0.000f,  0.0f,0.0f,0.0f ,     0, 0.000f,  0.0f,0.0f,0.0f , 0.000f, 0.00f, 0.00f, 0.000f,  0.0f, 0000.0f,   0.0f, 0.0f,   0.0f,   0.0f, 0x31f );}
        public REVERB_PROPERTIES PS2_ECHO()            { return new REVERB_PROPERTIES(0,       7,    0,	    0,         0,  0,      0,   0.0f,   0.0f,  0.0f,     0,  0.000f,  0.0f,0.0f,0.0f ,     0, 0.000f,  0.0f,0.0f,0.0f , 0.000f, 0.00f, 0.00f, 0.000f,  0.0f, 0000.0f,   0.0f, 0.0f,   0.0f,   0.0f, 0x31f );}
        public REVERB_PROPERTIES PS2_DELAY()           { return new REVERB_PROPERTIES(0,       8,    0,	    0,         0,  0,      0,   0.0f,   0.0f,  0.0f,     0,  0.000f,  0.0f,0.0f,0.0f ,     0, 0.000f,  0.0f,0.0f,0.0f , 0.000f, 0.00f, 0.00f, 0.000f,  0.0f, 0000.0f,   0.0f, 0.0f,   0.0f,   0.0f, 0x31f );}
        public REVERB_PROPERTIES PS2_PIPE()            { return new REVERB_PROPERTIES(0,       9,    0,	    0,         0,  0,      0,   0.0f,   0.0f,  0.0f,     0,  0.000f,  0.0f,0.0f,0.0f ,     0, 0.000f,  0.0f,0.0f,0.0f , 0.000f, 0.00f, 0.00f, 0.000f,  0.0f, 0000.0f,   0.0f, 0.0f,   0.0f,   0.0f, 0x31f );}
    }

    /*
    [STRUCTURE] 
    [
        [DESCRIPTION]
        Structure defining the properties for a reverb source, related to a FMOD channel.

        For more indepth descriptions of the reverb properties under win32, please see the EAX3
        documentation at http://developer.creative.com/ under the 'downloads' section.
        If they do not have the EAX3 documentation, then most information can be attained from
        the EAX2 documentation, as EAX3 only adds some more parameters and functionality on top of 
        EAX2.

        Note the default reverb properties are the same as the PRESET_GENERIC preset.
        Note that integer values that typically range from -10,000 to 1000 are represented in 
        decibels, and are of a logarithmic scale, not linear, wheras FLOAT values are typically linear.
        PORTABILITY: Each member has the platform it supports in braces ie (win32/xbox).  
        Some reverb parameters are only supported in win32 and some only on xbox. If all parameters are set then
        the reverb should product a similar effect on either platform.
        Linux and FMODCE do not support the reverb api.

        The numerical values listed below are the maximum, minimum and default values for each variable respectively.

        [REMARKS]
        For EAX4 support with multiple reverb environments, set FMOD_REVERB_CHANNELFLAGS_ENVIRONMENT0,
        FMOD_REVERB_CHANNELFLAGS_ENVIRONMENT1 or/and FMOD_REVERB_CHANNELFLAGS_ENVIRONMENT2 in the flags member 
        of FMOD_REVERB_CHANNELPROPERTIES to specify which environment instance(s) to target. 
        Only up to 2 environments to target can be specified at once. Specifying three will result in an error.
        If the sound card does not support EAX4, the environment flag is ignored.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        Channel::setReverbProperties
        Channel::getReverbProperties
        REVERB_CHANNELFLAGS
    ]
    */
    public struct REVERB_CHANNELPROPERTIES  
    {                                      /*          MIN     MAX    DEFAULT  DESCRIPTION */
        public int   Direct;               /* [in/out] -10000, 1000,  0,       direct path level (at low and mid frequencies) (win32/xbox) */
        public int   DirectHF;             /* [in/out] -10000, 0,     0,       relative direct path level at high frequencies (win32/xbox) */
        public int   Room;                 /* [in/out] -10000, 1000,  0,       room effect level (at low and mid frequencies) (win32/xbox) */
        public int   RoomHF;               /* [in/out] -10000, 0,     0,       relative room effect level at high frequencies (win32/xbox) */
        public int   Obstruction;          /* [in/out] -10000, 0,     0,       main obstruction control (attenuation at high frequencies)  (win32/xbox) */
        public float ObstructionLFRatio;   /* [in/out] 0.0,    1.0,   0.0,     obstruction low-frequency level re. main control (win32/xbox) */
        public int   Occlusion;            /* [in/out] -10000, 0,     0,       main occlusion control (attenuation at high frequencies) (win32/xbox) */
        public float OcclusionLFRatio;     /* [in/out] 0.0,    1.0,   0.25,    occlusion low-frequency level re. main control (win32/xbox) */
        public float OcclusionRoomRatio;   /* [in/out] 0.0,    10.0,  1.5,     relative occlusion control for room effect (win32) */
        public float OcclusionDirectRatio; /* [in/out] 0.0,    10.0,  1.0,     relative occlusion control for direct path (win32) */
        public int   Exclusion;            /* [in/out] -10000, 0,     0,       main exlusion control (attenuation at high frequencies) (win32) */
        public float ExclusionLFRatio;     /* [in/out] 0.0,    1.0,   1.0,     exclusion low-frequency level re. main control (win32) */
        public int   OutsideVolumeHF;      /* [in/out] -10000, 0,     0,       outside sound cone level at high frequencies (win32) */
        public float DopplerFactor;        /* [in/out] 0.0,    10.0,  0.0,     like DS3D flDopplerFactor but per source (win32) */
        public float RolloffFactor;        /* [in/out] 0.0,    10.0,  0.0,     like DS3D flRolloffFactor but per source (win32) */
        public float RoomRolloffFactor;    /* [in/out] 0.0,    10.0,  0.0,     like DS3D flRolloffFactor but for room effect (win32/xbox) */
        public float AirAbsorptionFactor;  /* [in/out] 0.0,    10.0,  1.0,     multiplies AirAbsorptionHF member of REVERB_PROPERTIES (win32) */
        public uint  Flags;                /* [in/out] REVERB_CHANNELFLAGS - modifies the behavior of properties (win32) */
    }


    /*
    [DEFINE] 
    [
        [NAME] 
        REVERB_CHANNELFLAGS

        [DESCRIPTION]
        Values for the Flags member of the REVERB_CHANNELPROPERTIES structure.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        REVERB_CHANNELPROPERTIES
    ]
    */
    public class REVERB_CHANNELFLAGS
    {
        public const uint DIRECTHFAUTO = 0x00000001; /* Automatic setting of 'Direct'  due to distance from listener */
        public const uint ROOMAUTO     = 0x00000002; /* Automatic setting of 'Room'  due to distance from listener */
        public const uint ROOMHFAUTO   = 0x00000004; /* Automatic setting of 'RoomHF' due to distance from listener */
        public const uint ENVIRONMENT0 = 0x00000008; /* EAX4 only. Specify channel to target reverb instance 0. */
        public const uint ENVIRONMENT1 = 0x00000010; /* EAX4 only. Specify channel to target reverb instance 1. */
        public const uint ENVIRONMENT2 = 0x00000020; /* EAX4 only. Specify channel to target reverb instance 2. */
        public const uint DEFAULT      = (DIRECTHFAUTO | ROOMAUTO | ROOMHFAUTO | ENVIRONMENT0);
    }


    /*
    [STRUCTURE] 
    [
        [DESCRIPTION]
        Settings for advanced features like configuring memory and cpu usage for the FMOD_CREATECOMPRESSEDSAMPLE feature.
   
        [REMARKS]
        maxMPEGcodecs / maxADPCMcodecs / maxXMAcodecs will determine the maximum cpu usage of playing realtime samples.  Use this to lower potential excess cpu usage and also control memory usage.&lt;br&gt;
   
        [PLATFORMS]
        Win32, Win64, Linux, Linux64, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable, PlayStation 3
   
        [SEE_ALSO]
        System::setAdvancedSettings
        System::getAdvancedSettings
    ]
    */
    public class ADVANCEDSETTINGS
    {                       
        public int     cbsize;             /* Size of structure.  Use sizeof(FMOD_ADVANCEDSETTINGS) */
        public int     maxMPEGcodecs;      /* For use with FMOD_CREATECOMPRESSEDSAMPLE only.  Mpeg  codecs consume 48,696 per instance and this number will determine how many mpeg channels can be played simultaneously.  Default = 16. */
        public int     maxADPCMcodecs;     /* For use with FMOD_CREATECOMPRESSEDSAMPLE only.  ADPCM codecs consume 1k per instance and this number will determine how many ADPCM channels can be played simultaneously.  Default = 32. */
        public int     maxXMAcodecs;       /* For use with FMOD_CREATECOMPRESSEDSAMPLE only.  XMA   codecs consume 8k per instance and this number will determine how many XMA channels can be played simultaneously.  Default = 32.  */
    }


    /*
    [ENUM] 
    [
        [NAME] 
        FMOD_MISC_VALUES

        [DESCRIPTION]
        Miscellaneous values for FMOD functions.

        [PLATFORMS]
        Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable

        [SEE_ALSO]
        System::playSound
        System::playDSP
        System::getChannel
    ]
    */
    public enum CHANNELINDEX
    {
        FREE   = -1,     /* For a channel index, FMOD chooses a free voice using the priority system. */
        REUSE  = -2      /* For a channel index, re-use the channel handle that was passed in. */
    }


    /* 
        FMOD Callbacks
    */
    public delegate RESULT CHANNEL_CALLBACK      (IntPtr channelraw, CHANNEL_CALLBACKTYPE type, int command, uint commanddata1, uint commanddata2);

    public delegate RESULT FILE_OPENCALLBACK     (string name, int unicode, ref uint filesize, ref IntPtr handle, ref IntPtr userdata);
    public delegate RESULT FILE_CLOSECALLBACK    (IntPtr handle, IntPtr userdata);
    public delegate RESULT FILE_READCALLBACK     (IntPtr handle, IntPtr buffer, uint sizebytes, ref uint bytesread, IntPtr userdata);
    public delegate RESULT FILE_SEEKCALLBACK     (IntPtr handle, int pos, IntPtr userdata);


    /*
        FMOD System factory functions.  Use this to create an FMOD System Instance.  below you will see System_Init/Close to get started.
    */
    public class Factory
    {        
        public static RESULT System_Create(ref System system)
        {
            RESULT result      = RESULT.OK;
            IntPtr      systemraw   = new IntPtr();
            System      systemnew   = null;

            result = FMOD_System_Create(ref systemraw);
            if (result != RESULT.OK)
            {
                return result;
            }

            systemnew = new System();
            systemnew.setRaw(systemraw);
            system = systemnew;

            return result;
        }


        #region importfunctions
  
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_Create                      (ref IntPtr system);

        #endregion
    }


    /*
        'System' API
    */
    public class System
    {
        public RESULT release                ()
        {
            return FMOD_System_Release(systemraw);
        }


        // Pre-init functions.
        public RESULT setOutput              (OUTPUTTYPE output)
        {
            return FMOD_System_SetOutput(systemraw, output);
        }
        public RESULT getOutput              (ref OUTPUTTYPE output)
        {
            return FMOD_System_GetOutput(systemraw, ref output);
        }
        public RESULT getNumDrivers          (ref int numdrivers)
        {
            return FMOD_System_GetNumDrivers(systemraw, ref numdrivers);
        }
        public RESULT getDriverName          (int id, StringBuilder name, int namelen)
        {
            return FMOD_System_GetDriverName(systemraw, id, name, namelen);
        }
        public RESULT getDriverCaps          (int id, ref CAPS caps, ref int minfrequency, ref int maxfrequency, ref SPEAKERMODE controlpanelspeakermode)
        {
            return FMOD_System_GetDriverCaps(systemraw, id, ref caps, ref minfrequency, ref maxfrequency, ref controlpanelspeakermode);
        }
        public RESULT setDriver              (int driver)
        {
            return FMOD_System_SetDriver(systemraw, driver);
        }
        public RESULT getDriver              (ref int driver)
        {
            return FMOD_System_GetDriver(systemraw, ref driver);
        }
        public RESULT setHardwareChannels    (int min2d, int max2d, int min3d, int max3d)
        {
            return FMOD_System_SetHardwareChannels(systemraw, min2d, max2d, min3d, max3d);
        }
        public RESULT getHardwareChannels    (ref int num2d, ref int num3d, ref int total)
        {
            return FMOD_System_GetHardwareChannels(systemraw, ref num2d, ref num3d, ref total);
        }
        public RESULT setSoftwareChannels    (int numsoftwarechannels)
        {
            return FMOD_System_SetSoftwareChannels(systemraw, numsoftwarechannels);
        }
        public RESULT getSoftwareChannels    (ref int numsoftwarechannels)
        {
            return FMOD_System_GetSoftwareChannels(systemraw, ref numsoftwarechannels);
        }
        public RESULT setSoftwareFormat      (int samplerate, SOUND_FORMAT format, int numoutputchannels, int maxinputchannels, DSP_RESAMPLER resamplemethod)
        {
            return FMOD_System_SetSoftwareFormat(systemraw, samplerate, format, numoutputchannels, maxinputchannels, resamplemethod);
        }
        public RESULT getSoftwareFormat      (ref int samplerate, ref SOUND_FORMAT format, ref int numoutputchannels, ref int maxinputchannels, ref DSP_RESAMPLER resamplemethod, ref int bits)
        {
            return FMOD_System_GetSoftwareFormat(systemraw, ref samplerate, ref format, ref numoutputchannels, ref maxinputchannels, ref resamplemethod, ref bits);
        }
        public RESULT setDSPBufferSize       (uint bufferlength, int numbuffers)
        {
            return FMOD_System_SetDSPBufferSize(systemraw, bufferlength, numbuffers);
        }
        public RESULT getDSPBufferSize       (ref uint bufferlength, ref int numbuffers)
        {
            return FMOD_System_GetDSPBufferSize(systemraw, ref bufferlength, ref numbuffers);
        }
        public RESULT setFileSystem          (FILE_OPENCALLBACK useropen, FILE_CLOSECALLBACK userclose, FILE_READCALLBACK userread, FILE_SEEKCALLBACK userseek, int buffersize)
        {
            return FMOD_System_SetFileSystem(systemraw, useropen, userclose, userread, userseek, buffersize);
        }
        public RESULT attachFileSystem       (FILE_OPENCALLBACK useropen, FILE_CLOSECALLBACK userclose, FILE_READCALLBACK userread, FILE_SEEKCALLBACK userseek)
        {
            return FMOD_System_AttachFileSystem(systemraw, useropen, userclose, userread, userseek);
        }
        public RESULT setAdvancedSettings    (ref ADVANCEDSETTINGS settings)
        {
            return FMOD_System_SetAdvancedSettings(systemraw, ref settings);
        }
        public RESULT getAdvancedSettings    (ref ADVANCEDSETTINGS settings)
        {
            return FMOD_System_GetAdvancedSettings(systemraw, ref settings);
        }
        public RESULT setSpeakerMode         (SPEAKERMODE speakermode)
        {
            return FMOD_System_SetSpeakerMode(systemraw, speakermode);
        }
        public RESULT getSpeakerMode         (ref SPEAKERMODE speakermode)
        {
            return FMOD_System_GetSpeakerMode(systemraw, ref speakermode);
        }
        
                         
        // Plug-in support
        public RESULT setPluginPath          (string path)
        {
            return FMOD_System_SetPluginPath(systemraw, path);
        }
        public RESULT loadPlugin             (string filename, ref PLUGINTYPE plugintype, ref int index)
        {
            return FMOD_System_LoadPlugin(systemraw, filename, ref plugintype, ref index);
        }
        public RESULT getNumPlugins          (PLUGINTYPE plugintype, ref int numplugins)
        {
            return FMOD_System_GetNumPlugins(systemraw, plugintype, ref numplugins);
        }
        public RESULT getPluginInfo          (PLUGINTYPE plugintype, int index, StringBuilder name, int namelen, ref uint version)
        {
            return FMOD_System_GetPluginInfo(systemraw, plugintype, index, name, namelen, ref version);
        }
        public RESULT unloadPlugin           (PLUGINTYPE plugintype, int index)
        {
            return FMOD_System_UnloadPlugin(systemraw, plugintype, index);
        }
        public RESULT setOutputByPlugin      (int index)
        {
            return FMOD_System_SetOutputByPlugin(systemraw, index);
        }
        public RESULT getOutputByPlugin      (ref int index)
        {
            return FMOD_System_GetOutputByPlugin(systemraw, ref index);
        }
        public RESULT createCodec            (IntPtr codecdescription)
        {
            return FMOD_System_CreateCodec(systemraw, codecdescription);
        }


        // Init/Close 
        public RESULT init                   (int maxchannels, INITFLAG flags, IntPtr extradata)
        {
            return FMOD_System_Init(systemraw, maxchannels, flags, extradata);
        }
        public RESULT close                  ()
        {
            return FMOD_System_Close(systemraw);
        }


        // General post-init system functions
        public RESULT update                 ()
        {
            return FMOD_System_Update(systemraw);
        }
        public RESULT updateFinished()
        {
            return FMOD_System_UpdateFinished(systemraw);
        }

        public RESULT set3DSettings          (float dopplerscale, float distancefactor, float rolloffscale)
        {
            return FMOD_System_Set3DSettings(systemraw, dopplerscale, distancefactor, rolloffscale);
        }
        public RESULT get3DSettings          (ref float dopplerscale, ref float distancefactor, ref float rolloffscale)
        {
            return FMOD_System_Get3DSettings(systemraw, ref dopplerscale, ref distancefactor, ref rolloffscale);
        }
        public RESULT set3DNumListeners      (int numlisteners)
        {
            return FMOD_System_Set3DNumListeners(systemraw, numlisteners);
        }
        public RESULT get3DNumListeners      (ref int numlisteners)
        {
            return FMOD_System_Get3DNumListeners(systemraw, ref numlisteners);
        }
        public RESULT set3DListenerAttributes(int listener, ref VECTOR pos, ref VECTOR vel, ref VECTOR forward, ref VECTOR up)
        {
            return FMOD_System_Set3DListenerAttributes(systemraw, listener, ref pos, ref vel, ref forward, ref up);
        }
        public RESULT get3DListenerAttributes(int listener, ref VECTOR pos, ref VECTOR vel, ref VECTOR forward, ref VECTOR up)
        {
            return FMOD_System_Get3DListenerAttributes(systemraw, listener, ref pos, ref vel, ref forward, ref up);
        }

        public RESULT setSpeakerPosition     (SPEAKER speaker, float x, float y)
        {
            return FMOD_System_SetSpeakerPosition(systemraw, speaker, x, y);
        }
        public RESULT getSpeakerPosition     (SPEAKER speaker, ref float x, ref float y)
        {
            return FMOD_System_GetSpeakerPosition(systemraw, speaker, ref x, ref y);
        }

        public RESULT setStreamBufferSize    (uint filebuffersize, TIMEUNIT filebuffersizetype)
        {
            return FMOD_System_SetStreamBufferSize(systemraw, filebuffersize, filebuffersizetype);
        }
        public RESULT getStreamBufferSize    (ref uint filebuffersize, ref TIMEUNIT filebuffersizetype)
        {
            return FMOD_System_GetStreamBufferSize(systemraw, ref filebuffersize, ref filebuffersizetype);
        }


        // System information functions.
        public RESULT getVersion             (ref uint version)
        {
            return FMOD_System_GetVersion(systemraw, ref version);
        }
        public RESULT getOutputHandle        (ref IntPtr handle)
        {
            return FMOD_System_GetOutputHandle(systemraw, ref handle);
        }
        public RESULT getChannelsPlaying     (ref int channels)
        {
            return FMOD_System_GetChannelsPlaying(systemraw, ref channels);
        }
        public RESULT getCPUUsage            (ref float dsp, ref float stream, ref float update, ref float total)
        {
            return FMOD_System_GetCPUUsage(systemraw, ref dsp, ref stream, ref update, ref total);
        }
        public RESULT getSoundRam(ref int currentalloced, ref int maxalloced, ref int total)
        {
            return FMOD_System_GetSoundRAM(systemraw, ref currentalloced, ref maxalloced, ref total);
        }
        public RESULT getNumCDROMDrives      (ref int numdrives)
        {
            return FMOD_System_GetNumCDROMDrives(systemraw, ref numdrives);
        }
        public RESULT getCDROMDriveName      (int drive, StringBuilder drivename, int drivenamelen, StringBuilder scsiname, int scsinamelen, StringBuilder devicename, int devicenamelen)
        {
            return FMOD_System_GetCDROMDriveName(systemraw, drive, drivename, drivenamelen, scsiname, scsinamelen, devicename, devicenamelen);
        }
        public RESULT getSpectrum            (float[] spectrumarray, int numvalues, int channeloffset, DSP_FFT_WINDOW windowtype)
        {
            return FMOD_System_GetSpectrum(systemraw, spectrumarray, numvalues, channeloffset, windowtype);
        }
        public RESULT getWaveData            (float[] wavearray, int numvalues, int channeloffset)
        {
            return FMOD_System_GetWaveData(systemraw, wavearray, numvalues, channeloffset);
        }


        // Sound/DSP/Channel creation and retrieval. 
        public RESULT createSound            (string name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, ref Sound sound)
        {
            RESULT result           = RESULT.OK;
            IntPtr      soundraw    = new IntPtr();
            Sound       soundnew    = null;

            try
            {
                result = FMOD_System_CreateSound(systemraw, name_or_data, mode, ref exinfo, ref soundraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (sound == null)
            {
                soundnew = new Sound();
                soundnew.setRaw(soundraw);
                sound = soundnew;
            }
            else
            {
                sound.setRaw(soundraw);
            }

            return result;
        }
        public RESULT createSound            (byte[] data, MODE mode, ref CREATESOUNDEXINFO exinfo, ref Sound sound)
        {
            RESULT result           = RESULT.OK;
            IntPtr      soundraw    = new IntPtr();
            Sound       soundnew    = null;

            try
            {
                result = FMOD_System_CreateSound(systemraw, data, mode, ref exinfo, ref soundraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (sound == null)
            {
                soundnew = new Sound();
                soundnew.setRaw(soundraw);
                sound = soundnew;
            }
            else
            {
                sound.setRaw(soundraw);
            }

            return result;
        }
        public RESULT createSound            (string name_or_data, MODE mode, ref Sound sound)
        {
            RESULT result           = RESULT.OK;
            IntPtr      soundraw    = new IntPtr();
            Sound       soundnew    = null;

            try
            {
                result = FMOD_System_CreateSound(systemraw, name_or_data, mode, 0, ref soundraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (sound == null)
            {
                soundnew = new Sound();
                soundnew.setRaw(soundraw);
                sound = soundnew;
            }
            else
            {
                sound.setRaw(soundraw);
            }

            return result;
        }
        public RESULT createStream            (string name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, ref Sound sound)
        {
            RESULT result           = RESULT.OK;
            IntPtr      soundraw    = new IntPtr();
            Sound       soundnew    = null;

            try
            {
                result = FMOD_System_CreateStream(systemraw, name_or_data, mode, ref exinfo, ref soundraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (sound == null)
            {
                soundnew = new Sound();
                soundnew.setRaw(soundraw);
                sound = soundnew;
            }
            else
            {
                sound.setRaw(soundraw);
            }

            return result;
        }
        public RESULT createStream            (byte[] data, MODE mode, ref CREATESOUNDEXINFO exinfo, ref Sound sound)
        {
            RESULT result           = RESULT.OK;
            IntPtr      soundraw    = new IntPtr();
            Sound       soundnew    = null;

            try
            {
                result = FMOD_System_CreateStream(systemraw, data, mode, ref exinfo, ref soundraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (sound == null)
            {
                soundnew = new Sound();
                soundnew.setRaw(soundraw);
                sound = soundnew;
            }
            else
            {
                sound.setRaw(soundraw);
            }

            return result;
        }
        public RESULT createStream            (string name_or_data, MODE mode, ref Sound sound)
        {
            RESULT result           = RESULT.OK;
            IntPtr      soundraw    = new IntPtr();
            Sound       soundnew    = null;

            try
            {
                result = FMOD_System_CreateStream(systemraw, name_or_data, mode, 0, ref soundraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (sound == null)
            {
                soundnew = new Sound();
                soundnew.setRaw(soundraw);
                sound = soundnew;
            }
            else
            {
                sound.setRaw(soundraw);
            }

            return result;
        }
        public RESULT createDSP              (ref DSP_DESCRIPTION description, ref DSP dsp)
        {
            RESULT result = RESULT.OK;
            IntPtr dspraw = new IntPtr();
            DSP    dspnew = null;

            try
            {
                result = FMOD_System_CreateDSP(systemraw, ref description, ref dspraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (dsp == null)
            {
                dspnew = new DSP();
                dspnew.setRaw(dspraw);
                dsp = dspnew;
            }
            else
            {
                dsp.setRaw(dspraw);
            }
                             
            return result;  
        }
        public RESULT createDSPByType          (DSP_TYPE type, ref DSP dsp)
        {
            RESULT result = RESULT.OK;
            IntPtr dspraw = new IntPtr();
            DSP    dspnew = null;

            try
            {
                result = FMOD_System_CreateDSPByType(systemraw, type, ref dspraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (dsp == null)
            {
                dspnew = new DSP();
                dspnew.setRaw(dspraw);
                dsp = dspnew;
            }
            else
            {
                dsp.setRaw(dspraw);
            }
                             
            return result;  
        }
        public RESULT createDSPByIndex       (int index, ref DSP dsp)
        {
            RESULT result = RESULT.OK;
            IntPtr dspraw = new IntPtr();
            DSP    dspnew = null;

            try
            {
                result = FMOD_System_CreateDSPByIndex(systemraw, index, ref dspraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (dsp == null)
            {
                dspnew = new DSP();
                dspnew.setRaw(dspraw);
                dsp = dspnew;
            }
            else
            {
                dsp.setRaw(dspraw);
            }
                             
            return result;  
        }
                       
        public RESULT createChannelGroup     (string name, ref ChannelGroup channelgroup)
        {
            RESULT result = RESULT.OK;
            IntPtr channelgroupraw = new IntPtr();
            ChannelGroup    channelgroupnew = null;

            try
            {
                result = FMOD_System_CreateChannelGroup(systemraw, name, ref channelgroupraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (channelgroup == null)
            {
                channelgroupnew = new ChannelGroup();
                channelgroupnew.setRaw(channelgroupraw);
                channelgroup = channelgroupnew;
            }
            else
            {
                channelgroup.setRaw(channelgroupraw);
            }
                             
            return result; 
        }
        public RESULT playSound              (CHANNELINDEX channelid, Sound sound, bool paused, ref Channel channel)
        {
            RESULT result      = RESULT.OK;
            IntPtr      channelraw;
            Channel     channelnew  = null;

            if (channel != null)
            {
                channelraw = channel.getRaw();
            }
            else
            {
                channelraw  = new IntPtr();
            }

            try
            {
                result = FMOD_System_PlaySound(systemraw, channelid, sound.getRaw(), paused, ref channelraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (channel == null)
            {
                channelnew = new Channel();
                channelnew.setRaw(channelraw);
                channel = channelnew;
            }
            else
            {
                channel.setRaw(channelraw);
            }
                             
            return result;                                                                    
        }
        public RESULT playDSP                (CHANNELINDEX channelid, DSP dsp, bool paused, ref Channel channel)
        {
            RESULT result           = RESULT.OK;
            IntPtr      channelraw;
            Channel     channelnew  = null;

            if (channel != null)
            {
                channelraw = channel.getRaw();
            }
            else
            {
                channelraw  = new IntPtr();
            }

            try
            {
                result = FMOD_System_PlayDSP(systemraw, channelid, dsp.getRaw(), paused, ref channelraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (channel == null)
            {
                channelnew = new Channel();
                channelnew.setRaw(channelraw);
                channel = channelnew;
            }
            else
            {
                channel.setRaw(channelraw);
            }
                             
            return result;  
        }
        public RESULT getChannel             (int channelid, ref Channel channel)
        {
            RESULT result      = RESULT.OK;
            IntPtr      channelraw  = new IntPtr();
            Channel     channelnew  = null;

            try
            {
                result = FMOD_System_GetChannel(systemraw, channelid, ref channelraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (channel == null)
            {
                channelnew = new Channel();
                channelnew.setRaw(channelraw);
                channel = channelnew;
            }
            else
            {
                channel.setRaw(channelraw);
            }

            return result;
        }
     
        public RESULT getMasterChannelGroup  (ref ChannelGroup channelgroup)
        {
            RESULT result = RESULT.OK;
            IntPtr channelgroupraw = new IntPtr();
            ChannelGroup    channelgroupnew = null;

            try
            {
                result = FMOD_System_GetMasterChannelGroup(systemraw, ref channelgroupraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (channelgroup == null)
            {
                channelgroupnew = new ChannelGroup();
                channelgroupnew.setRaw(channelgroupraw);
                channelgroup = channelgroupnew;
            }
            else
            {
                channelgroup.setRaw(channelgroupraw);
            }
                             
            return result; 
        }

        // Reverb api
        public RESULT setReverbProperties    (ref REVERB_PROPERTIES prop)
        {
            return FMOD_System_SetReverbProperties(systemraw, ref prop);
        }
        public RESULT getReverbProperties    (ref REVERB_PROPERTIES prop)
        {
            return FMOD_System_GetReverbProperties(systemraw, ref prop);
        }
                                        
        
        // System level DSP access.
        public RESULT getDSPHead             (ref DSP dsp)
        {
            RESULT result   = RESULT.OK;
            IntPtr dspraw   = new IntPtr();
            DSP    dspnew   = null;

            try
            {
                result = FMOD_System_GetDSPHead(systemraw, ref dspraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (dsp == null)
            {
                dspnew = new DSP();
                dspnew.setRaw(dspraw);
                dsp = dspnew;
            }
            else
            {
                dsp.setRaw(dspraw);
            }

            return result;
        }
        public RESULT addDSP             (DSP dsp)
        {
            return FMOD_System_AddDSP(systemraw, dsp.getRaw());
        }
        public RESULT lockDSP            ()
        {
            return FMOD_System_LockDSP(systemraw);
        }
        public RESULT unlockDSP          ()
        {
            return FMOD_System_UnlockDSP(systemraw);
        }
                                            
        
        // Recording api
        public RESULT setRecordDriver        (int driver)
        {
            return FMOD_System_SetRecordDriver(systemraw, driver);
        }
        public RESULT getRecordDriver        (ref int driver)
        {
            return FMOD_System_GetRecordDriver(systemraw, ref driver);
        }
        public RESULT getRecordNumDrivers    (ref int numdrivers)
        {
            return FMOD_System_GetRecordNumDrivers(systemraw, ref numdrivers);
        }
        public RESULT getRecordDriverName    (int id, StringBuilder name, int namelen)
        {
            return FMOD_System_GetRecordDriverName(systemraw, id, name, namelen);
        }
 
        public RESULT getRecordPosition      (ref uint position)
        {
            return FMOD_System_GetRecordPosition(systemraw, ref position);
        }
        public RESULT recordStart            (Sound sound, bool loop)
        {
            return FMOD_System_RecordStart(systemraw, sound.getRaw(), loop);
        }
        public RESULT recordStop             ()
        {
            return FMOD_System_RecordStop(systemraw);
        }
        public RESULT isRecording            (ref bool recording)
        {
            return FMOD_System_IsRecording(systemraw, ref recording);
        }
         
      
        // Geometry api	
        public RESULT createGeometry		 (int maxpolygons, int maxvertices, ref Geometry geometryf)
        {
            RESULT result           = RESULT.OK;
            IntPtr      geometryraw    = new IntPtr();
            Geometry    geometrynew    = null;

            try
            {
                result = FMOD_System_CreateGeometry(systemraw, maxpolygons, maxvertices, ref geometryraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (geometryf == null)
            {
                geometrynew = new Geometry();
                geometrynew.setRaw(geometryraw);
                geometryf = geometrynew;
            }
            else
            {
                geometryf.setRaw(geometryraw);
            }

            return result;
        }
        public RESULT setGeometrySettings    (float maxworldsize)
        {
            return FMOD_System_SetGeometrySettings(systemraw, maxworldsize);
        }
        public RESULT getGeometrySettings    (ref float maxworldsize)
        {
            return FMOD_System_GetGeometrySettings(systemraw, ref maxworldsize);
        }
        public RESULT loadGeometry(IntPtr data, int datasize, ref Geometry geometry)
        {
            RESULT result           = RESULT.OK;
            IntPtr      geometryraw    = new IntPtr();
            Geometry    geometrynew    = null;

            try
            {
                result = FMOD_System_LoadGeometry(systemraw, data, datasize, ref geometryraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (geometry == null)
            {
                geometrynew = new Geometry();
                geometrynew.setRaw(geometryraw);
                geometry = geometrynew;
            }
            else
            {
                geometry.setRaw(geometryraw);
            }

            return result;
        }

  
        // Network functions
        public RESULT setNetworkProxy               (string proxy)
        {
            return FMOD_System_SetNetworkProxy(systemraw, proxy);
        }
        public RESULT getProxy               (StringBuilder proxy, int proxylen)
        {
            return FMOD_System_GetNetworkProxy(systemraw, proxy, proxylen);
        }
        public RESULT setNetworkTimeout      (int timeout)
        {
            return FMOD_System_SetNetworkTimeout(systemraw, timeout);
        }
        public RESULT getNetworkTimeout(ref int timeout)
        {
            return FMOD_System_GetNetworkTimeout(systemraw, ref timeout);
        }
                                     
        // Userdata set/get                         
        public RESULT setUserData            (IntPtr userdata)
        {
            return FMOD_System_SetUserData(systemraw, userdata);
        }
        public RESULT getUserData            (ref IntPtr userdata)
        {
            return FMOD_System_GetUserData(systemraw, ref userdata);
        }



        #region importfunctions

        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_Release                (IntPtr system);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetOutput              (IntPtr system, OUTPUTTYPE output);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetOutput              (IntPtr system, ref OUTPUTTYPE output);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetNumDrivers          (IntPtr system, ref int numdrivers);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetDriverName          (IntPtr system, int id, StringBuilder name, int namelen);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetDriverCaps          (IntPtr system, int id, ref CAPS caps, ref int minfrequency, ref int maxfrequency, ref SPEAKERMODE controlpanelspeakermode);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetDriver              (IntPtr system, int driver);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetDriver              (IntPtr system, ref int driver);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetHardwareChannels    (IntPtr system, int min2d, int max2d, int min3d, int max3d);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetHardwareChannels    (IntPtr system, ref int num2d, ref int num3d, ref int total);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetSoftwareChannels    (IntPtr system, int numsoftwarechannels);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetSoftwareChannels    (IntPtr system, ref int numsoftwarechannels);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetSoftwareFormat      (IntPtr system, int samplerate, SOUND_FORMAT format, int numoutputchannels, int maxinputchannels, DSP_RESAMPLER resamplemethod);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetSoftwareFormat      (IntPtr system, ref int samplerate, ref SOUND_FORMAT format, ref int numoutputchannels, ref int maxinputchannels, ref DSP_RESAMPLER resamplemethod, ref int bits);        
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetDSPBufferSize       (IntPtr system, uint bufferlength, int numbuffers);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetDSPBufferSize       (IntPtr system, ref uint bufferlength, ref int numbuffers);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetFileSystem          (IntPtr system, FILE_OPENCALLBACK useropen, FILE_CLOSECALLBACK userclose, FILE_READCALLBACK userread, FILE_SEEKCALLBACK userseek, int buffersize);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_AttachFileSystem       (IntPtr system, FILE_OPENCALLBACK useropen, FILE_CLOSECALLBACK userclose, FILE_READCALLBACK userread, FILE_SEEKCALLBACK userseek);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetPluginPath          (IntPtr system, string path);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_LoadPlugin             (IntPtr system, string filename, ref PLUGINTYPE plugintype, ref int index);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetNumPlugins          (IntPtr system, PLUGINTYPE plugintype, ref int numplugins);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetPluginInfo          (IntPtr system, PLUGINTYPE plugintype, int index, StringBuilder name, int namelen, ref uint version);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_UnloadPlugin           (IntPtr system, PLUGINTYPE plugintype, int index);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_CreateCodec            (IntPtr system, IntPtr codecdescription);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetOutputByPlugin      (IntPtr system, int index);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetOutputByPlugin      (IntPtr system, ref int index);        
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_Init                   (IntPtr system, int maxchannels, INITFLAG flags, IntPtr extradata);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_Close                  (IntPtr system);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_Update                 (IntPtr system);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_UpdateFinished         (IntPtr system);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetAdvancedSettings    (IntPtr system, ref ADVANCEDSETTINGS settings);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetAdvancedSettings    (IntPtr system, ref ADVANCEDSETTINGS settings);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetSpeakerMode         (IntPtr system, SPEAKERMODE speakermode);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetSpeakerMode         (IntPtr system, ref SPEAKERMODE speakermode);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetSpeakerPosition     (IntPtr system, SPEAKER speaker, float x, float y);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetSpeakerPosition     (IntPtr system, SPEAKER speaker, ref float x, ref float y);
        [DllImport (VERSION.dll)]                       
        private static extern RESULT FMOD_System_Set3DSettings          (IntPtr system, float dopplerscale, float distancefactor, float rolloffscale);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_Get3DSettings          (IntPtr system, ref float dopplerscale, ref float distancefactor, ref float rolloffscale);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_Set3DNumListeners      (IntPtr system, int numlisteners);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_Get3DNumListeners      (IntPtr system, ref int numlisteners);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_Set3DListenerAttributes(IntPtr system, int listener, ref VECTOR pos, ref VECTOR vel, ref VECTOR forward, ref VECTOR up);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_Get3DListenerAttributes(IntPtr system, int listener, ref VECTOR pos, ref VECTOR vel, ref VECTOR forward, ref VECTOR up);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetFileBufferSize      (IntPtr system, int sizebytes);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetFileBufferSize      (IntPtr system, ref int sizebytes);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetStreamBufferSize    (IntPtr system, uint filebuffersize, TIMEUNIT filebuffersizetype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetStreamBufferSize    (IntPtr system, ref uint filebuffersize, ref TIMEUNIT filebuffersizetype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetVersion             (IntPtr system, ref uint version);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetOutputHandle        (IntPtr system, ref IntPtr handle);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetChannelsPlaying     (IntPtr system, ref int channels);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetCPUUsage            (IntPtr system, ref float dsp, ref float stream, ref float update, ref float total);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetSoundRAM            (IntPtr system, ref int currentalloced, ref int maxalloced, ref int total);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetNumCDROMDrives      (IntPtr system, ref int numdrives);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetCDROMDriveName      (IntPtr system, int drive, StringBuilder drivename, int drivenamelen, StringBuilder scsiname, int scsinamelen, StringBuilder devicename, int devicenamelen);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetSpectrum            (IntPtr system, [MarshalAs(UnmanagedType.LPArray)]float[] spectrumarray, int numvalues, int channeloffset, DSP_FFT_WINDOW windowtype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetWaveData            (IntPtr system, [MarshalAs(UnmanagedType.LPArray)]float[] wavearray, int numvalues, int channeloffset);
        [DllImport (VERSION.dll)]   
        private static extern RESULT FMOD_System_CreateSound            (IntPtr system, string name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, ref IntPtr sound);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_CreateStream           (IntPtr system, string name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, ref IntPtr sound);
        [DllImport (VERSION.dll)]   
        private static extern RESULT FMOD_System_CreateSound            (IntPtr system, string name_or_data, MODE mode, int exinfo, ref IntPtr sound);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_CreateStream           (IntPtr system, string name_or_data, MODE mode, int exinfo, ref IntPtr sound);   
        [DllImport (VERSION.dll)]   
        private static extern RESULT FMOD_System_CreateSound            (IntPtr system, byte[] name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, ref IntPtr sound);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_CreateStream           (IntPtr system, byte[] name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, ref IntPtr sound);
        [DllImport (VERSION.dll)]   
        private static extern RESULT FMOD_System_CreateSound            (IntPtr system, byte[] name_or_data, MODE mode, int exinfo, ref IntPtr sound);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_CreateStream           (IntPtr system, byte[] name_or_data, MODE mode, int exinfo, ref IntPtr sound);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_CreateDSP              (IntPtr system, ref DSP_DESCRIPTION description, ref IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_CreateDSPByType        (IntPtr system, DSP_TYPE type, ref IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_CreateDSPByIndex       (IntPtr system, int index, ref IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_CreateChannelGroup     (IntPtr system, string name, ref IntPtr channelgroup);
        [DllImport (VERSION.dll)]                 
        private static extern RESULT FMOD_System_PlaySound              (IntPtr system, CHANNELINDEX channelid, IntPtr sound, bool paused, ref IntPtr channel);
        [DllImport (VERSION.dll)]
        public static extern RESULT FMOD_System_PlayDSP                 (IntPtr system, CHANNELINDEX channelid, IntPtr dsp, bool paused, ref IntPtr channel);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetChannel             (IntPtr system, int channelid, ref IntPtr channel);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetMasterChannelGroup  (IntPtr system, ref IntPtr channelgroup);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetReverbProperties    (IntPtr system, ref REVERB_PROPERTIES prop);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetReverbProperties    (IntPtr system, ref REVERB_PROPERTIES prop);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetDSPHead             (IntPtr system, ref IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_AddDSP                 (IntPtr system, IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_LockDSP                (IntPtr system);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_UnlockDSP              (IntPtr system);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetRecordDriver        (IntPtr system, int driver);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetRecordDriver        (IntPtr system, ref int driver);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetRecordNumDrivers    (IntPtr system, ref int numdrivers);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetRecordDriverName    (IntPtr system, int id, StringBuilder name, int namelen);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetRecordPosition      (IntPtr system, ref uint position);
        [DllImport (VERSION.dll)]  
        private static extern RESULT FMOD_System_RecordStart            (IntPtr system, IntPtr sound, bool loop);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_RecordStop             (IntPtr system);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_IsRecording            (IntPtr system, ref bool recording);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_CreateGeometry         (IntPtr system, int maxPolygons, int maxVertices, ref IntPtr geometryf);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetGeometrySettings    (IntPtr system, float maxWorldSize);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetGeometrySettings    (IntPtr system, ref float maxWorldSize);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_LoadGeometry           (IntPtr system, IntPtr data, int dataSize, ref IntPtr geometry);
        [DllImport (VERSION.dll)]               
        private static extern RESULT FMOD_System_SetNetworkProxy        (IntPtr system, string proxy);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetNetworkProxy        (IntPtr system, StringBuilder proxy, int proxylen);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetNetworkTimeout      (IntPtr system, int timeout);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetNetworkTimeout      (IntPtr system, ref int timeout);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_SetUserData            (IntPtr system, IntPtr userdata);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_System_GetUserData            (IntPtr system, ref IntPtr userdata);

        #endregion

        #region wrapperinternal
        
        private IntPtr systemraw;

        public void setRaw(IntPtr system)
        {
            systemraw = new IntPtr();

            systemraw = system;
        }

        public IntPtr getRaw()
        {
            return systemraw;
        }

        #endregion
    }
    

    /*
        'Sound' API
    */
    public class Sound
    {
        public RESULT release                 ()
        {
            return FMOD_Sound_Release(soundraw);
        }
        public RESULT getSystemObject         (ref System system)
        {
            RESULT result   = RESULT.OK;
            IntPtr systemraw   = new IntPtr();
            System systemnew   = null;

            try
            {
                result = FMOD_Sound_GetSystemObject(soundraw, ref systemraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (system == null)
            {
                systemnew = new System();
                systemnew.setRaw(systemraw);
                system = systemnew;
            }
            else
            {
                system.setRaw(systemraw);
            }
            return result;  
        }
                     

        public RESULT @lock                   (uint offset, uint length, ref IntPtr ptr1, ref IntPtr ptr2, ref uint len1, ref uint len2)
        {
            return FMOD_Sound_Lock(soundraw, offset, length, ref ptr1, ref ptr2, ref len1, ref len2);
        }
        public RESULT unlock                  (IntPtr ptr1,  IntPtr ptr2, uint len1, uint len2)
        {
            return FMOD_Sound_Unlock(soundraw, ptr1, ptr2, len1, len2);
        }
        public RESULT setDefaults             (float frequency, float volume, float pan, int priority)
        {
            return FMOD_Sound_SetDefaults(soundraw, frequency, volume, pan, priority);
        }
        public RESULT getDefaults             (ref float frequency, ref float volume, ref float pan, ref int priority)
        {
            return FMOD_Sound_GetDefaults(soundraw, ref frequency, ref volume, ref pan, ref priority);
        }
        public RESULT setVariations           (float frequencyvar, float volumevar, float panvar)
        {
            return FMOD_Sound_SetVariations(soundraw, frequencyvar, volumevar, panvar);
        }
        public RESULT getVariations           (ref float frequencyvar, ref float volumevar, ref float panvar)
        {
            return FMOD_Sound_GetVariations(soundraw, ref frequencyvar, ref volumevar, ref panvar); 
        }
        public RESULT set3DMinMaxDistance     (float min, float max)
        {
            return FMOD_Sound_Set3DMinMaxDistance(soundraw, min, max);
        }
        public RESULT get3DMinMaxDistance     (ref float min, ref float max)
        {
            return FMOD_Sound_Get3DMinMaxDistance(soundraw, ref min, ref max);
        }
		public RESULT set3DConeSettings	      (float insideconeangle, float outsideconeangle, float outsidevolume)
		{
            return FMOD_Sound_Set3DConeSettings(soundraw, insideconeangle, outsideconeangle, outsidevolume);
		}
        public RESULT get3DConeSettings       (ref float insideconeangle, ref float outsideconeangle, ref float outsidevolume)
        {
		    return FMOD_Sound_Get3DConeSettings(soundraw, ref insideconeangle, ref outsideconeangle, ref outsidevolume);
        }
		public RESULT set3DCustomRolloff      (ref VECTOR points, int numpoints)
        {
		    return FMOD_Sound_Set3DCustomRolloff(soundraw, ref points, numpoints);
        }
		public RESULT get3DCustomRolloff      (ref IntPtr points, ref int numpoints)
        {
		    return FMOD_Sound_Get3DCustomRolloff(soundraw, ref points, ref numpoints);
        }
        public RESULT setSubSound             (int index, Sound subsound)
        {
            IntPtr subsoundraw = subsound.getRaw();

            return FMOD_Sound_SetSubSound(soundraw, index, subsoundraw);
        }
        public RESULT getSubSound             (int index, ref Sound subsound)
        {
            RESULT result       = RESULT.OK;
            IntPtr subsoundraw  = new IntPtr();
            Sound  subsoundnew  = null;

            try
            {
                result = FMOD_Sound_GetSubSound(soundraw, index, ref subsoundraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (subsound == null)
            {
                subsoundnew = new Sound();
                subsoundnew.setRaw(subsoundraw);
                subsound = subsoundnew;
            }
            else
            {
                subsound.setRaw(subsoundraw);
            }

            return result;
        }
        public RESULT setSubSoundSentence     (int[] subsoundlist, int numsubsounds)
        {
            return FMOD_Sound_SetSubSoundSentence(soundraw, subsoundlist, numsubsounds);
        }
        public RESULT getName                 (StringBuilder name, int namelen)
        {
            return FMOD_Sound_GetName(soundraw, name, namelen);
        }
        public RESULT getLength               (ref uint length, TIMEUNIT lengthtype)
        {
            return FMOD_Sound_GetLength(soundraw, ref length, lengthtype);
        }
        public RESULT getFormat               (ref SOUND_TYPE type, ref SOUND_FORMAT format, ref int channels, ref int bits)
        {
            return FMOD_Sound_GetFormat(soundraw, ref type, ref format, ref channels, ref bits);
        }
        public RESULT getNumSubSounds         (ref int numsubsounds)
        {
            return FMOD_Sound_GetNumSubSounds(soundraw, ref numsubsounds);
        }
        public RESULT getNumTags              (ref int numtags, ref int numtagsupdated)
        {
            return FMOD_Sound_GetNumTags(soundraw, ref numtags, ref numtagsupdated);
        }
        public RESULT getTag                  (string name, int index, ref TAG tag)
        {
            return FMOD_Sound_GetTag(soundraw, name, index, ref tag);
        }
        public RESULT getOpenState            (ref OPENSTATE openstate, ref uint percentbuffered, ref bool starving)
        {
            return FMOD_Sound_GetOpenState(soundraw, ref openstate, ref percentbuffered, ref starving);
        }
        public RESULT readData                (IntPtr buffer, uint lenbytes, ref uint read)
        {
            return FMOD_Sound_ReadData(soundraw, buffer, lenbytes, ref read);
        }
        public RESULT seekData                (uint pcm)
        {
            return FMOD_Sound_SeekData(soundraw, pcm);
        }


        public RESULT getNumSyncPoints        (ref int numsyncpoints)
        {
            return FMOD_Sound_GetNumSyncPoints(soundraw, ref numsyncpoints);
        }
        public RESULT getSyncPoint            (int index, ref IntPtr point)
        {
            return FMOD_Sound_GetSyncPoint(soundraw, index, ref point);
        }
        public RESULT getSyncPointInfo        (IntPtr point, StringBuilder name, int namelen, ref uint offset, TIMEUNIT offsettype)
        {
            return FMOD_Sound_GetSyncPointInfo(soundraw, point, name, namelen, ref offset, offsettype);
        }
        public RESULT addSyncPoint            (int offset, TIMEUNIT offsettype, string name, ref IntPtr point)
        {
            return FMOD_Sound_AddSyncPoint(soundraw, offset, offsettype, name, ref point);
        }
        public RESULT deleteSyncPoint         (IntPtr point)
        {
            return FMOD_Sound_DeleteSyncPoint(soundraw, point);
        }


        public RESULT setMode                 (MODE mode)
        {
            return FMOD_Sound_SetMode(soundraw, mode);
        }
        public RESULT getMode                 (ref MODE mode)
        {
            return FMOD_Sound_GetMode(soundraw, ref mode);
        }
        public RESULT setLoopCount            (int loopcount)
        {
            return FMOD_Sound_SetLoopCount(soundraw, loopcount);
        }
        public RESULT getLoopCount            (ref int loopcount)
        {
            return FMOD_Sound_GetLoopCount(soundraw, ref loopcount);
        }
        public RESULT setLoopPoints           (uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype)
        {
            return FMOD_Sound_SetLoopPoints(soundraw, loopstart, loopstarttype, loopend, loopendtype);
        }
        public RESULT getLoopPoints           (ref uint loopstart, TIMEUNIT loopstarttype, ref uint loopend, TIMEUNIT loopendtype)
        {
            return FMOD_Sound_GetLoopPoints(soundraw, ref loopstart, loopstarttype, ref loopend, loopendtype);
        }


        public RESULT setUserData             (IntPtr userdata)
        {
            return FMOD_Sound_SetUserData(soundraw, userdata);
        }
        public RESULT getUserData             (ref IntPtr userdata)
        {
            return FMOD_Sound_GetUserData(soundraw, ref userdata);
        }



        #region importfunctions

        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_Release                 (IntPtr sound);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetSystemObject         (IntPtr sound, ref IntPtr system);
        [DllImport (VERSION.dll)]                   
        private static extern RESULT FMOD_Sound_Lock                   (IntPtr sound, uint offset, uint length, ref IntPtr ptr1, ref IntPtr ptr2, ref uint len1, ref uint len2);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_Unlock                  (IntPtr sound, IntPtr ptr1,  IntPtr ptr2, uint len1, uint len2);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_SetDefaults             (IntPtr sound, float frequency, float volume, float pan, int priority);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetDefaults             (IntPtr sound, ref float frequency, ref float volume, ref float pan, ref int priority);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_SetVariations           (IntPtr sound, float frequencyvar, float volumevar, float panvar);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetVariations           (IntPtr sound, ref float frequencyvar, ref float volumevar, ref float panvar);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_Set3DMinMaxDistance     (IntPtr sound, float min, float max);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_Get3DMinMaxDistance     (IntPtr sound, ref float min, ref float max);
		[DllImport(VERSION.dll)]
		private static extern RESULT FMOD_Sound_Set3DConeSettings       (IntPtr sound, float insideconeangle, float outsideconeangle, float outsidevolume);
		[DllImport(VERSION.dll)]
		private static extern RESULT FMOD_Sound_Get3DConeSettings       (IntPtr sound, ref float insideconeangle, ref float outsideconeangle, ref float outsidevolume);
		[DllImport(VERSION.dll)]
		private static extern RESULT FMOD_Sound_Set3DCustomRolloff      (IntPtr sound, ref VECTOR points, int numpoints);
		[DllImport(VERSION.dll)]
		private static extern RESULT FMOD_Sound_Get3DCustomRolloff		(IntPtr sound, ref IntPtr points, ref int numpoints);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_SetSubSound             (IntPtr sound, int index, IntPtr subsound);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetSubSound             (IntPtr sound, int index, ref IntPtr subsound);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_SetSubSoundSentence     (IntPtr sound, int[] subsoundlist, int numsubsounds);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetName                 (IntPtr sound, StringBuilder name, int namelen);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetLength               (IntPtr sound, ref uint length, TIMEUNIT lengthtype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetFormat               (IntPtr sound, ref SOUND_TYPE type, ref SOUND_FORMAT format, ref int channels, ref int bits);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetNumSubSounds         (IntPtr sound, ref int numsubsounds);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetNumTags              (IntPtr sound, ref int numtags, ref int numtagsupdated);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetTag                  (IntPtr sound, string name, int index, ref TAG tag);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetOpenState            (IntPtr sound, ref OPENSTATE openstate, ref uint percentbuffered, ref bool starving);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_ReadData                (IntPtr sound, IntPtr buffer, uint lenbytes, ref uint read);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_SeekData                (IntPtr sound, uint pcm);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetNumSyncPoints        (IntPtr sound, ref int numsyncpoints);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetSyncPoint            (IntPtr sound, int index, ref IntPtr point);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetSyncPointInfo        (IntPtr sound, IntPtr point, StringBuilder name, int namelen, ref uint offset, TIMEUNIT offsettype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_AddSyncPoint            (IntPtr sound, int offset, TIMEUNIT offsettype, string name, ref IntPtr point);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_DeleteSyncPoint         (IntPtr sound, IntPtr point);
        [DllImport (VERSION.dll)]                   
        private static extern RESULT FMOD_Sound_SetMode                 (IntPtr sound, MODE mode);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetMode                 (IntPtr sound, ref MODE mode);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_SetLoopCount            (IntPtr sound, int loopcount);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetLoopCount            (IntPtr sound, ref int loopcount);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_SetLoopPoints           (IntPtr sound, uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetLoopPoints           (IntPtr sound, ref uint loopstart, TIMEUNIT loopstarttype, ref uint loopend, TIMEUNIT loopendtype);
        [DllImport (VERSION.dll)]                                        
        private static extern RESULT FMOD_Sound_SetUserData             (IntPtr sound, IntPtr userdata);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Sound_GetUserData             (IntPtr sound, ref IntPtr userdata);

        #endregion

        #region wrapperinternal

        private IntPtr soundraw;

        public void setRaw(IntPtr sound)
        {
            soundraw = new IntPtr();
            soundraw = sound;
        }

        public IntPtr getRaw()
        {
            return soundraw;
        }

        #endregion
    }


    /*
        'Channel' API
    */
    public class Channel
    {
        public RESULT getSystemObject       (ref System system)
        {
            RESULT result   = RESULT.OK;
            IntPtr systemraw   = new IntPtr();
            System systemnew   = null;

            try
            {
                result = FMOD_Channel_GetSystemObject(channelraw, ref systemraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (system == null)
            {
                systemnew = new System();
                systemnew.setRaw(systemraw);
                system = systemnew;
            }
            else
            {
                system.setRaw(systemraw);
            }

            return result;  
        }


        public RESULT stop                  ()
        {
            return FMOD_Channel_Stop(channelraw);
        }
        public RESULT setPaused             (bool paused)
        {
            return FMOD_Channel_SetPaused(channelraw, paused);
        }
        public RESULT getPaused             (ref bool paused)
        {
            return FMOD_Channel_GetPaused(channelraw, ref paused);
        }
        public RESULT setVolume             (float volume)
        {
            return FMOD_Channel_SetVolume(channelraw, volume);
        }
        public RESULT getVolume             (ref float volume)
        {
            return FMOD_Channel_GetVolume(channelraw, ref volume);
        }
        public RESULT setFrequency          (float frequency)
        {
            return FMOD_Channel_SetFrequency(channelraw, frequency);
        }
        public RESULT getFrequency          (ref float frequency)
        {
            return FMOD_Channel_GetFrequency(channelraw, ref frequency);
        }
        public RESULT setPan                (float pan)
        {
            return FMOD_Channel_SetPan(channelraw, pan);
        }
        public RESULT getPan                (ref float pan)
        {
            return FMOD_Channel_GetPan(channelraw, ref pan);
        }
        public RESULT setDelay              (uint startdelay, uint enddelay)
        {
            return FMOD_Channel_SetDelay(channelraw, startdelay, enddelay);
        }
        public RESULT getDelay              (ref uint startdelay, ref uint enddelay)
        {
            return FMOD_Channel_GetDelay(channelraw, ref startdelay, ref enddelay);
        }
        public RESULT setSpeakerMix         (float frontleft, float frontright, float center, float lfe, float backleft, float backright, float sideleft, float sideright)
        {
            return FMOD_Channel_SetSpeakerMix(channelraw, frontleft, frontright, center, lfe, backleft, backright, sideleft, sideright);
        }
        public RESULT getSpeakerMix         (ref float frontleft, ref float frontright, ref float center, ref float lfe, ref float backleft, ref float backright, ref float sideleft, ref float sideright)
        {
            return FMOD_Channel_GetSpeakerMix(channelraw, ref frontleft, ref frontright, ref center, ref lfe, ref backleft, ref backright, ref sideleft, ref sideright);
        }
        public RESULT setSpeakerLevels      (SPEAKER speaker, float[] levels, int numlevels)
        {
            return FMOD_Channel_SetSpeakerLevels(channelraw, speaker, levels, numlevels);
        }
        public RESULT getSpeakerLevels      (SPEAKER speaker, float[] levels, int numlevels)
        {
            return FMOD_Channel_GetSpeakerLevels(channelraw, speaker, levels, numlevels);
        }
        public RESULT setMute               (bool mute)
        {
            return FMOD_Channel_SetMute(channelraw, mute);
        }
        public RESULT getMute               (ref bool mute)
        {
            return FMOD_Channel_GetMute(channelraw, ref mute);
        }
        public RESULT setPriority           (int priority)
        {
            return FMOD_Channel_SetPriority(channelraw, priority);
        }
        public RESULT getPriority           (ref int priority)
        {
            return FMOD_Channel_GetPriority(channelraw, ref priority);
        }
        public RESULT setPosition           (uint position, TIMEUNIT postype)
        {
            return FMOD_Channel_SetPosition(channelraw, position, postype);
        }
        public RESULT getPosition           (ref uint position, TIMEUNIT postype)
        {
            return FMOD_Channel_GetPosition(channelraw, ref position, postype);
        }
        
        public RESULT setReverbProperties   (ref REVERB_CHANNELPROPERTIES prop)
        {
            return FMOD_Channel_SetReverbProperties(channelraw, ref prop);
        }
        public RESULT getReverbProperties   (ref REVERB_CHANNELPROPERTIES prop)
        {
            return FMOD_Channel_GetReverbProperties(channelraw, ref prop);
        }
        public RESULT setChannelGroup       (ChannelGroup channelgroup)
        {
            return FMOD_Channel_SetChannelGroup(channelraw, channelgroup.getRaw());
        }
        public RESULT getChannelGroup        (ref ChannelGroup channelgroup)
        {
            RESULT result = RESULT.OK;
            IntPtr channelgroupraw = new IntPtr();
            ChannelGroup    channelgroupnew = null;

            try
            {
                result = FMOD_Channel_GetChannelGroup(channelraw, ref channelgroupraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (channelgroup == null)
            {
                channelgroupnew = new ChannelGroup();
                channelgroupnew.setRaw(channelgroupraw);
                channelgroup = channelgroupnew;
            }
            else
            {
                channelgroup.setRaw(channelgroupraw);
            }
                             
            return result; 
        }

        public RESULT setCallback           (CHANNEL_CALLBACKTYPE type, CHANNEL_CALLBACK callback, int command)
        {
            return FMOD_Channel_SetCallback(channelraw, type, callback, command);
        }


        public RESULT set3DAttributes       (ref VECTOR pos, ref VECTOR vel)
        {
            return FMOD_Channel_Set3DAttributes(channelraw, ref pos, ref vel);
        }
        public RESULT get3DAttributes       (ref VECTOR pos, ref VECTOR vel)
        {
            return FMOD_Channel_Get3DAttributes(channelraw, ref pos, ref vel);
        }
        public RESULT set3DMinMaxDistance   (float mindistance, float maxdistance)
        {
            return FMOD_Channel_Set3DMinMaxDistance(channelraw, mindistance, maxdistance);
        }
        public RESULT get3DMinMaxDistance   (ref float mindistance, ref float maxdistance)
        {
            return FMOD_Channel_Get3DMinMaxDistance(channelraw, ref mindistance, ref maxdistance);
        }
        public RESULT set3DConeSettings     (float insideconeangle, float outsideconeangle, float outsidevolume)
        {
            return FMOD_Channel_Set3DConeSettings(channelraw, insideconeangle, outsideconeangle, outsidevolume);
        }
        public RESULT get3DConeSettings     (ref float insideconeangle, ref float outsideconeangle, ref float outsidevolume)
        {
            return FMOD_Channel_Get3DConeSettings(channelraw, ref insideconeangle, ref outsideconeangle, ref outsidevolume);
        }
        public RESULT set3DConeOrientation  (ref VECTOR orientation)
        {
            return FMOD_Channel_Set3DConeOrientation(channelraw, ref orientation);
        }
        public RESULT get3DConeOrientation  (ref VECTOR orientation)
        {
            return FMOD_Channel_Get3DConeOrientation(channelraw, ref orientation);
        }
        public RESULT set3DCustomRolloff    (ref VECTOR points, int numpoints)
        {
            return FMOD_Channel_Set3DCustomRolloff(channelraw, ref points, numpoints);
        }
        public RESULT get3DCustomRolloff     (ref IntPtr points, ref int numpoints)
        {
            return FMOD_Channel_Get3DCustomRolloff(channelraw, ref points, ref numpoints);
        }
        public RESULT set3DOcclusion          (float directOcclusion, float reverbOcclusion)
        {
            return FMOD_Channel_Set3DOcclusion(channelraw, directOcclusion, reverbOcclusion);
        }
        public RESULT get3DOcclusion          (ref float directOcclusion, ref float reverbOcclusion)
        {
            return FMOD_Channel_Get3DOcclusion(channelraw, ref directOcclusion, ref reverbOcclusion);
        }
        public RESULT set3DSpread             (float angle)
        {
            return FMOD_Channel_Set3DSpread(channelraw, angle);
        }
        public RESULT get3DSpread             (ref float angle)
        {
            return FMOD_Channel_Get3DSpread(channelraw, ref angle);
        }
        public RESULT set3DPanLevel           (float level)
        {
            return FMOD_Channel_Set3DPanLevel(channelraw, level);
        }
        public RESULT get3DPanLevel           (ref float level)
        {
            return FMOD_Channel_Get3DPanLevel(channelraw, ref level);
        }
        public RESULT set3DDopplerLevel(float level)
        {
            return FMOD_Channel_Set3DDopplerLevel(channelraw, level);
        }
        public RESULT get3DDopplerLevel(ref float level)
        {
            return FMOD_Channel_Get3DDopplerLevel(channelraw, ref level);
        }

        public RESULT isPlaying             (ref bool isplaying)
        {
            return FMOD_Channel_IsPlaying(channelraw, ref isplaying);
        }
        public RESULT isVirtual             (ref bool isvirtual)
        {
            return FMOD_Channel_IsVirtual(channelraw, ref isvirtual);
        }
        public RESULT getAudibility(ref float audibility)
        {
            return FMOD_Channel_GetAudibility(channelraw, ref audibility);
        }
        public RESULT getCurrentSound       (ref Sound sound)
        {
            RESULT result      = RESULT.OK;
            IntPtr soundraw    = new IntPtr();
            Sound  soundnew    = null;

            try
            {
                result = FMOD_Channel_GetCurrentSound(channelraw, ref soundraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (sound == null)
            {
                soundnew = new Sound();
                soundnew.setRaw(soundraw);
                sound = soundnew;
            }
            else
            {
                sound.setRaw(soundraw);
            }

            return result;  
        }
        public RESULT getSpectrum           (float[] spectrumarray, int numvalues, int channeloffset, DSP_FFT_WINDOW windowtype)
        {
            return FMOD_Channel_GetSpectrum(channelraw, spectrumarray, numvalues, channeloffset, windowtype);
        }
        public RESULT getWaveData           (float[] wavearray, int numvalues, int channeloffset)
        {
            return FMOD_Channel_GetWaveData(channelraw, wavearray, numvalues, channeloffset);
        }
        public RESULT getIndex(ref int index)
        {
            return FMOD_Channel_GetIndex(channelraw, ref index);
        }

        public RESULT getDSPHead            (ref DSP dsp)
        {
            RESULT result      = RESULT.OK;
            IntPtr dspraw      = new IntPtr();
            DSP    dspnew      = null;

            try
            {
                result = FMOD_Channel_GetDSPHead(channelraw, ref dspraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            dspnew = new DSP();
            dspnew.setRaw(dspraw);
            dsp = dspnew;

            return result; 
        }
        public RESULT addDSP(DSP dsp)
        {
            return FMOD_Channel_AddDSP(channelraw, dsp.getRaw());
        }
         
            
        public RESULT setMode               (MODE mode)
        {
            return FMOD_Channel_SetMode(channelraw, mode);
        }
        public RESULT getMode               (ref MODE mode)
        {
            return FMOD_Channel_GetMode(channelraw, ref mode);
        }
        public RESULT setLoopCount          (int loopcount)
        {
            return FMOD_Channel_SetLoopCount(channelraw, loopcount);
        }
        public RESULT getLoopCount          (ref int loopcount)
        {
            return FMOD_Channel_GetLoopCount(channelraw, ref loopcount);
        }
        public RESULT setLoopPoints         (uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype)
        {
            return FMOD_Channel_SetLoopPoints(channelraw, loopstart, loopstarttype, loopend, loopendtype);
        }
        public RESULT getLoopPoints         (ref uint loopstart, TIMEUNIT loopstarttype, ref uint loopend, TIMEUNIT loopendtype)
        {
            return FMOD_Channel_GetLoopPoints(channelraw, ref loopstart, loopstarttype, ref loopend, loopendtype);
        }


        public RESULT setUserData           (IntPtr userdata)
        {
            return FMOD_Channel_SetUserData(channelraw, userdata);
        }
        public RESULT getUserData           (ref IntPtr userdata)
        {
            return FMOD_Channel_GetUserData(channelraw, ref userdata);
        }


        #region importfunctions

        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetSystemObject       (IntPtr channel, ref IntPtr system);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_Stop                  (IntPtr channel);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetPaused             (IntPtr channel, bool paused);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetPaused             (IntPtr channel, ref bool paused);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetVolume             (IntPtr channel, float volume);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetVolume             (IntPtr channel, ref float volume);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetFrequency          (IntPtr channel, float frequency);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetFrequency          (IntPtr channel, ref float frequency);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetPan                (IntPtr channel, float pan);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetPan                (IntPtr channel, ref float pan);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetDelay              (IntPtr channel, uint startdelay, uint enddelay);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetDelay              (IntPtr channel, ref uint startdelay, ref uint enddelay);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetSpeakerMix         (IntPtr channel, float frontleft, float frontright, float center, float lfe, float backleft, float backright, float sideleft, float sideright);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetSpeakerMix         (IntPtr channel, ref float frontleft, ref float frontright, ref float center, ref float lfe, ref float backleft, ref float backright, ref float sideleft, ref float sideright);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetSpeakerLevels      (IntPtr channel, SPEAKER speaker, float[] levels, int numlevels);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetSpeakerLevels      (IntPtr channel, SPEAKER speaker, [MarshalAs(UnmanagedType.LPArray)]float[] levels, int numlevels);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetMute               (IntPtr channel, bool mute);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetMute               (IntPtr channel, ref bool mute);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetPriority           (IntPtr channel, int priority);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetPriority           (IntPtr channel, ref int priority);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_Set3DAttributes       (IntPtr channel, ref VECTOR pos, ref VECTOR vel);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_Get3DAttributes       (IntPtr channel, ref VECTOR pos, ref VECTOR vel);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_Set3DMinMaxDistance   (IntPtr channel, float mindistance, float maxdistance);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_Get3DMinMaxDistance   (IntPtr channel, ref float mindistance, ref float maxdistance);
        [DllImport (VERSION.dll)]        
        private static extern RESULT FMOD_Channel_Set3DConeSettings     (IntPtr channel, float insideconeangle, float outsideconeangle, float outsidevolume);
        [DllImport (VERSION.dll)] 
        private static extern RESULT FMOD_Channel_Get3DConeSettings     (IntPtr channel, ref float insideconeangle, ref float outsideconeangle, ref float outsidevolume);
        [DllImport (VERSION.dll)] 
        private static extern RESULT FMOD_Channel_Set3DConeOrientation  (IntPtr channel, ref VECTOR orientation);
        [DllImport (VERSION.dll)] 
        private static extern RESULT FMOD_Channel_Get3DConeOrientation  (IntPtr channel, ref VECTOR orientation);
        [DllImport (VERSION.dll)] 
        private static extern RESULT FMOD_Channel_Set3DCustomRolloff    (IntPtr channel, ref VECTOR points, int numpoints);
        [DllImport (VERSION.dll)] 
        private static extern RESULT FMOD_Channel_Get3DCustomRolloff    (IntPtr channel, ref IntPtr points, ref int numpoints);
        [DllImport (VERSION.dll)] 
        private static extern RESULT FMOD_Channel_Set3DOcclusion        (IntPtr channel, float directOcclusion, float reverbOcclusion);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_Get3DOcclusion        (IntPtr channel, ref float directOcclusion, ref float reverbOcclusion);
        [DllImport (VERSION.dll)]          
        private static extern RESULT FMOD_Channel_Set3DSpread           (IntPtr channel, float angle);
        [DllImport (VERSION.dll)]    
        private static extern RESULT FMOD_Channel_Get3DSpread           (IntPtr channel, ref float angle);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_Set3DPanLevel         (IntPtr channel, float level);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_Get3DPanLevel         (IntPtr channel, ref float level);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_Set3DDopplerLevel     (IntPtr channel, float level);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_Get3DDopplerLevel     (IntPtr channel, ref float level);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetReverbProperties   (IntPtr channel, ref REVERB_CHANNELPROPERTIES prop);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetReverbProperties   (IntPtr channel, ref REVERB_CHANNELPROPERTIES prop);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetChannelGroup       (IntPtr channel, IntPtr channelgroup);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetChannelGroup       (IntPtr channel, ref IntPtr channelgroup);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_IsPlaying             (IntPtr channel, ref bool isplaying);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_IsVirtual             (IntPtr channel, ref bool isvirtual);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetAudibility         (IntPtr channel, ref float audibility);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetCurrentSound       (IntPtr channel, ref IntPtr sound);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetSpectrum           (IntPtr channel, [MarshalAs(UnmanagedType.LPArray)] float[] spectrumarray, int numvalues, int channeloffset, DSP_FFT_WINDOW windowtype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetWaveData           (IntPtr channel, [MarshalAs(UnmanagedType.LPArray)] float[] wavearray, int numvalues, int channeloffset);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetIndex              (IntPtr channel, ref int index);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetCallback           (IntPtr channel, CHANNEL_CALLBACKTYPE type, CHANNEL_CALLBACK callback, int command);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetPosition           (IntPtr channel, uint position, TIMEUNIT postype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetPosition           (IntPtr channel, ref uint position, TIMEUNIT postype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetDSPHead            (IntPtr channel, ref IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_AddDSP                (IntPtr channel, IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetMode               (IntPtr channel, MODE mode);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetMode               (IntPtr channel, ref MODE mode);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetLoopCount          (IntPtr channel, int loopcount);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetLoopCount          (IntPtr channel, ref int loopcount);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_SetLoopPoints         (IntPtr channel, uint  loopstart, TIMEUNIT loopstarttype, uint  loopend, TIMEUNIT loopendtype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetLoopPoints         (IntPtr channel, ref uint loopstart, TIMEUNIT loopstarttype, ref uint loopend, TIMEUNIT loopendtype);
        [DllImport (VERSION.dll)]                                        
        private static extern RESULT FMOD_Channel_SetUserData           (IntPtr channel, IntPtr userdata);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Channel_GetUserData           (IntPtr channel, ref IntPtr userdata);
        #endregion
        
        #region wrapperinternal

        private IntPtr channelraw;

        public void setRaw(IntPtr channel)
        {
            channelraw = new IntPtr();

            channelraw = channel;
        }

        public IntPtr getRaw()
        {
            return channelraw;
        }

        #endregion
    }


    /*
        'ChannelGroup' API
    */
    public class ChannelGroup
    {
        public RESULT release                ()
        {
            return FMOD_ChannelGroup_Release(channelgroupraw);
        }
        public RESULT getSystemObject        (ref System system)
        {
            RESULT result = RESULT.OK;
            IntPtr systemraw = new IntPtr();
            System systemnew = null;

            try
            {
                result = FMOD_ChannelGroup_GetSystemObject(channelgroupraw, ref systemraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (system == null)
            {
                systemnew = new System();
                systemnew.setRaw(systemraw);
                system = systemnew;
            }
            else
            {
                system.setRaw(systemraw);
            }
                             
            return result; 
        }


        // Channelgroup scale values.  (scales the current volume or pitch of all channels and channel groups, DOESN'T overwrite)
        public RESULT setVolume              (float volume)
        {
            return FMOD_ChannelGroup_SetVolume(channelgroupraw, volume);
        }
        public RESULT getVolume              (ref float volume)
        {
            return FMOD_ChannelGroup_GetVolume(channelgroupraw, ref volume);
        }
        public RESULT setPitch               (float pitch)
        {
            return FMOD_ChannelGroup_SetPitch(channelgroupraw, pitch);
        }
        public RESULT getPitch               (ref float pitch)
        {
            return FMOD_ChannelGroup_GetPitch(channelgroupraw, ref pitch);
        }


        // Channelgroup override values.  (recursively overwrites whatever settings the channels had)
        public RESULT stop                   ()
        {
            return FMOD_ChannelGroup_Stop(channelgroupraw);
        }
        public RESULT overridePaused         (bool paused)
        {
            return FMOD_ChannelGroup_OverridePaused(channelgroupraw, paused);
        }
        public RESULT overrideVolume         (float volume)
        {
            return FMOD_ChannelGroup_OverrideVolume(channelgroupraw, volume);
        }
        public RESULT overrideFrequency      (float frequency)
        {
            return FMOD_ChannelGroup_OverrideFrequency(channelgroupraw, frequency);
        }
        public RESULT overridePan            (float pan)
        {
            return FMOD_ChannelGroup_OverridePan(channelgroupraw, pan);
        }
        public RESULT overrideMute           (bool mute)
        {
            return FMOD_ChannelGroup_OverrideMute(channelgroupraw, mute);
        }
        public RESULT overrideReverbProperties (ref REVERB_CHANNELPROPERTIES prop)
        {
            return FMOD_ChannelGroup_OverrideReverbProperties(channelgroupraw, ref prop);
        }
        public RESULT override3DAttributes   (ref VECTOR pos, ref VECTOR vel)
        {
            return FMOD_ChannelGroup_Override3DAttributes(channelgroupraw, ref pos, ref vel);
        }
        public RESULT overrideSpeakerMix(float frontleft, float frontright, float center, float lfe, float backleft, float backright, float sideleft, float sideright)
        {
            return FMOD_ChannelGroup_OverrideSpeakerMix(channelgroupraw, frontleft, frontright, center, lfe, backleft, backright, sideleft, sideright);
        }


        // Nested channel groups.
        public RESULT addGroup               (ChannelGroup group)
        {
            return FMOD_ChannelGroup_AddGroup(channelgroupraw, group.getRaw());
        }
        public RESULT getNumGroups           (ref int numgroups)
        {
            return FMOD_ChannelGroup_GetNumGroups(channelgroupraw, ref numgroups);
        }
        public RESULT getGroup               (int index, ref ChannelGroup group)
        {
            RESULT result = RESULT.OK;
            IntPtr channelraw = new IntPtr();
            ChannelGroup    channelnew = null;

            try
            {
                result = FMOD_ChannelGroup_GetGroup(channelgroupraw, index, ref channelraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (group == null)
            {
                channelnew = new ChannelGroup();
                channelnew.setRaw(channelraw);
                group = channelnew;
            }
            else
            {
                group.setRaw(channelraw);
            }
                             
            return result;
        }

        // DSP functionality only for channel groups playing sounds created with FMOD_SOFTWARE.
        public RESULT getDSPHead             (ref DSP dsp)
        {
            RESULT result = RESULT.OK;
            IntPtr dspraw = new IntPtr();
            DSP    dspnew = null;

            try
            {
                result = FMOD_ChannelGroup_GetDSPHead(channelgroupraw, ref dspraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (dsp == null)
            {
                dspnew = new DSP();
                dspnew.setRaw(dspraw);
                dsp = dspnew;
            }
            else
            {
                dsp.setRaw(dspraw);
            }
                             
            return result; 
        }

        public RESULT addDSP                 (DSP dsp)
        {
            return FMOD_ChannelGroup_AddDSP(channelgroupraw, dsp.getRaw());
        }


        // Information only functions.
        public RESULT getName                (StringBuilder name, int namelen)
        {
            return FMOD_ChannelGroup_GetName(channelgroupraw, name, namelen);
        }
        public RESULT getNumChannels         (ref int numchannels)
        {
            return FMOD_ChannelGroup_GetNumChannels(channelgroupraw, ref numchannels);
        }
        public RESULT getChannel             (int index, ref Channel channel)
        {
            RESULT result = RESULT.OK;
            IntPtr channelraw = new IntPtr();
            Channel    channelnew = null;

            try
            {
                result = FMOD_ChannelGroup_GetChannel(channelgroupraw, index, ref channelraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (channel == null)
            {
                channelnew = new Channel();
                channelnew.setRaw(channelraw);
                channel = channelnew;
            }
            else
            {
                channel.setRaw(channelraw);
            }
                             
            return result;
        }
        public RESULT getSpectrum            (float[] spectrumarray, int numvalues, int channeloffset, DSP_FFT_WINDOW windowtype)
        {
            return FMOD_ChannelGroup_GetSpectrum(channelgroupraw, spectrumarray, numvalues, channeloffset, windowtype);
        }
        public RESULT getWaveData            (float[] wavearray, int numvalues, int channeloffset)
        {
            return FMOD_ChannelGroup_GetWaveData(channelgroupraw, wavearray, numvalues, channeloffset);
        }


        // Userdata set/get.
        public RESULT setUserData            (IntPtr userdata)
        {
            return FMOD_ChannelGroup_SetUserData(channelgroupraw, userdata);
        }
        public RESULT getUserData            (ref IntPtr userdata)
        {
            return FMOD_ChannelGroup_GetUserData(channelgroupraw, ref userdata);
        }

        #region importfunctions


        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_Release          (IntPtr channelgroup);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_GetSystemObject  (IntPtr channelgroup, ref IntPtr system);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_SetVolume        (IntPtr channelgroup, float volume);
        [DllImport (VERSION.dll)]        
        private static extern RESULT FMOD_ChannelGroup_GetVolume        (IntPtr channelgroup, ref float volume);
        [DllImport (VERSION.dll)]       
        private static extern RESULT FMOD_ChannelGroup_SetPitch         (IntPtr channelgroup, float pitch);
        [DllImport (VERSION.dll)]       
        private static extern RESULT FMOD_ChannelGroup_GetPitch         (IntPtr channelgroup, ref float pitch);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_Stop             (IntPtr channelgroup);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_OverridePaused   (IntPtr channelgroup, bool paused);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_OverrideVolume   (IntPtr channelgroup, float volume);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_OverrideFrequency(IntPtr channelgroup, float frequency);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_OverridePan      (IntPtr channelgroup, float pan);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_OverrideMute     (IntPtr channelgroup, bool mute);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_OverrideReverbProperties(IntPtr channelgroup, ref REVERB_CHANNELPROPERTIES prop);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_Override3DAttributes  (IntPtr channelgroup, ref VECTOR pos, ref VECTOR vel);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_OverrideSpeakerMix(IntPtr channelgroup, float frontleft, float frontright, float center, float lfe, float backleft, float backright, float sideleft, float sideright);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_AddGroup         (IntPtr channelgroup, IntPtr group);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_GetNumGroups     (IntPtr channelgroup, ref int numgroups);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_GetGroup         (IntPtr channelgroup, int index, ref IntPtr group);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_GetDSPHead       (IntPtr channelgroup, ref IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_AddDSP           (IntPtr channelgroup, IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_GetName          (IntPtr channelgroup, StringBuilder name, int namelen);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_GetNumChannels   (IntPtr channelgroup, ref int numchannels);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_GetChannel       (IntPtr channelgroup, int index, ref IntPtr channel);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_GetSpectrum      (IntPtr channelgroup, [MarshalAs(UnmanagedType.LPArray)] float[] spectrumarray, int numvalues, int channeloffset, DSP_FFT_WINDOW windowtype);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_GetWaveData      (IntPtr channelgroup, [MarshalAs(UnmanagedType.LPArray)] float[] wavearray, int numvalues, int channeloffset);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_SetUserData      (IntPtr channelgroup, IntPtr userdata);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_ChannelGroup_GetUserData      (IntPtr channelgroup, ref IntPtr userdata);

        #endregion

        #region wrapperinternal

        private IntPtr channelgroupraw;

        public void setRaw(IntPtr channelgroup)
        {
            channelgroupraw = new IntPtr();

            channelgroupraw = channelgroup;
        }

        public IntPtr getRaw()
        {
            return channelgroupraw;
        }

        #endregion
    }


    /*
        'DSP' API
    */
    public class DSP
    {
        public RESULT release                   ()
        {
            return FMOD_DSP_Release(dspraw);
        }
        public RESULT getSystemObject           (ref System system)
        {
            RESULT result         = RESULT.OK;
            IntPtr systemraw      = new IntPtr();
            System systemnew      = null;

            try
            {
                result = FMOD_DSP_GetSystemObject(dspraw, ref systemraw);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (system == null)
            {
                systemnew = new System();
                systemnew.setRaw(dspraw);
                system = systemnew;
            }
            else
            {
                system.setRaw(systemraw);
            }

            return result;             
        }
                     

        public RESULT addInput                  (DSP target)
        {
            return FMOD_DSP_AddInput(dspraw, target.getRaw());
        }
        public RESULT disconnectFrom            (DSP target)
        {
            return FMOD_DSP_DisconnectFrom(dspraw, target.getRaw());
        }
        public RESULT remove                    ()
        {
            return FMOD_DSP_Remove(dspraw);
        }
        public RESULT getNumInputs              (ref int numinputs)
        {
            return FMOD_DSP_GetNumInputs(dspraw, ref numinputs);
        }
        public RESULT getNumOutputs             (ref int numoutputs)
        {
            return FMOD_DSP_GetNumOutputs(dspraw, ref numoutputs);
        }
        public RESULT getInput                  (int index, ref DSP input)
        {
            RESULT result      = RESULT.OK;
            IntPtr dsprawnew   = new IntPtr();
            DSP    dspnew      = null;

            try
            {
                result = FMOD_DSP_GetInput(dspraw, index, ref dsprawnew);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (input == null)
            {
                dspnew = new DSP();
                dspnew.setRaw(dsprawnew);
                input = dspnew;
            }
            else
            {
                input.setRaw(dsprawnew);
            }

            return result; 
        }
        public RESULT getOutput                 (int index, ref DSP output)
        {
            RESULT result      = RESULT.OK;
            IntPtr dsprawnew   = new IntPtr();
            DSP    dspnew      = null;

            try
            {
                result = FMOD_DSP_GetOutput(dspraw, index, ref dsprawnew);
            }
            catch
            {
                result = RESULT.ERR_INVALID_PARAM;
            }
            if (result != RESULT.OK)
            {
                return result;
            }

            if (output == null)
            {
                dspnew = new DSP();
                dspnew.setRaw(dsprawnew);
                output = dspnew;
            }
            else
            {
                output.setRaw(dsprawnew);
            }

            return result; 
        }
        public RESULT setInputMix               (int index, float volume)
        {
            return FMOD_DSP_SetInputMix(dspraw, index, volume);
        }
        public RESULT getInputMix               (int index, ref float volume)
        {
            return FMOD_DSP_GetInputMix(dspraw, index, ref volume);
        }
        public RESULT setInputLevels            (int index, SPEAKER speaker, float[] levels, int numlevels)
        {
            return FMOD_DSP_SetInputLevels(dspraw, index, speaker, levels, numlevels);
        }
        public RESULT getInputLevels            (int index, SPEAKER speaker, float[] levels, int numlevels)
        {
            return FMOD_DSP_GetInputLevels(dspraw, index, speaker, levels, numlevels);
        }
        public RESULT setOutputMix              (int index, float volume)
        {
            return FMOD_DSP_SetOutputMix(dspraw, index, volume);
        }
        public RESULT getOutputMix              (int index, ref float volume)
        {
            return FMOD_DSP_GetOutputMix(dspraw, index, ref volume);
        }
        public RESULT setOutputLevels           (int index, SPEAKER speaker, float[] levels, int numlevels)
        {
            return FMOD_DSP_SetOutputLevels(dspraw, index, speaker, levels, numlevels);
        }
        public RESULT getOutputLevels           (int index, SPEAKER speaker, float[] levels, int numlevels)
        {
            return FMOD_DSP_GetOutputLevels(dspraw, index, speaker, levels, numlevels);
        }
        public RESULT setActive                 (bool active)
        {
            return FMOD_DSP_SetActive(dspraw, active);
        }
        public RESULT getActive                 (ref bool active)
        {
            return FMOD_DSP_GetActive(dspraw, ref active);
        }
        public RESULT setBypass                 (bool bypass)
        {
            return FMOD_DSP_SetBypass(dspraw, bypass);
        }
        public RESULT getBypass                 (ref bool bypass)
        {
            return FMOD_DSP_GetBypass(dspraw, ref bypass);
        }
        public RESULT reset                     ()
        {
            return FMOD_DSP_Reset(dspraw);
        }

                     
        public RESULT setParameter              (int index, float val)
        {
            return FMOD_DSP_SetParameter(dspraw, index, val);
        }
        public RESULT getParameter              (int index, ref float val, StringBuilder valuestr, int valuestrlen)
        {
            return FMOD_DSP_GetParameter(dspraw, index, ref val, valuestr, valuestrlen);
        }
        public RESULT getNumParameters          (ref int numparams)
        {
            return FMOD_DSP_GetNumParameters(dspraw, ref numparams);
        }
        public RESULT getParameterInfo          (int index, StringBuilder name, StringBuilder label, StringBuilder description, int descriptionlen, ref float min, ref float max)
        {
            return FMOD_DSP_GetParameterInfo(dspraw, index, name, label, description, descriptionlen, ref min, ref max);
        }
        public RESULT showConfigDialog          (IntPtr hwnd, bool show)
        {
            return FMOD_DSP_ShowConfigDialog          (dspraw, hwnd, show);
        }


        public RESULT getInfo                   (StringBuilder name, ref uint version, ref int channels, ref int configwidth, ref int configheight)
        {
            return FMOD_DSP_GetInfo(dspraw, name, ref version, ref channels, ref configwidth, ref configheight);
        }
        public RESULT setDefaults               (float frequency, float volume, float pan, int priority)
        {
            return FMOD_DSP_SetDefaults(dspraw, frequency, volume, pan, priority);
        }
        public RESULT getDefaults               (ref float frequency, ref float volume, ref float pan, ref int priority)
        {
            return FMOD_DSP_GetDefaults(dspraw, ref frequency, ref volume, ref pan, ref priority);
        }


        public RESULT setUserData               (IntPtr userdata)
        {
            return FMOD_DSP_SetUserData(dspraw, userdata);
        }
        public RESULT getUserData               (ref IntPtr userdata)
        {
            return FMOD_DSP_GetUserData(dspraw, ref userdata);
        }



        #region importfunctions

        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_Release                   (IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetSystemObject           (IntPtr dsp, ref IntPtr system);
        [DllImport (VERSION.dll)]                   
        private static extern RESULT FMOD_DSP_AddInput                  (IntPtr dsp, IntPtr target);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_DisconnectFrom            (IntPtr dsp, IntPtr target);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_Remove                    (IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetNumInputs              (IntPtr dsp, ref int numinputs);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetNumOutputs             (IntPtr dsp, ref int numoutputs);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetInput                  (IntPtr dsp, int index, ref IntPtr input);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetOutput                 (IntPtr dsp, int index, ref IntPtr output);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_SetInputMix               (IntPtr dsp, int index, float volume);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetInputMix               (IntPtr dsp, int index, ref float volume);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_SetOutputMix              (IntPtr dsp, int index, float volume);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetOutputMix              (IntPtr dsp, int index, ref float volume);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_SetActive                 (IntPtr dsp, bool active);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetActive                 (IntPtr dsp, ref bool active);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_SetInputLevels            (IntPtr dsp, int index, SPEAKER speaker, float[] levels, int numlevels);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetInputLevels            (IntPtr dsp, int index, SPEAKER speaker, float[] levels, int numlevels);        
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_SetOutputLevels           (IntPtr dsp, int index, SPEAKER speaker, float[] levels, int numlevels);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetOutputLevels           (IntPtr dsp, int index, SPEAKER speaker, float[] levels, int numlevels);        
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_SetBypass                 (IntPtr dsp, bool bypass);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetBypass                 (IntPtr dsp, ref bool bypass);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_Reset                     (IntPtr dsp);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_SetParameter              (IntPtr dsp, int index, float val);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetParameter              (IntPtr dsp, int index, ref float val, StringBuilder valuestr, int valuestrlen);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetNumParameters          (IntPtr dsp, ref int numparams);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetParameterInfo          (IntPtr dsp, int index, StringBuilder name, StringBuilder label, StringBuilder description, int descriptionlen, ref float min, ref float max);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_ShowConfigDialog          (IntPtr dsp, IntPtr hwnd, bool show);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetInfo                   (IntPtr dsp, StringBuilder name, ref uint version, ref int channels, ref int configwidth, ref int configheight);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_SetDefaults               (IntPtr dsp, float frequency, float volume, float pan, int priority);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetDefaults               (IntPtr dsp, ref float frequency, ref float volume, ref float pan, ref int priority);
        [DllImport (VERSION.dll)]                   
        private static extern RESULT FMOD_DSP_SetUserData               (IntPtr dsp, IntPtr userdata);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_DSP_GetUserData               (IntPtr dsp, ref IntPtr userdata);

        #endregion

        #region wrapperinternal

        private IntPtr dspraw;

        public void setRaw(IntPtr dsp)
        {
            dspraw = new IntPtr();

            dspraw = dsp;
        }

        public IntPtr getRaw()
        {
            return dspraw;
        }

        #endregion
    }


    /*
        'Geometry' API
    */
    public class Geometry
    {
        public RESULT release               ()
        {
            return FMOD_Geometry_Release(geometryraw);
        }       
        public RESULT addPolygon			(float directOcclusion, float reverbOcclusion, bool doubleSided, int numVertices, ref VECTOR vertices, ref int polygonIndex)
        {
            return FMOD_Geometry_AddPolygon(geometryraw, directOcclusion, reverbOcclusion, doubleSided, numVertices, ref vertices, ref polygonIndex);
        }


        public RESULT getNumPolygons		(ref int numPolygons)
        {
            return FMOD_Geometry_GetNumPolygons(geometryraw, ref numPolygons);
        }
        public RESULT getMaxPolygons		(ref int maxPolygons, ref int maxVertices)
        {
            return FMOD_Geometry_GetMaxPolygons(geometryraw, ref maxPolygons, ref maxVertices);
        }
        public RESULT getPolygonNumVertices	(int polygonIndex, ref int numVertices)
        {
            return FMOD_Geometry_GetPolygonNumVertices(geometryraw, polygonIndex, ref numVertices);
        }
        public RESULT setPolygonVertex		(int polygonIndex, int vertexIndex, ref VECTOR vertex)
        {
            return FMOD_Geometry_SetPolygonVertex(geometryraw, polygonIndex, vertexIndex, ref vertex);
        }
        public RESULT getPolygonVertex		(int polygonIndex, int vertexIndex, ref VECTOR vertex)
        {
            return FMOD_Geometry_GetPolygonVertex(geometryraw, polygonIndex, vertexIndex, ref vertex);
        }
        public RESULT setPolygonAttributes	(int polygonIndex, float directOcclusion, float reverbOcclusion, bool doubleSided)
        {
            return FMOD_Geometry_SetPolygonAttributes(geometryraw, polygonIndex, directOcclusion, reverbOcclusion, doubleSided);
        }
        public RESULT getPolygonAttributes	(int polygonIndex, ref float directOcclusion, ref float reverbOcclusion, ref bool doubleSided)
        {
            return FMOD_Geometry_GetPolygonAttributes(geometryraw, polygonIndex, ref directOcclusion, ref reverbOcclusion, ref doubleSided);
        }

        public RESULT setActive             (bool active)
        {
            return FMOD_Geometry_SetActive  (geometryraw, active);
        }
        public RESULT getActive             (ref bool active)
        {
            return FMOD_Geometry_GetActive  (geometryraw, ref active);
        }
        public RESULT setRotation			(ref VECTOR forward, ref VECTOR up)
        {
            return FMOD_Geometry_SetRotation(geometryraw, ref forward, ref up);
        }
        public RESULT getRotation			(ref VECTOR forward, ref VECTOR up)
        {
            return FMOD_Geometry_GetRotation(geometryraw, ref forward, ref up);
        }
        public RESULT setPosition			(ref VECTOR position)
        {
            return FMOD_Geometry_SetPosition(geometryraw, ref position);
        }
        public RESULT getPosition			(ref VECTOR position)
        {
            return FMOD_Geometry_GetPosition(geometryraw, ref position);
        }
        public RESULT setScale				(ref VECTOR scale)
        {
            return FMOD_Geometry_SetScale(geometryraw, ref scale);
        }
        public RESULT getScale				(ref VECTOR scale)
        {
            return FMOD_Geometry_GetScale(geometryraw, ref scale);
        }
        public RESULT save                  (IntPtr data, ref int datasize)
        {
            return FMOD_Geometry_Save(geometryraw, data, ref datasize);
        }


        public RESULT setUserData               (IntPtr userdata)
        {
            return FMOD_Geometry_SetUserData(geometryraw, userdata);
        }
        public RESULT getUserData               (ref IntPtr userdata)
        {
            return FMOD_Geometry_GetUserData(geometryraw, ref userdata);
        }



        #region importfunctions

        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_Release   (IntPtr geometry);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_AddPolygon           (IntPtr geometry, float directOcclusion, float reverbOcclusion, bool doubleSided, int numVertices, ref VECTOR vertices, ref int polygonIndex);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_GetNumPolygons       (IntPtr geometry, ref int numPolygons);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_GetMaxPolygons       (IntPtr geometry, ref int maxPolygons, ref int maxVertices);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_GetPolygonNumVertices(IntPtr geometry, int polygonIndex, ref int numVertices);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_SetPolygonVertex     (IntPtr geometry, int polygonIndex, int vertexIndex, ref VECTOR vertex);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_GetPolygonVertex     (IntPtr geometry, int polygonIndex, int vertexIndex, ref VECTOR vertex);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_SetPolygonAttributes (IntPtr geometry, int polygonIndex, float directOcclusion, float reverbOcclusion, bool doubleSided);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_GetPolygonAttributes (IntPtr geometry, int polygonIndex, ref float directOcclusion, ref float reverbOcclusion, ref bool doubleSided);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_Flush                (IntPtr geometry);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_SetActive                    (IntPtr gemoetry, bool active);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_GetActive                    (IntPtr gemoetry, ref bool active);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_SetRotation          (IntPtr geometry, ref VECTOR forward, ref VECTOR up);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_GetRotation          (IntPtr geometry, ref VECTOR forward, ref VECTOR up);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_SetPosition          (IntPtr geometry, ref VECTOR position);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_GetPosition          (IntPtr geometry, ref VECTOR position);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_SetScale             (IntPtr geometry, ref VECTOR scale);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_GetScale             (IntPtr geometry, ref VECTOR scale);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_Save                 (IntPtr geometry, IntPtr data, ref int datasize);
        [DllImport (VERSION.dll)]                   
        private static extern RESULT FMOD_Geometry_SetUserData          (IntPtr geometry, IntPtr userdata);
        [DllImport (VERSION.dll)]
        private static extern RESULT FMOD_Geometry_GetUserData          (IntPtr geometry, ref IntPtr userdata);

        #endregion

        #region wrapperinternal

        private IntPtr geometryraw;

        public void setRaw(IntPtr geometry)
        {
            geometryraw = new IntPtr();

            geometryraw = geometry;
        }

        public IntPtr getRaw()
        {
            return geometryraw;
        }

        #endregion
    }


/* fmod_dsp.cs */



    public delegate RESULT DSP_CREATECALLBACK         (ref DSP_STATE dsp_state);
    public delegate RESULT DSP_RELEASECALLBACK        (ref DSP_STATE dsp_state);
    public delegate RESULT DSP_RESETCALLBACK          (ref DSP_STATE dsp_state);
    public delegate RESULT DSP_READCALLBACK           (ref DSP_STATE dsp_state, IntPtr inbuffer, IntPtr outbuffer, uint length, int inchannels, int outchannels);
    public delegate RESULT DSP_SETPOSITIONCALLBACK    (ref DSP_STATE dsp_state, uint seeklen);
    public delegate RESULT DSP_SETPARAMCALLBACK       (ref DSP_STATE dsp_state, int index, float val);
    public delegate RESULT DSP_GETPARAMCALLBACK       (ref DSP_STATE dsp_state, int index, ref float val, StringBuilder valuestr);
    public delegate RESULT DSP_DIALOGCALLBACK         (ref DSP_STATE dsp_state, IntPtr hwnd, bool show);

    /*
    [STRUCTURE]
    [
        [DESCRIPTION]   

        [REMARKS]
        Members marked with [in] mean the user sets the value before passing it to the function.&lt;br&gt;
        Members marked with [out] mean FMOD sets the value to be used after the function exits.&lt;br&gt;
        &lt;br&gt;
        The step parameter tells the gui or application that the parameter has a certain granularity.&lt;br&gt;
        For example in the example of cutoff frequency with a range from 100.0 to 22050.0 you might only want the selection to be in 10hz increments.  For this you would simply use 10.0 as the step value.&lt;br&gt;
        For a boolean, you can use min = 0.0, max = 1.0, step = 1.0.  This way the only possible values are 0.0 and 1.0.&lt;br&gt;
        Some applications may detect min = 0.0, max = 1.0, step = 1.0 and replace a graphical slider bar with a checkbox instead.&lt;br&gt;
        A step value of 1.0 would simulate integer values only.&lt;br&gt;
        A step value of 0.0 would mean the full floating point range is accessable.&lt;br&gt;

        [PLATFORMS]
        Win32, Win64, Linux, Linux64, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable, PlayStation 3, Wii

        [SEE_ALSO]    
        System::createDSP
        System::getDSP
    ]
    */
    public struct DSP_PARAMETERDESC
    {
        public float         min;             /* [in] Minimum value of the parameter (ie 100.0). */
        public float         max;             /* [in] Maximum value of the parameter (ie 22050.0). */
        public float         defaultval;      /* [in] Default value of parameter. */
        public string        name;            /* [in] Name of the parameter to be displayed (ie "Cutoff frequency"). */
        public string        label;           /* [in] Short string to be put next to value to denote the unit type (ie "hz"). */
        public string        description;     /* [in] Description of the parameter to be displayed as a help item / tooltip for this parameter. */
    }

    /*
    [STRUCTURE] 
    [
        [DESCRIPTION]
        DSP plugin structure that is passed into each callback.

        [REMARKS]
        Members marked with [in] mean the variable can be written to.  The user can set the value.&lt;br&gt;
        Members marked with [out] mean the variable is modified by FMOD and is for reading purposes only.  Do not change this value.&lt;br&gt;

        [PLATFORMS]
        Win32, Win64, Linux, Linux64, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable, PlayStation 3

        [SEE_ALSO]
        FMOD_DSP_DESCRIPTION
    ]
    */
    public struct DSP_STATE
    {
        public IntPtr   instance;      /* [out] Handle to the DSP hand the user created.  Not to be modified.  C++ users cast to FMOD::DSP to use.  */
        public IntPtr   plugindata;    /* [in] Plugin writer created data the output author wants to attach to this object. */
    };

    /*
    [ENUM]
    [
        [DESCRIPTION]   
        These definitions can be used for creating FMOD defined special effects or DSP units.

        [REMARKS]
        To get them to be active, first create the unit, then add it somewhere into the DSP network, either at the front of the network near the soundcard unit to affect the global output (by using System::getDSPHead), or on a single channel (using Channel::getDSPHead).

        [PLATFORMS]
        Win32, Win64, Linux, Linux64, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable, PlayStation 3, Wii

        [SEE_ALSO]
        System::createDSPByType
    ]
    */
    public enum DSP_TYPE
    {
        UNKNOWN,            /* This unit was created via a non FMOD plugin so has an unknown purpose */
        MIXER,              /* This unit does nothing but take inputs and mix them together then feed the result to the soundcard unit. */
        OSCILLATOR,         /* This unit generates sine/square/saw/triangle or noise tones. */
        LOWPASS,            /* This unit filters sound using a high quality, resonant lowpass filter algorithm but consumes more CPU time. */
        ITLOWPASS,          /* This unit filters sound using a resonant lowpass filter algorithm that is used in Impulse Tracker, but with limited cutoff range (0 to 8060hz). */
        HIGHPASS,           /* This unit filters sound using a resonant highpass filter algorithm. */
        ECHO,               /* This unit produces an echo on the sound and fades out at the desired rate. */
        FLANGE,             /* This unit produces a flange effect on the sound. */
        DISTORTION,         /* This unit distorts the sound. */
        NORMALIZE,          /* This unit normalizes or amplifies the sound to a certain level. */
        PARAMEQ,            /* This unit attenuates or amplifies a selected frequency range. */
        PITCHSHIFT,         /* This unit bends the pitch of a sound without changing the speed of playback. */
        CHORUS,             /* This unit produces a chorus effect on the sound. */
        REVERB,             /* This unit produces a reverb effect on the sound. */
        VSTPLUGIN,          /* This unit allows the use of Steinberg VST plugins */
        WINAMPPLUGIN,       /* This unit allows the use of Nullsoft Winamp plugins */
        ITECHO,             /* This unit produces an echo on the sound and fades out at the desired rate as is used in Impulse Tracker. */
        COMPRESSOR,         /* This unit implements dynamic compression (linked multichannel, wideband) */
        SFXREVERB,          /* This unit implements SFX reverb */
        LOWPASS_SIMPLE      /* This unit filters sound using a simple lowpass with no resonance, but has flexible cutoff and is fast. */
    }

    /*
    [STRUCTURE] 
    [
        [DESCRIPTION]
        Strcture to define the parameters for a DSP unit.

        [REMARKS]
        Members marked with [in] mean the user sets the value before passing it to the function.&lt;br&gt;
        Members marked with [out] mean FMOD sets the value to be used after the function exits.&lt;br&gt;
        &lt;br&gt;
        There are 2 different ways to change a parameter in this architecture.&lt;br&gt;
        One is to use DSP::setParameter / DSP::getParameter.  This is platform independant and is dynamic, so new unknown plugins can have their parameters enumerated and used.&lt;br&gt;
        The other is to use DSP::showConfigDialog.  This is platform specific and requires a GUI, and will display a dialog box to configure the plugin.&lt;br&gt;
        
        [PLATFORMS]
        Win32, Win64, Linux, Linux64, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable, PlayStation 3, Wii

        [SEE_ALSO]
        System::createDSP
        System::getDSP
    ]
    */
    public struct DSP_DESCRIPTION
    {
        [MarshalAs(UnmanagedType.ByValArray,SizeConst=32)]
        public char[]                      name;               /* [in] Name of the unit to be displayed in the network. */
        public uint                        version;            /* [in] Plugin writer's version number. */
        public int                         channels;           /* [in] Number of channels.  Use 0 to process whatever number of channels is currently in the network.  &gt;0 would be mostly used if the unit is a unit that only generates sound. */
        public DSP_CREATECALLBACK          create;             /* [in] Create callback.  This is called when DSP unit is created.  Can be null. */
        public DSP_RELEASECALLBACK         release;            /* [in] Release callback.  This is called just before the unit is freed so the user can do any cleanup needed for the unit.  Can be null. */
        public DSP_RESETCALLBACK           reset;              /* [in] Reset callback.  This is called by the user to reset any history buffers that may need resetting for a filter, when it is to be used or re-used for the first time to its initial clean state.  Use to avoid clicks or artifacts. */
        public DSP_READCALLBACK            read;               /* [in] Read callback.  Processing is done here.  Can be null. */
        public DSP_SETPOSITIONCALLBACK     setposition;        /* [in] Setposition callback.  This is called if the unit wants to update its position info but not process data.  Can be null. */

        public int                         numparameters;      /* [in] Number of parameters used in this filter.  The user finds this with DSP::getNumParameters */
        public DSP_PARAMETERDESC[]         paramdesc;          /* [in] Variable number of parameter structures. */
        public DSP_SETPARAMCALLBACK        setparameter;       /* [in] This is called when the user calls DSP::setParameter.  Can be null. */
        public DSP_GETPARAMCALLBACK        getparameter;       /* [in] This is called when the user calls DSP::getParameter.  Can be null. */
        public DSP_DIALOGCALLBACK          config;             /* [in] This is called when the user calls DSP::showConfigDialog.  Can be used to display a dialog to configure the filter.  Can be null. */
        public int                         configwidth;        /* [in] Width of config dialog graphic if there is one.  0 otherwise.*/
        public int                         configheight;       /* [in] Height of config dialog graphic if there is one.  0 otherwise.*/
        public IntPtr                      userdata;           /* [in] Optional. Specify 0 to ignore. This is user data to be attached to the DSP unit during creation.  Access via DSP::getUserData. */
    }


/* fmod_errors.cs */

    class Error
    {
        public static string String(FMOD.RESULT errcode)
        {
            switch (errcode)
            {
                case FMOD.RESULT.ERR_ALREADYLOCKED:          return "Tried to call lock a second time before unlock was called. ";
                case FMOD.RESULT.ERR_BADCOMMAND:             return "Tried to call a function on a data type that does not allow this type of functionality (ie calling Sound::lock on a streaming sound). ";
                case FMOD.RESULT.ERR_CDDA_DRIVERS:           return "Neither NTSCSI nor ASPI could be initialised. ";
                case FMOD.RESULT.ERR_CDDA_INIT:              return "An error occurred while initialising the CDDA subsystem. ";
                case FMOD.RESULT.ERR_CDDA_INVALID_DEVICE:    return "Couldn't find the specified device. ";
                case FMOD.RESULT.ERR_CDDA_NOAUDIO:           return "No audio tracks on the specified disc. ";
                case FMOD.RESULT.ERR_CDDA_NODEVICES:         return "No CD/DVD devices were found. ";
                case FMOD.RESULT.ERR_CDDA_NODISC:            return "No disc present in the specified drive. ";
                case FMOD.RESULT.ERR_CDDA_READ:              return "A CDDA read error occurred. ";
                case FMOD.RESULT.ERR_CHANNEL_ALLOC:          return "Error trying to allocate a channel. ";
                case FMOD.RESULT.ERR_CHANNEL_STOLEN:         return "The specified channel has been reused to play another sound. ";
                case FMOD.RESULT.ERR_COM:                    return "A Win32 COM related error occured. COM failed to initialize or a QueryInterface failed meaning a Windows codec or driver was not installed properly. ";
                case FMOD.RESULT.ERR_DMA:                    return "DMA Failure.  See debug output for more information. ";
                case FMOD.RESULT.ERR_DSP_CONNECTION:         return "DSP connection error.  Connection possibly caused a cyclic dependancy. ";
                case FMOD.RESULT.ERR_DSP_FORMAT:             return "DSP Format error.  A DSP unit may have attempted to connect to this network with the wrong format. ";
                case FMOD.RESULT.ERR_DSP_NOTFOUND:           return "DSP connection error.  Couldn't find the DSP unit specified. ";
                case FMOD.RESULT.ERR_DSP_RUNNING:            return "DSP error.  Cannot perform this operation while the network is in the middle of running.  This will most likely happen if a connection or disconnection is attempted in a DSP callback. ";
                case FMOD.RESULT.ERR_DSP_TOOMANYCONNECTIONS: return "DSP connection error.  The unit being connected to or disconnected should only have 1 input or output. ";
                case FMOD.RESULT.ERR_FILE_BAD:               return "Error loading file. ";
                case FMOD.RESULT.ERR_FILE_COULDNOTSEEK:      return "Couldn't perform seek operation.  This is a limitation of the medium (ie netstreams) or the file format. ";
                case FMOD.RESULT.ERR_FILE_EOF:               return "End of file unexpectedly reached while trying to read essential data (truncated data?). ";
                case FMOD.RESULT.ERR_FILE_NOTFOUND:          return "File not found. ";
                case FMOD.RESULT.ERR_FILE_UNWANTED:          return "Unwanted file access occured.";
                case FMOD.RESULT.ERR_FORMAT:                 return "Unsupported file or audio format. ";
                case FMOD.RESULT.ERR_HTTP:                   return "A HTTP error occurred. This is a catch-all for HTTP errors not listed elsewhere. ";
                case FMOD.RESULT.ERR_HTTP_ACCESS:            return "The specified resource requires authentication or is forbidden. ";
                case FMOD.RESULT.ERR_HTTP_PROXY_AUTH:        return "Proxy authentication is required to access the specified resource. ";
                case FMOD.RESULT.ERR_HTTP_SERVER_ERROR:      return "A HTTP server error occurred. ";
                case FMOD.RESULT.ERR_HTTP_TIMEOUT:           return "The HTTP request timed out. ";
                case FMOD.RESULT.ERR_INITIALIZATION:         return "FMOD was not initialized correctly to support this function. ";
                case FMOD.RESULT.ERR_INITIALIZED:            return "Cannot call this command after System::init. ";
                case FMOD.RESULT.ERR_INTERNAL:               return "An error occured that wasnt supposed to.  Contact support. ";
                case FMOD.RESULT.ERR_INVALID_ADDRESS:        return "On Xbox 360, this memory address passed to FMOD must be physical, (ie allocated with XPhysicalAlloc.)";
                case FMOD.RESULT.ERR_INVALID_FLOAT:          return "Value passed in was a NaN, Inf or denormalized float.";
                case FMOD.RESULT.ERR_INVALID_HANDLE:         return "An invalid object handle was used. ";
                case FMOD.RESULT.ERR_INVALID_PARAM:          return "An invalid parameter was passed to this function. ";
                case FMOD.RESULT.ERR_INVALID_SPEAKER:        return "An invalid speaker was passed to this function based on the current speaker mode. ";
                case FMOD.RESULT.ERR_IRX:                    return "PS2 only.  fmodex.irx failed to initialize.  This is most likely because you forgot to load it. ";
                case FMOD.RESULT.ERR_MEMORY:                 return "Not enough memory or resources. ";
                case FMOD.RESULT.ERR_MEMORY_IOP:             return "PS2 only.  Not enough memory or resources on PlayStation 2 IOP ram. ";
                case FMOD.RESULT.ERR_MEMORY_SRAM:            return "Not enough memory or resources on console sound ram. ";
                case FMOD.RESULT.ERR_MEMORY_CANTPOINT:       return "Can't use FMOD_OPENMEMORY_POINT on non PCM source data, or non mp3/xma/adpcm data if FMOD_CREATECOMPRESSEDSAMPLE was used.";
                case FMOD.RESULT.ERR_NEEDS2D:                return "Tried to call a command on a 3d sound when the command was meant for 2d sound. ";
                case FMOD.RESULT.ERR_NEEDS3D:                return "Tried to call a command on a 2d sound when the command was meant for 3d sound. ";
                case FMOD.RESULT.ERR_NEEDSHARDWARE:          return "Tried to use a feature that requires hardware support.  (ie trying to play a VAG compressed sound in software on PS2). ";
                case FMOD.RESULT.ERR_NEEDSSOFTWARE:          return "Tried to use a feature that requires the software engine.  Software engine has either been turned off, or command was executed on a hardware channel which does not support this feature. ";
                case FMOD.RESULT.ERR_NET_CONNECT:            return "Couldn't connect to the specified host. ";
                case FMOD.RESULT.ERR_NET_SOCKET_ERROR:       return "A socket error occurred.  This is a catch-all for socket-related errors not listed elsewhere. ";
                case FMOD.RESULT.ERR_NET_URL:                return "The specified URL couldn't be resolved. ";
                case FMOD.RESULT.ERR_NOTREADY:               return "Operation could not be performed because specified sound is not ready. ";
                case FMOD.RESULT.ERR_OUTPUT_ALLOCATED:       return "Error initializing output device, but more specifically, the output device is already in use and cannot be reused. ";
                case FMOD.RESULT.ERR_OUTPUT_CREATEBUFFER:    return "Error creating hardware sound buffer. ";
                case FMOD.RESULT.ERR_OUTPUT_DRIVERCALL:      return "A call to a standard soundcard driver failed, which could possibly mean a bug in the driver or resources were missing or exhausted. ";
                case FMOD.RESULT.ERR_OUTPUT_FORMAT:          return "Soundcard does not support the minimum features needed for this soundsystem (16bit stereo output). ";
                case FMOD.RESULT.ERR_OUTPUT_INIT:            return "Error initializing output device. ";
                case FMOD.RESULT.ERR_OUTPUT_NOHARDWARE:      return "FMOD_HARDWARE was specified but the sound card does not have the resources nescessary to play it. ";
                case FMOD.RESULT.ERR_OUTPUT_NOSOFTWARE:      return "Attempted to create a software sound but no software channels were specified in System::init. ";
                case FMOD.RESULT.ERR_PAN:                    return "Panning only works with mono or stereo sound sources. ";
                case FMOD.RESULT.ERR_PLUGIN:                 return "An unspecified error has been returned from a 3rd party plugin. ";
                case FMOD.RESULT.ERR_PLUGIN_MISSING:         return "A requested output, dsp unit type or codec was not available. ";
                case FMOD.RESULT.ERR_PLUGIN_RESOURCE:        return "A resource that the plugin requires cannot be found. (ie the DLS file for MIDI playback) ";
                case FMOD.RESULT.ERR_RECORD:                 return "An error occured trying to initialize the recording device. ";
                case FMOD.RESULT.ERR_REVERB_INSTANCE:        return "Specified Instance in FMOD_REVERB_PROPERTIES couldn't be set. Most likely because another application has locked the EAX4 FX slot. ";
                case FMOD.RESULT.ERR_SUBSOUNDS:              return " The error occured because the sound referenced contains subsounds.  (ie you cannot play the parent sound as a static sample, only its subsounds.)";
                case FMOD.RESULT.ERR_SUBSOUND_ALLOCATED:     return "This subsound is already being used by another sound, you cannot have more than one parent to a sound.  Null out the other parent's entry first. ";
                case FMOD.RESULT.ERR_TAGNOTFOUND:            return "The specified tag could not be found or there are no tags. ";
                case FMOD.RESULT.ERR_TOOMANYCHANNELS:        return "The sound created exceeds the allowable input channel count.  This can be increased with System::setMaxInputChannels. ";
                case FMOD.RESULT.ERR_UNIMPLEMENTED:          return "Something in FMOD hasn't been implemented when it should be! contact support! ";
                case FMOD.RESULT.ERR_UNINITIALIZED:          return "This command failed because System::init or System::setDriver was not called. ";
                case FMOD.RESULT.ERR_UNSUPPORTED:            return "A command issued was not supported by this object.  Possibly a plugin without certain callbacks specified. ";
                case FMOD.RESULT.ERR_UPDATE:                 return "On PS2, System::update was called twice in a row when System::updateFinished must be called first. ";
                case FMOD.RESULT.ERR_VERSION:                return "The version number of this file format is not supported. ";
                case FMOD.RESULT.OK:                         return "No errors.";
                default :                             return "Unknown error.";
            };
        }
    }
}</Text>
  </SourceCode>
  <SourceCode Name="fmodbase.cs" IsCustomObject="true" DependsOn="fmod.cs">
    <Text>// file version 1 (distributed with initial alpha release)
// last change: call system.update in the OnFrameStart event handler
// Customized version for demo project -- added spectrum analyzer.

using System;
using System.ComponentModel;

namespace CustomObjects
{
   public enum SoundReplay
   {
      Continue,
      StartNew,
      Restart,
   }

   abstract public class FMODBase
   {
      private static FMOD.System system  = null;
      private FMOD.Channel channel = null;
      private FMOD.Sound sound  = null;
      private static System.Collections.ArrayList soundList = new System.Collections.ArrayList();
      // Must keep a reference to the callback to prevent
      // Garbage collector from causing NullReferenceException
      private static FMOD.CHANNEL_CALLBACK updateCallback = null;

      public FMODBase()
      {
         InitFMOD();
      }

      private static void InitFMOD()
      {
         if (system == null)
         {
            ERRCHECK(FMOD.Factory.System_Create(ref system));
            ERRCHECK(system.init(32, FMOD.INITFLAG.NORMAL, (IntPtr)null));
            Project.GameWindow.OnFrameStart += new GameForm.SimpleNotification(OnFrameStart);
            updateCallback = (FMOD.CHANNEL_CALLBACK)Delegate.CreateDelegate(typeof(FMOD.CHANNEL_CALLBACK), typeof(FMODBase), "Channel_Callback");
         }
      }

      public static void OnFrameStart()
      {
         ERRCHECK(system.update());
      }

      [Description("Play an FMOD sound effect")]
      public static void PlaySound([System.ComponentModel.Editor("CustomObject", "UITypeEditor")] CustomObjects.FMODBase Sound, SoundReplay ReplayOption)
      {
         LoadSound(Sound);
         if (Sound.isPlaying)
         {
            switch(ReplayOption)
            {
               case SoundReplay.Continue:
                  return;
               case SoundReplay.StartNew:
                  break;
               case SoundReplay.Restart:
                  Sound.Stop();
                  break;
            }
         }
         ERRCHECK(system.playSound(FMOD.CHANNELINDEX.FREE, Sound.sound, false, ref Sound.channel));
         ERRCHECK(Sound.channel.setCallback(FMOD.CHANNEL_CALLBACKTYPE.END, updateCallback, 0));
         ERRCHECK(Sound.channel.setVolume(Sound.Volume));
      }

      private static FMOD.RESULT Channel_Callback(IntPtr channelraw, FMOD.CHANNEL_CALLBACKTYPE type, int command, uint commanddata1, uint commanddata2)
      {
         try
         {
            for(int i=0; i&lt;soundList.Count; i++)
            {
               FMODBase snd = (FMODBase)soundList[i];
               if ((snd.channel != null) &amp;&amp; (snd.channel.getRaw() == channelraw))
                  snd.channel = null;
            }
            return FMOD.RESULT.OK;
         }
         catch(System.Exception ex)
         {
            return FMOD.RESULT.ERR_UPDATE;
         }
      }

      public bool isPlaying
      {
         get
         {
            if (channel != null)
            {
               bool result = false;
               ERRCHECK(channel.isPlaying(ref result));
               return result;
            }
            return false;
         }
      }

      [Description("Stop a playing FMOD sound effect")]
      public static void StopSound([System.ComponentModel.Editor("CustomObject", "UITypeEditor")] CustomObjects.FMODBase Sound)
      {
         Sound.Stop();
      }

      private void Stop()
      {
         if(isPlaying)
            ERRCHECK(channel.stop());
         channel = null;
      }

      [Description("Release the memory associated with the specified FMOD object")]
      public static void UnloadSound([System.ComponentModel.Editor("CustomObject", "UITypeEditor")] CustomObjects.FMODBase Sound)
      {
         Sound.Unload();
      }

      private void Unload()
      {
         ERRCHECK(sound.release());
         sound = null;
      }

      [Description("Force the specified sound to be loaded into FMOD memory")]
      public static void LoadSound([System.ComponentModel.Editor("CustomObject", "UITypeEditor")] CustomObjects.FMODBase Sound)
      {
         Sound.Load();
      }

      private void Load()
      {
         if (sound == null)
         {
            System.IO.Stream fmodrc = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream(this.GetType().Name + ".bin");
            byte[] buf = new byte[fmodrc.Length];
            fmodrc.Read(buf, 0, (int)fmodrc.Length);
            fmodrc.Close();
            FMOD.CREATESOUNDEXINFO sndinf = new FMOD.CREATESOUNDEXINFO();
            sndinf.cbsize = System.Runtime.InteropServices.Marshal.SizeOf(sndinf);
            sndinf.length = (uint)buf.Length;
            sndinf.suggestedsoundtype = SoundType;
            ERRCHECK(system.createSound(buf, FMOD.MODE.OPENMEMORY | FMOD.MODE.SOFTWARE, ref sndinf, ref sound));
            soundList.Add(this);
         }
      }

      protected FMOD.SOUND_TYPE SoundType
      {
         get
         {
            return FMOD.SOUND_TYPE.UNKNOWN;
         }
      }

      // Override this member to override default volume.
      protected virtual float Volume
      {
         get
         {
            return 1.0f;
         }
      }

      private static void ERRCHECK(FMOD.RESULT result)
      {
         if (result != FMOD.RESULT.OK)
         {
            throw new ApplicationException("FMOD error! " + result + " - " + FMOD.Error.String(result));
         }
      }

      public float[] getTotalSpectrum(int BARS)
      {
         int numchannels = 0;
         int dummy = 0;
         FMOD.SOUND_FORMAT dummyformat = FMOD.SOUND_FORMAT.NONE;
         FMOD.DSP_RESAMPLER dummyresampler = FMOD.DSP_RESAMPLER.LINEAR;
         int count = 0;
         int count2 = 0;

         float[] ret = new float[BARS];

         system.getSoftwareFormat(ref dummy, ref dummyformat, ref numchannels, ref dummy, ref dummyresampler, ref dummy);

         float[] spectrum = new float[512];

         for (count = 0; count &lt; numchannels; count++)
         {

            system.getSpectrum(spectrum, 512, count, FMOD.DSP_FFT_WINDOW.TRIANGLE);

            count2 = 1;
            for (int a = 0; a &lt; BARS; a++)
            {
               float height = 0;
               double increase = grouptogether(BARS,a,288);
               for (int count3 = count2; count3 &lt; count2 + increase; count3++)
               {
                  if (height &lt; spectrum[count3])
                      height = spectrum[count3];
               }
               count2 += (int)increase;
               ret[a] += height;
            }
         }
         //Normalize
         float max = 0;
         for (count2 = 1; count2 &lt; BARS; count2++)
         {
            if (max &lt; ret[count2])
                max = ret[count2];
         }
         for (count2 = 1; count2 &lt; BARS; count2++)
         {
            ret[count2] /= max;
         }

         return ret;
      }

      private static int grouptogether(int numBars, int a, int Total)
      {
         return (int)(1+2*(Total-numBars)/(numBars*numBars)*a);
      }

   }
}</Text>
  </SourceCode>
  <SourceCode Name="Boing.cs" IsCustomObject="true" DependsOn="fmodbase.cs">
    <Text>namespace CustomObjects
{
   public class Boing : FMODBase
   {
      private static Boing m_instance = null;

      public Boing()
      {
      }

      public static Boing Value
      {
         get
         {
            if (m_instance == null)
               m_instance = new Boing();
            return m_instance;
         }
      }

      protected override float Volume
      {
         get
         {
            return 0.75f;
         }
      }
   }
}</Text>
    <CustomObjectData>ustomObjectData>
  </SourceCode>
  <SourceCode Name="Chime.cs" IsCustomObject="true" DependsOn="fmodbase.cs">
    <Text>namespace CustomObjects
{
   public class Chime : FMODBase
   {
      private static Chime m_instance = null;

      public Chime()
      {
      }

      public static Chime Value
      {
         get
         {
            if (m_instance == null)
               m_instance = new Chime();
            return m_instance;
         }
      }

      protected override float Volume
      {
         get
         {
            return 0.75f;
         }
      }
   }
}
</Text>
    <CustomObjectData>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</CustomObjectData>
  </SourceCode>
  <SourceCode Name="DrawSpectrum.cs" IsCustomObject="true" DependsOn="fmodbase.cs">
    <Text>using System.Drawing;
using System.ComponentModel;

namespace CustomObjects
{
   public class DrawSpectrum
   {
      private static int steps = 0;

      [Description("Draw a spectrum analysis of the given FMOD sound on the given layer")]
      public static void Draw([System.ComponentModel.Editor("CustomObject", "UITypeEditor")] CustomObjects.FMODBase Sound, LayerBase Layer)
      {
        steps = (steps + 1) % 5;
         if (steps != 1) return;
         int cols = Layer.Columns;
         int rows = Layer.Rows;
         int[] blocks = GetBlocksFromSpectrum(Sound.getTotalSpectrum(cols),rows);

         for (int i = 0; i &lt; blocks.Length; i++)
         {
            for (int j = 0; j &lt; rows; j++)
            {
                if (blocks[i] &gt; j)
                   Layer[i, rows-1-j] = 4;
                else {
                   int oldVal = Layer[i,rows-1-j];
                   if (rows-1-j &gt; 0 &amp;&amp; Layer[i,rows-2-j] == 0 &amp;&amp; oldVal &gt; 1)
                     Layer[i,rows-1-j] = oldVal - 2;
                   else if (oldVal &gt; 0)
                     Layer[i,rows-1-j] = oldVal - 1;
                }  
            }
         }
      }

      private static int[] GetBlocksFromSpectrum(float[] spectrum, int MaxBlocks)
      {
         int[] ret = new int[spectrum.Length];
         for (int i = 0; i &lt; ret.Length; i++)
             ret[i] = (int)(spectrum[i] * MaxBlocks);
         return ret;
      }

      private DrawSpectrum(){ }
   }
}</Text>
  </SourceCode>
  <SourceCode Name="Signal94.cs" IsCustomObject="true" DependsOn="fmodbase.cs">
    <Text>namespace CustomObjects
{
   public class Signal94 : FMODBase
   {
      private static Signal94 m_instance = null;

      public Signal94()
      {
      }

      public static Signal94 Value
      {
         get
         {
            if (m_instance == null)
               m_instance = new Signal94();
            return m_instance;
         }
      }

      protected override float Volume
      {
         get
         {
            return 0.5f;
         }
      }
   }
}</Text>
    <CustomObjectData></CustomObjectData>
  </SourceCode>
  <Project DisplayMode="m800x600x24" Windowed="true" TitleText="Scrolling Game Development Kit Sample Project" StartMap="Menu" OverlayMap="" MaxPlayers="2" MaxViews="2" Credits="SGDK2 Engine: http://sgdk2.sf.net&#xD;&#xA;Graphics: Jeff Cruz (jeffc@comdel.net)&#xD;&#xA;Sound/Music support provided by FMOD: http://www.fmod.org/&#xD;&#xA;Music: Ceekayed (sampo.narhi@gmail.com)&#xD;&#xA;Spectrum Analyzer Display: Seth Marty">
    <Comments />
  </Project>
  <TileCategory Name="Solid">
    <CategorizedTileset Tileset="SHFLTileset" Name="Solid">
      <CategoryTile TileValue="1" />
      <CategoryTile TileValue="2" />
      <CategoryTile TileValue="3" />
      <CategoryTile TileValue="4" />
      <CategoryTile TileValue="5" />
      <CategoryTile TileValue="6" />
      <CategoryTile TileValue="7" />
      <CategoryTile TileValue="8" />
      <CategoryTile TileValue="13" />
      <CategoryTile TileValue="14" />
      <CategoryTile TileValue="15" />
      <CategoryTile TileValue="16" />
      <CategoryTile TileValue="17" />
      <CategoryTile TileValue="18" />
      <CategoryTile TileValue="19" />
      <CategoryTile TileValue="20" />
      <CategoryTile TileValue="21" />
      <CategoryTile TileValue="22" />
      <CategoryTile TileValue="23" />
      <CategoryTile TileValue="24" />
      <CategoryTile TileValue="27" />
      <CategoryTile TileValue="28" />
      <CategoryTile TileValue="29" />
      <CategoryTile TileValue="30" />
      <CategoryTile TileValue="31" />
      <CategoryTile TileValue="32" />
      <CategoryTile TileValue="33" />
      <CategoryTile TileValue="34" />
      <CategoryTile TileValue="35" />
      <CategoryTile TileValue="36" />
      <CategoryTile TileValue="37" />
      <CategoryTile TileValue="38" />
      <CategoryTile TileValue="41" />
      <CategoryTile TileValue="42" />
      <CategoryTile TileValue="43" />
      <CategoryTile TileValue="44" />
      <CategoryTile TileValue="45" />
      <CategoryTile TileValue="46" />
      <CategoryTile TileValue="47" />
      <CategoryTile TileValue="48" />
      <CategoryTile TileValue="49" />
      <CategoryTile TileValue="50" />
      <CategoryTile TileValue="51" />
      <CategoryTile TileValue="58" />
      <CategoryTile TileValue="59" />
      <CategoryTile TileValue="61" />
      <CategoryTile TileValue="62" />
      <CategoryTile TileValue="63" />
      <CategoryTile TileValue="66" />
      <CategoryTile TileValue="67" />
      <CategoryTile TileValue="68" />
      <CategoryTile TileValue="250">
        <CategoryFrame Frame="0" />
        <CategoryFrame Frame="8" />
      </CategoryTile>
      <CategoryTile TileValue="249">
        <CategoryFrame Frame="7" />
      </CategoryTile>
      <CategoryTile TileValue="251">
        <CategoryFrame Frame="0" />
      </CategoryTile>
      <CategoryTile TileValue="100" />
      <CategoryTile TileValue="91" />
      <CategoryTile TileValue="9" />
      <CategoryTile TileValue="10" />
    </CategorizedTileset>
  </TileCategory>
  <TileCategory Name="Uphill">
    <CategorizedTileset Tileset="SHFLTileset" Name="Uphill">
      <CategoryTile TileValue="11" />
      <CategoryTile TileValue="25" />
      <CategoryTile TileValue="39" />
    </CategorizedTileset>
  </TileCategory>
  <TileCategory Name="Downhill">
    <CategorizedTileset Tileset="SHFLTileset" Name="Downhill">
      <CategoryTile TileValue="12" />
      <CategoryTile TileValue="26" />
      <CategoryTile TileValue="40" />
    </CategorizedTileset>
  </TileCategory>
  <TileCategory Name="TopSolid">
    <CategorizedTileset Tileset="SHFLTileset" Name="TopSolid">
      <CategoryTile TileValue="64" />
      <CategoryTile TileValue="65" />
      <CategoryTile TileValue="69" />
    </CategorizedTileset>
  </TileCategory>
  <TileCategory Name="Ladder">
    <CategorizedTileset Tileset="SHFLTileset" Name="Ladder">
      <CategoryTile TileValue="91" />
      <CategoryTile TileValue="92" />
    </CategorizedTileset>
  </TileCategory>
  <TileCategory Name="Touchable">
    <CategorizedTileset Tileset="SHFLTileset" Name="Touchable">
      <CategoryTile TileValue="54" />
      <CategoryTile TileValue="55" />
      <CategoryTile TileValue="56" />
      <CategoryTile TileValue="57" />
    </CategorizedTileset>
  </TileCategory>
  <TileCategory Name="LadderSolid">
    <CategorizedTileset Tileset="SHFLTileset" Name="LadderSolid">
      <CategoryTile TileValue="1" />
      <CategoryTile TileValue="2" />
      <CategoryTile TileValue="3" />
      <CategoryTile TileValue="4" />
      <CategoryTile TileValue="5" />
      <CategoryTile TileValue="6" />
      <CategoryTile TileValue="7" />
      <CategoryTile TileValue="8" />
      <CategoryTile TileValue="13" />
      <CategoryTile TileValue="14" />
      <CategoryTile TileValue="15" />
      <CategoryTile TileValue="16" />
      <CategoryTile TileValue="17" />
      <CategoryTile TileValue="18" />
      <CategoryTile TileValue="19" />
      <CategoryTile TileValue="20" />
      <CategoryTile TileValue="21" />
      <CategoryTile TileValue="22" />
      <CategoryTile TileValue="27" />
      <CategoryTile TileValue="28" />
      <CategoryTile TileValue="29" />
      <CategoryTile TileValue="30" />
      <CategoryTile TileValue="31" />
      <CategoryTile TileValue="32" />
      <CategoryTile TileValue="33" />
      <CategoryTile TileValue="34" />
      <CategoryTile TileValue="35" />
      <CategoryTile TileValue="36" />
      <CategoryTile TileValue="41" />
      <CategoryTile TileValue="42" />
      <CategoryTile TileValue="43" />
      <CategoryTile TileValue="44" />
      <CategoryTile TileValue="45" />
      <CategoryTile TileValue="46" />
      <CategoryTile TileValue="47" />
      <CategoryTile TileValue="48" />
      <CategoryTile TileValue="49" />
      <CategoryTile TileValue="50" />
      <CategoryTile TileValue="51" />
      <CategoryTile TileValue="58" />
      <CategoryTile TileValue="59" />
      <CategoryTile TileValue="61" />
      <CategoryTile TileValue="62" />
      <CategoryTile TileValue="63" />
      <CategoryTile TileValue="66" />
      <CategoryTile TileValue="67" />
      <CategoryTile TileValue="68" />
      <CategoryTile TileValue="100" />
      <CategoryTile TileValue="251">
        <CategoryFrame Frame="0" />
      </CategoryTile>
      <CategoryTile TileValue="250">
        <CategoryFrame Frame="8" />
        <CategoryFrame Frame="0" />
      </CategoryTile>
    </CategorizedTileset>
  </TileCategory>
</ProjectDataset>