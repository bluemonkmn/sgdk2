<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Scrolling Game Development Kit 2 - Introduction</title>
</head>
<body>
<h1>Scrolling Game Development Kit 2</h1>
<h2>Introduction</h2>
<p>
    Scrolling Game Development Kit 2 (SGDK2) is designed to simplify and speed the development of 2D scrolling games for beginning game developers and experts.
Although thie program can be used for other types of games, it's primary design is to assist in the creation of scrolling games,
especially side-scrollers.  This is the second major release of this program, and is a total rewrite from the ground up.  If you
are a new user you may want to focus on the <a href="#MainFeatures"><b>Main Features</b></a> section below.  If you are familiar with the old version, you might
be more interested in the <a href="What's New"><b>What's New</b></a> section.</p>
<a name="MainFeatures"><h2>Main Features</h2></a>
    <p>
        The design of SGDK2 attempts to maximize both flexibility and user-friendly design.&nbsp;
        Here are some of the high level features that make SGDK2 a powerful and interesting
        environment for new and experienced game developers.</p>
<ul>
<li>User friendly interface: Rather than requiring the user to become familiar with
    coding, the environment provides many wizards, selection lists and templates to
    make it possible to create complete games without requiring the writing of any code.</li>
    <li>Extensive customizability: The vast majority of the generated game's source code
        is exposed in the IDE's "Source Code" folder and can be customized beyond recognition.&nbsp;
        This is theoretically flexible enough to allow you to go as far as creating a project
        whose source code generates a 3D game instead of a 2D game, or compiles to a web
        component instead of a Windows application.&nbsp; Furthermore a saved project file
        is nothing more than XML, so you can conceivably write your own programs to process,
        edit or re-use project data.</li>
    <li>Embedded Graphics Editor: Although you can import images from external sources,
    it's not necessary to be flipping back and forth between programs as you create
    or edit images.&nbsp; SGDK2 has a powerful graphics editor built in with tools sophisticated
    enough to handle alpha translucency, rotation, anti-aliasing and color re-mapping,
        among many other tasks.&nbsp;
    You can even add your own tools. </li>
    <li>Integrated Map Editor: The main foundation of a 2D game is the data contained in
        its maps.&nbsp; The map editor in SGDK2 includes abilities to select and place tiles,
        copy blocks of tiles, easily add and edit sprites and groups of sprites, and add/edit
        "plans" which define areas or coordinates where events happen on the map</li>
    <li>Sprite Editor: The sprite editing system is very flexible, allowing you to define
        any number of states and frames that compose a sprite, and define rules that determine
        how the sprite behaves and transitions between its states.&nbsp; All these rules
        are based on C# source code which you can edit or extend by adding new functions
        of your own design.&nbsp; Samples are included so you're free to use pre-defined
        sprite types, customize the rules for sprites, or get down to the lowest levels
        by editing the source code on which the rules are based.&nbsp; All this can be done
        within the IDE and saved with your individual project... no re-compiling SGDK2 code
        is necessary.</li>
    <li>High performace graphics: The games generated by this program are based on DirectX
        by default (though a project can theoretically be customized to use other technologies).&nbsp;
        As such, you get crisp, smooth graphics performance on systems with adequate hardware
        support, whether you're playing in a window of full-screen.</li>
    <li>Real-time transforms: Rather than pre-rendering your sprite with 8 different color
        schemes at 72 rotations,
        you can draw the image once and then adjust the color (to a limited extent) and
        rotation in a Frameset.&nbsp; Then if you decide to change your sprite's appearance,
        you only have to change the graphic on which it's based, and all variations will
        be automatically affected.</li>
    <li>Collision Detection: Collisions between sprites and tiles are based on an optimized
        algorithm that allows the game to efficiently make a sprite respond to slopes and
        walls.&nbsp; Collisions between sprites can either be based on a user-defined rectangular
        area within the sprite, or on a collision mask that is in turn based on a certain
        level of opacity in the sprite's graphic.&nbsp; Again this is optimized for reasonable
        performance with larger numbers of sprites.</li>
    <li>Animated Tiles: Not only can your sprites be animated, but so can your backgrounds.&nbsp;
        You can define a series of frames for each tile value that you want to animate,
        and link the tile to a global counter object that defines how fast the tile is animating
        (which frame it's displaying).&nbsp; Each animation can be linked to its own counter,
        or you can have many or all tile animations share a common counter.</li>
    <li>Multi-layered Maps: you can create multi-layered parallax-scrolling maps by adding
        layers that scroll at different rates horizontally and vertically.</li>
    <li>Compiled output: The games generated in this environment are inernally transformed
        into .NET applications and then compiled to binary executables.&nbsp; That means
        they don't rely on runtime processing of script/code, but are compiled to a form
        optimized for performance.&nbsp; Furthermore, it's possible to create entirely self-contained
        games that generate a single EXE file with all the data embedded.</li>
    <li>Sound/Music support: The environment includes support for playing OGG, MP3, MOD
        and other formats of music and sounds (provided by the third-party FMOD library).</li>
    <li>Scalability: Maps created in SGDK2 can opt to use 1, 2 or 4 bytes per tile depending
        on how many types of tiles you intend to support, and because you can have as little
        as 1-byte per tile, you can create some very large maps with very low memory requirements.&nbsp;
        A map representing more than a billon pixels of viewable space could be created
        in under a megabyte using 32x32-pixel tiles.</li>
</ul>
<p></p>
<a name="WhatsNew"><h2>What's New</h2></a>
    <p>
        Many features have been greatly improved during the total rewrite in .NET.&nbsp;
        Here are a few of the more interesting differences since the last 1.x version.</p>
    <ul>
        <li>Shared Sprite Definitions: Sprite templates no longer have to be re-defined from
            scratch for each map.&nbsp; Sprite Definitions, which are the replacement for most
            of the features formerly found in a sprite template, are shared accross the whole
            project.</li>
        <li>Run Windowed or Full-Screen: The graphics and map editors run in a window with a
            much more friendly interface than that found in version 1.x. &nbsp;But more importantly,
            the games created in this environment can rin either in full screen or windowed
            mode.</li>
        <li>Run-time customizable controls: The default project template includes an options
            menu that allows the player to customize the controls instead of requiring the designer
            to pre-set them.</li>
        <li>Multi-player Support: It's much easier to create multi-player games.</li>
        <li>Customizable scrolling: Scrolling is no longer hard-liked to the player sprite.&nbsp;
            You can design a game that forces the map to automatically scroll by following an
            invisible non-player sprite.</li>
        <li>Easier Sprite Placement: You no longer have to create a path for every sprite.&nbsp;
            And you no longer have to exit the map editor to add sprites.&nbsp; Now you can
            simply select a sprite in the map editor and click it onto the map like you would
            a tile.</li>
        <li>Integrated Customization:&nbsp; No more editing VBScript in a separate window in
            a separate file.&nbsp; To customize game behavior in SGDK2, use the integrated code
            editor, and see your customizations (in C# code) saved as part of the project.&nbsp;
            Furthermore, you can not only add your own code now (as you had to do before), but
            also edit almost all of the pre-existing code that goes into generating a running
            game, giving you much more control over the overall behavior of a game.</li>
        <li>Build Your Own Sprite Types: You no longer have a limited selection of sprite types
            such as "left/right" or "8-direction" sprites to choose from when creating a new
            sprite definition.&nbsp; You can import, customize or create your own sprite types
            by creating any number of states, and define your own rules for how they behave.&nbsp;
            You can do this without even writing any code.</li>
        <li>PNG support: PNG is now the native graphics format of SGDK2 internally.&nbsp; This
            also means that you can have translucent graphics.&nbsp; Instead of only having
            transparent or opaque pixels, you can have 255 levels of translucent.</li>
        <li>Simplified File Management: Project data is now all embedded into a single SGDK2
            file instead of having a GDP file that references all sorts of external files.&nbsp;
            No more confusion when moving projects around or backing them up.</li>
        <li>Sound Support: You now have the ability to play OGG and MOD files.&nbsp; MOD will
            be good for compact representations of long pieces of music without relying on the
            quality of the sound card's sound table.</li>
        <li>Overlapping Graphics: Your tiles are no longer confined the space they occupy on
            the map.&nbsp; You can have graphics of one tile overlapping those of another.</li>
        <li>Composite Graphics: Your tiles and sprite frames can be composed of multiple graphics
            without having to pre-render all the possible combinations as their own graphics.</li>
        <li>Offsetting Layers:&nbsp; You can now create layers that have a position not
            "anchored" to the top left corner of the map.&nbsp; A layer does not have to cover
            the entire map, so you can have a layer that just represents some tiles for a small
            part of the map.</li>
        <li>Overlay Map: The player's inventory and other features can now be represented on
            an "Overlay" map, a map that is drawn in front of the main map, and generally does
            not scroll.</li>
        <li>Counters: Instead of "Inventory" a more general-purpose concept of "Counters" have
            bee introduced as global numeric variables.</li>
        <li>Independent Tile Animation: Tile animation is now linked to a particular counter
            instead of an internal global counter, so not all your animations need to be based
            on the same value.&nbsp; You can, for example, have a counter that only switches
            to a particular value when the player accomplishes a task, which in turn changes
            all of tile X to tile Y via the linked counter.</li>
        <li>New Tile Solidity: You are no longer confined to 6 tile solidity shapes.&nbsp; 11
            shapes are provided by default, (including a new shape that allows the player to
            jump upward through a tile and then land on it) and you can write your own by customizing
            the code that defines the tile shapes.</li>
        <li>Save to Memory: When saving a game to a slot, you no longer have to write it to
            a file.&nbsp; The saved game can be stored to a "memory" slot which only exists
            for the duration of the game.&nbsp; This is handy for resetting the game to an initial
            state without requiring a file.</li>
        <li>Partial Save: You now have some choice about which data you want ot save.&nbsp;
            You can save just data for the current map or just the counter values or everything.</li>
        <li>Collision Detection:&nbsp; In order to give the user more control over the collision
            detection process, tests for colliding sprites are now performed more explicitly.&nbsp;
            Test for collisions between a specific sprite and all sprites in a specific category.&nbsp;
            Also, the collision test can be a simple rectangular collision test or the fancier
            pixel/mask-based test.</li>
        <li>Global Tile Categories: You can now include tiles from multiple tilesets in a single
            tile category.&nbsp; This allows, for example, a single sprite definition to treat
            ladders from different kinds of layers the same way.&nbsp; A "winter" map might
            use a "winter" tileset that looks completely different from the "summer" tileset,
            yet the player could have rules to treat them both as ladders.</li>
        <li>Sprite Categories: Sprites can also be categorized now for the purposes of testing
            collisions or creating instances of sprites of a particular type/group.</li><li>No Tile Matching or Maze Generator Yet: In the interest of getting SGDK2 into the
            hands of users as soon as possible, some of the less critical features are left
            to a later release.</li>
    </ul>
<p></p>
</body>
</html>
